{"version":3,"file":"EditUser.04c9bbf0.js","sources":["../../../../node_modules/lodash-es/_baseIntersection.js","../../../../node_modules/lodash-es/_castArrayLikeObject.js","../../../../node_modules/lodash-es/intersectionBy.js","../../../../node_modules/lodash-es/isEmpty.js","../../src/user/UserAttributes.tsx","../../src/user/UserConsents.tsx","../../src/user/user-credentials/ResetPasswordDialog.tsx","../../src/user/user-credentials/CredentialsResetActionMultiSelect.tsx","../../src/user/user-credentials/LifespanField.tsx","../../src/user/user-credentials/ResetCredentialDialog.tsx","../../src/user/user-credentials/InlineLabelEdit.tsx","../../src/user/user-credentials/CredentialDataDialog.tsx","../../src/user/user-credentials/CredentialRow.tsx","../../src/user/user-credentials/FederatedCredentials.tsx","../../src/user/UserCredentials.tsx","../../src/user/UserGroups.tsx","../../src/user/UserIdPModal.tsx","../../src/user/UserIdentityProviderLinks.tsx","../../src/user/UserRoleMapping.tsx","../../src/user/UserSessions.tsx","../../src/user/EditUser.tsx"],"sourcesContent":["import SetCache from './_SetCache.js';\nimport arrayIncludes from './_arrayIncludes.js';\nimport arrayIncludesWith from './_arrayIncludesWith.js';\nimport arrayMap from './_arrayMap.js';\nimport baseUnary from './_baseUnary.js';\nimport cacheHas from './_cacheHas.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * The base implementation of methods like `_.intersection`, without support\n * for iteratee shorthands, that accepts an array of arrays to inspect.\n *\n * @private\n * @param {Array} arrays The arrays to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of shared values.\n */\nfunction baseIntersection(arrays, iteratee, comparator) {\n  var includes = comparator ? arrayIncludesWith : arrayIncludes,\n      length = arrays[0].length,\n      othLength = arrays.length,\n      othIndex = othLength,\n      caches = Array(othLength),\n      maxLength = Infinity,\n      result = [];\n\n  while (othIndex--) {\n    var array = arrays[othIndex];\n    if (othIndex && iteratee) {\n      array = arrayMap(array, baseUnary(iteratee));\n    }\n    maxLength = nativeMin(array.length, maxLength);\n    caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))\n      ? new SetCache(othIndex && array)\n      : undefined;\n  }\n  array = arrays[0];\n\n  var index = -1,\n      seen = caches[0];\n\n  outer:\n  while (++index < length && result.length < maxLength) {\n    var value = array[index],\n        computed = iteratee ? iteratee(value) : value;\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (!(seen\n          ? cacheHas(seen, computed)\n          : includes(result, computed, comparator)\n        )) {\n      othIndex = othLength;\n      while (--othIndex) {\n        var cache = caches[othIndex];\n        if (!(cache\n              ? cacheHas(cache, computed)\n              : includes(arrays[othIndex], computed, comparator))\n            ) {\n          continue outer;\n        }\n      }\n      if (seen) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nexport default baseIntersection;\n","import isArrayLikeObject from './isArrayLikeObject.js';\n\n/**\n * Casts `value` to an empty array if it's not an array like object.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Array|Object} Returns the cast array-like object.\n */\nfunction castArrayLikeObject(value) {\n  return isArrayLikeObject(value) ? value : [];\n}\n\nexport default castArrayLikeObject;\n","import arrayMap from './_arrayMap.js';\nimport baseIntersection from './_baseIntersection.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseRest from './_baseRest.js';\nimport castArrayLikeObject from './_castArrayLikeObject.js';\nimport last from './last.js';\n\n/**\n * This method is like `_.intersection` except that it accepts `iteratee`\n * which is invoked for each element of each `arrays` to generate the criterion\n * by which they're compared. The order and references of result values are\n * determined by the first array. The iteratee is invoked with one argument:\n * (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {Array} Returns the new array of intersecting values.\n * @example\n *\n * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n * // => [2.1]\n *\n * // The `_.property` iteratee shorthand.\n * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n * // => [{ 'x': 1 }]\n */\nvar intersectionBy = baseRest(function(arrays) {\n  var iteratee = last(arrays),\n      mapped = arrayMap(arrays, castArrayLikeObject);\n\n  if (iteratee === last(mapped)) {\n    iteratee = undefined;\n  } else {\n    mapped.pop();\n  }\n  return (mapped.length && mapped[0] === arrays[0])\n    ? baseIntersection(mapped, baseIteratee(iteratee, 2))\n    : [];\n});\n\nexport default intersectionBy;\n","import baseKeys from './_baseKeys.js';\nimport getTag from './_getTag.js';\nimport isArguments from './isArguments.js';\nimport isArray from './isArray.js';\nimport isArrayLike from './isArrayLike.js';\nimport isBuffer from './isBuffer.js';\nimport isPrototype from './_isPrototype.js';\nimport isTypedArray from './isTypedArray.js';\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    setTag = '[object Set]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if `value` is an empty object, collection, map, or set.\n *\n * Objects are considered empty if they have no own enumerable string keyed\n * properties.\n *\n * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n * jQuery-like collections are considered empty if they have a `length` of `0`.\n * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n * @example\n *\n * _.isEmpty(null);\n * // => true\n *\n * _.isEmpty(true);\n * // => true\n *\n * _.isEmpty(1);\n * // => true\n *\n * _.isEmpty([1, 2, 3]);\n * // => false\n *\n * _.isEmpty({ 'a': 1 });\n * // => false\n */\nfunction isEmpty(value) {\n  if (value == null) {\n    return true;\n  }\n  if (isArrayLike(value) &&\n      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n        isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n    return !value.length;\n  }\n  var tag = getTag(value);\n  if (tag == mapTag || tag == setTag) {\n    return !value.size;\n  }\n  if (isPrototype(value)) {\n    return !baseKeys(value).length;\n  }\n  for (var key in value) {\n    if (hasOwnProperty.call(value, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport default isEmpty;\n","import { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useForm } from \"react-hook-form\";\nimport {\n  AlertVariant,\n  PageSection,\n  PageSectionVariants,\n} from \"@patternfly/react-core\";\n\nimport type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\n\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport {\n  AttributeForm,\n  AttributesForm,\n} from \"../components/key-value-form/AttributeForm\";\nimport {\n  arrayToKeyValue,\n  keyValueToArray,\n  KeyValueType,\n} from \"../components/key-value-form/key-value-convert\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport { useUserProfile } from \"../realm-settings/user-profile/UserProfileContext\";\n\ntype UserAttributesProps = {\n  user: UserRepresentation;\n};\n\nexport const UserAttributes = ({ user: defaultUser }: UserAttributesProps) => {\n  const { t } = useTranslation(\"users\");\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const [user, setUser] = useState<UserRepresentation>(defaultUser);\n  const form = useForm<AttributeForm>({ mode: \"onChange\" });\n  const { config } = useUserProfile();\n\n  const convertAttributes = () => {\n    return arrayToKeyValue<UserRepresentation>(user.attributes!).filter(\n      (a: KeyValueType) =>\n        !config?.attributes?.some((attribute) => attribute.name === a.key)\n    );\n  };\n\n  useEffect(() => {\n    form.setValue(\"attributes\", convertAttributes());\n  }, [user]);\n\n  const save = async (attributeForm: AttributeForm) => {\n    try {\n      const attributes = Object.assign(\n        {},\n        user.attributes || {},\n        keyValueToArray(attributeForm.attributes!)\n      );\n      await adminClient.users.update({ id: user.id! }, { ...user, attributes });\n\n      setUser({ ...user, attributes });\n      addAlert(t(\"userSaved\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"groups:groupUpdateError\", error);\n    }\n  };\n\n  return (\n    <PageSection variant={PageSectionVariants.light}>\n      <AttributesForm\n        form={form}\n        save={save}\n        fineGrainedAccess={user.access?.manage}\n        reset={() =>\n          form.reset({\n            attributes: convertAttributes(),\n          })\n        }\n      />\n    </PageSection>\n  );\n};\n","import type UserConsentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userConsentRepresentation\";\nimport {\n  AlertVariant,\n  ButtonVariant,\n  Chip,\n  ChipGroup,\n} from \"@patternfly/react-core\";\nimport { CubesIcon } from \"@patternfly/react-icons\";\nimport { cellWidth } from \"@patternfly/react-table\";\nimport { sortBy } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport { KeycloakDataTable } from \"../components/table-toolbar/KeycloakDataTable\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport { emptyFormatter } from \"../util\";\nimport useFormatDate from \"../utils/useFormatDate\";\nimport { useParams } from \"../utils/useParams\";\n\nexport const UserConsents = () => {\n  const [selectedClient, setSelectedClient] =\n    useState<UserConsentRepresentation>();\n  const { t } = useTranslation(\"roles\");\n  const { addAlert, addError } = useAlerts();\n  const formatDate = useFormatDate();\n  const [key, setKey] = useState(0);\n\n  const { adminClient } = useAdminClient();\n  const { id } = useParams<{ id: string }>();\n  const alphabetize = (consentsList: UserConsentRepresentation[]) => {\n    return sortBy(consentsList, (client) => client.clientId?.toUpperCase());\n  };\n\n  const refresh = () => setKey(new Date().getTime());\n\n  const loader = async () => {\n    const getConsents = await adminClient.users.listConsents({ id });\n\n    return alphabetize(getConsents);\n  };\n\n  const clientScopesRenderer = ({\n    grantedClientScopes,\n  }: UserConsentRepresentation) => {\n    return (\n      <ChipGroup className=\"kc-consents-chip-group\">\n        {grantedClientScopes!.map((currentChip) => (\n          <Chip\n            key={currentChip}\n            isReadOnly\n            className=\"kc-consents-chip\"\n            id=\"consents-chip-text\"\n          >\n            {currentChip}\n          </Chip>\n        ))}\n      </ChipGroup>\n    );\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"users:revokeClientScopesTitle\",\n    messageKey: t(\"users:revokeClientScopes\", {\n      clientId: selectedClient?.clientId,\n    }),\n    continueButtonLabel: \"common:revoke\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.users.revokeConsent({\n          id,\n          clientId: selectedClient!.clientId!,\n        });\n\n        refresh();\n\n        addAlert(t(\"deleteGrantsSuccess\"), AlertVariant.success);\n      } catch (error) {\n        addError(\"roles:deleteGrantsError\", error);\n      }\n    },\n  });\n\n  return (\n    <>\n      <DeleteConfirm />\n      <KeycloakDataTable\n        loader={loader}\n        key={key}\n        ariaLabelKey=\"roles:roleList\"\n        searchPlaceholderKey=\" \"\n        columns={[\n          {\n            name: \"clientId\",\n            displayKey: \"clients:Client\",\n            cellFormatters: [emptyFormatter()],\n            transforms: [cellWidth(20)],\n          },\n          {\n            name: \"grantedClientScopes\",\n            displayKey: \"client-scopes:grantedClientScopes\",\n            cellFormatters: [emptyFormatter()],\n            cellRenderer: clientScopesRenderer,\n            transforms: [cellWidth(30)],\n          },\n          {\n            name: \"createDate\",\n            displayKey: \"clients:created\",\n            transforms: [cellWidth(20)],\n            cellRenderer: ({ createDate }) =>\n              createDate ? formatDate(new Date(createDate)) : \"—\",\n          },\n          {\n            name: \"lastUpdatedDate\",\n            displayKey: \"clients:lastUpdated\",\n            transforms: [cellWidth(10)],\n            cellRenderer: ({ lastUpdatedDate }) =>\n              lastUpdatedDate ? formatDate(new Date(lastUpdatedDate)) : \"—\",\n          },\n        ]}\n        actions={[\n          {\n            title: t(\"users:revoke\"),\n            onRowClick: (client) => {\n              setSelectedClient(client);\n              toggleDeleteDialog();\n            },\n          },\n        ]}\n        emptyState={\n          <ListEmptyState\n            hasIcon={true}\n            icon={CubesIcon}\n            message={t(\"users:noConsents\")}\n            instructions={t(\"users:noConsentsText\")}\n          />\n        }\n      />\n    </>\n  );\n};\n","import type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport {\n  AlertVariant,\n  ButtonVariant,\n  Form,\n  FormGroup,\n  Switch,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport {\n  ConfirmDialogModal,\n  useConfirmDialog,\n} from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { PasswordInput } from \"../../components/password-input/PasswordInput\";\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\nimport useToggle from \"../../utils/useToggle\";\n\ntype ResetPasswordDialogProps = {\n  user: UserRepresentation;\n  isResetPassword: boolean;\n  refresh: () => void;\n  onClose: () => void;\n};\n\nexport type CredentialsForm = {\n  password: string;\n  passwordConfirmation: string;\n  temporaryPassword: boolean;\n};\n\nconst credFormDefaultValues: CredentialsForm = {\n  password: \"\",\n  passwordConfirmation: \"\",\n  temporaryPassword: true,\n};\n\nexport const ResetPasswordDialog = ({\n  user,\n  isResetPassword,\n  refresh,\n  onClose,\n}: ResetPasswordDialogProps) => {\n  const { t } = useTranslation(\"users\");\n  const {\n    register,\n    control,\n    formState: { isValid, errors },\n    watch,\n    handleSubmit,\n  } = useForm<CredentialsForm>({\n    defaultValues: credFormDefaultValues,\n    mode: \"onChange\",\n  });\n\n  const [confirm, toggle] = useToggle(true);\n  const password = watch(\"password\", \"\");\n\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  const [toggleConfirmSaveModal, ConfirmSaveModal] = useConfirmDialog({\n    titleKey: isResetPassword\n      ? \"users:resetPasswordConfirm\"\n      : \"users:setPasswordConfirm\",\n    messageKey: isResetPassword\n      ? t(\"resetPasswordConfirmText\", { username: user.username })\n      : t(\"setPasswordConfirmText\", { username: user.username }),\n    continueButtonLabel: isResetPassword\n      ? \"users:resetPassword\"\n      : \"users:savePassword\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: () => handleSubmit(saveUserPassword)(),\n  });\n\n  const saveUserPassword = async ({\n    password,\n    temporaryPassword,\n  }: CredentialsForm) => {\n    try {\n      await adminClient.users.resetPassword({\n        id: user.id!,\n        credential: {\n          temporary: temporaryPassword,\n          type: \"password\",\n          value: password,\n        },\n      });\n      const credentials = await adminClient.users.getCredentials({\n        id: user.id!,\n      });\n      const credentialLabel = credentials.find((c) => c.type === \"password\");\n      if (credentialLabel) {\n        await adminClient.users.updateCredentialLabel(\n          {\n            id: user.id!,\n            credentialId: credentialLabel.id!,\n          },\n          t(\"defaultPasswordLabel\")\n        );\n      }\n      addAlert(\n        isResetPassword\n          ? t(\"resetCredentialsSuccess\")\n          : t(\"savePasswordSuccess\"),\n        AlertVariant.success\n      );\n      refresh();\n    } catch (error) {\n      addError(\n        isResetPassword\n          ? \"users:resetPasswordError\"\n          : \"users:savePasswordError\",\n        error\n      );\n    }\n\n    onClose();\n  };\n\n  return (\n    <>\n      <ConfirmSaveModal />\n      <ConfirmDialogModal\n        titleKey={\n          isResetPassword\n            ? t(\"resetPasswordFor\", { username: user.username })\n            : t(\"setPasswordFor\", { username: user.username })\n        }\n        open={confirm}\n        onCancel={onClose}\n        toggleDialog={toggle}\n        onConfirm={toggleConfirmSaveModal}\n        confirmButtonDisabled={!isValid}\n        continueButtonLabel=\"common:save\"\n      >\n        <Form\n          id=\"userCredentials-form\"\n          isHorizontal\n          className=\"keycloak__user-credentials__reset-form\"\n        >\n          <FormGroup\n            name=\"password\"\n            label={t(\"password\")}\n            fieldId=\"password\"\n            helperTextInvalid={t(\"common:required\")}\n            validated={\n              errors.password\n                ? ValidatedOptions.error\n                : ValidatedOptions.default\n            }\n            isRequired\n          >\n            <PasswordInput\n              data-testid=\"passwordField\"\n              id=\"password\"\n              {...register(\"password\", { required: true })}\n            />\n          </FormGroup>\n          <FormGroup\n            name=\"passwordConfirmation\"\n            label={\n              isResetPassword\n                ? t(\"resetPasswordConfirmation\")\n                : t(\"passwordConfirmation\")\n            }\n            fieldId=\"passwordConfirmation\"\n            helperTextInvalid={errors.passwordConfirmation?.message}\n            validated={\n              errors.passwordConfirmation\n                ? ValidatedOptions.error\n                : ValidatedOptions.default\n            }\n            isRequired\n          >\n            <PasswordInput\n              data-testid=\"passwordConfirmationField\"\n              id=\"passwordConfirmation\"\n              {...register(\"passwordConfirmation\", {\n                required: true,\n                validate: (value) =>\n                  value === password ||\n                  t(\"confirmPasswordDoesNotMatch\").toString(),\n              })}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"common:temporaryPassword\")}\n            labelIcon={\n              <HelpItem\n                helpText=\"temporaryPasswordHelpText\"\n                fieldLabelId=\"temporaryPassword\"\n              />\n            }\n            fieldId=\"kc-temporaryPassword\"\n          >\n            <Controller\n              name=\"temporaryPassword\"\n              defaultValue={true}\n              control={control}\n              render={({ field }) => (\n                <Switch\n                  className=\"kc-temporaryPassword\"\n                  onChange={field.onChange}\n                  isChecked={field.value}\n                  label={t(\"common:on\")}\n                  labelOff={t(\"common:off\")}\n                  aria-label={t(\"common:temporaryPassword\")}\n                />\n              )}\n            />\n          </FormGroup>\n        </Form>\n      </ConfirmDialogModal>\n    </>\n  );\n};\n","import type RequiredActionProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/requiredActionProviderRepresentation\";\nimport {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\n\nexport const CredentialsResetActionMultiSelect = () => {\n  const { t } = useTranslation(\"users\");\n  const { adminClient } = useAdminClient();\n  const { control } = useFormContext();\n  const [open, setOpen] = useState(false);\n  const [requiredActions, setRequiredActions] = useState<\n    RequiredActionProviderRepresentation[]\n  >([]);\n\n  useFetch(\n    () => adminClient.authenticationManagement.getRequiredActions(),\n    (actions) => {\n      setRequiredActions(actions);\n    },\n    []\n  );\n\n  return (\n    <FormGroup\n      label={t(\"resetActions\")}\n      labelIcon={\n        <HelpItem\n          helpText=\"clients-help:resetActions\"\n          fieldLabelId=\"resetActions\"\n        />\n      }\n      fieldId=\"actions\"\n    >\n      <Controller\n        name=\"actions\"\n        defaultValue={[]}\n        control={control}\n        render={({ field }) => (\n          <Select\n            toggleId=\"actions\"\n            variant={SelectVariant.typeaheadMulti}\n            chipGroupProps={{\n              numChips: 3,\n            }}\n            menuAppendTo=\"parent\"\n            onToggle={(open) => setOpen(open)}\n            isOpen={open}\n            selections={field.value}\n            onSelect={(_, selectedValue) =>\n              field.onChange(\n                field.value.find((o: string) => o === selectedValue)\n                  ? field.value.filter((item: string) => item !== selectedValue)\n                  : [...field.value, selectedValue]\n              )\n            }\n            onClear={(event) => {\n              event.stopPropagation();\n              field.onChange([]);\n            }}\n            typeAheadAriaLabel={t(\"resetActions\")}\n          >\n            {requiredActions.map(({ alias, name }) => (\n              <SelectOption\n                key={alias}\n                value={alias}\n                data-testid={`${alias}-option`}\n              >\n                {name}\n              </SelectOption>\n            ))}\n          </Select>\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import { FormGroup } from \"@patternfly/react-core\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { TimeSelector } from \"../../components/time-selector/TimeSelector\";\nimport { credResetFormDefaultValues } from \"./ResetCredentialDialog\";\n\nexport const LifespanField = () => {\n  const { t } = useTranslation(\"users\");\n  const { control } = useFormContext();\n\n  return (\n    <FormGroup\n      fieldId=\"lifespan\"\n      label={t(\"lifespan\")}\n      isStack\n      labelIcon={\n        <HelpItem helpText=\"clients-help:lifespan\" fieldLabelId=\"lifespan\" />\n      }\n    >\n      <Controller\n        name=\"lifespan\"\n        defaultValue={credResetFormDefaultValues.lifespan}\n        control={control}\n        render={({ field }) => (\n          <TimeSelector\n            value={field.value}\n            units={[\"minute\", \"hour\", \"day\"]}\n            onChange={field.onChange}\n            menuAppendTo=\"parent\"\n          />\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { FormProvider, useForm, useWatch } from \"react-hook-form\";\nimport { ModalVariant, Form, AlertVariant } from \"@patternfly/react-core\";\n\nimport type { RequiredActionAlias } from \"@keycloak/keycloak-admin-client/lib/defs/requiredActionProviderRepresentation\";\nimport { CredentialsResetActionMultiSelect } from \"./CredentialsResetActionMultiSelect\";\nimport { ConfirmDialogModal } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { LifespanField } from \"./LifespanField\";\nimport { isEmpty } from \"lodash-es\";\n\ntype ResetCredentialDialogProps = {\n  userId: string;\n  onClose: () => void;\n};\n\ntype CredentialResetForm = {\n  actions: RequiredActionAlias[];\n  lifespan: number;\n};\n\nexport const credResetFormDefaultValues: CredentialResetForm = {\n  actions: [],\n  lifespan: 43200, // 12 hours\n};\n\nexport const ResetCredentialDialog = ({\n  userId,\n  onClose,\n}: ResetCredentialDialogProps) => {\n  const { t } = useTranslation(\"users\");\n  const form = useForm<CredentialResetForm>({\n    defaultValues: credResetFormDefaultValues,\n  });\n  const { handleSubmit, control } = form;\n\n  const resetActionWatcher = useWatch({\n    control,\n    name: \"actions\",\n  });\n  const resetIsNotDisabled = !isEmpty(resetActionWatcher);\n\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  const sendCredentialsResetEmail = async ({\n    actions,\n    lifespan,\n  }: CredentialResetForm) => {\n    if (isEmpty(actions)) {\n      return;\n    }\n\n    try {\n      await adminClient.users.executeActionsEmail({\n        id: userId,\n        actions,\n        lifespan,\n      });\n      addAlert(t(\"credentialResetEmailSuccess\"), AlertVariant.success);\n      onClose();\n    } catch (error) {\n      addError(\"users:credentialResetEmailError\", error);\n    }\n  };\n\n  return (\n    <ConfirmDialogModal\n      variant={ModalVariant.medium}\n      titleKey=\"users:credentialReset\"\n      open\n      onCancel={onClose}\n      toggleDialog={onClose}\n      continueButtonLabel=\"users:credentialResetConfirm\"\n      onConfirm={() => {\n        handleSubmit(sendCredentialsResetEmail)();\n      }}\n      confirmButtonDisabled={!resetIsNotDisabled}\n    >\n      <Form\n        id=\"userCredentialsReset-form\"\n        isHorizontal\n        data-testid=\"credential-reset-modal\"\n      >\n        <FormProvider {...form}>\n          <CredentialsResetActionMultiSelect />\n          <LifespanField />\n        </FormProvider>\n      </Form>\n    </ConfirmDialogModal>\n  );\n};\n","import type CredentialRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/credentialRepresentation\";\nimport { AlertVariant, Button, Form, FormGroup } from \"@patternfly/react-core\";\nimport { CheckIcon, PencilAltIcon, TimesIcon } from \"@patternfly/react-icons\";\nimport { useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\n\ntype UserLabelForm = {\n  userLabel: string;\n};\n\ntype InlineLabelEditProps = {\n  userId: string;\n  credential: CredentialRepresentation;\n  isEditable: boolean;\n  toggle: () => void;\n};\n\nexport const InlineLabelEdit = ({\n  userId,\n  credential,\n  isEditable,\n  toggle,\n}: InlineLabelEditProps) => {\n  const { t } = useTranslation(\"users\");\n  const { register, handleSubmit } = useForm<UserLabelForm>();\n\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  const saveUserLabel = async (userLabel: UserLabelForm) => {\n    try {\n      await adminClient.users.updateCredentialLabel(\n        {\n          id: userId,\n          credentialId: credential.id!,\n        },\n        userLabel.userLabel || \"\"\n      );\n      addAlert(t(\"updateCredentialUserLabelSuccess\"), AlertVariant.success);\n      toggle();\n    } catch (error) {\n      addError(\"users:updateCredentialUserLabelError\", error);\n    }\n  };\n\n  return (\n    <Form\n      isHorizontal\n      className=\"kc-form-userLabel\"\n      onSubmit={handleSubmit(saveUserLabel)}\n    >\n      <FormGroup fieldId=\"kc-userLabel\" className=\"kc-userLabel-row\">\n        <div className=\"kc-form-group-userLabel\">\n          {isEditable ? (\n            <>\n              <KeycloakTextInput\n                data-testid=\"userLabelFld\"\n                defaultValue={credential.userLabel}\n                className=\"kc-userLabel\"\n                aria-label={t(\"userLabel\")}\n                {...register(\"userLabel\")}\n              />\n              <div className=\"kc-userLabel-actionBtns\">\n                <Button\n                  data-testid=\"editUserLabelAcceptBtn\"\n                  variant=\"link\"\n                  className=\"kc-editUserLabelAcceptBtn\"\n                  type=\"submit\"\n                  icon={<CheckIcon />}\n                />\n                <Button\n                  data-testid=\"editUserLabelCancelBtn\"\n                  variant=\"link\"\n                  className=\"kc-editUserLabel-cancelBtn\"\n                  onClick={toggle}\n                  icon={<TimesIcon />}\n                />\n              </div>\n            </>\n          ) : (\n            <>\n              {credential.userLabel}\n              <Button\n                aria-label={t(\"editUserLabel\")}\n                variant=\"link\"\n                className=\"kc-editUserLabel-btn\"\n                onClick={toggle}\n                data-testid=\"editUserLabelBtn\"\n                icon={<PencilAltIcon />}\n              />\n            </>\n          )}\n        </div>\n      </FormGroup>\n    </Form>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { Modal, ModalVariant } from \"@patternfly/react-core\";\nimport {\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n} from \"@patternfly/react-table\";\n\ntype CredentialDataDialogProps = {\n  credentialData: [string, string][];\n  onClose: () => void;\n};\n\nexport const CredentialDataDialog = ({\n  credentialData,\n  onClose,\n}: CredentialDataDialogProps) => {\n  const { t } = useTranslation(\"users\");\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      title={t(\"passwordDataTitle\")}\n      data-testid=\"passwordDataDialog\"\n      isOpen\n      onClose={onClose}\n    >\n      <Table\n        aria-label={t(\"passwordDataTitle\")}\n        data-testid=\"password-data-dialog\"\n        variant={TableVariant.compact}\n        cells={[t(\"showPasswordDataName\"), t(\"showPasswordDataValue\")]}\n        rows={credentialData}\n      >\n        <TableHeader />\n        <TableBody />\n      </Table>\n    </Modal>\n  );\n};\n","import { ReactNode, useMemo } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Td } from \"@patternfly/react-table\";\nimport {\n  Button,\n  Dropdown,\n  DropdownPosition,\n  KebabToggle,\n  DropdownItem,\n} from \"@patternfly/react-core\";\n\nimport type CredentialRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/credentialRepresentation\";\nimport useToggle from \"../../utils/useToggle\";\nimport useLocaleSort from \"../../utils/useLocaleSort\";\nimport { CredentialDataDialog } from \"./CredentialDataDialog\";\n\ntype CredentialRowProps = {\n  credential: CredentialRepresentation;\n  resetPassword: () => void;\n  toggleDelete: () => void;\n  children: ReactNode;\n};\n\nexport const CredentialRow = ({\n  credential,\n  resetPassword,\n  toggleDelete,\n  children,\n}: CredentialRowProps) => {\n  const { t } = useTranslation(\"users\");\n  const [showData, toggleShow] = useToggle();\n  const [kebabOpen, toggleKebab] = useToggle();\n  const localeSort = useLocaleSort();\n\n  const rows = useMemo(() => {\n    if (!credential.credentialData) {\n      return [];\n    }\n\n    const credentialData: Record<string, unknown> = JSON.parse(\n      credential.credentialData\n    );\n    return localeSort(Object.entries(credentialData), ([key]) => key).map<\n      [string, string]\n    >(([key, value]) => {\n      if (typeof value === \"string\") {\n        return [key, value];\n      }\n\n      return [key, JSON.stringify(value)];\n    });\n  }, [credential.credentialData]);\n\n  return (\n    <>\n      {showData && Object.keys(credential).length !== 0 && (\n        <CredentialDataDialog\n          credentialData={rows}\n          onClose={() => {\n            toggleShow();\n          }}\n        />\n      )}\n\n      <Td>{children}</Td>\n      <Td>\n        <Button\n          className=\"kc-showData-btn\"\n          variant=\"link\"\n          data-testid=\"showDataBtn\"\n          onClick={toggleShow}\n        >\n          {t(\"showDataBtn\")}\n        </Button>\n      </Td>\n      {credential.type === \"password\" ? (\n        <Td isActionCell>\n          <Button\n            variant=\"secondary\"\n            data-testid=\"resetPasswordBtn\"\n            onClick={resetPassword}\n          >\n            {t(\"resetPasswordBtn\")}\n          </Button>\n        </Td>\n      ) : (\n        <Td />\n      )}\n      <Td isActionCell>\n        <Dropdown\n          isPlain\n          position={DropdownPosition.right}\n          toggle={<KebabToggle onToggle={toggleKebab} />}\n          isOpen={kebabOpen}\n          dropdownItems={[\n            <DropdownItem\n              key={credential.id}\n              data-testid=\"deleteDropdownItem\"\n              component=\"button\"\n              onClick={() => {\n                toggleDelete();\n                toggleKebab();\n              }}\n            >\n              {t(\"deleteBtn\")}\n            </DropdownItem>,\n          ]}\n        />\n      </Td>\n    </>\n  );\n};\n","import {\n  Button,\n  PageSection,\n  PageSectionVariants,\n} from \"@patternfly/react-core\";\nimport {\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { FederatedUserLink } from \"../FederatedUserLink\";\n\ntype FederatedCredentialsProps = {\n  user: UserRepresentation;\n  onSetPassword: () => void;\n};\n\nexport const FederatedCredentials = ({\n  user,\n  onSetPassword,\n}: FederatedCredentialsProps) => {\n  const { t } = useTranslation(\"users\");\n  const { adminClient } = useAdminClient();\n\n  const [credentialTypes, setCredentialTypes] = useState<string[]>();\n\n  useFetch(\n    () => adminClient.users.getUserStorageCredentialTypes({ id: user.id! }),\n    setCredentialTypes,\n    []\n  );\n\n  if (!credentialTypes) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <PageSection variant={PageSectionVariants.light}>\n      <TableComposable variant={\"compact\"}>\n        <Thead>\n          <Tr>\n            <Th>{t(\"type\")}</Th>\n            <Th>{t(\"providedBy\")}</Th>\n            <Th />\n          </Tr>\n        </Thead>\n        <Tbody>\n          {credentialTypes.map((credential) => (\n            <Tr key={credential}>\n              <Td>\n                <b>{credential}</b>\n              </Td>\n              <Td>\n                <FederatedUserLink user={user} />\n              </Td>\n              {credential === \"password\" && (\n                <Td modifier=\"fitContent\">\n                  <Button variant=\"secondary\" onClick={onSetPassword}>\n                    {t(\"setPassword\")}\n                  </Button>\n                </Td>\n              )}\n            </Tr>\n          ))}\n        </Tbody>\n      </TableComposable>\n    </PageSection>\n  );\n};\n","import {\n  DragEvent as ReactDragEvent,\n  Fragment,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport {\n  AlertVariant,\n  PageSection,\n  PageSectionVariants,\n  Button,\n  ButtonVariant,\n  Divider,\n} from \"@patternfly/react-core\";\nimport {\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport { useAdminClient, useFetch } from \"../context/auth/AdminClient\";\nimport { HelpItem } from \"../components/help-enabler/HelpItem\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport type CredentialRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/credentialRepresentation\";\nimport { ResetPasswordDialog } from \"./user-credentials/ResetPasswordDialog\";\nimport { ResetCredentialDialog } from \"./user-credentials/ResetCredentialDialog\";\nimport { InlineLabelEdit } from \"./user-credentials/InlineLabelEdit\";\nimport styles from \"@patternfly/react-styles/css/components/Table/table\";\nimport { CredentialRow } from \"./user-credentials/CredentialRow\";\nimport { toUpperCase } from \"../util\";\n\nimport \"./user-credentials.css\";\nimport { FederatedCredentials } from \"./user-credentials/FederatedCredentials\";\n\ntype UserCredentialsProps = {\n  user: UserRepresentation;\n};\n\ntype ExpandableCredentialRepresentation = {\n  key: string;\n  value: CredentialRepresentation[];\n  isExpanded: boolean;\n};\n\nexport const UserCredentials = ({ user }: UserCredentialsProps) => {\n  const { t } = useTranslation(\"users\");\n  const { addAlert, addError } = useAlerts();\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n  const [isOpen, setIsOpen] = useState(false);\n  const [openCredentialReset, setOpenCredentialReset] = useState(false);\n  const { adminClient } = useAdminClient();\n  const [userCredentials, setUserCredentials] = useState<\n    CredentialRepresentation[]\n  >([]);\n  const [groupedUserCredentials, setGroupedUserCredentials] = useState<\n    ExpandableCredentialRepresentation[]\n  >([]);\n  const [selectedCredential, setSelectedCredential] =\n    useState<CredentialRepresentation>({});\n  const [isResetPassword, setIsResetPassword] = useState(false);\n  const [isUserLabelEdit, setIsUserLabelEdit] = useState<{\n    status: boolean;\n    rowKey: string;\n  }>();\n\n  const bodyRef = useRef<HTMLTableSectionElement>(null);\n  const [state, setState] = useState({\n    draggedItemId: \"\",\n    draggingToItemIndex: -1,\n    dragging: false,\n    tempItemOrder: [\"\"],\n  });\n\n  useFetch(\n    () => adminClient.users.getCredentials({ id: user.id! }),\n    (credentials) => {\n      setUserCredentials(credentials);\n\n      const groupedCredentials = credentials.reduce((r, a) => {\n        r[a.type!] = r[a.type!] || [];\n        r[a.type!].push(a);\n        return r;\n      }, Object.create(null));\n\n      const groupedCredentialsArray = Object.keys(groupedCredentials).map(\n        (key) => ({ key, value: groupedCredentials[key] })\n      );\n\n      setGroupedUserCredentials(\n        groupedCredentialsArray.map((groupedCredential) => ({\n          ...groupedCredential,\n          isExpanded: false,\n        }))\n      );\n    },\n    [key]\n  );\n\n  const passwordTypeFinder = userCredentials.find(\n    (credential) => credential.type === \"password\"\n  );\n\n  const toggleModal = () => setIsOpen(!isOpen);\n\n  const toggleCredentialsResetModal = () => {\n    setOpenCredentialReset(!openCredentialReset);\n  };\n\n  const resetPassword = () => {\n    setIsResetPassword(true);\n    toggleModal();\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: t(\"deleteCredentialsConfirmTitle\"),\n    messageKey: t(\"deleteCredentialsConfirm\"),\n    continueButtonLabel: t(\"common:delete\"),\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.users.deleteCredential({\n          id: user.id!,\n          credentialId: selectedCredential.id!,\n        });\n        addAlert(t(\"deleteCredentialsSuccess\"), AlertVariant.success);\n        setKey((key) => key + 1);\n      } catch (error) {\n        addError(\"users:deleteCredentialsError\", error);\n      }\n    },\n  });\n\n  const Row = ({ credential }: { credential: CredentialRepresentation }) => (\n    <CredentialRow\n      key={credential.id}\n      credential={credential}\n      toggleDelete={() => {\n        setSelectedCredential(credential);\n        toggleDeleteDialog();\n      }}\n      resetPassword={resetPassword}\n    >\n      <InlineLabelEdit\n        credential={credential}\n        userId={user.id!}\n        isEditable={\n          (isUserLabelEdit?.status &&\n            isUserLabelEdit.rowKey === credential.id) ||\n          false\n        }\n        toggle={() => {\n          setIsUserLabelEdit({\n            status: !isUserLabelEdit?.status,\n            rowKey: credential.id!,\n          });\n          if (isUserLabelEdit?.status) {\n            refresh();\n          }\n        }}\n      />\n    </CredentialRow>\n  );\n\n  const itemOrder = useMemo(\n    () =>\n      groupedUserCredentials.flatMap((groupedCredential) => [\n        groupedCredential.value.map(({ id }) => id).toString(),\n        ...(groupedCredential.isExpanded\n          ? groupedCredential.value.map((c) => c.id!)\n          : []),\n      ]),\n    [groupedUserCredentials]\n  );\n\n  const onDragStart = (evt: ReactDragEvent) => {\n    evt.dataTransfer.effectAllowed = \"move\";\n    evt.dataTransfer.setData(\"text/plain\", evt.currentTarget.id);\n    const draggedItemId = evt.currentTarget.id;\n    evt.currentTarget.classList.add(styles.modifiers.ghostRow);\n    evt.currentTarget.setAttribute(\"aria-pressed\", \"true\");\n    setState({ ...state, draggedItemId, dragging: true });\n  };\n\n  const moveItem = (items: string[], targetItem: string, toIndex: number) => {\n    const fromIndex = items.indexOf(targetItem);\n    if (fromIndex === toIndex) {\n      return items;\n    }\n    const result = [...items];\n    result.splice(toIndex, 0, result.splice(fromIndex, 1)[0]);\n    return result;\n  };\n\n  const move = (itemOrder: string[]) => {\n    if (!bodyRef.current) return;\n    const ulNode = bodyRef.current;\n    const nodes = Array.from(ulNode.children);\n    if (nodes.every(({ id }, i) => id === itemOrder[i])) {\n      return;\n    }\n    ulNode.replaceChildren();\n    itemOrder.forEach((itemId) => {\n      ulNode.appendChild(nodes.find(({ id }) => id === itemId)!);\n    });\n  };\n\n  const onDragCancel = () => {\n    if (!bodyRef.current) return;\n    Array.from(bodyRef.current.children).forEach((el) => {\n      el.classList.remove(styles.modifiers.ghostRow);\n      el.setAttribute(\"aria-pressed\", \"false\");\n    });\n    setState({\n      ...state,\n      draggedItemId: \"\",\n      draggingToItemIndex: -1,\n      dragging: false,\n    });\n  };\n\n  const onDragLeave = (evt: ReactDragEvent) => {\n    if (!isValidDrop(evt)) {\n      move(itemOrder);\n      setState({ ...state, draggingToItemIndex: -1 });\n    }\n  };\n\n  const isValidDrop = (evt: ReactDragEvent) => {\n    if (!bodyRef.current) return false;\n    const ulRect = bodyRef.current.getBoundingClientRect();\n    return (\n      evt.clientX > ulRect.x &&\n      evt.clientX < ulRect.x + ulRect.width &&\n      evt.clientY > ulRect.y &&\n      evt.clientY < ulRect.y + ulRect.height\n    );\n  };\n\n  const onDrop = (evt: ReactDragEvent) => {\n    if (isValidDrop(evt)) {\n      onDragFinish(state.draggedItemId, state.tempItemOrder);\n    } else {\n      onDragCancel();\n    }\n  };\n\n  const onDragOver = (evt: ReactDragEvent) => {\n    evt.preventDefault();\n    const td = evt.target as HTMLTableCellElement;\n    const curListItem = td.closest(\"tr\");\n    if (\n      !curListItem ||\n      (bodyRef.current && !bodyRef.current.contains(curListItem)) ||\n      curListItem.id === state.draggedItemId\n    ) {\n      return;\n    } else {\n      const dragId = curListItem.id;\n      const draggingToItemIndex = Array.from(\n        bodyRef.current?.children || []\n      ).findIndex((item) => item.id === dragId);\n      if (draggingToItemIndex === state.draggingToItemIndex) {\n        return;\n      }\n      const tempItemOrder = moveItem(\n        itemOrder,\n        state.draggedItemId,\n        draggingToItemIndex\n      );\n      move(tempItemOrder);\n      setState({\n        ...state,\n        draggingToItemIndex,\n        tempItemOrder,\n      });\n    }\n  };\n\n  const onDragEnd = ({ target }: ReactDragEvent) => {\n    if (!(target instanceof HTMLTableRowElement)) {\n      return;\n    }\n    target.classList.remove(styles.modifiers.ghostRow);\n    target.setAttribute(\"aria-pressed\", \"false\");\n    setState({\n      ...state,\n      draggedItemId: \"\",\n      draggingToItemIndex: -1,\n      dragging: false,\n    });\n  };\n\n  const onDragFinish = async (dragged: string, newOrder: string[]) => {\n    const oldIndex = itemOrder.findIndex((key) => key === dragged);\n    const newIndex = newOrder.findIndex((key) => key === dragged);\n    const times = newIndex - oldIndex;\n\n    const ids = dragged.split(\",\");\n\n    try {\n      for (const id of ids)\n        for (let index = 0; index < Math.abs(times); index++) {\n          if (times > 0) {\n            await adminClient.users.moveCredentialPositionDown({\n              id: user.id!,\n              credentialId: id,\n              newPreviousCredentialId: itemOrder[newIndex],\n            });\n          } else {\n            await adminClient.users.moveCredentialPositionUp({\n              id: user.id!,\n              credentialId: id,\n            });\n          }\n        }\n\n      refresh();\n      addAlert(t(\"users:updatedCredentialMoveSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"users:updatedCredentialMoveError\", error);\n    }\n  };\n\n  return (\n    <>\n      {isOpen && (\n        <ResetPasswordDialog\n          user={user}\n          isResetPassword={isResetPassword}\n          refresh={refresh}\n          onClose={() => setIsOpen(false)}\n        />\n      )}\n      {openCredentialReset && (\n        <ResetCredentialDialog\n          userId={user.id!}\n          onClose={() => setOpenCredentialReset(false)}\n        />\n      )}\n      <DeleteConfirm />\n      {userCredentials.length !== 0 && passwordTypeFinder === undefined && (\n        <>\n          <Button\n            className=\"kc-setPasswordBtn-tbl\"\n            data-testid=\"setPasswordBtn-table\"\n            variant=\"primary\"\n            form=\"userCredentials-form\"\n            onClick={() => {\n              setIsOpen(true);\n            }}\n          >\n            {t(\"setPassword\")}\n          </Button>\n          <Divider />\n        </>\n      )}\n      {groupedUserCredentials.length !== 0 && (\n        <>\n          {user.email && (\n            <Button\n              className=\"kc-resetCredentialBtn-header\"\n              variant=\"primary\"\n              data-testid=\"credentialResetBtn\"\n              onClick={() => setOpenCredentialReset(true)}\n            >\n              {t(\"credentialResetBtn\")}\n            </Button>\n          )}\n          <PageSection variant={PageSectionVariants.light}>\n            <TableComposable variant={\"compact\"}>\n              <Thead>\n                <Tr className=\"kc-table-header\">\n                  <Th>\n                    <HelpItem\n                      helpText=\"users:userCredentialsHelpText\"\n                      fieldLabelId=\"users:userCredentialsHelpTextLabel\"\n                    />\n                  </Th>\n                  <Th />\n                  <Th>{t(\"type\")}</Th>\n                  <Th>{t(\"userLabel\")}</Th>\n                  <Th>{t(\"data\")}</Th>\n                  <Th />\n                  <Th />\n                </Tr>\n              </Thead>\n              <Tbody\n                ref={bodyRef}\n                onDragOver={onDragOver}\n                onDrop={onDragOver}\n                onDragLeave={onDragLeave}\n              >\n                {groupedUserCredentials.map((groupedCredential, rowIndex) => (\n                  <Fragment key={groupedCredential.key}>\n                    <Tr\n                      id={groupedCredential.value\n                        .map(({ id }) => id)\n                        .toString()}\n                      draggable={groupedUserCredentials.length > 1}\n                      onDrop={onDrop}\n                      onDragEnd={onDragEnd}\n                      onDragStart={onDragStart}\n                    >\n                      <Td\n                        className={\n                          groupedUserCredentials.length === 1 ? \"one-row\" : \"\"\n                        }\n                        draggableRow={{\n                          id: `draggable-row-${groupedCredential.value.map(\n                            ({ id }) => id\n                          )}`,\n                        }}\n                      />\n                      {groupedCredential.value.length > 1 ? (\n                        <Td\n                          className=\"kc-expandRow-btn\"\n                          expand={{\n                            rowIndex,\n                            isExpanded: groupedCredential.isExpanded,\n                            onToggle: (_, rowIndex) => {\n                              const rows = groupedUserCredentials.map(\n                                (credential, index) =>\n                                  index === rowIndex\n                                    ? {\n                                        ...credential,\n                                        isExpanded: !credential.isExpanded,\n                                      }\n                                    : credential\n                              );\n                              setGroupedUserCredentials(rows);\n                            },\n                          }}\n                        />\n                      ) : (\n                        <Td />\n                      )}\n                      <Td\n                        dataLabel={`columns-${groupedCredential.key}`}\n                        className=\"kc-notExpandableRow-credentialType\"\n                        data-testid=\"credentialType\"\n                      >\n                        {toUpperCase(groupedCredential.key)}\n                      </Td>\n                      {groupedCredential.value.length <= 1 &&\n                        groupedCredential.value.map((credential) => (\n                          <Row key={credential.id} credential={credential} />\n                        ))}\n                    </Tr>\n                    {groupedCredential.isExpanded &&\n                      groupedCredential.value.map((credential) => (\n                        <Tr\n                          key={credential.id}\n                          id={credential.id}\n                          draggable\n                          onDrop={onDrop}\n                          onDragEnd={onDragEnd}\n                          onDragStart={onDragStart}\n                        >\n                          <Td />\n                          <Td\n                            className=\"kc-draggable-dropdown-type-icon\"\n                            draggableRow={{\n                              id: `draggable-row-${groupedCredential.value.map(\n                                ({ id }) => id\n                              )}`,\n                            }}\n                          />\n                          <Td\n                            dataLabel={`child-columns-${credential.id}`}\n                            className=\"kc-expandableRow-credentialType\"\n                          >\n                            {toUpperCase(credential.type!)}\n                          </Td>\n                          <Row credential={credential} />\n                        </Tr>\n                      ))}\n                  </Fragment>\n                ))}\n              </Tbody>\n            </TableComposable>\n          </PageSection>\n        </>\n      )}\n      {(user.federationLink || user.origin) && (\n        <FederatedCredentials user={user} onSetPassword={toggleModal} />\n      )}\n      {groupedUserCredentials.length === 0 &&\n        !(user.federationLink || user.origin) && (\n          <ListEmptyState\n            hasIcon\n            message={t(\"noCredentials\")}\n            instructions={t(\"noCredentialsText\")}\n            primaryActionText={t(\"setPassword\")}\n            onPrimaryAction={toggleModal}\n            secondaryActions={\n              user.email\n                ? [\n                    {\n                      text: t(\"credentialResetBtn\"),\n                      onClick: toggleCredentialsResetModal,\n                      type: ButtonVariant.link,\n                    },\n                  ]\n                : undefined\n            }\n          />\n        )}\n    </>\n  );\n};\n","import {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Checkbox,\n  Popover,\n} from \"@patternfly/react-core\";\nimport { QuestionCircleIcon } from \"@patternfly/react-icons\";\nimport { cellWidth } from \"@patternfly/react-table\";\nimport type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport { intersectionBy, sortBy } from \"lodash-es\";\nimport { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { GroupPath } from \"../components/group/GroupPath\";\nimport { GroupPickerDialog } from \"../components/group/GroupPickerDialog\";\nimport { useHelp } from \"../components/help-enabler/HelpHeader\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport { KeycloakDataTable } from \"../components/table-toolbar/KeycloakDataTable\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport { emptyFormatter } from \"../util\";\nimport { useAccess } from \"../context/access/Access\";\n\ntype UserGroupsProps = {\n  user: UserRepresentation;\n};\n\nexport const UserGroups = ({ user }: UserGroupsProps) => {\n  const { t } = useTranslation(\"users\");\n  const { addAlert, addError } = useAlerts();\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(new Date().getTime());\n\n  const [selectedGroups, setSelectedGroups] = useState<GroupRepresentation[]>(\n    []\n  );\n  const [search, setSearch] = useState(\"\");\n\n  const [isDirectMembership, setDirectMembership] = useState(true);\n  const [directMembershipList, setDirectMembershipList] = useState<\n    GroupRepresentation[]\n  >([]);\n  const [open, setOpen] = useState(false);\n\n  const { enabled } = useHelp();\n\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-users\");\n\n  const { adminClient } = useAdminClient();\n  const alphabetize = (groupsList: GroupRepresentation[]) => {\n    return sortBy(groupsList, (group) => group.path?.toUpperCase());\n  };\n\n  const loader = async (first?: number, max?: number, search?: string) => {\n    const params: { [name: string]: string | number } = {\n      first: first!,\n      max: max!,\n    };\n\n    const searchParam = search || \"\";\n    if (searchParam) {\n      params.search = searchParam;\n      setSearch(searchParam);\n    }\n\n    const joinedUserGroups = await adminClient.users.listGroups({\n      ...params,\n      id: user.id!,\n    });\n\n    const allCreatedGroups = await adminClient.groups.find();\n\n    const getAllPaths = joinedUserGroups.reduce(\n      (acc: string[], cur) => (cur.path && acc.push(cur.path), acc),\n      []\n    );\n    const parentGroupNames: string[] = [];\n    const allGroupMembership: string[] = [];\n    const slicedGroups: string[] = [];\n    const rootLevelGroups: GroupRepresentation[] = [...allCreatedGroups];\n    let allPaths: GroupRepresentation[] = [];\n\n    const getAllSubgroupPaths = (\n      o: any,\n      f: any,\n      context: GroupRepresentation[]\n    ): GroupRepresentation[] => {\n      f(o, context);\n      if (typeof o !== \"object\") return context;\n      if (Array.isArray(o))\n        return o.forEach((e) => getAllSubgroupPaths(e, f, context)), context;\n      for (const prop in o) getAllSubgroupPaths(o[prop], f, context);\n      return context;\n    };\n\n    const arr = getAllSubgroupPaths(\n      rootLevelGroups,\n      (\n        x: GroupRepresentation | undefined,\n        context: GroupRepresentation[][]\n      ) => {\n        if (x?.subGroups) context.push(x.subGroups);\n      },\n      []\n    );\n\n    const allSubgroups: GroupRepresentation[] = [].concat(...(arr as any));\n\n    allPaths = [...rootLevelGroups, ...allSubgroups];\n\n    getAllPaths.forEach((item) => {\n      const paths = item.split(\"/\");\n      const groups: string[] = [];\n\n      paths.reduce((acc, value) => {\n        const path = acc + \"/\" + value;\n        groups.push(path);\n        return path;\n      }, \"\");\n\n      for (let i = 1; i < groups.length; i++) {\n        slicedGroups.push(groups[i].substring(1));\n      }\n    });\n\n    allGroupMembership.push(...slicedGroups);\n\n    allPaths.forEach((item) => {\n      if (item.subGroups!.length !== 0) {\n        allPaths.push(...item!.subGroups!);\n      }\n    });\n\n    allPaths = allPaths.filter((group) =>\n      allGroupMembership.includes(group.path as any)\n    );\n\n    const topLevelGroups = allCreatedGroups.filter((value) =>\n      parentGroupNames.includes(value.name!)\n    );\n\n    const subgroupArray: any[] = [];\n\n    topLevelGroups.forEach((group) => subgroupArray.push(group.subGroups));\n\n    const directMembership = joinedUserGroups!.filter(\n      (value) => !topLevelGroups.includes(value)\n    );\n\n    setDirectMembershipList(directMembership);\n\n    const filterDupesfromGroups = allPaths.filter(\n      (thing, index, self) =>\n        index === self.findIndex((t) => t.name === thing.name)\n    );\n\n    if (!isDirectMembership) {\n      return alphabetize(filterDupesfromGroups);\n    }\n\n    return alphabetize(directMembership);\n  };\n\n  useEffect(() => {\n    refresh();\n  }, [isDirectMembership]);\n\n  const AliasRenderer = (group: GroupRepresentation) => group.name;\n\n  const toggleModal = () => {\n    setOpen(!open);\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: t(\"leaveGroup\", {\n      count: selectedGroups.length,\n      name: selectedGroups[0]?.name,\n    }),\n    messageKey: t(\"leaveGroupConfirmDialog\", {\n      count: selectedGroups.length,\n      groupname: selectedGroups[0]?.name,\n      username: user.username,\n    }),\n    continueButtonLabel: \"leave\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await Promise.all(\n          selectedGroups.map((group) =>\n            adminClient.users.delFromGroup({\n              id: user.id!,\n              groupId: group.id!,\n            })\n          )\n        );\n        refresh();\n        addAlert(t(\"removedGroupMembership\"), AlertVariant.success);\n      } catch (error) {\n        addError(\"users:removedGroupMembershipError\", error);\n      }\n    },\n  });\n\n  const leave = (group: GroupRepresentation[]) => {\n    setSelectedGroups(group);\n    toggleDeleteDialog();\n  };\n\n  const LeaveButtonRenderer = (group: GroupRepresentation) => {\n    const canLeaveGroup =\n      directMembershipList.some((item) => item.id === group.id) ||\n      directMembershipList.length === 0 ||\n      isDirectMembership;\n    return (\n      canLeaveGroup && (\n        <Button\n          data-testid={`leave-${group.name}`}\n          onClick={() => leave([group])}\n          variant=\"link\"\n          isDisabled={!user.access?.manageGroupMembership}\n        >\n          {t(\"leave\")}\n        </Button>\n      )\n    );\n  };\n\n  const addGroups = async (groups: GroupRepresentation[]): Promise<void> => {\n    const newGroups = groups;\n\n    newGroups.forEach(async (group) => {\n      try {\n        await adminClient.users.addToGroup({\n          id: user.id!,\n          groupId: group.id!,\n        });\n        refresh();\n        addAlert(t(\"addedGroupMembership\"), AlertVariant.success);\n      } catch (error) {\n        addError(\"users:addedGroupMembershipError\", error);\n      }\n    });\n  };\n\n  const Path = (group: GroupRepresentation) => <GroupPath group={group} />;\n\n  return (\n    <>\n      <DeleteConfirm />\n      {open && (\n        <GroupPickerDialog\n          id={user.id}\n          type=\"selectMany\"\n          text={{\n            title: t(\"joinGroupsFor\", { username: user.username }),\n            ok: \"users:join\",\n          }}\n          canBrowse={isManager}\n          onClose={() => setOpen(false)}\n          onConfirm={(groups) => {\n            addGroups(groups || []);\n            setOpen(false);\n            refresh();\n          }}\n        />\n      )}\n      <KeycloakDataTable\n        key={key}\n        loader={loader}\n        className=\"keycloak_user-section_groups-table\"\n        isPaginated\n        ariaLabelKey=\"roles:roleList\"\n        searchPlaceholderKey=\"groups:searchGroup\"\n        canSelectAll\n        onSelect={(groups) =>\n          isDirectMembership\n            ? setSelectedGroups(groups)\n            : setSelectedGroups(\n                intersectionBy(groups, directMembershipList, \"id\")\n              )\n        }\n        isRowDisabled={(group) =>\n          !isDirectMembership &&\n          directMembershipList.every((item) => item.id !== group.id)\n        }\n        toolbarItem={\n          <>\n            <Button\n              className=\"kc-join-group-button\"\n              onClick={toggleModal}\n              data-testid=\"add-group-button\"\n              isDisabled={!user.access?.manageGroupMembership}\n            >\n              {t(\"joinGroup\")}\n            </Button>\n            <Checkbox\n              label={t(\"directMembership\")}\n              key=\"direct-membership-check\"\n              id=\"kc-direct-membership-checkbox\"\n              onChange={() => setDirectMembership(!isDirectMembership)}\n              isChecked={isDirectMembership}\n              className=\"direct-membership-check\"\n            />\n            <Button\n              onClick={() => leave(selectedGroups)}\n              data-testid=\"leave-group-button\"\n              variant=\"link\"\n              isDisabled={selectedGroups.length === 0}\n            >\n              {t(\"leave\")}\n            </Button>\n\n            {enabled && (\n              <Popover\n                aria-label=\"Basic popover\"\n                position=\"bottom\"\n                bodyContent={<div>{t(\"whoWillAppearPopoverText\")}</div>}\n              >\n                <Button\n                  variant=\"link\"\n                  className=\"kc-who-will-appear-button\"\n                  key=\"who-will-appear-button\"\n                  icon={<QuestionCircleIcon />}\n                >\n                  {t(\"whoWillAppearLinkText\")}\n                </Button>\n              </Popover>\n            )}\n          </>\n        }\n        columns={[\n          {\n            name: \"groupMembership\",\n            displayKey: \"users:groupMembership\",\n            cellRenderer: AliasRenderer,\n            cellFormatters: [emptyFormatter()],\n            transforms: [cellWidth(40)],\n          },\n          {\n            name: \"path\",\n            displayKey: \"users:path\",\n            cellRenderer: Path,\n            transforms: [cellWidth(45)],\n          },\n\n          {\n            name: \"\",\n            cellRenderer: LeaveButtonRenderer,\n            cellFormatters: [emptyFormatter()],\n            transforms: [cellWidth(20)],\n          },\n        ]}\n        emptyState={\n          !search ? (\n            <ListEmptyState\n              hasIcon={true}\n              message={t(\"noGroups\")}\n              instructions={t(\"noGroupsText\")}\n              primaryActionText={t(\"joinGroup\")}\n              onPrimaryAction={toggleModal}\n            />\n          ) : (\n            \"\"\n          )\n        }\n      />\n    </>\n  );\n};\n","import type FederatedIdentityRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/federatedIdentityRepresentation\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { capitalize } from \"lodash-es\";\nimport { useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { KeycloakTextInput } from \"../components/keycloak-text-input/KeycloakTextInput\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\n\ntype UserIdpModalProps = {\n  userId: string;\n  federatedId: string;\n  onClose: () => void;\n  onRefresh: () => void;\n};\n\nexport const UserIdpModal = ({\n  userId,\n  federatedId,\n  onClose,\n  onRefresh,\n}: UserIdpModalProps) => {\n  const { t } = useTranslation(\"users\");\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const {\n    register,\n    handleSubmit,\n    formState: { isValid, errors },\n  } = useForm<FederatedIdentityRepresentation>({\n    mode: \"onChange\",\n  });\n\n  const onSubmit = async (\n    federatedIdentity: FederatedIdentityRepresentation\n  ) => {\n    try {\n      await adminClient.users.addToFederatedIdentity({\n        id: userId,\n        federatedIdentityId: federatedId,\n        federatedIdentity,\n      });\n      addAlert(t(\"users:idpLinkSuccess\"), AlertVariant.success);\n      onClose();\n      onRefresh();\n    } catch (error) {\n      addError(\"users:couldNotLinkIdP\", error);\n    }\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title={t(\"users:linkAccountTitle\", {\n        provider: capitalize(federatedId),\n      })}\n      onClose={onClose}\n      actions={[\n        <Button\n          key=\"confirm\"\n          data-testid=\"confirm\"\n          variant=\"primary\"\n          type=\"submit\"\n          form=\"group-form\"\n          isDisabled={!isValid}\n        >\n          {t(\"link\")}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          data-testid=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={onClose}\n        >\n          {t(\"common:cancel\")}\n        </Button>,\n      ]}\n      isOpen\n    >\n      <Form id=\"group-form\" onSubmit={handleSubmit(onSubmit)}>\n        <FormGroup\n          label={t(\"users:identityProvider\")}\n          fieldId=\"identityProvider\"\n        >\n          <KeycloakTextInput\n            id=\"identityProvider\"\n            data-testid=\"idpNameInput\"\n            value={capitalize(federatedId)}\n            isReadOnly\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"users:userID\")}\n          fieldId=\"userID\"\n          helperText={t(\"users-help:userIdHelperText\")}\n          helperTextInvalid={t(\"common:required\")}\n          validated={\n            errors.userId ? ValidatedOptions.error : ValidatedOptions.default\n          }\n          isRequired\n        >\n          <KeycloakTextInput\n            id=\"userID\"\n            data-testid=\"userIdInput\"\n            validated={\n              errors.userId ? ValidatedOptions.error : ValidatedOptions.default\n            }\n            autoFocus\n            {...register(\"userId\", { required: true })}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"users:username\")}\n          fieldId=\"username\"\n          helperText={t(\"users-help:usernameHelperText\")}\n          helperTextInvalid={t(\"common:required\")}\n          validated={\n            errors.userName ? ValidatedOptions.error : ValidatedOptions.default\n          }\n          isRequired\n        >\n          <KeycloakTextInput\n            id=\"username\"\n            data-testid=\"usernameInput\"\n            validated={\n              errors.userName\n                ? ValidatedOptions.error\n                : ValidatedOptions.default\n            }\n            {...register(\"userName\", { required: true })}\n          />\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n","import type FederatedIdentityRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/federatedIdentityRepresentation\";\nimport type IdentityProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/identityProviderRepresentation\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Label,\n  PageSection,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { cellWidth } from \"@patternfly/react-table\";\nimport { capitalize } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\n\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { FormPanel } from \"../components/scroll-form/FormPanel\";\nimport { KeycloakDataTable } from \"../components/table-toolbar/KeycloakDataTable\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../context/server-info/ServerInfoProvider\";\nimport { toIdentityProvider } from \"../identity-providers/routes/IdentityProvider\";\nimport { emptyFormatter, upperCaseFormatter } from \"../util\";\nimport { UserIdpModal } from \"./UserIdPModal\";\n\ntype UserIdentityProviderLinksProps = {\n  userId: string;\n};\n\nexport const UserIdentityProviderLinks = ({\n  userId,\n}: UserIdentityProviderLinksProps) => {\n  const [key, setKey] = useState(0);\n  const [federatedId, setFederatedId] = useState(\"\");\n  const [isLinkIdPModalOpen, setIsLinkIdPModalOpen] = useState(false);\n\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n  const { addAlert, addError } = useAlerts();\n  const { t } = useTranslation(\"users\");\n\n  const refresh = () => setKey(new Date().getTime());\n\n  type WithProviderId = FederatedIdentityRepresentation & {\n    providerId: string;\n  };\n\n  const identityProviders = useServerInfo().identityProviders;\n\n  const getFederatedIdentities = async () => {\n    const allProviders = await adminClient.identityProviders.find();\n\n    const allFedIds = (await adminClient.users.listFederatedIdentities({\n      id: userId,\n    })) as WithProviderId[];\n    for (const element of allFedIds) {\n      element.providerId = allProviders.find(\n        (item) => item.alias === element.identityProvider\n      )?.providerId!;\n    }\n\n    return allFedIds;\n  };\n\n  const getAvailableIdPs = async () => {\n    return (await adminClient.realms.findOne({ realm }))!.identityProviders;\n  };\n\n  const linkedIdPsLoader = async () => {\n    return getFederatedIdentities();\n  };\n\n  const availableIdPsLoader = async () => {\n    const linkedNames = (await getFederatedIdentities()).map(\n      (x) => x.identityProvider\n    );\n\n    return (await getAvailableIdPs())?.filter(\n      (item) => !linkedNames.includes(item.alias)\n    )!;\n  };\n\n  const [toggleUnlinkDialog, UnlinkConfirm] = useConfirmDialog({\n    titleKey: t(\"users:unlinkAccountTitle\", {\n      provider: capitalize(federatedId),\n    }),\n    messageKey: t(\"users:unlinkAccountConfirm\", {\n      provider: capitalize(federatedId),\n    }),\n    continueButtonLabel: \"users:unlink\",\n    continueButtonVariant: ButtonVariant.primary,\n    onConfirm: async () => {\n      try {\n        await adminClient.users.delFromFederatedIdentity({\n          id: userId,\n          federatedIdentityId: federatedId,\n        });\n        addAlert(t(\"users:idpUnlinkSuccess\"), AlertVariant.success);\n        refresh();\n      } catch (error) {\n        addError(\"common:mappingDeletedError\", error);\n      }\n    },\n  });\n\n  const idpLinkRenderer = (idp: WithProviderId) => {\n    return (\n      <Link\n        to={toIdentityProvider({\n          realm,\n          providerId: idp.providerId,\n          alias: idp.identityProvider!,\n          tab: \"settings\",\n        })}\n      >\n        {capitalize(idp.identityProvider)}\n      </Link>\n    );\n  };\n\n  const badgeRenderer1 = (idp: FederatedIdentityRepresentation) => {\n    const groupName = identityProviders?.find(\n      (provider) => provider[\"id\"] === idp.identityProvider\n    )?.groupName!;\n    return (\n      <Label color={groupName === \"Social\" ? \"blue\" : \"orange\"}>\n        {groupName === \"Social\"\n          ? t(\"users:idpType.social\")\n          : t(\"users:idpType.custom\")}\n      </Label>\n    );\n  };\n\n  const badgeRenderer2 = (idp: IdentityProviderRepresentation) => {\n    const groupName = identityProviders?.find(\n      (provider) => provider[\"id\"] === idp.providerId\n    )?.groupName!;\n    return (\n      <Label color={groupName === \"User-defined\" ? \"orange\" : \"blue\"}>\n        {groupName === \"User-defined\"\n          ? \"Custom\"\n          : groupName! === \"Social\"\n          ? t(\"users:idpType.social\")\n          : groupName!}\n      </Label>\n    );\n  };\n\n  const unlinkRenderer = (fedIdentity: FederatedIdentityRepresentation) => {\n    return (\n      <Button\n        variant=\"link\"\n        onClick={() => {\n          setFederatedId(fedIdentity.identityProvider!);\n          toggleUnlinkDialog();\n        }}\n      >\n        {t(\"unlinkAccount\")}\n      </Button>\n    );\n  };\n\n  const linkRenderer = (idp: IdentityProviderRepresentation) => {\n    return (\n      <Button\n        variant=\"link\"\n        onClick={() => {\n          setFederatedId(idp.alias!);\n          setIsLinkIdPModalOpen(true);\n        }}\n      >\n        {t(\"linkAccount\")}\n      </Button>\n    );\n  };\n\n  return (\n    <>\n      {isLinkIdPModalOpen && (\n        <UserIdpModal\n          userId={userId}\n          federatedId={federatedId}\n          onClose={() => setIsLinkIdPModalOpen(false)}\n          onRefresh={refresh}\n        />\n      )}\n      <UnlinkConfirm />\n      <PageSection variant=\"light\" className=\"pf-u-p-0\">\n        <FormPanel title={t(\"linkedIdPs\")} className=\"kc-linked-idps\">\n          <TextContent>\n            <Text className=\"kc-available-idps-text\">\n              {t(\"linkedIdPsText\")}\n            </Text>\n          </TextContent>\n          <KeycloakDataTable\n            loader={linkedIdPsLoader}\n            key={key}\n            isPaginated={false}\n            ariaLabelKey=\"users:LinkedIdPs\"\n            className=\"kc-linked-IdPs-table\"\n            columns={[\n              {\n                name: \"identityProvider\",\n                displayKey: \"common:name\",\n                cellFormatters: [emptyFormatter()],\n                cellRenderer: idpLinkRenderer,\n                transforms: [cellWidth(20)],\n              },\n              {\n                name: \"type\",\n                displayKey: \"common:type\",\n                cellFormatters: [emptyFormatter()],\n                cellRenderer: badgeRenderer1,\n                transforms: [cellWidth(10)],\n              },\n              {\n                name: \"userId\",\n                displayKey: \"users:userID\",\n                cellFormatters: [emptyFormatter()],\n                transforms: [cellWidth(30)],\n              },\n              {\n                name: \"userName\",\n                displayKey: \"users:username\",\n                cellFormatters: [emptyFormatter()],\n                transforms: [cellWidth(20)],\n              },\n              {\n                name: \"\",\n                cellFormatters: [emptyFormatter()],\n                cellRenderer: unlinkRenderer,\n                transforms: [cellWidth(20)],\n              },\n            ]}\n            emptyState={\n              <TextContent className=\"kc-no-providers-text\">\n                <Text>{t(\"users:noProvidersLinked\")}</Text>\n              </TextContent>\n            }\n          />\n        </FormPanel>\n        <FormPanel className=\"kc-available-idps\" title={t(\"availableIdPs\")}>\n          <TextContent>\n            <Text className=\"kc-available-idps-text\">\n              {t(\"availableIdPsText\")}\n            </Text>\n          </TextContent>\n          <KeycloakDataTable\n            loader={availableIdPsLoader}\n            key={key}\n            isPaginated={false}\n            ariaLabelKey=\"users:LinkedIdPs\"\n            className=\"kc-linked-IdPs-table\"\n            columns={[\n              {\n                name: \"alias\",\n                displayKey: \"common:name\",\n                cellFormatters: [emptyFormatter(), upperCaseFormatter()],\n                transforms: [cellWidth(20)],\n              },\n              {\n                name: \"type\",\n                displayKey: \"common:type\",\n                cellFormatters: [emptyFormatter()],\n                cellRenderer: badgeRenderer2,\n                transforms: [cellWidth(60)],\n              },\n              {\n                name: \"\",\n                cellFormatters: [emptyFormatter()],\n                cellRenderer: linkRenderer,\n              },\n            ]}\n            emptyState={\n              <TextContent className=\"kc-no-providers-text\">\n                <Text>{t(\"users:noAvailableIdentityProviders\")}</Text>\n              </TextContent>\n            }\n          />\n        </FormPanel>\n      </PageSection>\n    </>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { AlertVariant } from \"@patternfly/react-core\";\n\nimport type { RoleMappingPayload } from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { RoleMapping, Row } from \"../components/role-mapping/RoleMapping\";\n\ntype UserRoleMappingProps = {\n  id: string;\n  name: string;\n};\n\nexport const UserRoleMapping = ({ id, name }: UserRoleMappingProps) => {\n  const { t } = useTranslation(\"users\");\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  const assignRoles = async (rows: Row[]) => {\n    try {\n      const realmRoles = rows\n        .filter((row) => row.client === undefined)\n        .map((row) => row.role as RoleMappingPayload)\n        .flat();\n      await adminClient.users.addRealmRoleMappings({\n        id,\n        roles: realmRoles,\n      });\n      await Promise.all(\n        rows\n          .filter((row) => row.client !== undefined)\n          .map((row) =>\n            adminClient.users.addClientRoleMappings({\n              id,\n              clientUniqueId: row.client!.id!,\n              roles: [row.role as RoleMappingPayload],\n            })\n          )\n      );\n      addAlert(t(\"roleMappingUpdatedSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"clients:roleMappingUpdatedError\", error);\n    }\n  };\n\n  return <RoleMapping name={name} id={id} type=\"users\" save={assignRoles} />;\n};\n","import { PageSection } from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport SessionsTable from \"../sessions/SessionsTable\";\nimport { useParams } from \"../utils/useParams\";\nimport type { UserParams } from \"./routes/User\";\n\nexport const UserSessions = () => {\n  const { adminClient } = useAdminClient();\n  const { id } = useParams<UserParams>();\n  const { realm } = useRealm();\n  const { t } = useTranslation(\"sessions\");\n\n  const loader = () => adminClient.users.listSessions({ id, realm });\n\n  return (\n    <PageSection variant=\"light\" className=\"pf-u-p-0\">\n      <SessionsTable\n        loader={loader}\n        hiddenColumns={[\"username\"]}\n        emptyInstructions={t(\"noSessionsForUser\")}\n        logoutUser={id}\n      />\n    </PageSection>\n  );\n};\n","import type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport {\n  AlertVariant,\n  ButtonVariant,\n  DropdownItem,\n  PageSection,\n  Tab,\n  TabTitleText,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../components/routable-tabs/RoutableTabs\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useAccess } from \"../context/access/Access\";\nimport { useAdminClient, useFetch } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { UserProfileProvider } from \"../realm-settings/user-profile/UserProfileContext\";\nimport { useParams } from \"../utils/useParams\";\nimport { toUser, UserParams, UserTab } from \"./routes/User\";\nimport { toUsers } from \"./routes/Users\";\nimport { UserAttributes } from \"./UserAttributes\";\nimport { UserConsents } from \"./UserConsents\";\nimport { UserCredentials } from \"./UserCredentials\";\nimport { BruteForced, UserForm } from \"./UserForm\";\nimport { UserGroups } from \"./UserGroups\";\nimport { UserIdentityProviderLinks } from \"./UserIdentityProviderLinks\";\nimport {\n  isUserProfileError,\n  userProfileErrorToString,\n} from \"./UserProfileFields\";\nimport { UserRoleMapping } from \"./UserRoleMapping\";\nimport { UserSessions } from \"./UserSessions\";\n\nimport \"./user-section.css\";\n\nexport default function EditUser() {\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n  const { id } = useParams<UserParams>();\n  const { t } = useTranslation(\"users\");\n  const [user, setUser] = useState<UserRepresentation>();\n  const [bruteForced, setBruteForced] = useState<BruteForced>();\n  const [refreshCount, setRefreshCount] = useState(0);\n  const refresh = () => setRefreshCount((count) => count + 1);\n\n  useFetch(\n    async () => {\n      const [user, currentRealm, attackDetection] = await Promise.all([\n        adminClient.users.findOne({ id: id! }),\n        adminClient.realms.findOne({ realm }),\n        adminClient.attackDetection.findOne({ id: id! }),\n      ]);\n\n      if (!user || !currentRealm || !attackDetection) {\n        throw new Error(t(\"common:notFound\"));\n      }\n\n      const isBruteForceProtected = currentRealm.bruteForceProtected;\n      const isLocked = isBruteForceProtected && attackDetection.disabled;\n\n      return { user, bruteForced: { isBruteForceProtected, isLocked } };\n    },\n    ({ user, bruteForced }) => {\n      setUser(user);\n      setBruteForced(bruteForced);\n    },\n    [refreshCount]\n  );\n\n  if (!user || !bruteForced) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <EditUserForm user={user} bruteForced={bruteForced} refresh={refresh} />\n  );\n}\n\ntype EditUserFormProps = {\n  user: UserRepresentation;\n  bruteForced: BruteForced;\n  refresh: () => void;\n};\n\nconst EditUserForm = ({ user, bruteForced, refresh }: EditUserFormProps) => {\n  const { t } = useTranslation(\"users\");\n  const { realm } = useRealm();\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const navigate = useNavigate();\n  const { hasAccess } = useAccess();\n  const userForm = useForm<UserRepresentation>({\n    mode: \"onChange\",\n    defaultValues: user,\n  });\n\n  const toTab = (tab: UserTab) =>\n    toUser({\n      realm,\n      id: user.id!,\n      tab,\n    });\n\n  const useTab = (tab: UserTab) => useRoutableTab(toTab(tab));\n\n  const settingsTab = useTab(\"settings\");\n  const attributesTab = useTab(\"attributes\");\n  const credentialsTab = useTab(\"credentials\");\n  const roleMappingTab = useTab(\"role-mapping\");\n  const groupsTab = useTab(\"groups\");\n  const consentsTab = useTab(\"consents\");\n  const identityProviderLinksTab = useTab(\"identity-provider-links\");\n  const sessionsTab = useTab(\"sessions\");\n\n  const save = async (formUser: UserRepresentation) => {\n    try {\n      await adminClient.users.update(\n        { id: user.id! },\n        {\n          ...formUser,\n          username: formUser.username?.trim(),\n          attributes: { ...user.attributes, ...formUser.attributes },\n        }\n      );\n      addAlert(t(\"userSaved\"), AlertVariant.success);\n      refresh();\n    } catch (error) {\n      if (isUserProfileError(error)) {\n        addError(userProfileErrorToString(error), error);\n      } else {\n        addError(\"users:userCreateError\", error);\n      }\n    }\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"users:deleteConfirm\",\n    messageKey: \"users:deleteConfirmCurrentUser\",\n    continueButtonLabel: \"common:delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.users.del({ id: user.id! });\n        addAlert(t(\"userDeletedSuccess\"), AlertVariant.success);\n        navigate(toUsers({ realm }));\n      } catch (error) {\n        addError(\"users:userDeletedError\", error);\n      }\n    },\n  });\n\n  const [toggleImpersonateDialog, ImpersonateConfirm] = useConfirmDialog({\n    titleKey: \"users:impersonateConfirm\",\n    messageKey: \"users:impersonateConfirmDialog\",\n    continueButtonLabel: \"users:impersonate\",\n    onConfirm: async () => {\n      try {\n        const data = await adminClient.users.impersonation(\n          { id: user.id! },\n          { user: user.id!, realm }\n        );\n        if (data.sameRealm) {\n          window.location = data.redirect;\n        } else {\n          window.open(data.redirect, \"_blank\");\n        }\n      } catch (error) {\n        addError(\"users:impersonateError\", error);\n      }\n    },\n  });\n\n  return (\n    <>\n      <ImpersonateConfirm />\n      <DeleteConfirm />\n      <ViewHeader\n        titleKey={user.username!}\n        className=\"kc-username-view-header\"\n        divider={false}\n        dropdownItems={[\n          <DropdownItem\n            key=\"impersonate\"\n            isDisabled={!user.access?.impersonate}\n            onClick={() => toggleImpersonateDialog()}\n          >\n            {t(\"impersonate\")}\n          </DropdownItem>,\n          <DropdownItem\n            key=\"delete\"\n            isDisabled={!user.access?.manage}\n            onClick={() => toggleDeleteDialog()}\n          >\n            {t(\"common:delete\")}\n          </DropdownItem>,\n        ]}\n        onToggle={(value) => save({ ...user, enabled: value })}\n        isEnabled={user.enabled}\n      />\n\n      <PageSection variant=\"light\" className=\"pf-u-p-0\">\n        <UserProfileProvider>\n          <FormProvider {...userForm}>\n            <RoutableTabs\n              isBox\n              mountOnEnter\n              defaultLocation={toTab(\"settings\")}\n            >\n              <Tab\n                data-testid=\"user-details-tab\"\n                title={<TabTitleText>{t(\"common:details\")}</TabTitleText>}\n                {...settingsTab}\n              >\n                <PageSection variant=\"light\">\n                  <UserForm save={save} user={user} bruteForce={bruteForced} />\n                </PageSection>\n              </Tab>\n              <Tab\n                data-testid=\"attributes\"\n                title={<TabTitleText>{t(\"common:attributes\")}</TabTitleText>}\n                {...attributesTab}\n              >\n                <UserAttributes user={user} />\n              </Tab>\n              <Tab\n                data-testid=\"credentials\"\n                isHidden={!user.access?.manage}\n                title={<TabTitleText>{t(\"common:credentials\")}</TabTitleText>}\n                {...credentialsTab}\n              >\n                <UserCredentials user={user} />\n              </Tab>\n              <Tab\n                data-testid=\"role-mapping-tab\"\n                isHidden={!user.access?.mapRoles}\n                title={<TabTitleText>{t(\"roleMapping\")}</TabTitleText>}\n                {...roleMappingTab}\n              >\n                <UserRoleMapping id={user.id!} name={user.username!} />\n              </Tab>\n              <Tab\n                data-testid=\"user-groups-tab\"\n                title={<TabTitleText>{t(\"common:groups\")}</TabTitleText>}\n                {...groupsTab}\n              >\n                <UserGroups user={user} />\n              </Tab>\n              <Tab\n                data-testid=\"user-consents-tab\"\n                title={<TabTitleText>{t(\"consents\")}</TabTitleText>}\n                {...consentsTab}\n              >\n                <UserConsents />\n              </Tab>\n              {hasAccess(\"view-identity-providers\") && (\n                <Tab\n                  data-testid=\"identity-provider-links-tab\"\n                  title={\n                    <TabTitleText>{t(\"identityProviderLinks\")}</TabTitleText>\n                  }\n                  {...identityProviderLinksTab}\n                >\n                  <UserIdentityProviderLinks userId={user.id!} />\n                </Tab>\n              )}\n              <Tab\n                data-testid=\"user-sessions-tab\"\n                title={<TabTitleText>{t(\"sessions\")}</TabTitleText>}\n                {...sessionsTab}\n              >\n                <UserSessions />\n              </Tab>\n            </RoutableTabs>\n          </FormProvider>\n        </UserProfileProvider>\n      </PageSection>\n    </>\n  );\n};\n"],"names":["nativeMin","baseIntersection","arrays","iteratee","comparator","includes","arrayIncludesWith","arrayIncludes","length","othLength","othIndex","caches","maxLength","result","array","arrayMap","baseUnary","SetCache","index","seen","outer","value","computed","cacheHas","cache","castArrayLikeObject","isArrayLikeObject","intersectionBy","baseRest","last","mapped","baseIteratee","intersectionBy$1","mapTag","setTag","objectProto","hasOwnProperty","isEmpty","isArrayLike","isArray","isBuffer","isTypedArray","isArguments","tag","getTag","isPrototype","baseKeys","key","UserAttributes","user","defaultUser","t","useTranslation","adminClient","useAdminClient","addAlert","addError","useAlerts","setUser","useState","form","useForm","mode","config","useUserProfile","convertAttributes","arrayToKeyValue","attributes","filter","a","some","attribute","name","useEffect","setValue","save","attributeForm","Object","assign","keyValueToArray","users","update","id","AlertVariant","success","error","PageSection","PageSectionVariants","light","AttributesForm","access","manage","reset","UserConsents","selectedClient","setSelectedClient","formatDate","useFormatDate","setKey","useParams","alphabetize","consentsList","sortBy","client","clientId","toUpperCase","refresh","Date","getTime","loader","getConsents","listConsents","clientScopesRenderer","grantedClientScopes","ChipGroup","map","currentChip","Chip","toggleDeleteDialog","DeleteConfirm","useConfirmDialog","titleKey","messageKey","continueButtonLabel","continueButtonVariant","ButtonVariant","danger","onConfirm","revokeConsent","_Fragment","_jsx","KeycloakDataTable","displayKey","cellFormatters","emptyFormatter","transforms","cellWidth","cellRenderer","createDate","lastUpdatedDate","title","onRowClick","ListEmptyState","CubesIcon","credFormDefaultValues","password","passwordConfirmation","temporaryPassword","ResetPasswordDialog","isResetPassword","onClose","register","control","formState","isValid","errors","watch","handleSubmit","defaultValues","confirm","toggle","useToggle","toggleConfirmSaveModal","ConfirmSaveModal","username","saveUserPassword","resetPassword","credential","temporary","type","credentialLabel","getCredentials","find","c","updateCredentialLabel","credentialId","ConfirmDialogModal","Form","FormGroup","ValidatedOptions","default","PasswordInput","required","message","validate","toString","HelpItem","Controller","field","Switch","onChange","CredentialsResetActionMultiSelect","useFormContext","open","setOpen","requiredActions","setRequiredActions","useFetch","authenticationManagement","getRequiredActions","actions","Select","SelectVariant","typeaheadMulti","numChips","_","selectedValue","o","item","event","stopPropagation","alias","SelectOption","LifespanField","credResetFormDefaultValues","lifespan","TimeSelector","ResetCredentialDialog","userId","resetActionWatcher","useWatch","resetIsNotDisabled","sendCredentialsResetEmail","executeActionsEmail","ModalVariant","medium","FormProvider","InlineLabelEdit","isEditable","userLabel","_jsxs","KeycloakTextInput","Button","CheckIcon","TimesIcon","PencilAltIcon","CredentialDataDialog","credentialData","Modal","Table","TableVariant","compact","TableHeader","TableBody","CredentialRow","toggleDelete","children","showData","toggleShow","kebabOpen","toggleKebab","localeSort","useLocaleSort","rows","useMemo","JSON","parse","entries","stringify","keys","Td","Dropdown","DropdownPosition","right","KebabToggle","DropdownItem","FederatedCredentials","onSetPassword","credentialTypes","setCredentialTypes","getUserStorageCredentialTypes","TableComposable","Thead","Tr","Th","Tbody","FederatedUserLink","KeycloakSpinner","UserCredentials","isOpen","setIsOpen","openCredentialReset","setOpenCredentialReset","userCredentials","setUserCredentials","groupedUserCredentials","setGroupedUserCredentials","selectedCredential","setSelectedCredential","setIsResetPassword","isUserLabelEdit","setIsUserLabelEdit","bodyRef","useRef","state","setState","draggedItemId","draggingToItemIndex","dragging","tempItemOrder","credentials","groupedCredentials","reduce","r","push","create","groupedCredentialsArray","groupedCredential","isExpanded","passwordTypeFinder","toggleModal","toggleCredentialsResetModal","deleteCredential","Row","status","rowKey","itemOrder","flatMap","onDragStart","evt","dataTransfer","effectAllowed","setData","currentTarget","classList","add","styles","modifiers","ghostRow","setAttribute","moveItem","items","targetItem","toIndex","fromIndex","indexOf","splice","move","current","ulNode","nodes","Array","from","every","i","replaceChildren","forEach","itemId","appendChild","onDragCancel","el","remove","onDragLeave","isValidDrop","ulRect","getBoundingClientRect","clientX","x","width","clientY","y","height","onDrop","onDragOver","preventDefault","curListItem","target","closest","contains","dragId","findIndex","onDragEnd","HTMLTableRowElement","onDragFinish","dragged","newOrder","oldIndex","newIndex","times","ids","split","Math","abs","moveCredentialPositionDown","newPreviousCredentialId","moveCredentialPositionUp","undefined","Divider","email","rowIndex","Fragment","onToggle","federationLink","origin","text","onClick","link","UserGroups","selectedGroups","setSelectedGroups","search","setSearch","isDirectMembership","setDirectMembership","directMembershipList","setDirectMembershipList","enabled","useHelp","hasAccess","useAccess","isManager","groupsList","group","path","first","max","params","searchParam","joinedUserGroups","listGroups","allCreatedGroups","groups","getAllPaths","acc","cur","parentGroupNames","allGroupMembership","slicedGroups","rootLevelGroups","allPaths","getAllSubgroupPaths","f","context","e","prop","arr","subGroups","allSubgroups","concat","paths","substring","topLevelGroups","subgroupArray","directMembership","filterDupesfromGroups","thing","self","AliasRenderer","count","groupname","Promise","all","delFromGroup","groupId","leave","LeaveButtonRenderer","manageGroupMembership","addGroups","addToGroup","Path","GroupPath","GroupPickerDialog","ok","Checkbox","Popover","QuestionCircleIcon","UserIdpModal","federatedId","onRefresh","onSubmit","federatedIdentity","addToFederatedIdentity","federatedIdentityId","small","provider","capitalize","userName","UserIdentityProviderLinks","setFederatedId","isLinkIdPModalOpen","setIsLinkIdPModalOpen","realm","useRealm","identityProviders","useServerInfo","getFederatedIdentities","allProviders","allFedIds","listFederatedIdentities","element","providerId","identityProvider","getAvailableIdPs","realms","findOne","linkedIdPsLoader","availableIdPsLoader","linkedNames","toggleUnlinkDialog","UnlinkConfirm","primary","delFromFederatedIdentity","idpLinkRenderer","idp","Link","toIdentityProvider","tab","badgeRenderer1","groupName","Label","badgeRenderer2","unlinkRenderer","fedIdentity","linkRenderer","FormPanel","TextContent","Text","upperCaseFormatter","UserRoleMapping","RoleMapping","realmRoles","row","role","flat","addRealmRoleMappings","roles","addClientRoleMappings","clientUniqueId","assignRoles","UserSessions","SessionsTable","listSessions","EditUser","bruteForced","setBruteForced","refreshCount","setRefreshCount","currentRealm","attackDetection","Error","isBruteForceProtected","bruteForceProtected","isLocked","disabled","EditUserForm","navigate","useNavigate","userForm","toTab","toUser","useTab","useRoutableTab","settingsTab","attributesTab","credentialsTab","roleMappingTab","groupsTab","consentsTab","identityProviderLinksTab","sessionsTab","formUser","trim","isUserProfileError","userProfileErrorToString","del","toUsers","toggleImpersonateDialog","ImpersonateConfirm","data","impersonation","sameRealm","window","location","redirect","ViewHeader","impersonate","UserProfileProvider","RoutableTabs","Tab","TabTitleText","UserForm","mapRoles"],"mappings":"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"}