{"version":3,"file":"GroupsSection.fb2aef26.js","sources":["../../../../node_modules/@patternfly/react-core/dist/esm/components/TreeView/TreeViewList.js","../../../../node_modules/@patternfly/react-styles/css/components/TreeView/tree-view.mjs","../../../../node_modules/@patternfly/react-core/dist/esm/components/TreeView/TreeViewListItem.js","../../../../node_modules/@patternfly/react-core/dist/esm/components/TreeView/TreeViewRoot.js","../../../../node_modules/@patternfly/react-core/dist/esm/components/TreeView/TreeView.js","../../src/groups/GroupsModal.tsx","../../src/groups/groupIdUtils.ts","../../src/groups/components/DeleteGroup.tsx","../../src/groups/components/GroupToolbar.tsx","../../src/groups/components/MoveDialog.tsx","../../src/groups/GroupTable.tsx","../../src/groups/MembersModal.tsx","../../src/groups/Members.tsx","../../src/groups/GroupAttributes.tsx","../../src/groups/GroupRoleMapping.tsx","../../src/groups/components/GroupTree.tsx","../../src/components/bread-crumb/GroupBreadCrumbs.tsx","../../src/groups/GroupsSection.tsx"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { Divider } from '../Divider';\nexport const TreeViewList = (_a) => {\n    var { isNested = false, toolbar, children } = _a, props = __rest(_a, [\"isNested\", \"toolbar\", \"children\"]);\n    return (React.createElement(React.Fragment, null,\n        toolbar && (React.createElement(React.Fragment, null,\n            toolbar,\n            React.createElement(Divider, null))),\n        React.createElement(\"ul\", Object.assign({ className: css('pf-c-tree-view__list'), role: isNested ? 'group' : 'tree' }, props), children)));\n};\nTreeViewList.displayName = 'TreeViewList';\n//# sourceMappingURL=TreeViewList.js.map","import './tree-view.css';\nexport default {\n  \"badge\": \"pf-c-badge\",\n  \"modifiers\": {\n    \"compact\": \"pf-m-compact\",\n    \"guides\": \"pf-m-guides\",\n    \"expanded\": \"pf-m-expanded\",\n    \"noBackground\": \"pf-m-no-background\",\n    \"current\": \"pf-m-current\",\n    \"read\": \"pf-m-read\",\n    \"selectable\": \"pf-m-selectable\",\n    \"truncate\": \"pf-m-truncate\"\n  },\n  \"themeDark\": \"pf-theme-dark\",\n  \"treeView\": \"pf-c-tree-view\",\n  \"treeViewAction\": \"pf-c-tree-view__action\",\n  \"treeViewContent\": \"pf-c-tree-view__content\",\n  \"treeViewListItem\": \"pf-c-tree-view__list-item\",\n  \"treeViewNode\": \"pf-c-tree-view__node\",\n  \"treeViewNodeCheck\": \"pf-c-tree-view__node-check\",\n  \"treeViewNodeContainer\": \"pf-c-tree-view__node-container\",\n  \"treeViewNodeContent\": \"pf-c-tree-view__node-content\",\n  \"treeViewNodeCount\": \"pf-c-tree-view__node-count\",\n  \"treeViewNodeIcon\": \"pf-c-tree-view__node-icon\",\n  \"treeViewNodeText\": \"pf-c-tree-view__node-text\",\n  \"treeViewNodeTitle\": \"pf-c-tree-view__node-title\",\n  \"treeViewNodeToggle\": \"pf-c-tree-view__node-toggle\",\n  \"treeViewNodeToggleIcon\": \"pf-c-tree-view__node-toggle-icon\",\n  \"treeViewSearch\": \"pf-c-tree-view__search\"\n};","import React, { useState, useEffect } from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/TreeView/tree-view';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { Badge } from '../Badge';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nconst TreeViewListItemBase = ({ name, title, id, isExpanded, defaultExpanded = false, children = null, onSelect, onCheck, hasCheck = false, checkProps = {\n    checked: false\n}, hasBadge = false, customBadgeContent, badgeProps = { isRead: true }, isSelectable = false, isCompact, activeItems = [], itemData, parentItem, icon, expandedIcon, action, compareItems, \n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nuseMemo }) => {\n    const [internalIsExpanded, setIsExpanded] = useState(defaultExpanded);\n    useEffect(() => {\n        if (isExpanded !== undefined && isExpanded !== null) {\n            setIsExpanded(isExpanded);\n        }\n        else if (defaultExpanded !== undefined && defaultExpanded !== null) {\n            setIsExpanded(internalIsExpanded || defaultExpanded);\n        }\n    }, [isExpanded, defaultExpanded]);\n    let Component = 'button';\n    if (hasCheck) {\n        Component = 'label';\n    }\n    else if (isSelectable) {\n        Component = 'div';\n    }\n    const ToggleComponent = hasCheck || isSelectable ? 'button' : 'span';\n    const renderToggle = (randomId) => (React.createElement(ToggleComponent, Object.assign({ className: css(styles.treeViewNodeToggle), onClick: (evt) => {\n            if (isSelectable || hasCheck) {\n                setIsExpanded(!internalIsExpanded);\n            }\n            if (isSelectable) {\n                evt.stopPropagation();\n            }\n        } }, ((hasCheck || isSelectable) && { 'aria-labelledby': `label-${randomId}` }), { tabIndex: -1 }),\n        React.createElement(\"span\", { className: css(styles.treeViewNodeToggleIcon) },\n            React.createElement(AngleRightIcon, { \"aria-hidden\": \"true\" }))));\n    const renderCheck = (randomId) => (React.createElement(\"span\", { className: css(styles.treeViewNodeCheck) },\n        React.createElement(\"input\", Object.assign({ type: \"checkbox\", onChange: evt => onCheck && onCheck(evt, itemData, parentItem), onClick: evt => evt.stopPropagation(), ref: elem => elem && (elem.indeterminate = checkProps.checked === null) }, checkProps, { checked: checkProps.checked === null ? false : checkProps.checked, id: randomId, tabIndex: -1 }))));\n    const iconRendered = (React.createElement(\"span\", { className: css(styles.treeViewNodeIcon) },\n        !internalIsExpanded && icon,\n        internalIsExpanded && (expandedIcon || icon)));\n    const renderNodeContent = () => {\n        const content = (React.createElement(React.Fragment, null,\n            isCompact && title && React.createElement(\"span\", { className: css(styles.treeViewNodeTitle) }, title),\n            isSelectable ? (React.createElement(\"button\", { tabIndex: -1, className: css(styles.treeViewNodeText) }, name)) : (React.createElement(\"span\", { className: css(styles.treeViewNodeText) }, name))));\n        return isCompact ? React.createElement(\"span\", { className: css(styles.treeViewNodeContent) }, content) : content;\n    };\n    const badgeRendered = (React.createElement(React.Fragment, null,\n        hasBadge && children && (React.createElement(\"span\", { className: css(styles.treeViewNodeCount) },\n            React.createElement(Badge, Object.assign({}, badgeProps), customBadgeContent ? customBadgeContent : children.props.data.length))),\n        hasBadge && !children && customBadgeContent !== undefined && (React.createElement(\"span\", { className: css(styles.treeViewNodeCount) },\n            React.createElement(Badge, Object.assign({}, badgeProps), customBadgeContent)))));\n    return (React.createElement(\"li\", Object.assign({ id: id, className: css(styles.treeViewListItem, internalIsExpanded && styles.modifiers.expanded) }, (internalIsExpanded && { 'aria-expanded': 'true' }), { role: \"treeitem\", tabIndex: -1 }),\n        React.createElement(\"div\", { className: css(styles.treeViewContent) },\n            React.createElement(GenerateId, { prefix: isSelectable ? 'selectable-id' : 'checkbox-id' }, randomId => (React.createElement(Component, Object.assign({ className: css(styles.treeViewNode, children && (isSelectable || hasCheck) && styles.modifiers.selectable, (!children || isSelectable) &&\n                    activeItems &&\n                    activeItems.length > 0 &&\n                    activeItems.some(item => compareItems && item && compareItems(item, itemData))\n                    ? styles.modifiers.current\n                    : ''), onClick: (evt) => {\n                    if (!hasCheck) {\n                        onSelect && onSelect(evt, itemData, parentItem);\n                        if (!isSelectable && children && evt.isDefaultPrevented() !== true) {\n                            setIsExpanded(!internalIsExpanded);\n                        }\n                    }\n                } }, (hasCheck && { htmlFor: randomId }), ((hasCheck || (isSelectable && children)) && { id: `label-${randomId}` })),\n                React.createElement(\"span\", { className: css(styles.treeViewNodeContainer) },\n                    children && renderToggle(randomId),\n                    hasCheck && renderCheck(randomId),\n                    icon && iconRendered,\n                    renderNodeContent(),\n                    badgeRendered)))),\n            action && React.createElement(\"div\", { className: css(styles.treeViewAction) }, action)),\n        internalIsExpanded && children));\n};\nexport const TreeViewListItem = React.memo(TreeViewListItemBase, (prevProps, nextProps) => {\n    if (!nextProps.useMemo) {\n        return false;\n    }\n    const prevIncludes = prevProps.activeItems &&\n        prevProps.activeItems.length > 0 &&\n        prevProps.activeItems.some(item => prevProps.compareItems && item && prevProps.compareItems(item, prevProps.itemData));\n    const nextIncludes = nextProps.activeItems &&\n        nextProps.activeItems.length > 0 &&\n        nextProps.activeItems.some(item => nextProps.compareItems && item && nextProps.compareItems(item, nextProps.itemData));\n    if (prevIncludes || nextIncludes) {\n        return false;\n    }\n    if (prevProps.name !== nextProps.name ||\n        prevProps.title !== nextProps.title ||\n        prevProps.id !== nextProps.id ||\n        prevProps.isExpanded !== nextProps.isExpanded ||\n        prevProps.defaultExpanded !== nextProps.defaultExpanded ||\n        prevProps.onSelect !== nextProps.onSelect ||\n        prevProps.onCheck !== nextProps.onCheck ||\n        prevProps.hasCheck !== nextProps.hasCheck ||\n        prevProps.checkProps !== nextProps.checkProps ||\n        prevProps.hasBadge !== nextProps.hasBadge ||\n        prevProps.customBadgeContent !== nextProps.customBadgeContent ||\n        prevProps.badgeProps !== nextProps.badgeProps ||\n        prevProps.isCompact !== nextProps.isCompact ||\n        prevProps.icon !== nextProps.icon ||\n        prevProps.expandedIcon !== nextProps.expandedIcon ||\n        prevProps.action !== nextProps.action ||\n        prevProps.parentItem !== nextProps.parentItem ||\n        prevProps.itemData !== nextProps.itemData) {\n        return false;\n    }\n    return true;\n});\nTreeViewListItem.displayName = 'TreeViewListItem';\n//# sourceMappingURL=TreeViewListItem.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/TreeView/tree-view';\nimport { canUseDOM } from '../../helpers/util';\nimport { handleArrows } from '../../helpers';\nimport { KeyTypes } from '../../helpers/constants';\nexport class TreeViewRoot extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.displayName = 'TreeViewRoot';\n        this.treeRef = React.createRef();\n        this.handleKeys = (event) => {\n            var _a, _b, _c, _d, _e, _f, _g;\n            if (!this.treeRef.current.contains(event.target)) {\n                return;\n            }\n            const activeElement = document.activeElement;\n            const key = event.key;\n            const treeItems = Array.from((_a = this.treeRef.current) === null || _a === void 0 ? void 0 : _a.getElementsByClassName('pf-c-tree-view__node')).filter(el => !el.classList.contains('pf-m-disabled'));\n            if (key === KeyTypes.Space) {\n                activeElement.click();\n                event.preventDefault();\n            }\n            handleArrows(event, treeItems, (element) => activeElement === element, undefined, [], undefined, true, true);\n            if (['ArrowLeft', 'ArrowRight'].includes(key)) {\n                const isExpandable = (_c = (_b = activeElement === null || activeElement === void 0 ? void 0 : activeElement.firstElementChild) === null || _b === void 0 ? void 0 : _b.firstElementChild) === null || _c === void 0 ? void 0 : _c.classList.contains('pf-c-tree-view__node-toggle');\n                const isExpanded = (_d = activeElement === null || activeElement === void 0 ? void 0 : activeElement.closest('li')) === null || _d === void 0 ? void 0 : _d.classList.contains('pf-m-expanded');\n                if (key === 'ArrowLeft') {\n                    if (isExpandable && isExpanded) {\n                        activeElement.click();\n                    }\n                    else {\n                        const parentList = (_e = activeElement === null || activeElement === void 0 ? void 0 : activeElement.closest('ul')) === null || _e === void 0 ? void 0 : _e.parentElement;\n                        if ((parentList === null || parentList === void 0 ? void 0 : parentList.tagName) !== 'DIV') {\n                            const parentButton = parentList === null || parentList === void 0 ? void 0 : parentList.querySelector('button');\n                            activeElement.tabIndex = -1;\n                            if (parentButton) {\n                                parentButton.tabIndex = 0;\n                                parentButton.focus();\n                            }\n                        }\n                    }\n                }\n                else {\n                    if (isExpandable && !isExpanded) {\n                        activeElement.tabIndex = -1;\n                        activeElement.click();\n                        const childElement = (_g = (_f = activeElement === null || activeElement === void 0 ? void 0 : activeElement.closest('li')) === null || _f === void 0 ? void 0 : _f.querySelector('ul > li')) === null || _g === void 0 ? void 0 : _g.querySelector('button');\n                        if (childElement) {\n                            childElement.tabIndex = 0;\n                            childElement.focus();\n                        }\n                    }\n                }\n                event.preventDefault();\n            }\n        };\n        this.handleKeysCheckbox = (event) => {\n            var _a, _b, _c, _d, _e;\n            if (!this.treeRef.current.contains(event.target)) {\n                return;\n            }\n            const activeElement = document.activeElement;\n            const key = event.key;\n            if (key === KeyTypes.Space) {\n                activeElement.click();\n                event.preventDefault();\n            }\n            const treeNodes = Array.from((_a = this.treeRef.current) === null || _a === void 0 ? void 0 : _a.getElementsByClassName('pf-c-tree-view__node'));\n            handleArrows(event, treeNodes, (element) => element.contains(activeElement), (element) => element.querySelector('button,input'), [], undefined, true, true);\n            if (['ArrowLeft', 'ArrowRight'].includes(key)) {\n                if (key === 'ArrowLeft') {\n                    if ((activeElement === null || activeElement === void 0 ? void 0 : activeElement.tagName) === 'INPUT') {\n                        ((_b = activeElement === null || activeElement === void 0 ? void 0 : activeElement.parentElement) === null || _b === void 0 ? void 0 : _b.previousSibling) &&\n                            activeElement.parentElement.previousSibling.focus();\n                    }\n                    else if (activeElement === null || activeElement === void 0 ? void 0 : activeElement.previousSibling) {\n                        if (((_c = activeElement.previousElementSibling) === null || _c === void 0 ? void 0 : _c.tagName) === 'SPAN') {\n                            activeElement.previousSibling.firstChild.focus();\n                        }\n                        else {\n                            activeElement.previousSibling.focus();\n                        }\n                    }\n                }\n                else {\n                    if ((activeElement === null || activeElement === void 0 ? void 0 : activeElement.tagName) === 'INPUT') {\n                        ((_d = activeElement.parentElement) === null || _d === void 0 ? void 0 : _d.nextSibling) && activeElement.parentElement.nextSibling.focus();\n                    }\n                    else if (activeElement === null || activeElement === void 0 ? void 0 : activeElement.nextSibling) {\n                        if (((_e = activeElement.nextElementSibling) === null || _e === void 0 ? void 0 : _e.tagName) === 'SPAN') {\n                            activeElement.nextSibling.firstChild.focus();\n                        }\n                        else {\n                            activeElement.nextSibling.focus();\n                        }\n                    }\n                }\n                event.preventDefault();\n            }\n        };\n        this.variantStyleModifiers = {\n            default: '',\n            compact: styles.modifiers.compact,\n            compactNoBackground: [styles.modifiers.compact, styles.modifiers.noBackground]\n        };\n    }\n    componentDidMount() {\n        var _a;\n        if (canUseDOM) {\n            window.addEventListener('keydown', this.props.hasChecks || this.props.hasSelectableNodes ? this.handleKeysCheckbox : this.handleKeys);\n        }\n        if (this.props.hasChecks || this.props.hasSelectableNodes) {\n            const firstToggle = this.treeRef.current.getElementsByClassName('pf-c-tree-view__node-toggle')[0];\n            if (firstToggle) {\n                firstToggle.tabIndex = 0;\n            }\n            if (this.props.hasChecks) {\n                const firstInput = this.treeRef.current.getElementsByTagName('INPUT')[0];\n                if (firstInput) {\n                    firstInput.tabIndex = 0;\n                }\n            }\n            if (this.props.hasSelectableNodes) {\n                const firstTextButton = this.treeRef.current.getElementsByClassName('pf-c-tree-view__node-text')[0];\n                if (firstTextButton) {\n                    firstTextButton.tabIndex = 0;\n                }\n            }\n        }\n        else {\n            ((_a = this.treeRef.current) === null || _a === void 0 ? void 0 : _a.getElementsByClassName('pf-c-tree-view__node')[0]).tabIndex = 0;\n        }\n    }\n    componentWillUnmount() {\n        if (canUseDOM) {\n            window.removeEventListener('keydown', this.props.hasChecks || this.props.hasSelectableNodes ? this.handleKeysCheckbox : this.handleKeys);\n        }\n    }\n    render() {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const _a = this.props, { children, hasChecks, hasGuides, variant, className, hasSelectableNodes } = _a, props = __rest(_a, [\"children\", \"hasChecks\", \"hasGuides\", \"variant\", \"className\", \"hasSelectableNodes\"]);\n        return (React.createElement(\"div\", Object.assign({ className: css(styles.treeView, hasGuides && styles.modifiers.guides, this.variantStyleModifiers[variant], className), ref: this.treeRef }, props), children));\n    }\n}\n//# sourceMappingURL=TreeViewRoot.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { TreeViewList } from './TreeViewList';\nimport { TreeViewListItem } from './TreeViewListItem';\nimport { TreeViewRoot } from './TreeViewRoot';\nexport const TreeView = (_a) => {\n    var { data, isNested = false, hasChecks = false, hasBadges = false, hasGuides = false, hasSelectableNodes = false, variant = 'default', defaultAllExpanded = false, allExpanded, icon, expandedIcon, parentItem, onSelect, onCheck, toolbar, activeItems, compareItems = (item, itemToCheck) => item.id === itemToCheck.id, className, useMemo } = _a, props = __rest(_a, [\"data\", \"isNested\", \"hasChecks\", \"hasBadges\", \"hasGuides\", \"hasSelectableNodes\", \"variant\", \"defaultAllExpanded\", \"allExpanded\", \"icon\", \"expandedIcon\", \"parentItem\", \"onSelect\", \"onCheck\", \"toolbar\", \"activeItems\", \"compareItems\", \"className\", \"useMemo\"]);\n    const treeViewList = (React.createElement(TreeViewList, { isNested: isNested, toolbar: toolbar }, data.map(item => {\n        var _a, _b;\n        return (React.createElement(TreeViewListItem, Object.assign({ key: ((_a = item.id) === null || _a === void 0 ? void 0 : _a.toString()) || ((_b = item.name) === null || _b === void 0 ? void 0 : _b.toString()), name: item.name, title: item.title, id: item.id, isExpanded: allExpanded, isSelectable: hasSelectableNodes, defaultExpanded: item.defaultExpanded !== undefined ? item.defaultExpanded : defaultAllExpanded, onSelect: onSelect, onCheck: onCheck, hasCheck: item.hasCheck !== undefined ? item.hasCheck : hasChecks, checkProps: item.checkProps, hasBadge: item.hasBadge !== undefined ? item.hasBadge : hasBadges, customBadgeContent: item.customBadgeContent, badgeProps: item.badgeProps, activeItems: activeItems, parentItem: parentItem, itemData: item, icon: item.icon !== undefined ? item.icon : icon, expandedIcon: item.expandedIcon !== undefined ? item.expandedIcon : expandedIcon, action: item.action, compareItems: compareItems, isCompact: variant === 'compact' || variant === 'compactNoBackground', useMemo: useMemo }, (item.children && {\n            children: (React.createElement(TreeView, { data: item.children, isNested: true, parentItem: item, hasChecks: hasChecks, hasBadges: hasBadges, hasGuides: hasGuides, hasSelectableNodes: hasSelectableNodes, variant: variant, allExpanded: allExpanded, defaultAllExpanded: defaultAllExpanded, onSelect: onSelect, onCheck: onCheck, activeItems: activeItems, icon: icon, expandedIcon: expandedIcon }))\n        }))));\n    })));\n    return (React.createElement(React.Fragment, null, parentItem ? (treeViewList) : (React.createElement(TreeViewRoot, Object.assign({ hasSelectableNodes: hasSelectableNodes, hasChecks: hasChecks, hasGuides: hasGuides, variant: variant, className: className }, props), treeViewList))));\n};\nTreeView.displayName = 'TreeView';\n//# sourceMappingURL=TreeView.js.map","import {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { useForm } from \"react-hook-form\";\n\nimport type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { KeycloakTextInput } from \"../components/keycloak-text-input/KeycloakTextInput\";\n\ntype GroupsModalProps = {\n  id?: string;\n  rename?: string;\n  handleModalToggle: () => void;\n  refresh: (group?: GroupRepresentation) => void;\n};\n\nexport const GroupsModal = ({\n  id,\n  rename,\n  handleModalToggle,\n  refresh,\n}: GroupsModalProps) => {\n  const { t } = useTranslation(\"groups\");\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({\n    defaultValues: { name: rename },\n  });\n\n  const submitForm = async (group: GroupRepresentation) => {\n    group.name = group.name?.trim();\n\n    try {\n      if (!id) {\n        await adminClient.groups.create(group);\n      } else if (rename) {\n        await adminClient.groups.update({ id }, group);\n      } else {\n        await adminClient.groups.setOrCreateChild({ id }, group);\n      }\n\n      refresh(rename ? group : undefined);\n      handleModalToggle();\n      addAlert(\n        t(rename ? \"groupUpdated\" : \"groupCreated\"),\n        AlertVariant.success\n      );\n    } catch (error) {\n      addError(\"groups:couldNotCreateGroup\", error);\n    }\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title={t(rename ? \"renameAGroup\" : \"createAGroup\")}\n      isOpen={true}\n      onClose={handleModalToggle}\n      actions={[\n        <Button\n          data-testid={`${rename ? \"rename\" : \"create\"}Group`}\n          key=\"confirm\"\n          variant=\"primary\"\n          type=\"submit\"\n          form=\"group-form\"\n        >\n          {t(rename ? \"rename\" : \"create\")}\n        </Button>,\n        <Button\n          id=\"modal-cancel\"\n          data-testid=\"cancel\"\n          key=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={() => {\n            handleModalToggle();\n          }}\n        >\n          {t(\"common:cancel\")}\n        </Button>,\n      ]}\n    >\n      <Form id=\"group-form\" isHorizontal onSubmit={handleSubmit(submitForm)}>\n        <FormGroup\n          name=\"create-modal-group\"\n          label={t(\"common:name\")}\n          fieldId=\"create-group-name\"\n          helperTextInvalid={t(\"common:required\")}\n          validated={\n            errors.name ? ValidatedOptions.error : ValidatedOptions.default\n          }\n          isRequired\n        >\n          <KeycloakTextInput\n            data-testid=\"groupNameInput\"\n            autoFocus\n            id=\"create-group-name\"\n            validated={\n              errors.name ? ValidatedOptions.error : ValidatedOptions.default\n            }\n            {...register(\"name\", { required: true })}\n          />\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n","export const getId = (pathname: string) => {\n  const pathParts = pathname.substr(1).split(\"/\");\n  return pathParts.length > 1 ? pathParts.splice(2) : undefined;\n};\n\nexport const getLastId = (pathname: string) => {\n  const pathParts = getId(pathname);\n  return pathParts ? pathParts[pathParts.length - 1] : undefined;\n};\n","import { useTranslation } from \"react-i18next\";\nimport { ButtonVariant } from \"@patternfly/react-core\";\n\nimport type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport { ConfirmDialogModal } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\n\ntype DeleteConfirmProps = {\n  selectedRows: GroupRepresentation[];\n  show: boolean;\n  toggleDialog: () => void;\n  refresh: () => void;\n};\n\nexport const DeleteGroup = ({\n  selectedRows,\n  show,\n  toggleDialog,\n  refresh,\n}: DeleteConfirmProps) => {\n  const { t } = useTranslation(\"groups\");\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  const multiDelete = async () => {\n    try {\n      for (const group of selectedRows) {\n        await adminClient.groups.del({\n          id: group.id!,\n        });\n      }\n      refresh();\n      addAlert(t(\"groupDeleted\", { count: selectedRows.length }));\n    } catch (error) {\n      addError(\"groups:groupDeleteError\", error);\n    }\n  };\n\n  return (\n    <ConfirmDialogModal\n      titleKey={t(\"deleteConfirmTitle\", { count: selectedRows.length })}\n      messageKey={t(\"deleteConfirm\", {\n        count: selectedRows.length,\n        groupName: selectedRows[0]?.name,\n      })}\n      continueButtonLabel=\"common:delete\"\n      continueButtonVariant={ButtonVariant.danger}\n      onConfirm={multiDelete}\n      open={show}\n      toggleDialog={toggleDialog}\n    />\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport {\n  Button,\n  Dropdown,\n  DropdownItem,\n  KebabToggle,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\n\nimport { useSubGroups } from \"../SubGroupsContext\";\nimport { useAccess } from \"../../context/access/Access\";\nimport useToggle from \"../../utils/useToggle\";\n\ntype GroupToolbarProps = {\n  toggleCreate: () => void;\n  toggleDelete: () => void;\n  kebabDisabled: boolean;\n};\n\nexport const GroupToolbar = ({\n  toggleCreate,\n  toggleDelete,\n  kebabDisabled,\n}: GroupToolbarProps) => {\n  const { t } = useTranslation(\"groups\");\n  const { currentGroup } = useSubGroups();\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-users\") || currentGroup()?.access?.manage;\n\n  const [openKebab, toggleKebab] = useToggle();\n\n  if (!isManager) return <div />;\n\n  return (\n    <>\n      <ToolbarItem>\n        <Button\n          data-testid=\"openCreateGroupModal\"\n          variant=\"primary\"\n          onClick={toggleCreate}\n        >\n          {t(\"createGroup\")}\n        </Button>\n      </ToolbarItem>\n      <ToolbarItem>\n        <Dropdown\n          toggle={\n            <KebabToggle onToggle={toggleKebab} isDisabled={kebabDisabled} />\n          }\n          isOpen={openKebab}\n          isPlain\n          dropdownItems={[\n            <DropdownItem\n              key=\"action\"\n              component=\"button\"\n              onClick={() => {\n                toggleDelete();\n                toggleKebab();\n              }}\n            >\n              {t(\"common:delete\")}\n            </DropdownItem>,\n          ]}\n        />\n      </ToolbarItem>\n    </>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\n\nimport type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport type KeycloakAdminClient from \"@keycloak/keycloak-admin-client\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { GroupPickerDialog } from \"../../components/group/GroupPickerDialog\";\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\n\ntype MoveDialogProps = {\n  source: GroupRepresentation;\n  onClose: () => void;\n  refresh: () => void;\n};\n\nconst moveToRoot = async (\n  adminClient: KeycloakAdminClient,\n  source: GroupRepresentation\n) => {\n  await adminClient.groups.del({ id: source.id! });\n  const { id } = await adminClient.groups.create({\n    ...source,\n    id: undefined,\n  });\n  if (source.subGroups) {\n    await Promise.all(\n      source.subGroups.map((s) =>\n        adminClient.groups.setOrCreateChild(\n          { id: id! },\n          {\n            ...s,\n            id: undefined,\n          }\n        )\n      )\n    );\n  }\n};\n\nconst moveToGroup = async (\n  adminClient: KeycloakAdminClient,\n  source: GroupRepresentation,\n  dest: GroupRepresentation\n) => {\n  try {\n    await adminClient.groups.setOrCreateChild({ id: dest.id! }, source);\n  } catch (error: any) {\n    if (error.response) {\n      throw error;\n    }\n  }\n};\n\nexport const MoveDialog = ({ source, onClose, refresh }: MoveDialogProps) => {\n  const { t } = useTranslation(\"groups\");\n\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  const moveGroup = async (group?: GroupRepresentation[]) => {\n    try {\n      await (group\n        ? moveToGroup(adminClient, source, group[0])\n        : moveToRoot(adminClient, source));\n      refresh();\n      addAlert(t(\"moveGroupSuccess\"));\n    } catch (error) {\n      addError(\"groups:moveGroupError\", error);\n    }\n  };\n\n  return (\n    <GroupPickerDialog\n      type=\"selectOne\"\n      filterGroups={[source]}\n      text={{\n        title: \"groups:moveToGroup\",\n        ok: \"groups:moveHere\",\n      }}\n      onClose={onClose}\n      onConfirm={moveGroup}\n    />\n  );\n};\n","import { useState } from \"react\";\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { SearchInput, ToolbarItem } from \"@patternfly/react-core\";\n\nimport type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport { fetchAdminUI } from \"../context/auth/admin-ui-endpoint\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { KeycloakDataTable } from \"../components/table-toolbar/KeycloakDataTable\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport { GroupsModal } from \"./GroupsModal\";\nimport { getLastId } from \"./groupIdUtils\";\nimport { useSubGroups } from \"./SubGroupsContext\";\nimport { toGroups } from \"./routes/Groups\";\nimport { useAccess } from \"../context/access/Access\";\nimport useToggle from \"../utils/useToggle\";\nimport { DeleteGroup } from \"./components/DeleteGroup\";\nimport { GroupToolbar } from \"./components/GroupToolbar\";\nimport { MoveDialog } from \"./components/MoveDialog\";\n\ntype GroupTableProps = {\n  refresh: () => void;\n};\n\nexport const GroupTable = ({ refresh: viewRefresh }: GroupTableProps) => {\n  const { t } = useTranslation(\"groups\");\n\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n  const [selectedRows, setSelectedRows] = useState<GroupRepresentation[]>([]);\n\n  const [rename, setRename] = useState<GroupRepresentation>();\n  const [isCreateModalOpen, toggleCreateOpen] = useToggle();\n  const [showDelete, toggleShowDelete] = useToggle();\n  const [move, setMove] = useState<GroupRepresentation>();\n\n  const { subGroups, currentGroup, setSubGroups } = useSubGroups();\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n  const [search, setSearch] = useState<string>();\n\n  const navigate = useNavigate();\n  const location = useLocation();\n  const id = getLastId(location.pathname);\n\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-users\") || currentGroup()?.access?.manage;\n  const canView =\n    hasAccess(\"query-groups\", \"view-users\") ||\n    hasAccess(\"manage-users\", \"query-groups\");\n\n  const loader = async (first?: number, max?: number) => {\n    const params: Record<string, string> = {\n      search: search || \"\",\n      first: first?.toString() || \"\",\n      max: max?.toString() || \"\",\n    };\n\n    let groupsData = undefined;\n    if (id) {\n      const group = await adminClient.groups.findOne({ id });\n      if (!group) {\n        throw new Error(t(\"common:notFound\"));\n      }\n\n      groupsData = !search\n        ? group.subGroups\n        : group.subGroups?.filter((g) => g.name?.includes(search));\n    } else {\n      groupsData = await fetchAdminUI<GroupRepresentation[]>(\n        adminClient,\n        \"ui-ext/groups\",\n        {\n          ...params,\n          global: \"false\",\n        }\n      );\n    }\n\n    if (!groupsData) {\n      navigate(toGroups({ realm }));\n    }\n\n    return groupsData || [];\n  };\n\n  const GroupNameCell = (group: GroupRepresentation) => {\n    if (!canView) return <span>{group.name}</span>;\n\n    return (\n      <Link\n        key={group.id}\n        to={`${location.pathname}/${group.id}`}\n        onClick={() => setSubGroups([...subGroups, group])}\n      >\n        {group.name}\n      </Link>\n    );\n  };\n\n  return (\n    <>\n      <DeleteGroup\n        show={showDelete}\n        toggleDialog={toggleShowDelete}\n        selectedRows={selectedRows}\n        refresh={() => {\n          refresh();\n          viewRefresh();\n          setSelectedRows([]);\n        }}\n      />\n      {rename && (\n        <GroupsModal\n          id={rename.id}\n          rename={rename.name}\n          refresh={() => {\n            refresh();\n            viewRefresh();\n          }}\n          handleModalToggle={() => setRename(undefined)}\n        />\n      )}\n      {isCreateModalOpen && (\n        <GroupsModal\n          id={selectedRows[0]?.id || id}\n          handleModalToggle={toggleCreateOpen}\n          refresh={() => {\n            setSelectedRows([]);\n            refresh();\n            viewRefresh();\n          }}\n        />\n      )}\n      {move && (\n        <MoveDialog\n          source={move}\n          refresh={() => {\n            setMove(undefined);\n            refresh();\n            viewRefresh();\n          }}\n          onClose={() => setMove(undefined)}\n        />\n      )}\n      <KeycloakDataTable\n        key={`${id}${key}`}\n        onSelect={(rows) => setSelectedRows([...rows])}\n        canSelectAll\n        loader={loader}\n        ariaLabelKey=\"groups:groups\"\n        isPaginated\n        isSearching={!!search}\n        toolbarItem={\n          <>\n            <ToolbarItem>\n              <SearchInput\n                data-testid=\"group-search\"\n                placeholder={t(\"filterGroups\")}\n                value={search}\n                onChange={(_, value) => {\n                  setSearch(value);\n                }}\n                onSearch={refresh}\n                onClear={() => {\n                  setSearch(\"\");\n                  refresh();\n                }}\n              />\n            </ToolbarItem>\n            <GroupToolbar\n              toggleCreate={toggleCreateOpen}\n              toggleDelete={toggleShowDelete}\n              kebabDisabled={selectedRows!.length === 0}\n            />\n          </>\n        }\n        actions={\n          !isManager\n            ? []\n            : [\n                {\n                  title: t(\"rename\"),\n                  onRowClick: async (group) => {\n                    setRename(group);\n                    return false;\n                  },\n                },\n                {\n                  title: t(\"moveTo\"),\n                  onRowClick: async (group) => {\n                    setMove(group);\n                    return false;\n                  },\n                },\n                {\n                  title: t(\"createChildGroup\"),\n                  onRowClick: async (group) => {\n                    setSelectedRows([group]);\n                    toggleCreateOpen();\n                    return false;\n                  },\n                },\n                {\n                  isSeparator: true,\n                },\n                {\n                  title: t(\"common:delete\"),\n                  onRowClick: async (group: GroupRepresentation) => {\n                    setSelectedRows([group]);\n                    toggleShowDelete();\n                    return true;\n                  },\n                },\n              ]\n        }\n        columns={[\n          {\n            name: \"name\",\n            displayKey: \"groups:groupName\",\n            cellRenderer: GroupNameCell,\n          },\n        ]}\n        emptyState={\n          <ListEmptyState\n            hasIcon={true}\n            message={t(`noGroupsInThis${id ? \"SubGroup\" : \"Realm\"}`)}\n            instructions={t(\n              `noGroupsInThis${id ? \"SubGroup\" : \"Realm\"}Instructions`\n            )}\n            primaryActionText={t(\"createGroup\")}\n            onPrimaryAction={toggleCreateOpen}\n          />\n        }\n      />\n    </>\n  );\n};\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  AlertVariant,\n  Button,\n  Modal,\n  ModalVariant,\n} from \"@patternfly/react-core\";\n\nimport type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { KeycloakDataTable } from \"../components/table-toolbar/KeycloakDataTable\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport { emptyFormatter } from \"../util\";\nimport { differenceBy } from \"lodash-es\";\n\ntype MemberModalProps = {\n  groupId: string;\n  onClose: () => void;\n};\n\nexport const MemberModal = ({ groupId, onClose }: MemberModalProps) => {\n  const { t } = useTranslation(\"groups\");\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const [selectedRows, setSelectedRows] = useState<UserRepresentation[]>([]);\n\n  const loader = async (first?: number, max?: number, search?: string) => {\n    const members = await adminClient.groups.listMembers({ id: groupId });\n    const params: { [name: string]: string | number } = {\n      first: first!,\n      max: max! + members.length,\n      search: search || \"\",\n    };\n\n    try {\n      const users = await adminClient.users.find({ ...params });\n      return differenceBy(users, members, \"id\").slice(0, max);\n    } catch (error) {\n      addError(\"groups:noUsersFoundError\", error);\n      return [];\n    }\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.large}\n      title={t(\"addMember\")}\n      isOpen={true}\n      onClose={onClose}\n      actions={[\n        <Button\n          data-testid=\"add\"\n          key=\"confirm\"\n          variant=\"primary\"\n          onClick={async () => {\n            try {\n              await Promise.all(\n                selectedRows.map((user) =>\n                  adminClient.users.addToGroup({ id: user.id!, groupId })\n                )\n              );\n              onClose();\n              addAlert(\n                t(\"usersAdded\", { count: selectedRows.length }),\n                AlertVariant.success\n              );\n            } catch (error) {\n              addError(\"groups:usersAddedError\", error);\n            }\n          }}\n        >\n          {t(\"common:add\")}\n        </Button>,\n        <Button\n          data-testid=\"cancel\"\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={onClose}\n        >\n          {t(\"common:cancel\")}\n        </Button>,\n      ]}\n    >\n      <KeycloakDataTable\n        loader={loader}\n        isPaginated\n        ariaLabelKey=\"users:title\"\n        searchPlaceholderKey=\"users:searchForUser\"\n        canSelectAll\n        onSelect={(rows) => setSelectedRows([...rows])}\n        emptyState={\n          <ListEmptyState\n            message={t(\"users:noUsersFound\")}\n            instructions={t(\"users:emptyInstructions\")}\n          />\n        }\n        columns={[\n          {\n            name: \"username\",\n            displayKey: \"users:username\",\n          },\n          {\n            name: \"email\",\n            displayKey: \"users:email\",\n          },\n          {\n            name: \"lastName\",\n            displayKey: \"users:lastName\",\n            cellFormatters: [emptyFormatter()],\n          },\n          {\n            name: \"firstName\",\n            displayKey: \"users:firstName\",\n            cellFormatters: [emptyFormatter()],\n          },\n        ]}\n      />\n    </Modal>\n  );\n};\n","import { useState } from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { uniqBy } from \"lodash-es\";\nimport {\n  AlertVariant,\n  Button,\n  Checkbox,\n  Dropdown,\n  DropdownItem,\n  KebabToggle,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\n\nimport type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport { KeycloakDataTable } from \"../components/table-toolbar/KeycloakDataTable\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { emptyFormatter } from \"../util\";\n\nimport { getLastId } from \"./groupIdUtils\";\nimport { useSubGroups } from \"./SubGroupsContext\";\nimport { MemberModal } from \"./MembersModal\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport { GroupPath } from \"../components/group/GroupPath\";\nimport { toUser } from \"../user/routes/User\";\nimport { useAccess } from \"../context/access/Access\";\n\ntype MembersOf = UserRepresentation & {\n  membership: GroupRepresentation[];\n};\n\nexport const Members = () => {\n  const { t } = useTranslation(\"groups\");\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n  const { addAlert, addError } = useAlerts();\n  const location = useLocation();\n  const id = getLastId(location.pathname);\n  const [includeSubGroup, setIncludeSubGroup] = useState(false);\n  const { currentGroup } = useSubGroups();\n  const [addMembers, setAddMembers] = useState(false);\n  const [isKebabOpen, setIsKebabOpen] = useState(false);\n  const [selectedRows, setSelectedRows] = useState<UserRepresentation[]>([]);\n  const { hasAccess } = useAccess();\n\n  const isManager =\n    hasAccess(\"manage-users\") || currentGroup()!.access!.manageMembership;\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(new Date().getTime());\n\n  const getMembership = async (id: string) =>\n    await adminClient.users.listGroups({ id: id! });\n\n  const getSubGroups = (groups: GroupRepresentation[]) => {\n    let subGroups: GroupRepresentation[] = [];\n    for (const group of groups!) {\n      subGroups.push(group);\n      const subs = getSubGroups(group.subGroups!);\n      subGroups = subGroups.concat(subs);\n    }\n    return subGroups;\n  };\n\n  const loader = async (first?: number, max?: number) => {\n    let members = await adminClient.groups.listMembers({\n      id: id!,\n      first,\n      max,\n    });\n\n    if (includeSubGroup) {\n      const subGroups = getSubGroups(currentGroup()?.subGroups!);\n      for (const group of subGroups) {\n        members = members.concat(\n          await adminClient.groups.listMembers({ id: group.id! })\n        );\n      }\n      members = uniqBy(members, (member) => member.username);\n    }\n\n    const memberOfPromises = await Promise.all(\n      members.map((member) => getMembership(member.id!))\n    );\n    return members.map((member: UserRepresentation, i) => {\n      return { ...member, membership: memberOfPromises[i] };\n    });\n  };\n\n  const MemberOfRenderer = (member: MembersOf) => {\n    return (\n      <>\n        {member.membership.map((group, index) => (\n          <>\n            <GroupPath key={group.id} group={group} />\n            {member.membership[index + 1] ? \", \" : \"\"}\n          </>\n        ))}\n      </>\n    );\n  };\n\n  const UserDetailLink = (user: MembersOf) => (\n    <Link key={user.id} to={toUser({ realm, id: user.id!, tab: \"settings\" })}>\n      {user.username}\n    </Link>\n  );\n  return (\n    <>\n      {addMembers && (\n        <MemberModal\n          groupId={id!}\n          onClose={() => {\n            setAddMembers(false);\n            refresh();\n          }}\n        />\n      )}\n      <KeycloakDataTable\n        data-testid=\"members-table\"\n        key={`${id}${key}${includeSubGroup}`}\n        loader={loader}\n        ariaLabelKey=\"groups:members\"\n        isPaginated\n        canSelectAll\n        onSelect={(rows) => setSelectedRows([...rows])}\n        toolbarItem={\n          isManager && (\n            <>\n              <ToolbarItem>\n                <Button\n                  data-testid=\"addMember\"\n                  variant=\"primary\"\n                  onClick={() => setAddMembers(true)}\n                >\n                  {t(\"addMember\")}\n                </Button>\n              </ToolbarItem>\n              <ToolbarItem>\n                <Checkbox\n                  data-testid=\"includeSubGroupsCheck\"\n                  label={t(\"includeSubGroups\")}\n                  id=\"kc-include-sub-groups\"\n                  isChecked={includeSubGroup}\n                  onChange={() => setIncludeSubGroup(!includeSubGroup)}\n                />\n              </ToolbarItem>\n              <ToolbarItem>\n                <Dropdown\n                  toggle={\n                    <KebabToggle\n                      onToggle={() => setIsKebabOpen(!isKebabOpen)}\n                      isDisabled={selectedRows.length === 0}\n                    />\n                  }\n                  isOpen={isKebabOpen}\n                  isPlain\n                  dropdownItems={[\n                    <DropdownItem\n                      key=\"action\"\n                      component=\"button\"\n                      onClick={async () => {\n                        try {\n                          await Promise.all(\n                            selectedRows.map((user) =>\n                              adminClient.users.delFromGroup({\n                                id: user.id!,\n                                groupId: id!,\n                              })\n                            )\n                          );\n                          setIsKebabOpen(false);\n                          addAlert(\n                            t(\"usersLeft\", { count: selectedRows.length }),\n                            AlertVariant.success\n                          );\n                        } catch (error) {\n                          addError(\"groups:usersLeftError\", error);\n                        }\n\n                        refresh();\n                      }}\n                    >\n                      {t(\"leave\")}\n                    </DropdownItem>,\n                  ]}\n                />\n              </ToolbarItem>\n            </>\n          )\n        }\n        actions={\n          isManager\n            ? [\n                {\n                  title: t(\"leave\"),\n                  onRowClick: async (user) => {\n                    try {\n                      await adminClient.users.delFromGroup({\n                        id: user.id!,\n                        groupId: id!,\n                      });\n                      addAlert(\n                        t(\"usersLeft\", { count: 1 }),\n                        AlertVariant.success\n                      );\n                    } catch (error) {\n                      addError(\"groups:usersLeftError\", error);\n                    }\n\n                    return true;\n                  },\n                },\n              ]\n            : []\n        }\n        columns={[\n          {\n            name: \"username\",\n            displayKey: \"common:name\",\n            cellRenderer: UserDetailLink,\n          },\n          {\n            name: \"email\",\n            displayKey: \"groups:email\",\n            cellFormatters: [emptyFormatter()],\n          },\n          {\n            name: \"firstName\",\n            displayKey: \"groups:firstName\",\n            cellFormatters: [emptyFormatter()],\n          },\n          {\n            name: \"lastName\",\n            displayKey: \"groups:lastName\",\n            cellFormatters: [emptyFormatter()],\n          },\n          {\n            name: \"membership\",\n            displayKey: \"groups:membership\",\n            cellRenderer: MemberOfRenderer,\n          },\n        ]}\n        emptyState={\n          <ListEmptyState\n            message={t(\"users:noUsersFound\")}\n            instructions={isManager ? t(\"users:emptyInstructions\") : undefined}\n            primaryActionText={isManager ? t(\"addMember\") : undefined}\n            onPrimaryAction={() => setAddMembers(true)}\n            secondaryActions={[\n              {\n                text: t(\"includeSubGroups\"),\n                onClick: () => setIncludeSubGroup(true),\n              },\n            ]}\n          />\n        }\n      />\n    </>\n  );\n};\n","import { useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useForm } from \"react-hook-form\";\nimport {\n  AlertVariant,\n  PageSection,\n  PageSectionVariants,\n} from \"@patternfly/react-core\";\n\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport {\n  AttributeForm,\n  AttributesForm,\n} from \"../components/key-value-form/AttributeForm\";\nimport {\n  keyValueToArray,\n  arrayToKeyValue,\n} from \"../components/key-value-form/key-value-convert\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\n\nimport { getLastId } from \"./groupIdUtils\";\nimport { useSubGroups } from \"./SubGroupsContext\";\nimport { useLocation } from \"react-router-dom\";\n\nexport const GroupAttributes = () => {\n  const { t } = useTranslation(\"groups\");\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const form = useForm<AttributeForm>({\n    mode: \"onChange\",\n  });\n\n  const location = useLocation();\n  const id = getLastId(location.pathname);\n  const { currentGroup, subGroups, setSubGroups } = useSubGroups();\n\n  const convertAttributes = (attr?: Record<string, any>) => {\n    return arrayToKeyValue(attr || currentGroup()?.attributes!);\n  };\n\n  useEffect(() => {\n    form.setValue(\"attributes\", convertAttributes());\n  }, [subGroups]);\n\n  const save = async (attributeForm: AttributeForm) => {\n    try {\n      const group = currentGroup();\n      const attributes = keyValueToArray(attributeForm.attributes!);\n      await adminClient.groups.update({ id: id! }, { ...group, attributes });\n\n      setSubGroups([\n        ...subGroups.slice(0, subGroups.length - 1),\n        { ...group, attributes },\n      ]);\n      addAlert(t(\"groupUpdated\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"groups:groupUpdateError\", error);\n    }\n  };\n\n  return (\n    <PageSection variant={PageSectionVariants.light}>\n      <AttributesForm\n        form={form}\n        save={save}\n        fineGrainedAccess={currentGroup()?.access?.manage}\n        reset={() =>\n          form.reset({\n            attributes: convertAttributes(),\n          })\n        }\n      />\n    </PageSection>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { AlertVariant } from \"@patternfly/react-core\";\n\nimport type { RoleMappingPayload } from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { RoleMapping, Row } from \"../components/role-mapping/RoleMapping\";\n\ntype GroupRoleMappingProps = {\n  id: string;\n  name: string;\n};\n\nexport const GroupRoleMapping = ({ id, name }: GroupRoleMappingProps) => {\n  const { t } = useTranslation(\"clients\");\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  const assignRoles = async (rows: Row[]) => {\n    try {\n      const realmRoles = rows\n        .filter((row) => row.client === undefined)\n        .map((row) => row.role as RoleMappingPayload)\n        .flat();\n      await adminClient.groups.addRealmRoleMappings({\n        id,\n        roles: realmRoles,\n      });\n      await Promise.all(\n        rows\n          .filter((row) => row.client !== undefined)\n          .map((row) =>\n            adminClient.groups.addClientRoleMappings({\n              id,\n              clientUniqueId: row.client!.id!,\n              roles: [row.role as RoleMappingPayload],\n            })\n          )\n      );\n      addAlert(t(\"roleMappingUpdatedSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"clients:roleMappingUpdatedError\", error);\n    }\n  };\n\n  return <RoleMapping name={name} id={id} type=\"groups\" save={assignRoles} />;\n};\n","import { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Checkbox,\n  Dropdown,\n  DropdownItem,\n  DropdownPosition,\n  DropdownSeparator,\n  InputGroup,\n  KebabToggle,\n  Tooltip,\n  TreeView,\n  TreeViewDataItem,\n} from \"@patternfly/react-core\";\n\nimport type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport useToggle from \"../../utils/useToggle\";\nimport { DeleteGroup } from \"./DeleteGroup\";\nimport { GroupsModal } from \"../GroupsModal\";\nimport { MoveDialog } from \"./MoveDialog\";\nimport { PaginatingTableToolbar } from \"../../components/table-toolbar/PaginatingTableToolbar\";\nimport { useSubGroups } from \"../SubGroupsContext\";\nimport { fetchAdminUI } from \"../../context/auth/admin-ui-endpoint\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { joinPath } from \"../../utils/joinPath\";\n\nimport \"./group-tree.css\";\n\ntype GroupTreeContextMenuProps = {\n  group: GroupRepresentation;\n  refresh: () => void;\n};\n\nconst GroupTreeContextMenu = ({\n  group,\n  refresh,\n}: GroupTreeContextMenuProps) => {\n  const { t } = useTranslation(\"groups\");\n\n  const [isOpen, toggleOpen] = useToggle();\n  const [renameOpen, toggleRenameOpen] = useToggle();\n  const [createOpen, toggleCreateOpen] = useToggle();\n  const [moveOpen, toggleMoveOpen] = useToggle();\n  const [deleteOpen, toggleDeleteOpen] = useToggle();\n\n  return (\n    <>\n      {renameOpen && (\n        <GroupsModal\n          id={group.id}\n          rename={group.name}\n          refresh={() => {\n            refresh();\n          }}\n          handleModalToggle={toggleRenameOpen}\n        />\n      )}\n      {createOpen && (\n        <GroupsModal\n          id={group.id}\n          handleModalToggle={toggleCreateOpen}\n          refresh={refresh}\n        />\n      )}\n      {moveOpen && (\n        <MoveDialog source={group} refresh={refresh} onClose={toggleMoveOpen} />\n      )}\n      <DeleteGroup\n        show={deleteOpen}\n        toggleDialog={toggleDeleteOpen}\n        selectedRows={[group]}\n        refresh={refresh}\n      />\n      <Dropdown\n        toggle={<KebabToggle onToggle={toggleOpen} />}\n        isOpen={isOpen}\n        isPlain\n        position={DropdownPosition.right}\n        dropdownItems={[\n          <DropdownItem key=\"rename\" onClick={toggleRenameOpen}>\n            {t(\"rename\")}\n          </DropdownItem>,\n          <DropdownItem key=\"move\" onClick={toggleMoveOpen}>\n            {t(\"moveTo\")}\n          </DropdownItem>,\n          <DropdownItem key=\"create\" onClick={toggleCreateOpen}>\n            {t(\"createChildGroup\")}\n          </DropdownItem>,\n          <DropdownSeparator key=\"separator\" />,\n          <DropdownItem key=\"delete\" onClick={toggleDeleteOpen}>\n            {t(\"common:delete\")}\n          </DropdownItem>,\n        ]}\n      />\n    </>\n  );\n};\n\ntype GroupTreeProps = {\n  refresh: () => void;\n};\n\nexport const GroupTree = ({ refresh: viewRefresh }: GroupTreeProps) => {\n  const { t } = useTranslation(\"groups\");\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n\n  const [data, setData] = useState<TreeViewDataItem[]>();\n  const { subGroups, setSubGroups } = useSubGroups();\n\n  const [search, setSearch] = useState(\"\");\n  const [max, setMax] = useState(20);\n  const [first, setFirst] = useState(0);\n  const [exact, setExact] = useState(false);\n\n  const [key, setKey] = useState(0);\n  const refresh = () => {\n    setKey(key + 1);\n    viewRefresh();\n  };\n\n  const mapGroup = (\n    group: GroupRepresentation,\n    parents: GroupRepresentation[],\n    refresh: () => void\n  ): TreeViewDataItem => {\n    const groups = [...parents, group];\n    return {\n      id: group.id,\n      name: (\n        <Tooltip content={group.name}>\n          <Link\n            to={`/${realm}/groups/${joinPath(...groups.map((g) => g.id!))}`}\n            onClick={() => setSubGroups(groups)}\n          >\n            {group.name}\n          </Link>\n        </Tooltip>\n      ),\n      children:\n        group.subGroups && group.subGroups.length > 0\n          ? group.subGroups.map((g) => mapGroup(g, groups, refresh))\n          : undefined,\n      action: <GroupTreeContextMenu group={group} refresh={refresh} />,\n      defaultExpanded: subGroups.map((g) => g.id).includes(group.id),\n    };\n  };\n\n  useFetch(\n    () =>\n      fetchAdminUI<GroupRepresentation[]>(\n        adminClient,\n        \"ui-ext/groups\",\n        Object.assign(\n          {\n            first: `${first}`,\n            max: `${max + 1}`,\n            exact: `${exact}`,\n          },\n          search === \"\" ? null : { search }\n        )\n      ),\n    (groups) => setData(groups.map((g) => mapGroup(g, [], refresh))),\n    [key, first, max, search, exact]\n  );\n\n  return data ? (\n    <PaginatingTableToolbar\n      count={data.length || 0}\n      first={first}\n      max={max}\n      onNextClick={setFirst}\n      onPreviousClick={setFirst}\n      onPerPageSelect={(first, max) => {\n        setFirst(first);\n        setMax(max);\n      }}\n      inputGroupName=\"searchForGroups\"\n      inputGroupPlaceholder={t(\"groups:searchForGroups\")}\n      inputGroupOnEnter={setSearch}\n      toolbarItem={\n        <InputGroup className=\"pf-u-pt-sm\">\n          <Checkbox\n            id=\"exact\"\n            data-testid=\"exact-search\"\n            name=\"exact\"\n            isChecked={exact}\n            onChange={(value) => setExact(value)}\n          />\n          <span className=\"pf-u-pl-sm\">{t(\"exactSearch\")}</span>\n        </InputGroup>\n      }\n    >\n      {data.length > 0 && (\n        <TreeView\n          data={data}\n          allExpanded={search.length > 0}\n          hasGuides\n          className=\"keycloak_groups_treeview\"\n        />\n      )}\n    </PaginatingTableToolbar>\n  ) : (\n    <KeycloakSpinner />\n  );\n};\n","import { useEffect } from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { Breadcrumb, BreadcrumbItem } from \"@patternfly/react-core\";\n\nimport { useSubGroups } from \"../../groups/SubGroupsContext\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\n\nexport const GroupBreadCrumbs = () => {\n  const { t } = useTranslation();\n  const { clear, remove, subGroups } = useSubGroups();\n  const { realm } = useRealm();\n  const location = useLocation();\n\n  useEffect(() => {\n    const { pathname } = location;\n\n    if (!pathname.includes(\"/groups\") || pathname.endsWith(\"/groups\")) {\n      clear();\n    }\n  }, [location]);\n\n  return subGroups.length !== 0 ? (\n    <Breadcrumb>\n      <BreadcrumbItem key=\"home\">\n        <Link to={`/${realm}/groups`}>{t(\"groups\")}</Link>\n      </BreadcrumbItem>\n      {subGroups.map((group, i) => {\n        const isLastGroup = i === subGroups.length - 1;\n        return (\n          <BreadcrumbItem key={group.id} isActive={isLastGroup}>\n            {!isLastGroup && (\n              <Link\n                to={location.pathname.substring(\n                  0,\n                  location.pathname.indexOf(group.id!) + group.id!.length\n                )}\n                onClick={() => remove(group)}\n              >\n                {group.name}\n              </Link>\n            )}\n            {isLastGroup &&\n              (group.id === \"search\" ? group.name : t(\"groups:groupDetails\"))}\n          </BreadcrumbItem>\n        );\n      })}\n    </Breadcrumb>\n  ) : null;\n};\n","import { useState } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  DropdownItem,\n  PageSection,\n  PageSectionVariants,\n  Tab,\n  TabTitleText,\n  Tabs,\n  Drawer,\n  DrawerContent,\n  DrawerContentBody,\n  DrawerPanelContent,\n  DrawerHead,\n} from \"@patternfly/react-core\";\nimport type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\n\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useFetch, useAdminClient } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\n\nimport { useSubGroups } from \"./SubGroupsContext\";\nimport { GroupTable } from \"./GroupTable\";\nimport { getId, getLastId } from \"./groupIdUtils\";\nimport { Members } from \"./Members\";\nimport { GroupAttributes } from \"./GroupAttributes\";\nimport { GroupsModal } from \"./GroupsModal\";\nimport { toGroups } from \"./routes/Groups\";\nimport { GroupRoleMapping } from \"./GroupRoleMapping\";\nimport helpUrls from \"../help-urls\";\nimport { PermissionsTab } from \"../components/permission-tab/PermissionTab\";\nimport { useAccess } from \"../context/access/Access\";\nimport { useServerInfo } from \"../context/server-info/ServerInfoProvider\";\nimport { GroupTree } from \"./components/GroupTree\";\nimport { DeleteGroup } from \"./components/DeleteGroup\";\nimport useToggle from \"../utils/useToggle\";\nimport { GroupBreadCrumbs } from \"../components/bread-crumb/GroupBreadCrumbs\";\n\nimport \"./GroupsSection.css\";\n\nexport default function GroupsSection() {\n  const { t } = useTranslation(\"groups\");\n  const [activeTab, setActiveTab] = useState(0);\n\n  const { profileInfo } = useServerInfo();\n\n  const { adminClient } = useAdminClient();\n  const { subGroups, setSubGroups, currentGroup } = useSubGroups();\n  const { realm } = useRealm();\n\n  const [rename, setRename] = useState<string>();\n  const [deleteOpen, toggleDeleteOpen] = useToggle();\n\n  const navigate = useNavigate();\n  const location = useLocation();\n  const id = getLastId(location.pathname);\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const { hasAccess } = useAccess();\n  const canViewPermissions =\n    !profileInfo?.disabledFeatures?.includes(\"ADMIN_FINE_GRAINED_AUTHZ\") &&\n    hasAccess(\"manage-authorization\", \"manage-users\", \"manage-clients\");\n  const canManageGroup =\n    hasAccess(\"manage-users\") || currentGroup()?.access?.manage;\n  const canManageRoles = hasAccess(\"manage-users\");\n\n  useFetch(\n    async () => {\n      const ids = getId(location.pathname);\n      const isNavigationStateInValid = ids && ids.length > subGroups.length;\n\n      if (isNavigationStateInValid) {\n        const groups: GroupRepresentation[] = [];\n        for (const i of ids!) {\n          const group =\n            i !== \"search\"\n              ? await adminClient.groups.findOne({ id: i })\n              : { name: t(\"searchGroups\"), id: \"search\" };\n          if (group) {\n            groups.push(group);\n          } else {\n            throw new Error(t(\"common:notFound\"));\n          }\n        }\n        return groups;\n      }\n      return [];\n    },\n    (groups: GroupRepresentation[]) => {\n      if (groups.length) setSubGroups(groups);\n    },\n    [id]\n  );\n\n  return (\n    <>\n      <DeleteGroup\n        show={deleteOpen}\n        toggleDialog={toggleDeleteOpen}\n        selectedRows={[currentGroup()!]}\n        refresh={() => {\n          navigate(toGroups({ realm }));\n          refresh();\n        }}\n      />\n      {rename && (\n        <GroupsModal\n          id={id}\n          rename={rename}\n          refresh={(group) => {\n            refresh();\n            setSubGroups([...subGroups.slice(0, subGroups.length - 1), group!]);\n          }}\n          handleModalToggle={() => setRename(undefined)}\n        />\n      )}\n      <PageSection variant={PageSectionVariants.light} className=\"pf-u-p-0\">\n        <Drawer isInline isExpanded key={key}>\n          <DrawerContent\n            panelContent={\n              <DrawerPanelContent isResizable defaultSize=\"80%\" minSize=\"500px\">\n                <DrawerHead>\n                  <GroupBreadCrumbs />\n                  <ViewHeader\n                    titleKey={!id ? \"groups:groups\" : currentGroup()?.name!}\n                    subKey={!id ? \"groups:groupsDescription\" : \"\"}\n                    helpUrl={!id ? helpUrls.groupsUrl : \"\"}\n                    divider={!id}\n                    dropdownItems={\n                      id && canManageGroup\n                        ? [\n                            <DropdownItem\n                              data-testid=\"renameGroupAction\"\n                              key=\"renameGroup\"\n                              onClick={() => setRename(currentGroup()?.name)}\n                            >\n                              {t(\"renameGroup\")}\n                            </DropdownItem>,\n                            <DropdownItem\n                              data-testid=\"deleteGroup\"\n                              key=\"deleteGroup\"\n                              onClick={toggleDeleteOpen}\n                            >\n                              {t(\"deleteGroup\")}\n                            </DropdownItem>,\n                          ]\n                        : undefined\n                    }\n                  />\n                  {subGroups.length > 0 && (\n                    <Tabs\n                      inset={{\n                        default: \"insetNone\",\n                        md: \"insetSm\",\n                        xl: \"insetLg\",\n                        \"2xl\": \"inset2xl\",\n                      }}\n                      activeKey={activeTab}\n                      onSelect={(_, key) => setActiveTab(key as number)}\n                      isBox\n                    >\n                      <Tab\n                        data-testid=\"groups\"\n                        eventKey={0}\n                        title={<TabTitleText>{t(\"childGroups\")}</TabTitleText>}\n                      >\n                        <GroupTable refresh={refresh} />\n                      </Tab>\n                      <Tab\n                        data-testid=\"members\"\n                        eventKey={1}\n                        title={<TabTitleText>{t(\"members\")}</TabTitleText>}\n                      >\n                        <Members />\n                      </Tab>\n                      <Tab\n                        data-testid=\"attributes\"\n                        eventKey={2}\n                        title={\n                          <TabTitleText>{t(\"common:attributes\")}</TabTitleText>\n                        }\n                      >\n                        <GroupAttributes />\n                      </Tab>\n                      {canManageRoles && (\n                        <Tab\n                          eventKey={3}\n                          data-testid=\"role-mapping-tab\"\n                          title={\n                            <TabTitleText>{t(\"roleMapping\")}</TabTitleText>\n                          }\n                        >\n                          <GroupRoleMapping\n                            id={id!}\n                            name={currentGroup()?.name!}\n                          />\n                        </Tab>\n                      )}\n                      {canViewPermissions && (\n                        <Tab\n                          eventKey={4}\n                          data-testid=\"permissionsTab\"\n                          title={\n                            <TabTitleText>\n                              {t(\"common:permissions\")}\n                            </TabTitleText>\n                          }\n                        >\n                          <PermissionsTab id={id} type=\"groups\" />\n                        </Tab>\n                      )}\n                    </Tabs>\n                  )}\n                  {subGroups.length === 0 && <GroupTable refresh={refresh} />}\n                </DrawerHead>\n              </DrawerPanelContent>\n            }\n          >\n            <DrawerContentBody>\n              <GroupTree refresh={refresh} />\n            </DrawerContentBody>\n          </DrawerContent>\n        </Drawer>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["TreeViewList","_a","isNested","toolbar","children","props","__rest","_jsxs","_Fragment","_jsx","Divider","Object","assign","className","css","role","displayName","styles","TreeViewListItemBase","name","title","id","isExpanded","defaultExpanded","onSelect","onCheck","hasCheck","checkProps","checked","hasBadge","customBadgeContent","badgeProps","isRead","isSelectable","isCompact","activeItems","itemData","parentItem","icon","expandedIcon","action","compareItems","useMemo","internalIsExpanded","setIsExpanded","useState","useEffect","Component","ToggleComponent","renderToggle","randomId","treeViewNodeToggle","onClick","evt","stopPropagation","tabIndex","treeViewNodeToggleIcon","AngleRightIcon","renderCheck","treeViewNodeCheck","type","onChange","ref","elem","indeterminate","iconRendered","treeViewNodeIcon","renderNodeContent","content","treeViewNodeTitle","treeViewNodeText","treeViewNodeContent","badgeRendered","treeViewNodeCount","Badge","data","length","undefined","treeViewListItem","modifiers","expanded","treeViewContent","GenerateId","treeViewNode","selectable","some","item","current","isDefaultPrevented","htmlFor","treeViewNodeContainer","treeViewAction","TreeViewListItem","React","memo","prevProps","nextProps","prevIncludes","nextIncludes","TreeViewRoot","constructor","arguments","treeRef","handleKeys","event","_b","_c","_d","_e","_f","_g","contains","target","activeElement","document","key","treeItems","Array","from","getElementsByClassName","filter","el","classList","KeyTypes","Space","click","preventDefault","handleArrows","element","includes","isExpandable","firstElementChild","closest","parentList","parentElement","tagName","parentButton","querySelector","focus","childElement","handleKeysCheckbox","treeNodes","previousSibling","previousElementSibling","firstChild","nextSibling","nextElementSibling","variantStyleModifiers","default","compact","compactNoBackground","noBackground","componentDidMount","canUseDOM","window","addEventListener","hasChecks","hasSelectableNodes","firstToggle","firstInput","getElementsByTagName","firstTextButton","componentWillUnmount","removeEventListener","render","hasGuides","variant","treeView","guides","TreeView","hasBadges","defaultAllExpanded","allExpanded","itemToCheck","treeViewList","map","toString","GroupsModal","rename","handleModalToggle","refresh","t","useTranslation","adminClient","useAdminClient","addAlert","addError","useAlerts","register","handleSubmit","formState","errors","useForm","defaultValues","submitForm","group","trim","groups","update","setOrCreateChild","create","AlertVariant","success","error","Modal","ModalVariant","small","Button","ButtonVariant","link","Form","FormGroup","ValidatedOptions","KeycloakTextInput","required","getId","pathname","pathParts","getLastId","DeleteGroup","selectedRows","show","toggleDialog","multiDelete","del","count","ConfirmDialogModal","groupName","danger","GroupToolbar","toggleCreate","toggleDelete","kebabDisabled","currentGroup","useSubGroups","hasAccess","useAccess","isManager","access","manage","openKebab","toggleKebab","useToggle","ToolbarItem","Dropdown","KebabToggle","DropdownItem","moveToRoot","source","subGroups","Promise","all","s","moveToGroup","dest","response","MoveDialog","onClose","GroupPickerDialog","ok","moveGroup","GroupTable","viewRefresh","realm","useRealm","setSelectedRows","setRename","isCreateModalOpen","toggleCreateOpen","showDelete","toggleShowDelete","move","setMove","setSubGroups","setKey","search","setSearch","navigate","useNavigate","location","useLocation","canView","loader","first","max","params","groupsData","findOne","Error","g","fetchAdminUI","global","toGroups","GroupNameCell","Link","KeycloakDataTable","rows","SearchInput","_","value","onRowClick","isSeparator","displayKey","cellRenderer","ListEmptyState","MemberModal","groupId","members","listMembers","users","find","differenceBy","slice","large","addToGroup","user","cellFormatters","emptyFormatter","Members","includeSubGroup","setIncludeSubGroup","addMembers","setAddMembers","isKebabOpen","setIsKebabOpen","manageMembership","Date","getTime","getMembership","listGroups","getSubGroups","push","subs","concat","uniqBy","member","username","memberOfPromises","i","membership","MemberOfRenderer","index","GroupPath","UserDetailLink","toUser","tab","Checkbox","delFromGroup","text","GroupAttributes","form","mode","convertAttributes","attr","arrayToKeyValue","attributes","setValue","save","attributeForm","keyValueToArray","PageSection","PageSectionVariants","light","AttributesForm","reset","GroupRoleMapping","RoleMapping","realmRoles","row","client","flat","addRealmRoleMappings","roles","addClientRoleMappings","clientUniqueId","assignRoles","GroupTreeContextMenu","isOpen","toggleOpen","renameOpen","toggleRenameOpen","createOpen","moveOpen","toggleMoveOpen","deleteOpen","toggleDeleteOpen","DropdownPosition","right","DropdownSeparator","GroupTree","setData","setMax","setFirst","exact","setExact","mapGroup","parents","Tooltip","joinPath","useFetch","PaginatingTableToolbar","InputGroup","KeycloakSpinner","GroupBreadCrumbs","clear","remove","endsWith","Breadcrumb","BreadcrumbItem","isLastGroup","substring","indexOf","GroupsSection","activeTab","setActiveTab","profileInfo","useServerInfo","canViewPermissions","disabledFeatures","canManageGroup","canManageRoles","ids","Drawer","DrawerContent","DrawerPanelContent","DrawerHead","ViewHeader","helpUrls","groupsUrl","Tabs","md","xl","Tab","TabTitleText","PermissionsTab","DrawerContentBody"],"mappings":"qwEAIO,MAAMA,GAAgBC,GAAO,CAChC,GAAI,CAAEC,SAAAA,EAAW,GAAOC,QAAAA,EAASC,SAAAA,CAAS,EAAIH,EAAII,EAAQC,GAAOL,EAAI,CAAC,WAAY,UAAW,UAAU,CAAC,EACxG,OAAAM,EAAAC,EAAA,CAAA,SAAA,CACIL,GAAOI,EAAAC,EAAA,CAAA,SAAA,CACHL,EAAOM,EAAAC,GAAA,CAAA,CAAA,CAAA,EAC6B,EAAAD,EAAA,KAAA,CAAA,GACdE,OAAOC,OAAO,CAAEC,UAAWC,EAAI,sBAAsB,EAAGC,KAAMb,EAAW,QAAU,MAAQ,EAAEG,CAAK,EAAC,SAAED,CAAQ,CAAA,CAAA,CAAA,CAAA,CAC/I,EACAJ,GAAagB,YAAc,eCX3B,MAAeC,EAAA,CACb,MAAS,aACT,UAAa,CACX,QAAW,eACX,OAAU,cACV,SAAY,gBACZ,aAAgB,qBAChB,QAAW,eACX,KAAQ,YACR,WAAc,kBACd,SAAY,eACb,EACD,UAAa,gBACb,SAAY,iBACZ,eAAkB,yBAClB,gBAAmB,0BACnB,iBAAoB,4BACpB,aAAgB,uBAChB,kBAAqB,6BACrB,sBAAyB,iCACzB,oBAAuB,+BACvB,kBAAqB,6BACrB,iBAAoB,4BACpB,iBAAoB,4BACpB,kBAAqB,6BACrB,mBAAsB,8BACtB,uBAA0B,mCAC1B,eAAkB,wBACpB,ECvBMC,GAAuB,CAAC,CAAEC,KAAAA,EAAMC,MAAAA,EAAOC,GAAAA,EAAIC,WAAAA,EAAYC,gBAAAA,EAAkB,GAAOnB,SAAAA,EAAW,KAAMoB,SAAAA,EAAUC,QAAAA,EAASC,SAAAA,EAAW,GAAOC,WAAAA,EAAa,CACrJC,QAAS,EACZ,EAAEC,SAAAA,EAAW,GAAOC,mBAAAA,EAAoBC,WAAAA,EAAa,CAAEC,OAAQ,EAAM,EAAEC,aAAAA,EAAe,GAAOC,UAAAA,EAAWC,YAAAA,EAAc,CAAE,EAAEC,SAAAA,EAAUC,WAAAA,EAAYC,KAAAA,EAAMC,aAAAA,EAAcC,OAAAA,EAAQC,aAAAA,EAE7KC,QAAAA,CAAQ,IAAM,CACV,KAAM,CAACC,EAAoBC,CAAa,EAAIC,EAAQ,QAAA,SAACtB,CAAe,EACpEuB,EAAAA,QAAAA,UAAU,IAAM,CACoBxB,GAAe,KAC3CsB,EAActB,CAAU,EAEcC,GAAoB,MAC1DqB,EAAcD,GAAsBpB,CAAe,CAE3D,EAAG,CAACD,EAAYC,CAAe,CAAC,EAChC,IAAIwB,EAAY,SACZrB,EACAqB,EAAY,QAEPd,IACLc,EAAY,OAEhB,MAAMC,EAAkBtB,GAAYO,EAAe,SAAW,OACxDgB,EAAgBC,GAAQzC,EAAAuC,EAAA,CAAA,GAA2CrC,OAAOC,OAAO,CAAEC,UAAWC,EAAIG,EAAOkC,kBAAkB,EAAGC,QAAUC,GAAQ,EAC1IpB,GAAgBP,IAChBkB,EAAc,CAACD,CAAkB,EAEjCV,GACAoB,EAAIC,gBAAe,CAE3B,CAAE,GAAK5B,GAAYO,IAAiB,CAAE,kBAAoB,SAAQiB,GAAW,EAAI,CAAEK,SAAU,EAAG,CAAC,EAAC,SAAA9C,EAAA,OAAA,CAAA,UACzDK,EAAIG,EAAOuC,sBAAsB,EAAC,SAAA/C,EAAAgD,GAAA,CAAA,cAClB,MAAM,CAAA,CAAA,CAAA,EAAM,EACnEC,EAAeR,GAAQzC,EAAA,OAAA,CAAA,UAA+CK,EAAIG,EAAO0C,iBAAiB,EAAC,SAAAlD,EAAA,QAAA,CAAA,GACxEE,OAAOC,OAAO,CAAEgD,KAAM,WAAYC,SAAUR,GAAO5B,GAAWA,EAAQ4B,EAAKjB,EAAUC,CAAU,EAAGe,QAASC,GAAOA,EAAIC,gBAAiB,EAAEQ,IAAKC,GAAQA,IAASA,EAAKC,cAAgBrC,EAAWC,UAAY,KAAO,EAAED,EAAY,CAAEC,QAASD,EAAWC,UAAY,KAAO,GAAQD,EAAWC,QAASP,GAAI6B,EAAUK,SAAU,GAAI,CAAC,CAAA,EAAG,EAChWU,EAAY1D,EAAA,OAAA,CAAA,UAA6CO,EAAIG,EAAOiD,gBAAgB,EAAC,SACvF,CAAA,CAACvB,GAAsBL,EACvBK,IAAuBJ,GAAgBD,EAAK,EAAE,EAC5C6B,EAAoB,IAAM,CAC5B,MAAMC,EAAO7D,EAAAC,EAAA,CAAA,SACT0B,CAAAA,GAAad,GAAKX,EAAA,OAAA,CAAA,UAA6CK,EAAIG,EAAOoD,iBAAiB,EAAC,SAAIjD,CAAK,CAAA,EACrGa,EAAYxB,EAAA,SAAA,CAAA,SAA8C,GAAE,UAAaK,EAAIG,EAAOqD,gBAAgB,EAAC,SAAInD,CAAI,CAAA,EAAAV,EAAA,OAAA,CAAA,UAA+CK,EAAIG,EAAOqD,gBAAgB,EAAC,SAAInD,EAAM,CAAA,EAAE,EACxM,OAAOe,EAASzB,EAAA,OAAA,CAAA,UAA4CK,EAAIG,EAAOsD,mBAAmB,EAAC,SAAIH,CAAO,CAAA,EAAIA,GAExGI,EAAajE,EAAAC,EAAA,CAAA,SACfqB,CAAAA,GAAYzB,GAAQK,EAAA,OAAA,CAAA,UAA8CK,EAAIG,EAAOwD,iBAAiB,EAAC,SAAAhE,EAAAiE,GAAA,CAAA,GAChE/D,OAAOC,OAAO,CAAE,EAAEmB,CAAU,EAAC,SAAED,GAA0C1B,EAASC,MAAMsE,KAAKC,MAAM,CAAA,EAAG,EACrI/C,GAAY,CAACzB,GAAY0B,IAAuB+C,QAASpE,EAAA,OAAA,CAAA,UAA8CK,EAAIG,EAAOwD,iBAAiB,EAAC,SAAAhE,EAAAiE,GAAA,CAAA,GACrG/D,OAAOC,OAAO,CAAE,EAAEmB,CAAU,EAAC,SAAED,CAAkB,CAAA,EAAG,CAAA,EAAE,EACzF,OAAAvB,EAAA,KAAA,CAAA,GAAkCI,OAAOC,OAAO,CAAES,GAAIA,EAAIR,UAAWC,EAAIG,EAAO6D,iBAAkBnC,GAAsB1B,EAAO8D,UAAUC,QAAQ,CAAG,EAAGrC,GAAsB,CAAE,gBAAiB,MAAO,EAAI,CAAE5B,KAAM,WAAYwC,SAAU,EAAG,CAAC,EAAC,SAAA,CAAAhD,EAAA,MAAA,CAAA,UAClMO,EAAIG,EAAOgE,eAAe,EAAC,SAAA,CAAAxE,EAAAyE,GAAA,CAAA,OACrBjD,EAAe,gBAAkB,cAAa,SAAIiB,GAAQzC,EAAAsC,EAAA,CAAA,GAAoCpC,OAAOC,OAAO,CAAEC,UAAWC,EAAIG,EAAOkE,aAAc/E,IAAa6B,GAAgBP,IAAaT,EAAO8D,UAAUK,YAAa,CAAChF,GAAY6B,IACzQE,GACAA,EAAYyC,OAAS,GACrBzC,EAAYkD,KAAKC,GAAQ7C,GAAgB6C,GAAQ7C,EAAa6C,EAAMlD,CAAQ,CAAC,EAC3EnB,EAAO8D,UAAUQ,QACjB,EAAE,EAAGnC,QAAUC,GAAQ,CACpB3B,IACDF,GAAYA,EAAS6B,EAAKjB,EAAUC,CAAU,EAC1C,CAACJ,GAAgB7B,GAAYiD,EAAImC,mBAAkB,IAAO,IAC1D5C,EAAc,CAACD,CAAkB,EAG7C,CAAG,EAAGjB,GAAY,CAAE+D,QAASvC,CAAS,GAAMxB,GAAaO,GAAgB7B,IAAc,CAAEiB,GAAK,SAAQ6B,GAAW,CAAC,EAAE,SAAA3C,EAAA,OAAA,CAAA,UAC3EO,EAAIG,EAAOyE,qBAAqB,EAAC,SACtEtF,CAAAA,GAAY6C,EAAaC,CAAQ,EACjCxB,GAAYgC,EAAYR,CAAQ,EAChCZ,GAAQ2B,EACRE,EAAiB,EACjBK,CAAa,CAAA,CAAA,CAAA,CAAA,CAAG,CAAA,EACxBhC,GAAM/B,EAAA,MAAA,CAAA,UAA4CK,EAAIG,EAAO0E,cAAc,EAAC,SAAInD,EAAO,CAAA,EAC3FG,EAAAA,GAAsBvC,CAAQ,CAAA,CAAA,CACtC,EACawF,GAAmBC,GAAMC,KAAK5E,GAAsB,CAAC6E,EAAWC,IAAc,CACvF,GAAI,CAACA,EAAUtD,QACX,MAAO,GAEX,MAAMuD,EAAeF,EAAU5D,aAC3B4D,EAAU5D,YAAYyC,OAAS,GAC/BmB,EAAU5D,YAAYkD,KAAKC,GAAQS,EAAUtD,cAAgB6C,GAAQS,EAAUtD,aAAa6C,EAAMS,EAAU3D,QAAQ,CAAC,EACnH8D,EAAeF,EAAU7D,aAC3B6D,EAAU7D,YAAYyC,OAAS,GAC/BoB,EAAU7D,YAAYkD,KAAKC,GAAQU,EAAUvD,cAAgB6C,GAAQU,EAAUvD,aAAa6C,EAAMU,EAAU5D,QAAQ,CAAC,EAIzH,MAHI6D,EAAAA,GAAgBC,GAGhBH,EAAU5E,OAAS6E,EAAU7E,MAC7B4E,EAAU3E,QAAU4E,EAAU5E,OAC9B2E,EAAU1E,KAAO2E,EAAU3E,IAC3B0E,EAAUzE,aAAe0E,EAAU1E,YACnCyE,EAAUxE,kBAAoByE,EAAUzE,iBACxCwE,EAAUvE,WAAawE,EAAUxE,UACjCuE,EAAUtE,UAAYuE,EAAUvE,SAChCsE,EAAUrE,WAAasE,EAAUtE,UACjCqE,EAAUpE,aAAeqE,EAAUrE,YACnCoE,EAAUlE,WAAamE,EAAUnE,UACjCkE,EAAUjE,qBAAuBkE,EAAUlE,oBAC3CiE,EAAUhE,aAAeiE,EAAUjE,YACnCgE,EAAU7D,YAAc8D,EAAU9D,WAClC6D,EAAUzD,OAAS0D,EAAU1D,MAC7ByD,EAAUxD,eAAiByD,EAAUzD,cACrCwD,EAAUvD,SAAWwD,EAAUxD,QAC/BuD,EAAU1D,aAAe2D,EAAU3D,YACnC0D,EAAU3D,WAAa4D,EAAU5D,SAIzC,CAAC,EACDwD,GAAiB5E,YAAc,mBC1GxB,MAAMmF,WAAqBN,EAAAA,QAAAA,SAAgB,CAC9CO,aAAc,CACV,MAAM,GAAGC,SAAS,EAClB,KAAKrF,YAAc,eACnB,KAAKsF,QAAUT,EAAAA,QAAAA,YACf,KAAKU,WAAcC,GAAU,CACzB,IAAIvG,EAAIwG,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAC5B,GAAI,CAAC,KAAKR,QAAQf,QAAQwB,SAASP,EAAMQ,MAAM,EAC3C,OAEJ,MAAMC,EAAgBC,SAASD,cACzBE,EAAMX,EAAMW,IACZC,EAAYC,MAAMC,MAAMrH,EAAK,KAAKqG,QAAQf,WAAa,MAAQtF,IAAO,OAAS,OAASA,EAAGsH,uBAAuB,sBAAsB,CAAC,EAAEC,OAAOC,GAAM,CAACA,EAAGC,UAAUX,SAAS,eAAe,CAAC,EAMrM,GALII,IAAQQ,GAASC,QACjBX,EAAcY,MAAK,EACnBrB,EAAMsB,eAAc,GAExBC,GAAavB,EAAOY,EAAYY,GAAYf,IAAkBe,EAASnD,OAAW,GAAIA,OAAW,GAAM,EAAI,EACvG,CAAC,YAAa,YAAY,EAAEoD,SAASd,CAAG,EAAG,CAC3C,MAAMe,GAAgBxB,GAAMD,EAAmEQ,GAAckB,qBAAuB,MAAQ1B,IAAO,OAAS,OAASA,EAAG0B,qBAAuB,MAAQzB,IAAO,OAAS,OAASA,EAAGgB,UAAUX,SAAS,6BAA6B,EAC7QzF,GAAcqF,EAAmEM,GAAcmB,QAAQ,IAAI,KAAO,MAAQzB,IAAO,OAAS,OAASA,EAAGe,UAAUX,SAAS,eAAe,EAC9L,GAAII,IAAQ,YACR,GAAIe,GAAgB5G,EAChB2F,EAAcY,MAAK,MAElB,CACD,MAAMQ,GAAczB,EAAmEK,GAAcmB,QAAQ,IAAI,KAAO,MAAQxB,IAAO,OAAS,OAASA,EAAG0B,cAC5J,GAA6DD,GAAWE,UAAa,MAAO,CACxF,MAAMC,EAAuEH,GAAWI,cAAc,QAAQ,EAC9GxB,EAAc1D,SAAW,GACrBiF,IACAA,EAAajF,SAAW,EACxBiF,EAAaE,MAAK,EAE1B,CACJ,SAGIR,GAAgB,CAAC5G,EAAY,CAC7B2F,EAAc1D,SAAW,GACzB0D,EAAcY,MAAK,EACnB,MAAMc,GAAgB7B,GAAMD,EAAmEI,GAAcmB,QAAQ,IAAI,KAAO,MAAQvB,IAAO,OAAS,OAASA,EAAG4B,cAAc,SAAS,KAAO,MAAQ3B,IAAO,OAAS,OAASA,EAAG2B,cAAc,QAAQ,EACxPE,IACAA,EAAapF,SAAW,EACxBoF,EAAaD,MAAK,EAE1B,CAEJlC,EAAMsB,eAAc,CACxB,GAEJ,KAAKc,mBAAsBpC,GAAU,CACjC,IAAIvG,EAAIwG,EAAIC,EAAIC,EAAIC,EACpB,GAAI,CAAC,KAAKN,QAAQf,QAAQwB,SAASP,EAAMQ,MAAM,EAC3C,OAEJ,MAAMC,EAAgBC,SAASD,cACzBE,EAAMX,EAAMW,IACdA,IAAQQ,GAASC,QACjBX,EAAcY,MAAK,EACnBrB,EAAMsB,eAAc,GAExB,MAAMe,EAAYxB,MAAMC,MAAMrH,EAAK,KAAKqG,QAAQf,WAAa,MAAQtF,IAAO,OAAS,OAASA,EAAGsH,uBAAuB,sBAAsB,CAAC,EAC/IQ,GAAavB,EAAOqC,EAAYb,GAAYA,EAAQjB,SAASE,CAAa,EAAIe,GAAYA,EAAQS,cAAc,cAAc,EAAG,CAAA,EAAI5D,OAAW,GAAM,EAAI,EACtJ,CAAC,YAAa,YAAY,EAAEoD,SAASd,CAAG,IACpCA,IAAQ,YAC2DF,GAAcsB,UAAa,QACxF9B,GAAAA,EAAmEQ,GAAcqB,iBAAmB,MAAQ7B,IAAO,SAAkBA,EAAGqC,iBACtI7B,EAAcqB,cAAcQ,gBAAgBJ,QAEmBzB,GAAc6B,oBAC3EpC,EAAKO,EAAc8B,0BAA4B,MAAQrC,IAAO,OAAS,OAASA,EAAG6B,WAAa,OAClGtB,EAAc6B,gBAAgBE,WAAWN,QAGzCzB,EAAc6B,gBAAgBJ,SAK6BzB,GAAcsB,UAAa,QACxF5B,GAAAA,EAAKM,EAAcqB,iBAAmB,MAAQ3B,IAAO,SAAkBA,EAAGsC,aAAgBhC,EAAcqB,cAAcW,YAAYP,QAEjEzB,GAAcgC,gBAC3ErC,EAAKK,EAAciC,sBAAwB,MAAQtC,IAAO,OAAS,OAASA,EAAG2B,WAAa,OAC9FtB,EAAcgC,YAAYD,WAAWN,QAGrCzB,EAAcgC,YAAYP,SAItClC,EAAMsB,eAAc,IAG5B,KAAKqB,sBAAwB,CACzBC,QAAS,GACTC,QAASpI,EAAO8D,UAAUsE,QAC1BC,oBAAqB,CAACrI,EAAO8D,UAAUsE,QAASpI,EAAO8D,UAAUwE,YAAY,EAErF,CACAC,mBAAoB,CAChB,IAAIvJ,EAIJ,GAHIwJ,IACAC,OAAOC,iBAAiB,UAAW,KAAKtJ,MAAMuJ,WAAa,KAAKvJ,MAAMwJ,mBAAqB,KAAKjB,mBAAqB,KAAKrC,UAAU,EAEpI,KAAKlG,MAAMuJ,WAAa,KAAKvJ,MAAMwJ,mBAAoB,CACvD,MAAMC,EAAc,KAAKxD,QAAQf,QAAQgC,uBAAuB,6BAA6B,EAAE,GAI/F,GAHIuC,IACAA,EAAYvG,SAAW,GAEvB,KAAKlD,MAAMuJ,UAAW,CACtB,MAAMG,EAAa,KAAKzD,QAAQf,QAAQyE,qBAAqB,OAAO,EAAE,GAClED,IACAA,EAAWxG,SAAW,EAE9B,CACA,GAAI,KAAKlD,MAAMwJ,mBAAoB,CAC/B,MAAMI,EAAkB,KAAK3D,QAAQf,QAAQgC,uBAAuB,2BAA2B,EAAE,GAC7F0C,IACAA,EAAgB1G,SAAW,EAEnC,CACJ,OAEMtD,EAAK,KAAKqG,QAAQf,WAAa,MAAQtF,IAAO,OAAS,OAASA,EAAGsH,uBAAuB,sBAAsB,EAAE,IAAIhE,SAAW,CAE3I,CACA2G,sBAAuB,CACfT,IACAC,OAAOS,oBAAoB,UAAW,KAAK9J,MAAMuJ,WAAa,KAAKvJ,MAAMwJ,mBAAqB,KAAKjB,mBAAqB,KAAKrC,UAAU,CAE/I,CACA6D,QAAS,CAEL,MAAMnK,EAAK,KAAKI,MAAO,CAAED,SAAAA,EAAUwJ,UAAAA,EAAWS,UAAAA,EAAWC,QAAAA,EAASzJ,UAAAA,EAAWgJ,mBAAAA,CAAmB,EAAI5J,EAAII,EAAQC,GAAOL,EAAI,CAAC,WAAY,YAAa,YAAa,UAAW,YAAa,oBAAoB,CAAC,EAC/M,OAAAQ,EAAA,MAAA,CAAA,GAAmCE,OAAOC,OAAO,CAAEC,UAAWC,EAAIG,EAAOsJ,SAAUF,GAAapJ,EAAO8D,UAAUyF,OAAQ,KAAKrB,sBAAsBmB,GAAUzJ,CAAS,EAAGiD,IAAK,KAAKwC,OAAS,EAAEjG,CAAK,EAAC,SAAED,CAAQ,CAAA,CACnN,CACJ,CC5IO,MAAMqK,GAAYxK,GAAO,CAC5B,GAAI,CAAE0E,KAAAA,EAAMzE,SAAAA,EAAW,GAAO0J,UAAAA,EAAY,GAAOc,UAAAA,EAAY,GAAOL,UAAAA,EAAY,GAAOR,mBAAAA,EAAqB,GAAOS,QAAAA,EAAU,UAAWK,mBAAAA,EAAqB,GAAOC,YAAAA,EAAatI,KAAAA,EAAMC,aAAAA,EAAcF,WAAAA,EAAYb,SAAAA,EAAUC,QAAAA,EAAStB,QAAAA,EAASgC,YAAAA,EAAaM,aAAAA,EAAe,CAAC6C,EAAMuF,IAAgBvF,EAAKjE,KAAOwJ,EAAYxJ,GAAIR,UAAAA,EAAW6B,QAAAA,CAAQ,EAAIzC,EAAII,EAAQC,GAAOL,EAAI,CAAC,OAAQ,WAAY,YAAa,YAAa,YAAa,qBAAsB,UAAW,qBAAsB,cAAe,OAAQ,eAAgB,aAAc,WAAY,UAAW,UAAW,cAAe,eAAgB,YAAa,SAAS,CAAC,EAC1mB,MAAM6K,EAAYrK,EAAAT,GAAA,CAAA,SAAkDE,EAAQ,QAAWC,EAAO,SAAIwE,EAAKoG,IAAIzF,GAAQ,CAC/G,IAAIrF,EAAIwG,EACR,OAAAhG,EAAAmF,GAAA,CAAA,GAA8CjF,OAAOC,OAAO,CAAEuG,MAAOlH,EAAKqF,EAAKjE,MAAQ,MAAQpB,IAAO,OAAS,OAASA,EAAG+K,eAAiBvE,EAAKnB,EAAKnE,QAAU,MAAQsF,IAAO,OAAS,OAASA,EAAGuE,SAAQ,GAAK7J,KAAMmE,EAAKnE,KAAMC,MAAOkE,EAAKlE,MAAOC,GAAIiE,EAAKjE,GAAIC,WAAYsJ,EAAa3I,aAAc4H,EAAoBtI,gBAAiB+D,EAAK/D,kBAAoBsD,OAAYS,EAAK/D,gBAAkBoJ,EAAoBnJ,SAAUA,EAAUC,QAASA,EAASC,SAAU4D,EAAK5D,WAAamD,OAAYS,EAAK5D,SAAWkI,EAAWjI,WAAY2D,EAAK3D,WAAYE,SAAUyD,EAAKzD,WAAagD,OAAYS,EAAKzD,SAAW6I,EAAW5I,mBAAoBwD,EAAKxD,mBAAoBC,WAAYuD,EAAKvD,WAAYI,YAAaA,EAAaE,WAAYA,EAAYD,SAAUkD,EAAMhD,KAAMgD,EAAKhD,OAASuC,OAAYS,EAAKhD,KAAOA,EAAMC,aAAc+C,EAAK/C,eAAiBsC,OAAYS,EAAK/C,aAAeA,EAAcC,OAAQ8C,EAAK9C,OAAQC,aAAcA,EAAcP,UAAWoI,IAAY,WAAaA,IAAY,sBAAuB5H,QAASA,CAAQ,EAAI4C,EAAKlF,UAAY,CACjhCA,SAAQK,EAAAgK,GAAA,CAAA,KAAyCnF,EAAKlF,SAAQ,SAAY,GAAI,WAAckF,EAAI,UAAasE,EAAS,UAAac,EAAS,UAAaL,EAAS,mBAAsBR,EAAkB,QAAWS,EAAO,YAAeM,EAAW,mBAAsBD,EAAkB,SAAYnJ,EAAQ,QAAWC,EAAO,YAAeU,EAAW,KAAQG,EAAI,aAAgBC,CAAY,CAAA,EACzY,CAAE,CAAA,EACN,EAAG,EACJ,OAAA9B,EAAAD,EAAA,CAAA,SAAkD6B,EAAcyI,EAAYrK,EAAA0F,GAAA,CAAA,GAAuCxF,OAAOC,OAAO,CAAEiJ,mBAAoBA,EAAoBD,UAAWA,EAAWS,UAAWA,EAAWC,QAASA,EAASzJ,UAAWA,CAAW,EAAER,CAAK,EAAC,SAAEyK,CAAY,CAAA,CAAE,CAAA,CAC3R,EACAL,GAASzJ,YAAc,WCUhB,MAAMiK,EAAc,CAAC,CAC1B5J,GAAAA,EACA6J,OAAAA,EACAC,kBAAAA,EACAC,QAAAA,CACgB,IAAM,CAChB,KAAA,CAAEC,EAAAA,CAAAA,EAAMC,EAAe,QAAQ,EAC/B,CAAEC,YAAAA,GAAgBC,EAAgB,EAClC,CAAEC,SAAAA,EAAUC,SAAAA,GAAaC,EAAW,EACpC,CACJC,SAAAA,EACAC,aAAAA,EACAC,UAAW,CAAEC,OAAAA,CAAO,GAClBC,GAAQ,CACVC,cAAe,CAAE9K,KAAM+J,CAAO,CAAA,CAC/B,EAEKgB,EAAa,MAAOC,GAA+B,CACjDhL,EAAAA,KAAOgL,EAAMhL,MAAMiL,KAAM,EAE3B,GAAA,CACG/K,EAEM6J,EACHK,MAAAA,EAAYc,OAAOC,OAAO,CAAEjL,GAAAA,GAAM8K,CAAK,EAEvCZ,MAAAA,EAAYc,OAAOE,iBAAiB,CAAElL,GAAAA,GAAM8K,CAAK,EAJjDZ,MAAAA,EAAYc,OAAOG,OAAOL,CAAK,EAO/BjB,EAAAA,EAASiB,EAAQtH,MAAS,EACfsG,IACnBM,EACEJ,EAAEH,EAAS,eAAiB,cAAc,EAC1CuB,EAAaC,OAAO,QAEfC,GACPjB,EAAS,6BAA8BiB,CAAK,CAC9C,CAAA,EAGF,SACGC,GAAK,CACJ,QAASC,GAAaC,MACtB,MAAOzB,EAAEH,EAAS,eAAiB,cAAc,EACjD,OAAQ,GACR,QAASC,EACT,QAAS,CACP1K,EAACsM,EAAM,CACL,cAAc,GAAE7B,EAAS,SAAW,gBAEpC,QAAQ,UACR,KAAK,SACL,KAAK,aAAY,SAEhBG,EAAEH,EAAS,SAAW,QAAQ,CAAA,EAL3B,SAAS,EAOfzK,EAACsM,EAAM,CACL,GAAG,eACH,cAAY,SAEZ,QAASC,GAAcC,KACvB,QAAS,IAAM,CACM9B,GACrB,EAAE,SAEDE,EAAE,eAAe,CAAC,EANf,QAAQ,CAOL,EACT,WAED6B,GAAI,CAAC,GAAG,aAAa,aAAY,GAAC,SAAUrB,EAAaK,CAAU,EAAE,WACnEiB,GAAS,CACR,KAAK,qBACL,MAAO9B,EAAE,aAAa,EACtB,QAAQ,oBACR,kBAAmBA,EAAE,iBAAiB,EACtC,UACEU,EAAO5K,KAAOiM,GAAiBT,MAAQS,GAAiBhE,QAE1D,WAAU,GAAA,WAETiE,GAAiB,CAChB,cAAY,iBACZ,UAAS,GACT,GAAG,oBACH,UACEtB,EAAO5K,KAAOiM,GAAiBT,MAAQS,GAAiBhE,QACzD,GACGwC,EAAS,OAAQ,CAAE0B,SAAU,EAAA,CAAM,CAAA,CAAC,CAAA,CACxC,CAAA,CACQ,CAAA,CAER,CAEZ,ECtHaC,GAASC,GAAqB,CACzC,MAAMC,EAAYD,EAAS,OAAO,CAAC,EAAE,MAAM,GAAG,EAC9C,OAAOC,EAAU,OAAS,EAAIA,EAAU,OAAO,CAAC,EAAI,MACtD,EAEaC,GAAaF,GAAqB,CACvC,MAAAC,EAAYF,GAAMC,CAAQ,EAChC,OAAOC,EAAYA,EAAUA,EAAU,OAAS,GAAK,MACvD,ECOaE,GAAc,CAAC,CAC1BC,aAAAA,EACAC,KAAAA,EACAC,aAAAA,EACA1C,QAAAA,CACkB,IAAM,CAClB,KAAA,CAAEC,EAAAA,CAAAA,EAAMC,EAAe,QAAQ,EAC/B,CAAEC,YAAAA,GAAgBC,EAAgB,EAClC,CAAEC,SAAAA,EAAUC,SAAAA,GAAaC,EAAW,EAEpCoC,EAAc,SAAY,CAC1B,GAAA,CACF,UAAW5B,KAASyB,EACZrC,MAAAA,EAAYc,OAAO2B,IAAI,CAC3B3M,GAAI8K,EAAM9K,EAAAA,CACX,EAEM+J,IACTK,EAASJ,EAAE,eAAgB,CAAE4C,MAAOL,EAAahJ,MAAQ,CAAA,CAAC,QACnD+H,GACPjB,EAAS,0BAA2BiB,CAAK,CAC3C,CAAA,EAGF,SACGuB,GAAkB,CACjB,SAAU7C,EAAE,qBAAsB,CAAE4C,MAAOL,EAAahJ,MAAAA,CAAQ,EAChE,WAAYyG,EAAE,gBAAiB,CAC7B4C,MAAOL,EAAahJ,OACpBuJ,UAAWP,EAAa,IAAIzM,IAAAA,CAC7B,EACD,oBAAoB,gBACpB,sBAAuB6L,GAAcoB,OACrC,UAAWL,EACX,KAAMF,EACN,aAAAC,CAAA,CACA,CAEN,EClCaO,GAAe,CAAC,CAC3BC,aAAAA,EACAC,aAAAA,EACAC,cAAAA,CACiB,IAAM,CACjB,KAAA,CAAEnD,EAAAA,CAAAA,EAAMC,EAAe,QAAQ,EAC/B,CAAEmD,aAAAA,GAAiBC,EAAc,EACjC,CAAEC,UAAAA,GAAcC,GAAW,EAC3BC,EAAYF,EAAU,cAAc,GAAKF,KAAgBK,QAAQC,OAEjE,CAACC,EAAWC,CAAW,EAAIC,EAAW,EAE5C,OAAKL,IAGHrO,EAAA,CAAA,SAAA,CACEC,EAAC0O,EAAW,CAAA,WACTpC,EAAM,CACL,cAAY,uBACZ,QAAQ,UACR,QAASuB,EAAa,SAErBjD,EAAE,aAAa,CAAA,CAAC,CAAA,CAEP,EACd5K,EAAC0O,EAAW,CAAA,WACTC,GAAQ,CACP,SACGC,GAAW,CAAC,SAAUJ,EAAa,WAAYT,CAAAA,CACjD,EACD,OAAQQ,EACR,QAAO,GACP,cAAe,CACbvO,EAAC6O,EAAY,CAEX,UAAU,SACV,QAAS,IAAM,CACCf,IACDU,GACf,EAAE,SAED5D,EAAE,eAAe,CAAC,EAPf,QAAQ,CAQC,CAAA,CACf,CAAA,CAEQ,CAAA,CAAA,CACb,EAlCkB5K,EAAO,MAAA,CAAA,CAAA,CAoChC,ECrDM8O,GAAa,MACjBhE,EACAiE,IACG,CACGjE,MAAAA,EAAYc,OAAO2B,IAAI,CAAE3M,GAAImO,EAAOnO,EAAAA,CAAK,EACzC,KAAA,CAAEA,GAAAA,CAAAA,EAAO,MAAMkK,EAAYc,OAAOG,OAAO,CAC7C,GAAGgD,EACHnO,GAAIwD,MAAAA,CACL,EACG2K,EAAOC,WACHC,MAAAA,QAAQC,IACZH,EAAOC,UAAU1E,IACfQ,GAAAA,EAAYc,OAAOE,iBACjB,CAAElL,GAAAA,CAAAA,EACF,CACE,GAAGuO,EACHvO,GAAIwD,MACL,CAAA,CACF,CACF,CAGP,EAEMgL,GAAc,MAClBtE,EACAiE,EACAM,IACG,CACC,GAAA,CACIvE,MAAAA,EAAYc,OAAOE,iBAAiB,CAAElL,GAAIyO,EAAKzO,IAAOmO,CAAM,QAC3D7C,GACP,GAAIA,EAAMoD,SACFpD,MAAAA,CAEV,CACF,EAEaqD,GAAa,CAAC,CAAER,OAAAA,EAAQS,QAAAA,EAAS7E,QAAAA,CAAyB,IAAM,CACrE,KAAA,CAAEC,EAAAA,CAAAA,EAAMC,EAAe,QAAQ,EAE/B,CAAEC,YAAAA,GAAgBC,EAAgB,EAClC,CAAEC,SAAAA,EAAUC,SAAAA,GAAaC,EAAW,EAc1C,SACGuE,GAAiB,CAChB,KAAK,YACL,aAAc,CAACV,CAAM,EACrB,KAAM,CACJpO,MAAO,qBACP+O,GAAI,iBACN,EACA,QAAAF,EACA,UArBc,MAAO9D,GAAkC,CACrD,GAAA,CACKA,MAAAA,EACH0D,GAAYtE,EAAaiE,EAAQrD,EAAM,EAAE,EACzCoD,GAAWhE,EAAaiE,CAAM,GACzBpE,IACAC,EAAAA,EAAE,kBAAkB,CAAC,QACvBsB,GACPjB,EAAS,wBAAyBiB,CAAK,CACzC,CAAA,CAYayD,CACX,CAEN,ECzDaC,GAAa,CAAC,CAAEjF,QAASkF,CAA6B,IAAM,CACjE,KAAA,CAAEjF,CAAAA,EAAMC,EAAe,QAAQ,EAE/B,CAAEC,YAAAA,GAAgBC,EAAgB,EAClC,CAAE+E,MAAAA,GAAUC,GAAU,EACtB,CAAC5C,EAAc6C,CAAe,EAAI5N,EAAAA,QAAAA,SAAgC,CAAE,CAAA,EAEpE,CAACqI,EAAQwF,CAAS,EAAI7N,EAA+B,QAAA,SAAA,EACrD,CAAC8N,EAAmBC,CAAgB,EAAI1B,EAAW,EACnD,CAAC2B,EAAYC,CAAgB,EAAI5B,EAAW,EAC5C,CAAC6B,EAAMC,CAAO,EAAInO,EAA+B,QAAA,SAAA,EAEjD,CAAE4M,UAAAA,EAAWhB,aAAAA,EAAcwC,aAAAA,GAAiBvC,EAAc,EAE1D,CAACvH,EAAK+J,CAAM,EAAIrO,mBAAS,CAAC,EAC1BuI,EAAU,IAAM8F,EAAO/J,EAAM,CAAC,EAC9B,CAACgK,EAAQC,CAAS,EAAIvO,EAAkB,QAAA,SAAA,EAExCwO,EAAWC,KACXC,EAAWC,KACXnQ,EAAKqM,GAAU6D,EAAS/D,QAAQ,EAEhC,CAAEmB,UAAAA,GAAcC,GAAW,EAC3BC,EAAYF,EAAU,cAAc,GAAKF,KAAgBK,QAAQC,OACjE0C,EACJ9C,EAAU,eAAgB,YAAY,GACtCA,EAAU,eAAgB,cAAc,EAEpC+C,EAAS,MAAOC,EAAgBC,IAAiB,CACrD,MAAMC,EAAiC,CACrCV,OAAQA,GAAU,GAClBQ,MAAOA,GAAO3G,SAAAA,GAAc,GAC5B4G,IAAKA,GAAK5G,SAAAA,GAAc,EAAA,EAG1B,IAAI8G,EACJ,GAAIzQ,EAAI,CACN,MAAM8K,GAAQ,MAAMZ,EAAYc,OAAO0F,QAAQ,CAAE1Q,GAAAA,CAAAA,CAAI,EACrD,GAAI,CAAC8K,GACH,MAAM,IAAI6F,MAAM3G,EAAE,iBAAiB,CAAC,EAGtCyG,EAAcX,EAEVhF,GAAMsD,WAAWjI,OAAQyK,IAAMA,GAAE9Q,MAAM8G,SAASkJ,CAAM,CAAC,EADvDhF,GAAMsD,SACiD,MAE9CqC,EAAA,MAAMI,GACjB3G,EACA,gBACA,CACE,GAAGsG,EACHM,OAAQ,OAAA,CACT,EAIL,OAAKL,GACHT,EAASe,GAAS,CAAE7B,MAAAA,CAAO,CAAA,CAAC,EAGvBuB,GAAc,CAAA,CAAE,EAGnBO,EAAiBlG,GAChBsF,IAGFa,EAAI,CAEH,GAAK,GAAEf,EAAS/D,YAAYrB,EAAM9K,KAClC,QAAS,IAAM4P,EAAa,CAAC,GAAGxB,EAAWtD,CAAK,CAAC,EAAE,SAElDA,EAAMhL,IAAAA,EAJFgL,EAAM9K,EAAE,IAJI,OAAA,CAAA,SAAO8K,EAAMhL,IAAAA,CAAY,EAahD,SACEX,EAAA,CAAA,SAAA,CACEC,EAACkN,GAAW,CACV,KAAMkD,EACN,aAAcC,EACd,aAAAlD,EACA,QAAS,IAAM,CACJxC,IACIkF,IACbG,EAAgB,CAAE,CAAA,CACpB,CAAA,CAAE,EAEHvF,GACCzK,EAACwK,EAAW,CACV,GAAIC,EAAO7J,GACX,OAAQ6J,EAAO/J,KACf,QAAS,IAAM,CACJiK,IACIkF,GACf,EACA,kBAAmB,IAAMI,EAAU7L,MAAS,CAAA,CAAE,EAGjD8L,GACClQ,EAACwK,EAAW,CACV,GAAI2C,EAAa,IAAIvM,IAAMA,EAC3B,kBAAmBuP,EACnB,QAAS,IAAM,CACbH,EAAgB,CAAE,CAAA,EACTrF,IACIkF,GACf,CAAA,CAAE,EAGLS,GACCtQ,EAACuP,GAAU,CACT,OAAQe,EACR,QAAS,IAAM,CACbC,EAAQnM,MAAS,EACRuG,IACIkF,GACf,EACA,QAAS,IAAMU,EAAQnM,MAAS,CAAA,CAEnC,EACDpE,EAAC8R,GAAiB,CAEhB,SAAoB9B,GAAAA,EAAgB,CAAC,GAAG+B,CAAI,CAAC,EAC7C,aAAY,GACZ,OAAAd,EACA,aAAa,gBACb,YAAW,GACX,YAAa,CAAC,CAACP,EACf,cACE3Q,EAAA,CAAA,SAAA,CACEC,EAAC0O,EAAW,CAAA,WACTsD,GAAW,CACV,cAAY,eACZ,YAAapH,EAAE,cAAc,EAC7B,MAAO8F,EACP,SAAU,CAACuB,EAAGC,IAAU,CACtBvB,EAAUuB,CAAK,CACjB,EACA,SAAUvH,EACV,QAAS,IAAM,CACbgG,EAAU,EAAE,EACHhG,GACX,CAAA,CAAE,CAAA,CAEQ,EACd3K,EAAC4N,GAAY,CACX,aAAcuC,EACd,aAAcE,EACd,cAAelD,EAAchJ,SAAW,CAAA,CACxC,CAAA,CAAA,CAEL,EACD,QACGiK,EAEG,CACE,CACEzN,MAAOiK,EAAE,QAAQ,EACjBuH,WAAY,MAAOzG,IACjBuE,EAAUvE,CAAK,EACR,GACT,EAEF,CACE/K,MAAOiK,EAAE,QAAQ,EACjBuH,WAAY,MAAOzG,IACjB6E,EAAQ7E,CAAK,EACN,GACT,EAEF,CACE/K,MAAOiK,EAAE,kBAAkB,EAC3BuH,WAAY,MAAOzG,IACDsE,EAAA,CAACtE,CAAK,CAAC,EACLyE,IACX,GACT,EAEF,CACEiC,YAAa,EAAA,EAEf,CACEzR,MAAOiK,EAAE,eAAe,EACxBuH,WAAY,MAAOzG,IACDsE,EAAA,CAACtE,CAAK,CAAC,EACL2E,IACX,GACT,CACD,EAlCH,CAAA,EAqCN,QAAS,CACP,CACE3P,KAAM,OACN2R,WAAY,mBACZC,aAAcV,CAAAA,CACf,EAEH,aACGW,GAAc,CACb,QAAS,GACT,QAAS3H,EAAG,iBAAgBhK,EAAK,WAAa,SAAS,EACvD,aAAcgK,EACX,iBAAgBhK,EAAK,WAAa,qBAAqB,EAE1D,kBAAmBgK,EAAE,aAAa,EAClC,gBAAiBuF,CAAAA,CAAiB,CArFhC,EAAA,GAAEvP,IAAK8F,GAAK,CAwFlB,CAAA,CACD,CAEP,ECzNa8L,GAAc,CAAC,CAAEC,QAAAA,EAASjD,QAAAA,CAA0B,IAAM,CAC/D,KAAA,CAAE5E,EAAAA,CAAAA,EAAMC,EAAe,QAAQ,EAC/B,CAAEC,YAAAA,GAAgBC,EAAgB,EAClC,CAAEC,SAAAA,EAAUC,SAAAA,GAAaC,EAAW,EACpC,CAACiC,EAAc6C,CAAe,EAAI5N,EAAAA,QAAAA,SAA+B,CAAE,CAAA,EAEnE6O,EAAS,MAAOC,EAAgBC,EAAcT,IAAoB,CACtE,MAAMgC,EAAU,MAAM5H,EAAYc,OAAO+G,YAAY,CAAE/R,GAAI6R,CAAAA,CAAS,EAC9DrB,EAA8C,CAClDF,MAAAA,EACAC,IAAKA,EAAOuB,EAAQvO,OACpBuM,OAAQA,GAAU,EAAA,EAGhB,GAAA,CACF,MAAMkC,EAAQ,MAAM9H,EAAY8H,MAAMC,KAAK,CAAE,GAAGzB,CAAAA,CAAQ,EACxD,OAAO0B,GAAaF,EAAOF,EAAS,IAAI,EAAEK,MAAM,EAAG5B,CAAG,QAC/CjF,GACPjB,OAAAA,EAAS,2BAA4BiB,CAAK,EACnC,EACT,CAAA,EAGF,SACGC,GAAK,CACJ,QAASC,GAAa4G,MACtB,MAAOpI,EAAE,WAAW,EACpB,OAAQ,GACR,QAAA4E,EACA,QAAS,CACPxP,EAACsM,EAAM,CACL,cAAY,MAEZ,QAAQ,UACR,QAAS,SAAY,CACf,GAAA,CACF,MAAM2C,QAAQC,IACZ/B,EAAa7C,IACXQ,GAAAA,EAAY8H,MAAMK,WAAW,CAAErS,GAAIsS,EAAKtS,GAAK6R,QAAAA,CAAS,CAAA,CAAC,CACxD,EAEMjD,IACTxE,EACEJ,EAAE,aAAc,CAAE4C,MAAOL,EAAahJ,MAAAA,CAAQ,EAC9C6H,EAAaC,OAAO,QAEfC,GACPjB,EAAS,yBAA0BiB,CAAK,CAC1C,CACF,EAAE,SAEDtB,EAAE,YAAY,CAAA,EAnBX,SAAS,EAqBf5K,EAACsM,EAAM,CACL,cAAY,SAEZ,QAAQ,OACR,QAASkD,EAAQ,SAEhB5E,EAAE,eAAe,CAAC,EAJf,QAAQ,CAKL,EACT,WAEDkH,GAAiB,CAChB,OAAAb,EACA,YAAW,GACX,aAAa,cACb,qBAAqB,sBACrB,aAAY,GACZ,SAAoBjB,GAAAA,EAAgB,CAAC,GAAG+B,CAAI,CAAC,EAC7C,aACGQ,GAAc,CACb,QAAS3H,EAAE,oBAAoB,EAC/B,aAAcA,EAAE,yBAAyB,CAAA,CAE5C,EACD,QAAS,CACP,CACElK,KAAM,WACN2R,WAAY,gBAAA,EAEd,CACE3R,KAAM,QACN2R,WAAY,aAAA,EAEd,CACE3R,KAAM,WACN2R,WAAY,iBACZc,eAAgB,CAACC,GAAgB,CAAA,EAEnC,CACE1S,KAAM,YACN2R,WAAY,kBACZc,eAAgB,CAACC,GAAgB,CAAA,CAClC,CAAA,CACD,CAAA,CAEE,CAEZ,ECvFaC,GAAU,IAAM,CACrB,KAAA,CAAEzI,EAAAA,CAAAA,EAAMC,EAAe,QAAQ,EAC/B,CAAEC,YAAAA,GAAgBC,EAAgB,EAClC,CAAE+E,MAAAA,GAAUC,GAAU,EACtB,CAAE/E,SAAAA,EAAUC,SAAAA,GAAaC,EAAW,EACpC4F,EAAWC,KACXnQ,EAAKqM,GAAU6D,EAAS/D,QAAQ,EAChC,CAACuG,EAAiBC,CAAkB,EAAInR,mBAAS,EAAK,EACtD,CAAE4L,aAAAA,GAAiBC,EAAc,EACjC,CAACuF,EAAYC,CAAa,EAAIrR,mBAAS,EAAK,EAC5C,CAACsR,EAAaC,CAAc,EAAIvR,mBAAS,EAAK,EAC9C,CAAC+K,EAAc6C,CAAe,EAAI5N,EAAAA,QAAAA,SAA+B,CAAE,CAAA,EACnE,CAAE8L,UAAAA,GAAcC,GAAW,EAE3BC,EACJF,EAAU,cAAc,GAAKF,IAAgBK,OAAQuF,iBAEjD,CAAClN,EAAK+J,CAAM,EAAIrO,mBAAS,CAAC,EAC1BuI,EAAU,IAAM8F,EAAO,IAAIoD,KAAM,EAACC,SAAS,EAE3CC,EAAgB,MAAOnT,GAC3B,MAAMkK,EAAY8H,MAAMoB,WAAW,CAAEpT,GAAIA,CAAAA,CAAK,EAE1CqT,EAAgBrI,GAAkC,CACtD,IAAIoD,EAAmC,CAAA,EACvC,UAAWtD,KAASE,EAAS,CAC3BoD,EAAUkF,KAAKxI,CAAK,EACdyI,MAAAA,EAAOF,EAAavI,EAAMsD,SAAU,EAC9BA,EAAAA,EAAUoF,OAAOD,CAAI,CACnC,CACOnF,OAAAA,CAAAA,EAGHiC,EAAS,MAAOC,EAAgBC,IAAiB,CACrD,IAAIuB,EAAU,MAAM5H,EAAYc,OAAO+G,YAAY,CACjD/R,GAAAA,EACAsQ,MAAAA,EACAC,IAAAA,CAAAA,CACD,EAED,GAAImC,EAAiB,CACnB,MAAMtE,EAAYiF,EAAajG,EAAc,GAAEgB,SAAU,EACzD,UAAWtD,KAASsD,EAClB0D,EAAUA,EAAQ0B,OAChB,MAAMtJ,EAAYc,OAAO+G,YAAY,CAAE/R,GAAI8K,EAAM9K,EAAK,CAAA,CAAC,EAG3D8R,EAAU2B,GAAO3B,EAAqB4B,GAAAA,EAAOC,QAAQ,CACvD,CAEMC,MAAAA,EAAmB,MAAMvF,QAAQC,IACrCwD,EAAQpI,IAAKgK,GAAWP,EAAcO,EAAO1T,EAAG,CAAC,CAAC,EAEpD,OAAO8R,EAAQpI,IAAI,CAACgK,EAA4BG,KACvC,CAAE,GAAGH,EAAQI,WAAYF,EAAiBC,EAAAA,EAClD,CAAA,EAGGE,EAAoBL,KAEtBvU,EAAA,CAAA,SACGuU,EAAOI,WAAWpK,IAAI,CAACoB,EAAOkJ,MAC7B7U,EAAA,CAAA,SAAA,CACEC,EAAC6U,GAAS,CAAgB,MAAAnJ,CAAA,EAAVA,EAAM9K,EAAE,EACvB0T,EAAOI,WAAWE,EAAQ,GAAK,KAAO,EAAE,CAAA,CAE5C,CAAA,CAAA,CACA,EAIDE,EAAkB5B,GACtBlT,EAAC6R,EAAI,CAAe,GAAIkD,GAAO,CAAEjF,MAAAA,EAAOlP,GAAIsS,EAAKtS,GAAKoU,IAAK,UAAA,CAAY,EAAE,SACtE9B,EAAKqB,QAAAA,EADGrB,EAAKtS,EAAE,EAIpB,SACEb,EAAA,CAAA,SACGyT,CAAAA,GACCxT,EAACwS,GAAW,CACV,QAAS5R,EACT,QAAS,IAAM,CACb6S,EAAc,EAAK,EACV9I,GACX,CAAA,CAEH,EACD3K,EAAC8R,GAAiB,CAChB,cAAY,gBAEZ,OAAAb,EACA,aAAa,iBACb,YAAW,GACX,aAAY,GACZ,SAAoBjB,GAAAA,EAAgB,CAAC,GAAG+B,CAAI,CAAC,EAC7C,YACE3D,GACEtO,EAAAC,EAAA,CAAA,SAAA,CACEC,EAAC0O,EAAW,CAAA,WACTpC,EAAM,CACL,cAAY,YACZ,QAAQ,UACR,QAAS,IAAMmH,EAAc,EAAI,EAAE,SAElC7I,EAAE,WAAW,CAAA,CAAC,CAAA,CAEL,EACd5K,EAAC0O,EAAW,CAAA,WACTuG,GAAQ,CACP,cAAY,wBACZ,MAAOrK,EAAE,kBAAkB,EAC3B,GAAG,wBACH,UAAW0I,EACX,SAAU,IAAMC,EAAmB,CAACD,CAAe,CAAA,CAAE,CAAA,CAE3C,EACdtT,EAAC0O,EAAW,CAAA,WACTC,GAAQ,CACP,SACGC,GAAW,CACV,SAAU,IAAM+E,EAAe,CAACD,CAAW,EAC3C,WAAYvG,EAAahJ,SAAW,CAAA,CAEvC,EACD,OAAQuP,EACR,QAAO,GACP,cAAe,CACb1T,EAAC6O,EAAY,CAEX,UAAU,SACV,QAAS,SAAY,CACf,GAAA,CACF,MAAMI,QAAQC,IACZ/B,EAAa7C,IACXQ,GAAAA,EAAY8H,MAAMsC,aAAa,CAC7BtU,GAAIsS,EAAKtS,GACT6R,QAAS7R,CACV,CAAA,CAAC,CACH,EAEH+S,EAAe,EAAK,EACpB3I,EACEJ,EAAE,YAAa,CAAE4C,MAAOL,EAAahJ,MAAAA,CAAQ,EAC7C6H,EAAaC,OAAO,QAEfC,GACPjB,EAAS,wBAAyBiB,CAAK,CACzC,CAESvB,GACX,EAAE,SAEDC,EAAE,OAAO,CAAC,EAxBP,QAAQ,CAyBC,CAAA,CACf,CAAA,CAEQ,CAAA,CAAA,CAGnB,EACD,QACEwD,EACI,CACE,CACEzN,MAAOiK,EAAE,OAAO,EAChBuH,WAAY,MAAOe,GAAS,CACtB,GAAA,CACIpI,MAAAA,EAAY8H,MAAMsC,aAAa,CACnCtU,GAAIsS,EAAKtS,GACT6R,QAAS7R,CAAAA,CACV,EACDoK,EACEJ,EAAE,YAAa,CAAE4C,MAAO,CAAA,CAAG,EAC3BxB,EAAaC,OAAO,QAEfC,GACPjB,EAAS,wBAAyBiB,CAAK,CACzC,CAEO,MAAA,EACT,CACD,CAAA,EAEH,CACL,EACD,QAAS,CACP,CACExL,KAAM,WACN2R,WAAY,cACZC,aAAcwC,CAAAA,EAEhB,CACEpU,KAAM,QACN2R,WAAY,eACZc,eAAgB,CAACC,GAAgB,CAAA,EAEnC,CACE1S,KAAM,YACN2R,WAAY,mBACZc,eAAgB,CAACC,GAAgB,CAAA,EAEnC,CACE1S,KAAM,WACN2R,WAAY,kBACZc,eAAgB,CAACC,GAAgB,CAAA,EAEnC,CACE1S,KAAM,aACN2R,WAAY,oBACZC,aAAcqC,CAAAA,CACf,EAEH,aACGpC,GAAc,CACb,QAAS3H,EAAE,oBAAoB,EAC/B,aAAcwD,EAAYxD,EAAE,yBAAyB,EAAIxG,OACzD,kBAAmBgK,EAAYxD,EAAE,WAAW,EAAIxG,OAChD,gBAAiB,IAAMqP,EAAc,EAAI,EACzC,iBAAkB,CAChB,CACE0B,KAAMvK,EAAE,kBAAkB,EAC1BjI,QAAS,IAAM4Q,EAAmB,EAAI,CAAA,CACvC,CAAA,CACD,CAAA,EAtIA,GAAE3S,IAAK8F,IAAM4M,GAAiB,CAyIpC,CAAA,CACD,CAEP,EC/Oa8B,GAAkB,IAAM,CAC7B,KAAA,CAAExK,EAAAA,CAAAA,EAAMC,EAAe,QAAQ,EAC/B,CAAEC,YAAAA,GAAgBC,EAAgB,EAClC,CAAEC,SAAAA,EAAUC,SAAAA,GAAaC,EAAW,EACpCmK,EAAO9J,GAAuB,CAClC+J,KAAM,UAAA,CACP,EAEKxE,EAAWC,KACXnQ,EAAKqM,GAAU6D,EAAS/D,QAAQ,EAChC,CAAEiB,aAAAA,EAAcgB,UAAAA,EAAWwB,aAAAA,GAAiBvC,EAAc,EAE1DsH,EAAqBC,GAClBC,GAAgBD,GAAQxH,EAAc,GAAE0H,UAAW,EAG5DrT,EAAAA,QAAAA,UAAU,IAAM,CACTsT,EAAAA,SAAS,aAAcJ,EAAmB,CAAA,CAAA,EAC9C,CAACvG,CAAS,CAAC,EAER4G,MAAAA,EAAO,MAAOC,GAAiC,CAC/C,GAAA,CACF,MAAMnK,EAAQsC,IACR0H,EAAaI,GAAgBD,EAAcH,UAAW,EACtD5K,MAAAA,EAAYc,OAAOC,OAAO,CAAEjL,GAAAA,CAAAA,EAAW,CAAE,GAAG8K,EAAOgK,WAAAA,CAAAA,CAAY,EAExDlF,EAAA,CACX,GAAGxB,EAAU+D,MAAM,EAAG/D,EAAU7K,OAAS,CAAC,EAC1C,CAAE,GAAGuH,EAAOgK,WAAAA,CAAY,CAAA,CACzB,EACD1K,EAASJ,EAAE,cAAc,EAAGoB,EAAaC,OAAO,QACzCC,GACPjB,EAAS,0BAA2BiB,CAAK,CAC3C,CAAA,EAGF,SACG6J,GAAW,CAAC,QAASC,GAAoBC,MAAM,WAC7CC,GAAc,CACb,KAAAb,EACA,KAAAO,EACA,kBAAmB5H,KAAgBK,QAAQC,OAC3C,MAAO,IACL+G,EAAKc,MAAM,CACTT,WAAYH,EAAiB,CAAA,CAC9B,CAAA,CACF,CAAA,CAES,CAElB,EC7Daa,GAAmB,CAAC,CAAExV,GAAAA,EAAIF,KAAAA,CAA4B,IAAM,CACjE,KAAA,CAAEkK,EAAAA,CAAAA,EAAMC,EAAe,SAAS,EAChC,CAAEC,YAAAA,GAAgBC,EAAgB,EAClC,CAAEC,SAAAA,EAAUC,SAAAA,GAAaC,EAAW,EA6B1C,SAAQmL,GAAW,CAAC,KAAA3V,EAAY,GAAAE,EAAQ,KAAK,SAAS,KA3BlC,MAAOmR,GAAgB,CACrC,GAAA,CACF,MAAMuE,EAAavE,EAChBhL,OAAQwP,GAAQA,EAAIC,SAAWpS,MAAS,EACxCkG,IAAKiM,GAAQA,EAAIjW,IAA0B,EAC3CmW,OACG3L,MAAAA,EAAYc,OAAO8K,qBAAqB,CAC5C9V,GAAAA,EACA+V,MAAOL,CAAAA,CACR,EACD,MAAMrH,QAAQC,IACZ6C,EACGhL,OAAgBwP,GAAAA,EAAIC,SAAWpS,MAAS,EACxCkG,IACCQ,GAAAA,EAAYc,OAAOgL,sBAAsB,CACvChW,GAAAA,EACAiW,eAAgBN,EAAIC,OAAQ5V,GAC5B+V,MAAO,CAACJ,EAAIjW,IAA0B,CACvC,CAAA,CAAC,CACH,EAEL0K,EAASJ,EAAE,2BAA2B,EAAGoB,EAAaC,OAAO,QACtDC,GACPjB,EAAS,kCAAmCiB,CAAK,CACnD,CAAA,CAG0D4K,CAAe,CAC7E,ECVA,MAAMC,GAAuB,CAAC,CAC5BrL,MAAAA,EACAf,QAAAA,CACyB,IAAM,CACzB,KAAA,CAAEC,EAAAA,CAAAA,EAAMC,EAAe,QAAQ,EAE/B,CAACmM,EAAQC,CAAU,EAAIxI,EAAW,EAClC,CAACyI,EAAYC,CAAgB,EAAI1I,EAAW,EAC5C,CAAC2I,EAAYjH,CAAgB,EAAI1B,EAAW,EAC5C,CAAC4I,EAAUC,CAAc,EAAI7I,EAAW,EACxC,CAAC8I,EAAYC,CAAgB,EAAI/I,EAAW,EAElD,SACE1O,EAAA,CAAA,SACGmX,CAAAA,GACClX,EAACwK,EAAW,CACV,GAAIkB,EAAM9K,GACV,OAAQ8K,EAAMhL,KACd,QAAS,IAAM,CACJiK,GACX,EACA,kBAAmBwM,CAAAA,CAAiB,EAGvCC,GACCpX,EAACwK,EAAW,CACV,GAAIkB,EAAM9K,GACV,kBAAmBuP,EACnB,QAAAxF,CAAA,CAAiB,EAGpB0M,GACCrX,EAACuP,GAAU,CAAC,OAAQ7D,EAAO,QAAAf,EAAkB,QAAS2M,CAAAA,CACvD,EACDtX,EAACkN,GAAW,CACV,KAAMqK,EACN,aAAcC,EACd,aAAc,CAAC9L,CAAK,EACpB,QAAAf,CAAA,CACA,EACF3K,EAAC2O,GAAQ,CACP,SAASC,GAAW,CAAC,SAAUqI,CAAAA,CAAe,EAC9C,OAAAD,EACA,QAAO,GACP,SAAUS,GAAiBC,MAC3B,cAAe,CACb1X,EAAC6O,EAAY,CAAc,QAASsI,EAAiB,SAClDvM,EAAE,QAAQ,CAAA,EADK,QAAQ,EAG1B5K,EAAC6O,EAAY,CAAY,QAASyI,EAAe,SAC9C1M,EAAE,QAAQ,CAAA,EADK,MAAM,EAGxB5K,EAAC6O,EAAY,CAAc,QAASsB,EAAiB,SAClDvF,EAAE,kBAAkB,CAAA,EADL,QAAQ,EAGzB5K,EAAA2X,IAAsB,EAAA,WAAW,EAClC3X,EAAC6O,EAAY,CAAc,QAAS2I,EAAiB,SAClD5M,EAAE,eAAe,CAAC,EADH,QAAQ,CAEX,CAAA,CAEjB,CAAA,CAAA,CACD,CAEP,EAMagN,GAAY,CAAC,CAAEjN,QAASkF,CAA4B,IAAM,CAC/D,KAAA,CAAEjF,CAAAA,EAAMC,EAAe,QAAQ,EAC/B,CAAEC,YAAAA,GAAgBC,EAAgB,EAClC,CAAE+E,MAAAA,GAAUC,GAAU,EAEtB,CAAC7L,EAAM2T,CAAO,EAAIzV,EAA8B,QAAA,SAAA,EAChD,CAAE4M,UAAAA,EAAWwB,aAAAA,GAAiBvC,EAAc,EAE5C,CAACyC,EAAQC,CAAS,EAAIvO,mBAAS,EAAE,EACjC,CAAC+O,EAAK2G,CAAM,EAAI1V,mBAAS,EAAE,EAC3B,CAAC8O,EAAO6G,CAAQ,EAAI3V,mBAAS,CAAC,EAC9B,CAAC4V,EAAOC,CAAQ,EAAI7V,mBAAS,EAAK,EAElC,CAACsE,EAAK+J,CAAM,EAAIrO,mBAAS,CAAC,EAC1BuI,EAAU,IAAM,CACpB8F,EAAO/J,EAAM,CAAC,EACDmJ,GAAA,EAGTqI,EAAW,CACfxM,EACAyM,EACAxN,IACqB,CACrB,MAAMiB,EAAS,CAAC,GAAGuM,EAASzM,CAAK,EAC1B,MAAA,CACL9K,GAAI8K,EAAM9K,GACVF,OACG0X,GAAO,CAAC,QAAS1M,EAAMhL,KAAK,WAC1BmR,EAAI,CACH,GAAK,IAAG/B,YAAgBuI,GAAS,GAAGzM,EAAOtB,IAAKkH,GAAMA,EAAE5Q,EAAG,CAAC,IAC5D,QAAS,IAAM4P,EAAa5E,CAAM,EAAE,SAEnCF,EAAMhL,IAAAA,CAAI,CAAA,CAGhB,EACDf,SACE+L,EAAMsD,WAAatD,EAAMsD,UAAU7K,OAAS,EACxCuH,EAAMsD,UAAU1E,OAAW4N,EAAS1G,EAAG5F,EAAQjB,CAAO,CAAC,EACvDvG,OACNrC,SAASgV,GAAoB,CAAC,MAAArL,EAAc,QAASf,CAAAA,CAAW,EAChE7J,gBAAiBkO,EAAU1E,IAAKkH,GAAMA,EAAE5Q,EAAE,EAAE4G,SAASkE,EAAM9K,EAAE,CAAA,CAC/D,EAGF0X,OAAAA,GACE,IACE7G,GACE3G,EACA,gBACA5K,OAAOC,OACL,CACE+Q,MAAQ,GAAEA,IACVC,IAAM,GAAEA,EAAM,IACd6G,MAAQ,GAAEA,GAAAA,EAEZtH,IAAW,GAAK,KAAO,CAAEA,OAAAA,CAAAA,CAAQ,CAClC,EAEJ9E,GAAWiM,EAAQjM,EAAOtB,IAAW4N,GAAAA,EAAS1G,EAAG,GAAI7G,CAAO,CAAC,CAAC,EAC/D,CAACjE,EAAKwK,EAAOC,EAAKT,EAAQsH,CAAK,CAAC,EAG3B9T,IACJqU,GAAsB,CACrB,MAAOrU,EAAKC,QAAU,EACtB,MAAA+M,EACA,IAAAC,EACA,YAAa4G,EACb,gBAAiBA,EACjB,gBAAiB,CAAC7G,EAAOC,IAAQ,CAC/B4G,EAAS7G,CAAK,EACd4G,EAAO3G,CAAG,CACZ,EACA,eAAe,kBACf,sBAAuBvG,EAAE,wBAAwB,EACjD,kBAAmB+F,EACnB,cACG6H,GAAU,CAAC,UAAU,aAAY,SAAA,CAChCxY,EAACiV,GAAQ,CACP,GAAG,QACH,cAAY,eACZ,KAAK,QACL,UAAW+C,EACX,SAAqBC,GAAAA,EAAS/F,CAAK,CAAA,CAAE,EAEvClS,EAAA,OAAA,CAAM,UAAU,aAAY,SAAE4K,EAAE,aAAa,CAAA,CAAS,CAAA,CAAA,CAEzD,EAAA,SAEA1G,EAAKC,OAAS,KACZ6F,GAAQ,CACP,KAAA9F,EACA,YAAawM,EAAOvM,OAAS,EAC7B,UAAS,GACT,UAAU,0BAAA,CAA0B,CAGjB,CAAA,EAExBnE,EAAAyY,GACF,CAAA,CAAA,CACH,ECxMaC,GAAmB,IAAM,CAC9B,KAAA,CAAE9N,EAAAA,GAAMC,EAAgB,EACxB,CAAE8N,MAAAA,EAAOC,OAAAA,EAAQ5J,UAAAA,GAAcf,EAAc,EAC7C,CAAE6B,MAAAA,GAAUC,GAAU,EACtBe,EAAWC,KAEjB1O,OAAAA,EAAAA,QAAAA,UAAU,IAAM,CACR,KAAA,CAAE0K,SAAAA,CAAa+D,EAAAA,GAEjB,CAAC/D,EAASvF,SAAS,SAAS,GAAKuF,EAAS8L,SAAS,SAAS,IACvDF,GACT,EACC,CAAC7H,CAAQ,CAAC,EAEN9B,EAAU7K,SAAW,EAC1BrE,EAACgZ,GAAU,CAAA,SAAA,CACT9Y,EAAC+Y,GAAc,CAAA,WACZlH,EAAI,CAAC,GAAK,IAAG/B,WAAe,SAAElF,EAAE,QAAQ,CAAA,CAAC,CAAA,EADxB,MAAM,EAGzBoE,EAAU1E,IAAI,CAACoB,EAAO+I,IAAM,CACrBuE,MAAAA,EAAcvE,IAAMzF,EAAU7K,OAAS,EAC7C,SACG4U,GAAc,CAAgB,SAAUC,EAAY,SAAA,CAClD,CAACA,KACCnH,EAAI,CACH,GAAIf,EAAS/D,SAASkM,UACpB,EACAnI,EAAS/D,SAASmM,QAAQxN,EAAM9K,EAAG,EAAI8K,EAAM9K,GAAIuD,MAAM,EAEzD,QAAS,IAAMyU,EAAOlN,CAAK,EAAE,SAE5BA,EAAMhL,IAAAA,CAAI,EAGdsY,IACEtN,EAAM9K,KAAO,SAAW8K,EAAMhL,KAAOkK,EAAE,qBAAqB,EAAE,CAAA,EAb9Cc,EAAM9K,EAAE,CAAA,CAgBhC,CAAC,CAAA,CAAA,EAEF,IACN,ECRA,SAAwBuY,IAAgB,CAChC,KAAA,CAAEvO,EAAAA,CAAAA,EAAMC,EAAe,QAAQ,EAC/B,CAACuO,EAAWC,CAAY,EAAIjX,mBAAS,CAAC,EAEtC,CAAEkX,YAAAA,GAAgBC,GAAe,EAEjC,CAAEzO,YAAAA,GAAgBC,EAAgB,EAClC,CAAEiE,UAAAA,EAAWwB,aAAAA,EAAcxC,aAAAA,GAAiBC,EAAc,EAC1D,CAAE6B,MAAAA,GAAUC,GAAU,EAEtB,CAACtF,EAAQwF,CAAS,EAAI7N,EAAkB,QAAA,SAAA,EACxC,CAACmV,EAAYC,CAAgB,EAAI/I,EAAW,EAE5CmC,EAAWC,KACXC,EAAWC,KACXnQ,EAAKqM,GAAU6D,EAAS/D,QAAQ,EAEhC,CAACrG,EAAK+J,CAAM,EAAIrO,mBAAS,CAAC,EAC1BuI,EAAU,IAAM8F,EAAO/J,EAAM,CAAC,EAE9B,CAAEwH,UAAAA,GAAcC,GAAW,EAC3BqL,EACJ,CAACF,GAAaG,kBAAkBjS,SAAS,0BAA0B,GACnE0G,EAAU,uBAAwB,eAAgB,gBAAgB,EAC9DwL,EACJxL,EAAU,cAAc,GAAKF,KAAgBK,QAAQC,OACjDqL,EAAiBzL,EAAU,cAAc,EAE/CoK,OAAAA,GACE,SAAY,CACJsB,MAAAA,EAAM9M,GAAMgE,EAAS/D,QAAQ,EAGnC,GAFiC6M,GAAOA,EAAIzV,OAAS6K,EAAU7K,OAEjC,CAC5B,MAAMyH,EAAgC,CAAA,EACtC,UAAW6I,KAAKmF,EAAM,CACpB,MAAMlO,EACJ+I,IAAM,SACF,MAAM3J,EAAYc,OAAO0F,QAAQ,CAAE1Q,GAAI6T,CAAAA,CAAG,EAC1C,CAAE/T,KAAMkK,EAAE,cAAc,EAAGhK,GAAI,QAAA,EACrC,GAAI8K,EACFE,EAAOsI,KAAKxI,CAAK,MAEjB,OAAM,IAAI6F,MAAM3G,EAAE,iBAAiB,CAAC,CAExC,CACOgB,OAAAA,CACT,CACA,MAAO,EACT,EACCA,GAAkC,CAC7BA,EAAOzH,QAAQqM,EAAa5E,CAAM,CAAA,EAExC,CAAChL,CAAE,CAAC,IAIJb,EAAA,CAAA,SAAA,CACEC,EAACkN,GAAW,CACV,KAAMqK,EACN,aAAcC,EACd,aAAc,CAACxJ,GAAe,EAC9B,QAAS,IAAM,CACb4C,EAASe,GAAS,CAAE7B,MAAAA,CAAO,CAAA,CAAC,EACnBnF,GACX,CAAA,CAAE,EAEHF,GACCzK,EAACwK,EAAW,CACV,GAAA5J,EACA,OAAA6J,EACA,QAAoBiB,GAAA,CACTf,IACI6F,EAAA,CAAC,GAAGxB,EAAU+D,MAAM,EAAG/D,EAAU7K,OAAS,CAAC,EAAGuH,CAAM,CAAC,CACpE,EACA,kBAAmB,IAAMuE,EAAU7L,MAAS,CAAA,CAE/C,EACDpE,EAAC+V,GAAW,CAAC,QAASC,GAAoBC,MAAO,UAAU,WAAU,WAClE4D,GAAM,CAAC,SAAQ,GAAC,WAAU,GAAA,WACxBC,GAAa,CACZ,eACGC,GAAkB,CAAC,YAAW,GAAC,YAAY,MAAM,QAAQ,QAAO,WAC9DC,GAAU,CAAA,SAAA,CACRha,EAAA0Y,GAAmB,CAAA,CAAA,IACnBuB,GAAU,CACT,SAAWrZ,EAAuBoN,EAAgBtN,GAAAA,KAAlC,gBAChB,OAASE,EAAkC,GAA7B,2BACd,QAAUA,EAA0B,GAArBsZ,GAASC,UACxB,QAAS,CAACvZ,EACV,cACEA,GAAM8Y,EACF,GACG7K,EAAY,CACX,cAAY,oBAEZ,QAAS,IAAMoB,EAAUjC,EAAAA,GAAgBtN,IAAI,EAAE,SAE9CkK,EAAE,aAAa,CAAA,EAHZ,aAAa,EAKnB5K,EAAC6O,EAAY,CACX,cAAY,cAEZ,QAAS2I,EAAiB,SAEzB5M,EAAE,aAAa,CAAA,EAHZ,aAAa,CAIJ,EAEjBxG,MAEN,CAAA,EACD4K,EAAU7K,OAAS,KACjBiW,GAAI,CACH,MAAO,CACLzR,QAAS,YACT0R,GAAI,UACJC,GAAI,UACJ,MAAO,UACT,EACA,UAAWlB,EACX,SAAU,CAACnH,EAAGvL,IAAQ2S,EAAa3S,CAAe,EAClD,MAAK,GAAA,SAAA,CAEL1G,EAACua,EAAG,CACF,cAAY,SACZ,SAAU,EACV,QAAQC,EAAY,CAAA,SAAE5P,EAAE,aAAa,CAAA,CAAkB,EAAA,WAEtDgF,GAAU,CAAC,QAAAjF,CAAA,CAAiB,CAAA,CACzB,EACN3K,EAACua,EAAG,CACF,cAAY,UACZ,SAAU,EACV,QAAQC,EAAY,CAAA,SAAE5P,EAAE,SAAS,CAAA,CAAkB,EAAA,SAEnD5K,EAACqT,GAAO,EAAA,CAAA,CACJ,EACNrT,EAACua,EAAG,CACF,cAAY,aACZ,SAAU,EACV,QACGC,EAAY,CAAA,SAAE5P,EAAE,mBAAmB,CAAA,CACrC,EAAA,SAED5K,EAACoV,GAAe,EAAA,CAAA,CAAG,EAEpBuE,GACC3Z,EAACua,EAAG,CACF,SAAU,EACV,cAAY,mBACZ,QACGC,EAAY,CAAA,SAAE5P,EAAE,aAAa,CAAA,CAC/B,EAAA,WAEAwL,GAAgB,CACf,GAAAxV,EACA,KAAMoN,KAAgBtN,IAAAA,CAAM,CAAA,CAC5B,EAGL8Y,GACCxZ,EAACua,EAAG,CACF,SAAU,EACV,cAAY,iBACZ,QACGC,EAAY,CAAA,SACV5P,EAAE,oBAAoB,CAAA,CAE1B,EAAA,WAEA6P,GAAc,CAAC,GAAA7Z,EAAQ,KAAK,QAAA,CAAQ,CAAA,CAExC,CAAA,CAEJ,CAAA,EACAoO,EAAU7K,SAAW,KAAMyL,GAAU,CAAC,QAAAjF,CAAA,CAAoB,CAAA,CAAA,CAAA,CAAA,CAGhE,EAAA,WAEA+P,GAAiB,CAAA,WACf9C,GAAS,CAAC,QAAAjN,CAAA,CAAiB,CAAA,CAAG,CAAA,CACb,GAvGSjE,CAAG,CAAA,CA0GxB,CAAA,CAAA,CACb,CAEP"}