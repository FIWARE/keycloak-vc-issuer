{"version":3,"file":"GeneralSettings.3b431b74.js","sources":["../../src/identity-providers/component/ExtendedFieldsForm.tsx","../../src/identity-providers/add/GeneralSettings.tsx"],"sourcesContent":["import IdentityProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/identityProviderRepresentation\";\nimport { FormGroup, Switch, ValidatedOptions } from \"@patternfly/react-core\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\n\ntype ExtendedFieldsFormProps = {\n  providerId: string;\n};\n\nexport const ExtendedFieldsForm = ({ providerId }: ExtendedFieldsFormProps) => {\n  switch (providerId) {\n    case \"facebook\":\n      return <FacebookFields />;\n    case \"github\":\n      return <GithubFields />;\n    case \"google\":\n      return <GoogleFields />;\n    case \"openshift-v3\":\n    case \"openshift-v4\":\n      return <OpenshiftFields />;\n    case \"paypal\":\n      return <PaypalFields />;\n    case \"stackoverflow\":\n      return <StackoverflowFields />;\n    case \"linkedin\":\n      return <LinkedInFields />;\n    default:\n      return null;\n  }\n};\n\nconst FacebookFields = () => {\n  const { t } = useTranslation(\"identity-providers\");\n  const { register } = useFormContext();\n\n  return (\n    <FormGroup\n      label={t(\"facebook.fetchedFields\")}\n      labelIcon={\n        <HelpItem\n          helpText=\"identity-providers-help:facebook:fetchedFields\"\n          fieldLabelId=\"identity-providers:facebook:fetchedFields\"\n        />\n      }\n      fieldId=\"facebookFetchedFields\"\n    >\n      <KeycloakTextInput\n        id=\"facebookFetchedFields\"\n        {...register(\"config.fetchedFields\")}\n      />\n    </FormGroup>\n  );\n};\n\nconst GithubFields = () => {\n  const { t } = useTranslation(\"identity-providers\");\n  const { register } = useFormContext();\n\n  return (\n    <>\n      <FormGroup\n        label={t(\"baseUrl\")}\n        labelIcon={\n          <HelpItem\n            helpText=\"identity-providers-help:baseUrl\"\n            fieldLabelId=\"identity-providers:baseUrl\"\n          />\n        }\n        fieldId=\"baseUrl\"\n      >\n        <KeycloakTextInput\n          id=\"baseUrl\"\n          type=\"url\"\n          {...register(\"config.baseUrl\")}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"apiUrl\")}\n        labelIcon={\n          <HelpItem\n            helpText=\"identity-providers-help:apiUrl\"\n            fieldLabelId=\"identity-providers:apiUrl\"\n          />\n        }\n        fieldId=\"apiUrl\"\n      >\n        <KeycloakTextInput\n          id=\"apiUrl\"\n          type=\"url\"\n          {...register(\"config.apiUrl\")}\n        />\n      </FormGroup>\n    </>\n  );\n};\n\nconst GoogleFields = () => {\n  const { t } = useTranslation(\"identity-providers\");\n  const { register, control } = useFormContext();\n\n  return (\n    <>\n      <FormGroup\n        label={t(\"google.hostedDomain\")}\n        labelIcon={\n          <HelpItem\n            helpText=\"identity-providers-help:google:hostedDomain\"\n            fieldLabelId=\"identity-providers:google:hostedDomain\"\n          />\n        }\n        fieldId=\"googleHostedDomain\"\n      >\n        <KeycloakTextInput\n          id=\"googleHostedDomain\"\n          {...register(\"config.hostedDomain\")}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"google.userIp\")}\n        labelIcon={\n          <HelpItem\n            helpText=\"identity-providers-help:google:userIp\"\n            fieldLabelId=\"identity-providers:google:userIp\"\n          />\n        }\n        fieldId=\"googleUserIp\"\n      >\n        <Controller\n          name=\"config.userIp\"\n          defaultValue=\"false\"\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"googleUserIp\"\n              label={t(\"common:on\")}\n              labelOff={t(\"common:off\")}\n              isChecked={field.value === \"true\"}\n              onChange={(value) => field.onChange(value.toString())}\n              aria-label={t(\"google.userIp\")}\n            />\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"google.offlineAccess\")}\n        labelIcon={\n          <HelpItem\n            helpText=\"identity-providers-help:google:offlineAccess\"\n            fieldLabelId=\"identity-providers:google:offlineAccess\"\n          />\n        }\n        fieldId=\"googleOfflineAccess\"\n      >\n        <Controller\n          name=\"config.offlineAccess\"\n          defaultValue=\"false\"\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"googleOfflineAccess\"\n              label={t(\"common:on\")}\n              labelOff={t(\"common:off\")}\n              isChecked={field.value === \"true\"}\n              onChange={(value) => field.onChange(value.toString())}\n              aria-label={t(\"google.offlineAccess\")}\n            />\n          )}\n        />\n      </FormGroup>\n    </>\n  );\n};\n\nconst OpenshiftFields = () => {\n  const { t } = useTranslation(\"identity-providers\");\n  const {\n    register,\n    formState: { errors },\n  } = useFormContext<IdentityProviderRepresentation>();\n\n  return (\n    <FormGroup\n      label={t(\"baseUrl\")}\n      labelIcon={\n        <HelpItem\n          helpText=\"identity-providers-help:openshift:baseUrl\"\n          fieldLabelId=\"identity-providers:baseUrl\"\n        />\n      }\n      fieldId=\"baseUrl\"\n      isRequired\n      validated={\n        errors.config?.baseUrl\n          ? ValidatedOptions.error\n          : ValidatedOptions.default\n      }\n      helperTextInvalid={t(\"common:required\")}\n    >\n      <KeycloakTextInput\n        id=\"baseUrl\"\n        type=\"url\"\n        isRequired\n        {...register(\"config.baseUrl\", { required: true })}\n      />\n    </FormGroup>\n  );\n};\n\nconst PaypalFields = () => {\n  const { t } = useTranslation(\"identity-providers\");\n  const { control } = useFormContext();\n\n  return (\n    <FormGroup\n      label={t(\"paypal.sandbox\")}\n      labelIcon={\n        <HelpItem\n          helpText=\"identity-providers-help:paypal:sandbox\"\n          fieldLabelId=\"identity-providers:paypal:sandbox\"\n        />\n      }\n      fieldId=\"paypalSandbox\"\n    >\n      <Controller\n        name=\"config.sandbox\"\n        defaultValue=\"false\"\n        control={control}\n        render={({ field }) => (\n          <Switch\n            id=\"paypalSandbox\"\n            label={t(\"common:on\")}\n            labelOff={t(\"common:off\")}\n            isChecked={field.value === \"true\"}\n            onChange={(value) => field.onChange(value.toString())}\n            aria-label={t(\"paypal.sandbox\")}\n          />\n        )}\n      />\n    </FormGroup>\n  );\n};\n\nconst StackoverflowFields = () => {\n  const { t } = useTranslation(\"identity-providers\");\n  const {\n    register,\n    formState: { errors },\n  } = useFormContext<IdentityProviderRepresentation>();\n\n  return (\n    <FormGroup\n      label={t(\"stackoverflow.key\")}\n      labelIcon={\n        <HelpItem\n          helpText=\"identity-providers-help:stackoverflow:key\"\n          fieldLabelId=\"identity-providers:stackoverflow:key\"\n        />\n      }\n      fieldId=\"stackoverflowKey\"\n      isRequired\n      validated={\n        errors.config?.key ? ValidatedOptions.error : ValidatedOptions.default\n      }\n      helperTextInvalid={t(\"common:required\")}\n    >\n      <KeycloakTextInput\n        id=\"stackoverflowKey\"\n        isRequired\n        {...register(\"config.key\", { required: true })}\n      />\n    </FormGroup>\n  );\n};\n\nconst LinkedInFields = () => {\n  const { t } = useTranslation(\"identity-providers\");\n  const { register } = useFormContext();\n\n  return (\n    <FormGroup\n      label={t(\"linkedin.profileProjection\")}\n      labelIcon={\n        <HelpItem\n          helpText=\"identity-providers-help:linkedin.profileProjection\"\n          fieldLabelId=\"identity-providers:linkedin.profileProjection\"\n        />\n      }\n      fieldId=\"profileProjection\"\n    >\n      <KeycloakTextInput\n        id=\"profileProjection\"\n        {...register(\"config.profileProjection\")}\n      />\n    </FormGroup>\n  );\n};\n","import { RedirectUrl } from \"../component/RedirectUrl\";\nimport { ClientIdSecret } from \"../component/ClientIdSecret\";\nimport { DisplayOrder } from \"../component/DisplayOrder\";\n\ntype GeneralSettingsProps = {\n  id: string;\n  create?: boolean;\n};\n\nexport const GeneralSettings = ({\n  create = true,\n  id,\n}: GeneralSettingsProps) => (\n  <>\n    <RedirectUrl id={id} />\n    <ClientIdSecret create={create} />\n    <DisplayOrder />\n  </>\n);\n"],"names":["ExtendedFieldsForm","providerId","_jsx","FacebookFields","GithubFields","GoogleFields","OpenshiftFields","PaypalFields","StackoverflowFields","LinkedInFields","t","useTranslation","register","useFormContext","FormGroup","HelpItem","KeycloakTextInput","_Fragment","control","Controller","field","Switch","value","onChange","toString","formState","errors","config","baseUrl","ValidatedOptions","error","default","required","key","GeneralSettings","create","id","RedirectUrl","ClientIdSecret","DisplayOrder"],"mappings":"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"}