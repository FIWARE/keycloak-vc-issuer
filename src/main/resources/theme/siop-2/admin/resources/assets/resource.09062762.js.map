{"version":3,"file":"resource.09062762.js","sources":["../../src/context/auth/admin-ui-endpoint.ts","../../src/components/role-mapping/resource.ts"],"sourcesContent":["import KeycloakAdminClient from \"@keycloak/keycloak-admin-client\";\n\nimport { getAuthorizationHeaders } from \"../../utils/getAuthorizationHeaders\";\nimport { joinPath } from \"../../utils/joinPath\";\n\nexport async function fetchAdminUI<T>(\n  adminClient: KeycloakAdminClient,\n  endpoint: string,\n  query?: Record<string, string>\n): Promise<T> {\n  const accessToken = await adminClient.getAccessToken();\n  const baseUrl = adminClient.baseUrl;\n\n  const response = await fetch(\n    joinPath(baseUrl, \"admin/realms\", adminClient.realmName, endpoint) +\n      (query ? \"?\" + new URLSearchParams(query) : \"\"),\n    {\n      method: \"GET\",\n      headers: getAuthorizationHeaders(accessToken),\n    }\n  );\n\n  return await response.json();\n}\n","import type KeycloakAdminClient from \"@keycloak/keycloak-admin-client\";\nimport { fetchAdminUI } from \"../../context/auth/admin-ui-endpoint\";\nimport type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\n\ntype BaseQuery = {\n  adminClient: KeycloakAdminClient;\n};\n\ntype IDQuery = BaseQuery & {\n  id: string;\n  type: string;\n};\n\ntype PaginatingQuery = IDQuery & {\n  first: number;\n  max: number;\n  search?: string;\n};\n\ntype EffectiveClientRolesQuery = IDQuery;\n\ntype Query = Partial<Omit<PaginatingQuery, \"adminClient\">> & {\n  adminClient: KeycloakAdminClient;\n  endpoint: string;\n};\n\ntype ClientRole = {\n  id: string;\n  role: string;\n  description?: string;\n  client: string;\n  clientId: string;\n};\n\nconst fetchEndpoint = async ({\n  adminClient,\n  id,\n  type,\n  first,\n  max,\n  search,\n  endpoint,\n}: Query): Promise<any> =>\n  fetchAdminUI(adminClient, `/ui-ext/${endpoint}/${type}/${id}`, {\n    first: (first || 0).toString(),\n    max: (max || 10).toString(),\n    search: search || \"\",\n  });\n\nexport const getAvailableClientRoles = (\n  query: PaginatingQuery\n): Promise<ClientRole[]> =>\n  fetchEndpoint({ ...query, endpoint: \"available-roles\" });\n\nexport const getEffectiveClientRoles = (\n  query: EffectiveClientRolesQuery\n): Promise<ClientRole[]> =>\n  fetchEndpoint({ ...query, endpoint: \"effective-roles\" });\n\ntype UserQuery = BaseQuery & {\n  lastName?: string;\n  firstName?: string;\n  email?: string;\n  username?: string;\n  emailVerified?: boolean;\n  idpAlias?: string;\n  idpUserId?: string;\n  enabled?: boolean;\n  briefRepresentation?: boolean;\n  exact?: boolean;\n  q?: string;\n};\n\nexport type BruteUser = UserRepresentation & {\n  bruteForceStatus?: Record<string, object>;\n};\n\nexport const findUsers = ({\n  adminClient,\n  ...query\n}: UserQuery): Promise<BruteUser[]> =>\n  fetchAdminUI(\n    adminClient,\n    \"ui-ext/brute-force-user\",\n    query as Record<string, string>\n  );\n\nexport const fetchUsedBy = (query: PaginatingQuery): Promise<string[]> =>\n  fetchEndpoint({ ...query, endpoint: \"authentication-management\" });\n"],"names":["fetchAdminUI","adminClient","endpoint","query","accessToken","baseUrl","joinPath","getAuthorizationHeaders","fetchEndpoint","id","type","first","max","search","getAvailableClientRoles","getEffectiveClientRoles","findUsers","fetchUsedBy"],"mappings":"oFAKsB,eAAAA,EACpBC,EACAC,EACAC,EACY,CACN,MAAAC,EAAc,MAAMH,EAAY,iBAChCI,EAAUJ,EAAY,QAWrB,OAAA,MATU,MAAM,MACrBK,EAASD,EAAS,eAAgBJ,EAAY,UAAWC,CAAQ,GAC9DC,EAAQ,IAAM,IAAI,gBAAgBA,CAAK,EAAI,IAC9C,CACE,OAAQ,MACR,QAASI,EAAwBH,CAAW,CAC9C,CAAA,GAGoB,MACxB,CCWA,MAAMI,EAAgB,MAAO,CAC3B,YAAAP,EACA,GAAAQ,EACA,KAAAC,EACA,MAAAC,EACA,IAAAC,EACA,OAAAC,EACA,SAAAX,CACF,IACEF,EAAaC,EAAa,WAAWC,KAAYQ,KAAQD,IAAM,CAC7D,OAAQE,GAAS,GAAG,SAAS,EAC7B,KAAMC,GAAO,IAAI,SAAS,EAC1B,OAAQC,GAAU,EACpB,CAAC,EAEUC,EACXX,GAEAK,EAAc,CAAE,GAAGL,EAAO,SAAU,kBAAmB,EAE5CY,EACXZ,GAEAK,EAAc,CAAE,GAAGL,EAAO,SAAU,kBAAmB,EAoB5Ca,EAAY,CAAC,CACxB,YAAAf,KACGE,CACL,IACEH,EACEC,EACA,0BACAE,CACF,EAEWc,EAAed,GAC1BK,EAAc,CAAE,GAAGL,EAAO,SAAU,2BAA6B,CAAA"}