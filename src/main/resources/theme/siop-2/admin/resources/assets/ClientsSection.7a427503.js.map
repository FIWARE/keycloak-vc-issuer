{"version":3,"file":"ClientsSection.7a427503.js","sources":["../../../../node_modules/@patternfly/react-table/dist/esm/components/Table/utils/decorators/wrappable.js","../../src/utils/client-url.ts","../../src/clients/initial-access/InitialAccessTokenList.tsx","../../src/clients/ClientsSection.tsx"],"sourcesContent":["import styles from '@patternfly/react-styles/css/components/Table/table';\nexport const breakWord = () => ({\n    className: styles.modifiers.breakWord\n});\nexport const fitContent = () => ({\n    className: styles.modifiers.fitContent\n});\nexport const nowrap = () => ({\n    className: styles.modifiers.nowrap\n});\nexport const truncate = () => ({\n    className: styles.modifiers.truncate\n});\nexport const wrappable = () => ({\n    className: styles.modifiers.wrap\n});\n//# sourceMappingURL=wrappable.js.map","import ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport { joinPath } from \"./joinPath\";\n\nexport const convertClientToUrl = (\n  { rootUrl, baseUrl }: ClientRepresentation,\n  adminClientBaseUrl: string\n) => {\n  // absolute base url configured, use base url is\n  if (baseUrl?.startsWith(\"http\")) {\n    return baseUrl;\n  }\n\n  if (\n    (rootUrl === \"${authBaseUrl}\" || rootUrl === \"${authAdminUrl}\") &&\n    baseUrl\n  ) {\n    return rootUrl.replace(\n      /\\$\\{(authAdminUrl|authBaseUrl)\\}/,\n      joinPath(adminClientBaseUrl, baseUrl)\n    );\n  }\n\n  if (rootUrl?.startsWith(\"http\")) {\n    if (baseUrl) {\n      return joinPath(rootUrl, baseUrl);\n    }\n    return rootUrl;\n  }\n\n  return baseUrl;\n};\n","import { AlertVariant, Button, ButtonVariant } from \"@patternfly/react-core\";\nimport { wrappable } from \"@patternfly/react-table\";\nimport type ClientInitialAccessPresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientInitialAccessPresentation\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { ListEmptyState } from \"../../components/list-empty-state/ListEmptyState\";\nimport { KeycloakDataTable } from \"../../components/table-toolbar/KeycloakDataTable\";\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { toCreateInitialAccessToken } from \"../routes/CreateInitialAccessToken\";\nimport useFormatDate, { FORMAT_DATE_AND_TIME } from \"../../utils/useFormatDate\";\n\nexport const InitialAccessTokenList = () => {\n  const { t } = useTranslation(\"clients\");\n\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n  const formatDate = useFormatDate();\n\n  const navigate = useNavigate();\n\n  const [token, setToken] = useState<ClientInitialAccessPresentation>();\n\n  const loader = async () => {\n    try {\n      return await adminClient.realms.getClientsInitialAccess({ realm });\n    } catch (error) {\n      return [];\n    }\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"clients:tokenDeleteConfirmTitle\",\n    messageKey: t(\"tokenDeleteConfirm\", { id: token?.id }),\n    continueButtonLabel: \"common:delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.realms.delClientsInitialAccess({\n          realm,\n          id: token!.id!,\n        });\n        addAlert(t(\"tokenDeleteSuccess\"), AlertVariant.success);\n        setToken(undefined);\n      } catch (error) {\n        addError(\"tokenDeleteError\", error);\n      }\n    },\n  });\n\n  return (\n    <>\n      <DeleteConfirm />\n      <KeycloakDataTable\n        key={token?.id}\n        ariaLabelKey=\"clients:initialAccessToken\"\n        searchPlaceholderKey=\"clients:searchInitialAccessToken\"\n        loader={loader}\n        toolbarItem={\n          <Button\n            component={(props) => (\n              <Link {...props} to={toCreateInitialAccessToken({ realm })} />\n            )}\n          >\n            {t(\"common:create\")}\n          </Button>\n        }\n        actions={[\n          {\n            title: t(\"common:delete\"),\n            onRowClick: (token) => {\n              setToken(token);\n              toggleDeleteDialog();\n            },\n          },\n        ]}\n        columns={[\n          {\n            name: \"id\",\n            displayKey: \"common:id\",\n          },\n          {\n            name: \"timestamp\",\n            displayKey: \"clients:timestamp\",\n            cellRenderer: (row) =>\n              formatDate(new Date(row.timestamp! * 1000), FORMAT_DATE_AND_TIME),\n          },\n          {\n            name: \"expiration\",\n            displayKey: \"clients:expires\",\n            cellRenderer: (row) =>\n              formatDate(\n                new Date(row.timestamp! * 1000 + row.expiration! * 1000),\n                FORMAT_DATE_AND_TIME\n              ),\n          },\n          {\n            name: \"count\",\n            displayKey: \"clients:count\",\n          },\n          {\n            name: \"remainingCount\",\n            displayKey: \"clients:remainingCount\",\n            transforms: [wrappable],\n          },\n        ]}\n        emptyState={\n          <ListEmptyState\n            message={t(\"noTokens\")}\n            instructions={t(\"noTokensInstructions\")}\n            primaryActionText={t(\"common:create\")}\n            onPrimaryAction={() =>\n              navigate(toCreateInitialAccessToken({ realm }))\n            }\n          />\n        }\n      />\n    </>\n  );\n};\n","import {\n  AlertVariant,\n  Badge,\n  Button,\n  ButtonVariant,\n  PageSection,\n  Tab,\n  TabTitleText,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { cellWidth, IRowData, TableText } from \"@patternfly/react-table\";\nimport type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport type { ClientQuery } from \"@keycloak/keycloak-admin-client/lib/resources/clients\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { formattedLinkTableCell } from \"../components/external-link/FormattedLink\";\nimport {\n  Action,\n  KeycloakDataTable,\n} from \"../components/table-toolbar/KeycloakDataTable\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { emptyFormatter, exportClient } from \"../util\";\nimport { convertClientToUrl } from \"../utils/client-url\";\nimport { InitialAccessTokenList } from \"./initial-access/InitialAccessTokenList\";\nimport { toAddClient } from \"./routes/AddClient\";\nimport { toClient } from \"./routes/Client\";\nimport { toImportClient } from \"./routes/ImportClient\";\nimport { isRealmClient, getProtocolName } from \"./utils\";\nimport helpUrls from \"../help-urls\";\nimport { useAccess } from \"../context/access/Access\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../components/routable-tabs/RoutableTabs\";\nimport { ClientsTab, toClients } from \"./routes/Clients\";\n\nexport default function ClientsSection() {\n  const { t } = useTranslation(\"clients\");\n  const { addAlert, addError } = useAlerts();\n\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(new Date().getTime());\n  const [selectedClient, setSelectedClient] = useState<ClientRepresentation>();\n\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-clients\");\n\n  const loader = async (first?: number, max?: number, search?: string) => {\n    const params: ClientQuery = {\n      first: first!,\n      max: max!,\n    };\n    if (search) {\n      params.clientId = search;\n      params.search = true;\n    }\n    return await adminClient.clients.find({ ...params });\n  };\n\n  const useTab = (tab: ClientsTab) => useRoutableTab(toClients({ realm, tab }));\n\n  const listTab = useTab(\"list\");\n  const initialAccessTokenTab = useTab(\"initial-access-token\");\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: t(\"clientDelete\", { clientId: selectedClient?.clientId }),\n    messageKey: \"clients:clientDeleteConfirm\",\n    continueButtonLabel: \"common:delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.clients.del({\n          id: selectedClient!.id!,\n        });\n        addAlert(t(\"clientDeletedSuccess\"), AlertVariant.success);\n        refresh();\n      } catch (error) {\n        addError(\"clients:clientDeleteError\", error);\n      }\n    },\n  });\n\n  const ClientDetailLink = (client: ClientRepresentation) => (\n    <Link\n      key={client.id}\n      to={toClient({ realm, clientId: client.id!, tab: \"settings\" })}\n    >\n      {client.clientId}\n      {!client.enabled && (\n        <Badge key={`${client.id}-disabled`} isRead className=\"pf-u-ml-sm\">\n          {t(\"common:disabled\")}\n        </Badge>\n      )}\n    </Link>\n  );\n\n  const ClientName = (client: ClientRepresentation) => (\n    <TableText wrapModifier=\"truncate\">\n      {emptyFormatter()(client.name)}\n    </TableText>\n  );\n\n  const ClientDescription = (client: ClientRepresentation) => (\n    <TableText wrapModifier=\"truncate\">\n      {emptyFormatter()(client.description)}\n    </TableText>\n  );\n\n  const ToolbarItems = () => {\n    if (!isManager) return <span />;\n\n    return (\n      <>\n        <ToolbarItem>\n          <Button\n            component={(props) => (\n              <Link {...props} to={toAddClient({ realm })} />\n            )}\n          >\n            {t(\"createClient\")}\n          </Button>\n        </ToolbarItem>\n        <ToolbarItem>\n          <Button\n            component={(props) => (\n              <Link {...props} to={toImportClient({ realm })} />\n            )}\n            variant=\"link\"\n            data-testid=\"importClient\"\n          >\n            {t(\"importClient\")}\n          </Button>\n        </ToolbarItem>\n      </>\n    );\n  };\n\n  return (\n    <>\n      <ViewHeader\n        titleKey=\"clients:clientList\"\n        subKey=\"clients:clientsExplain\"\n        helpUrl={helpUrls.clientsUrl}\n        divider={false}\n      />\n      <PageSection variant=\"light\" className=\"pf-u-p-0\">\n        <RoutableTabs\n          mountOnEnter\n          isBox\n          defaultLocation={toClients({\n            realm,\n            tab: \"list\",\n          })}\n        >\n          <Tab\n            data-testid=\"list\"\n            title={<TabTitleText>{t(\"clientsList\")}</TabTitleText>}\n            {...listTab}\n          >\n            <DeleteConfirm />\n            <KeycloakDataTable\n              key={key}\n              loader={loader}\n              isPaginated\n              ariaLabelKey=\"clients:clientList\"\n              searchPlaceholderKey=\"clients:searchForClient\"\n              toolbarItem={<ToolbarItems />}\n              actionResolver={(rowData: IRowData) => {\n                const client: ClientRepresentation = rowData.data;\n                const actions: Action<ClientRepresentation>[] = [\n                  {\n                    title: t(\"common:export\"),\n                    onClick() {\n                      exportClient(client);\n                    },\n                  },\n                ];\n\n                if (\n                  !isRealmClient(client) &&\n                  (isManager || client.access?.configure)\n                ) {\n                  actions.push({\n                    title: t(\"common:delete\"),\n                    onClick() {\n                      setSelectedClient(client);\n                      toggleDeleteDialog();\n                    },\n                  });\n                }\n\n                return actions;\n              }}\n              columns={[\n                {\n                  name: \"clientId\",\n                  displayKey: \"common:clientId\",\n                  transforms: [cellWidth(20)],\n                  cellRenderer: ClientDetailLink,\n                },\n                {\n                  name: \"clientName\",\n                  displayKey: \"common:clientName\",\n                  transforms: [cellWidth(20)],\n                  cellRenderer: ClientName,\n                },\n                {\n                  name: \"protocol\",\n                  displayKey: \"common:type\",\n                  transforms: [cellWidth(10)],\n                  cellRenderer: (client) =>\n                    getProtocolName(t, client.protocol ?? \"openid-connect\"),\n                },\n                {\n                  name: \"description\",\n                  displayKey: \"common:description\",\n                  transforms: [cellWidth(30)],\n                  cellRenderer: ClientDescription,\n                },\n                {\n                  name: \"baseUrl\",\n                  displayKey: \"clients:homeURL\",\n                  transforms: [cellWidth(20)],\n                  cellFormatters: [formattedLinkTableCell(), emptyFormatter()],\n                  cellRenderer: (c) =>\n                    convertClientToUrl(c, adminClient.baseUrl),\n                },\n              ]}\n            />\n          </Tab>\n          <Tab\n            data-testid=\"initialAccessToken\"\n            title={<TabTitleText>{t(\"initialAccessToken\")}</TabTitleText>}\n            {...initialAccessTokenTab}\n          >\n            <InitialAccessTokenList />\n          </Tab>\n        </RoutableTabs>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["wrappable","styles","convertClientToUrl","rootUrl","baseUrl","adminClientBaseUrl","joinPath","InitialAccessTokenList","t","useTranslation","adminClient","useAdminClient","addAlert","addError","useAlerts","realm","useRealm","formatDate","useFormatDate","navigate","useNavigate","token","setToken","useState","loader","realms","getClientsInitialAccess","toggleDeleteDialog","DeleteConfirm","useConfirmDialog","titleKey","messageKey","id","continueButtonLabel","continueButtonVariant","ButtonVariant","danger","onConfirm","delClientsInitialAccess","AlertVariant","success","undefined","error","_Fragment","_jsx","KeycloakDataTable","Button","props","Link","toCreateInitialAccessToken","title","onRowClick","name","displayKey","cellRenderer","Date","row","timestamp","FORMAT_DATE_AND_TIME","expiration","transforms","ListEmptyState","ClientsSection","key","setKey","refresh","getTime","selectedClient","setSelectedClient","hasAccess","useAccess","isManager","first","max","search","params","clientId","clients","find","useTab","tab","useRoutableTab","toClients","listTab","initialAccessTokenTab","del","ClientDetailLink","client","_jsxs","toClient","enabled","Badge","ClientName","TableText","emptyFormatter","ClientDescription","description","ToolbarItems","ToolbarItem","toAddClient","toImportClient","ViewHeader","helpUrls","clientsUrl","PageSection","RoutableTabs","Tab","TabTitleText","rowData","data","actions","onClick","exportClient","isRealmClient","access","configure","push","cellWidth","getProtocolName","protocol","cellFormatters","formattedLinkTableCell","c"],"mappings":"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"}