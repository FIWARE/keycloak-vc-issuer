{"version":3,"file":"ImportForm.76247606.js","sources":["../../src/clients/import/ImportForm.tsx"],"sourcesContent":["import { Language } from \"@patternfly/react-code-editor\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  FormGroup,\n  PageSection,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\n\nimport type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\n\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { FileUploadForm } from \"../../components/json-file-upload/FileUploadForm\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { ViewHeader } from \"../../components/view-header/ViewHeader\";\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport {\n  addTrailingSlash,\n  convertFormValuesToObject,\n  convertToFormValues,\n} from \"../../util\";\nimport { getAuthorizationHeaders } from \"../../utils/getAuthorizationHeaders\";\nimport { CapabilityConfig } from \"../add/CapabilityConfig\";\nimport { ClientDescription } from \"../ClientDescription\";\nimport { FormFields } from \"../ClientDetails\";\nimport { toClient } from \"../routes/Client\";\nimport { toClients } from \"../routes/Clients\";\n\nconst isXml = (text: string) => text.match(/(<.[^(><.)]+>)/g);\n\nexport default function ImportForm() {\n  const { t } = useTranslation(\"clients\");\n  const navigate = useNavigate();\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n  const form = useForm<FormFields>();\n  const { register, handleSubmit, setValue } = form;\n  const [imported, setImported] = useState<ClientRepresentation>({});\n\n  const { addAlert, addError } = useAlerts();\n\n  const handleFileChange = async (contents: string) => {\n    try {\n      const parsed = await parseFileContents(contents);\n\n      convertToFormValues(parsed, setValue);\n      setImported(parsed);\n    } catch (error) {\n      addError(\"clients:importParseError\", error);\n    }\n  };\n\n  async function parseFileContents(\n    contents: string\n  ): Promise<ClientRepresentation> {\n    if (!isXml(contents)) {\n      return JSON.parse(contents);\n    }\n\n    const response = await fetch(\n      `${addTrailingSlash(\n        adminClient.baseUrl\n      )}admin/realms/${realm}/client-description-converter`,\n      {\n        method: \"POST\",\n        body: contents,\n        headers: getAuthorizationHeaders(await adminClient.getAccessToken()),\n      }\n    );\n\n    if (!response.ok) {\n      throw new Error(\n        `Server responded with invalid status: ${response.statusText}`\n      );\n    }\n\n    return response.json();\n  }\n\n  const save = async (client: ClientRepresentation) => {\n    try {\n      const newClient = await adminClient.clients.create({\n        ...imported,\n        ...convertFormValuesToObject({\n          ...client,\n          attributes: client.attributes || {},\n        }),\n      });\n      addAlert(t(\"clientImportSuccess\"), AlertVariant.success);\n      navigate(toClient({ realm, clientId: newClient.id, tab: \"settings\" }));\n    } catch (error) {\n      addError(\"clients:clientImportError\", error);\n    }\n  };\n\n  return (\n    <>\n      <ViewHeader\n        titleKey=\"clients:importClient\"\n        subKey=\"clients:clientsExplain\"\n      />\n      <PageSection variant=\"light\">\n        <FormAccess\n          isHorizontal\n          onSubmit={handleSubmit(save)}\n          role=\"manage-clients\"\n        >\n          <FormProvider {...form}>\n            <FileUploadForm\n              id=\"realm-file\"\n              language={Language.json}\n              extension=\".json,.xml\"\n              helpText=\"common-help:helpFileUploadClient\"\n              onChange={handleFileChange}\n            />\n            <ClientDescription hasConfigureAccess />\n            <FormGroup label={t(\"common:type\")} fieldId=\"kc-type\">\n              <KeycloakTextInput\n                id=\"kc-type\"\n                isReadOnly\n                {...register(\"protocol\")}\n              />\n            </FormGroup>\n            <CapabilityConfig unWrap={true} />\n            <ActionGroup>\n              <Button variant=\"primary\" type=\"submit\">\n                {t(\"common:save\")}\n              </Button>\n              <Button\n                variant=\"link\"\n                component={(props) => (\n                  <Link {...props} to={toClients({ realm })} />\n                )}\n              >\n                {t(\"common:cancel\")}\n              </Button>\n            </ActionGroup>\n          </FormProvider>\n        </FormAccess>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["isXml","text","match","ImportForm","t","useTranslation","navigate","useNavigate","adminClient","useAdminClient","realm","useRealm","form","useForm","register","handleSubmit","setValue","imported","setImported","useState","addAlert","addError","useAlerts","handleFileChange","contents","parsed","parseFileContents","convertToFormValues","error","JSON","parse","response","fetch","addTrailingSlash","baseUrl","method","body","headers","getAuthorizationHeaders","getAccessToken","ok","Error","statusText","json","_Fragment","_jsx","ViewHeader","PageSection","FormAccess","client","newClient","clients","create","convertFormValuesToObject","attributes","AlertVariant","success","toClient","clientId","id","tab","FormProvider","FileUploadForm","Language","ClientDescription","FormGroup","KeycloakTextInput","CapabilityConfig","_jsxs","ActionGroup","Button","props","Link","toClients"],"mappings":"46BAkCA,MAAMA,EAASC,GAAiBA,EAAKC,MAAM,iBAAiB,EAE5D,SAAwBC,IAAa,CAC7B,KAAA,CAAEC,EAAAA,CAAAA,EAAMC,EAAe,SAAS,EAChCC,EAAWC,IACX,CAAEC,YAAAA,GAAgBC,EAAgB,EAClC,CAAEC,MAAAA,GAAUC,EAAU,EACtBC,EAAOC,IACP,CAAEC,SAAAA,EAAUC,aAAAA,EAAcC,SAAAA,CAAaJ,EAAAA,EACvC,CAACK,EAAUC,CAAW,EAAIC,EAAAA,QAAAA,SAA+B,CAAE,CAAA,EAE3D,CAAEC,SAAAA,EAAUC,SAAAA,GAAaC,EAAW,EAEpCC,EAAmB,MAAOC,GAAqB,CAC/C,GAAA,CACIC,MAAAA,EAAS,MAAMC,EAAkBF,CAAQ,EAE/CG,EAAoBF,EAAQT,CAAQ,EACpCE,EAAYO,CAAM,QACXG,GACPP,EAAS,2BAA4BO,CAAK,CAC5C,CAAA,EAGF,eAAeF,EACbF,EAC+B,CAC3B,GAAA,CAACxB,EAAMwB,CAAQ,EACVK,OAAAA,KAAKC,MAAMN,CAAQ,EAGtBO,MAAAA,EAAW,MAAMC,MACpB,GAAEC,EACDzB,EAAY0B,OAAO,iBACJxB,iCACjB,CACEyB,OAAQ,OACRC,KAAMZ,EACNa,QAASC,EAAwB,MAAM9B,EAAY+B,gBAAgB,CAAA,CACpE,EAGC,GAAA,CAACR,EAASS,GACZ,MAAM,IAAIC,MACP,yCAAwCV,EAASW,YAAY,EAIlE,OAAOX,EAASY,MAClB,CAkBA,SACEC,EAAA,CAAA,SAAA,CACEC,EAACC,EAAU,CACT,SAAS,uBACT,OAAO,wBAAA,CACP,EACFD,EAACE,EAAW,CAAC,QAAQ,QAAO,WACzBC,EAAU,CACT,aAAY,GACZ,SAAUjC,EAzBL,MAAOkC,GAAiC,CAC/C,GAAA,CACF,MAAMC,EAAY,MAAM1C,EAAY2C,QAAQC,OAAO,CACjD,GAAGnC,EACH,GAAGoC,EAA0B,CAC3B,GAAGJ,EACHK,WAAYL,EAAOK,YAAc,CAAC,CAAA,CACnC,CAAA,CACF,EACDlC,EAAShB,EAAE,qBAAqB,EAAGmD,EAAaC,OAAO,EACvDlD,EAASmD,EAAS,CAAE/C,MAAAA,EAAOgD,SAAUR,EAAUS,GAAIC,IAAK,UAAY,CAAA,CAAC,QAC9DhC,GACPP,EAAS,4BAA6BO,CAAK,CAC7C,CAAA,CAYiC,EAC3B,KAAK,iBAAgB,WAEpBiC,EAAY,CAAA,GAAKjD,EAAI,SAAA,CACpBiC,EAACiB,EAAc,CACb,GAAG,aACH,SAAUC,EAASpB,KACnB,UAAU,aACV,SAAS,mCACT,SAAUpB,CAAAA,CACV,EACFsB,EAACmB,EAAiB,CAAC,mBAAkB,EAAA,CAAG,EACxCnB,EAACoB,EAAS,CAAC,MAAO7D,EAAE,aAAa,EAAG,QAAQ,UAAS,WAClD8D,EAAiB,CAChB,GAAG,UACH,WAAU,GAAA,GACNpD,EAAS,UAAU,CAAA,CAAC,CAAA,CAEhB,EACZ+B,EAACsB,EAAgB,CAAC,OAAQ,EAAA,CAAQ,EAClCC,EAACC,EAAW,CAAA,SAAA,CACVxB,EAACyB,EAAM,CAAC,QAAQ,UAAU,KAAK,SAAQ,SACpClE,EAAE,aAAa,CAAA,CACT,EACTyC,EAACyB,EAAM,CACL,QAAQ,OACR,UACEC,GAAA1B,EAAC2B,EAAI,CAAA,GAAKD,EAAO,GAAIE,EAAU,CAAE/D,MAAAA,CAAAA,CAAO,CAAA,CACxC,EAAA,SAEDN,EAAE,eAAe,CAAA,CACX,CAAA,CAAA,CACG,CAAA,CAAA,CAAA,CAAA,CACD,CAAA,CAEL,CAAA,CAAA,CACb,CAEP"}