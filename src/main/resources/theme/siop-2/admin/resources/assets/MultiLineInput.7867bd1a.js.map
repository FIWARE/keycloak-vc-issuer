{"version":3,"file":"MultiLineInput.7867bd1a.js","sources":["../../src/components/multi-line-input/MultiLineInput.tsx"],"sourcesContent":["import {\n  Button,\n  ButtonVariant,\n  InputGroup,\n  TextInput,\n  TextInputProps,\n} from \"@patternfly/react-core\";\nimport { MinusCircleIcon, PlusCircleIcon } from \"@patternfly/react-icons\";\nimport { Fragment, useEffect, useMemo } from \"react\";\nimport { useFormContext, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nfunction stringToMultiline(value?: string): string[] {\n  return typeof value === \"string\" ? value.split(\"##\") : [];\n}\n\nfunction toStringValue(formValue: string[]): string {\n  return formValue.join(\"##\");\n}\n\nexport type MultiLineInputProps = Omit<TextInputProps, \"form\"> & {\n  name: string;\n  addButtonLabel?: string;\n  isDisabled?: boolean;\n  defaultValue?: string[];\n  stringify?: boolean;\n};\n\nexport const MultiLineInput = ({\n  name,\n  addButtonLabel,\n  isDisabled = false,\n  defaultValue,\n  stringify = false,\n  ...rest\n}: MultiLineInputProps) => {\n  const { t } = useTranslation();\n  const { register, setValue, control } = useFormContext();\n  const value = useWatch({\n    name,\n    control,\n    defaultValue: defaultValue || \"\",\n  });\n\n  const fields = useMemo<string[]>(() => {\n    let values = stringify ? stringToMultiline(value as string) : value;\n\n    values =\n      Array.isArray(values) && values.length !== 0\n        ? values\n        : defaultValue || [\"\"];\n\n    return values;\n  }, [value]);\n\n  const remove = (index: number) => {\n    update([...fields.slice(0, index), ...fields.slice(index + 1)]);\n  };\n\n  const append = () => {\n    update([...fields, \"\"]);\n  };\n\n  const updateValue = (index: number, value: string) => {\n    update([...fields.slice(0, index), value, ...fields.slice(index + 1)]);\n  };\n\n  const update = (values: string[]) => {\n    const fieldValue = values.flatMap((field) => field);\n    setValue(name, stringify ? toStringValue(fieldValue) : fieldValue, {\n      shouldDirty: true,\n    });\n  };\n\n  useEffect(() => {\n    register(name);\n  }, [register]);\n\n  return (\n    <>\n      {fields.map((value, index) => (\n        <Fragment key={index}>\n          <InputGroup>\n            <TextInput\n              data-testid={name + index}\n              onChange={(value) => updateValue(index, value)}\n              name={`${name}[${index}].value`}\n              value={value}\n              isDisabled={isDisabled}\n              {...rest}\n            />\n            <Button\n              variant={ButtonVariant.link}\n              onClick={() => remove(index)}\n              tabIndex={-1}\n              aria-label={t(\"common:remove\")}\n              isDisabled={fields.length === 1}\n            >\n              <MinusCircleIcon />\n            </Button>\n          </InputGroup>\n          {index === fields.length - 1 && (\n            <Button\n              variant={ButtonVariant.link}\n              onClick={append}\n              tabIndex={-1}\n              aria-label={t(\"common:add\")}\n              data-testid=\"addValue\"\n              isDisabled={!value}\n            >\n              <PlusCircleIcon /> {t(addButtonLabel || \"common:add\")}\n            </Button>\n          )}\n        </Fragment>\n      ))}\n    </>\n  );\n};\n"],"names":["stringToMultiline","value","split","toStringValue","formValue","join","MultiLineInput","name","addButtonLabel","isDisabled","defaultValue","stringify","rest","t","useTranslation","register","setValue","control","useFormContext","useWatch","fields","useMemo","values","Array","isArray","length","remove","index","update","slice","append","updateValue","fieldValue","flatMap","field","shouldDirty","useEffect","_Fragment","map","Fragment","_jsxs","InputGroup","_jsx","TextInput","Button","ButtonVariant","link","MinusCircleIcon","PlusCircleIcon"],"mappings":"wPAYA,SAASA,EAAkBC,EAA0B,CACnD,OAAO,OAAOA,GAAU,SAAWA,EAAMC,MAAM,IAAI,EAAI,EACzD,CAEA,SAASC,EAAcC,EAA6B,CAC3CA,OAAAA,EAAUC,KAAK,IAAI,CAC5B,CAUO,MAAMC,EAAiB,CAAC,CAC7BC,KAAAA,EACAC,eAAAA,EACAC,WAAAA,EAAa,GACbC,aAAAA,EACAC,UAAAA,EAAY,MACTC,CACgB,IAAM,CACnB,KAAA,CAAEC,EAAAA,GAAMC,EAAgB,EACxB,CAAEC,SAAAA,EAAUC,SAAAA,EAAUC,QAAAA,GAAYC,EAAgB,EAClDjB,EAAQkB,EAAS,CACrBZ,KAAAA,EACAU,QAAAA,EACAP,aAAcA,GAAgB,EAAA,CAC/B,EAEKU,EAASC,EAAAA,QAAAA,QAAkB,IAAM,CACrC,IAAIC,EAASX,EAAYX,EAAkBC,CAAgB,EAAGA,EAG5DsB,OAAAA,EAAAA,MAAMC,QAAQF,CAAM,GAAKA,EAAOG,SAAW,EACvCH,EACAZ,GAAgB,CAAC,EAAE,EAElBY,CAAAA,EACN,CAACrB,CAAK,CAAC,EAEJyB,EAAUC,GAAkB,CAChCC,EAAO,CAAC,GAAGR,EAAOS,MAAM,EAAGF,CAAK,EAAG,GAAGP,EAAOS,MAAMF,EAAQ,CAAC,CAAC,CAAC,CAAA,EAG1DG,EAAS,IAAM,CACnBF,EAAO,CAAC,GAAGR,EAAQ,EAAE,CAAC,CAAA,EAGlBW,EAAc,CAACJ,EAAe1B,IAAkB,CACpD2B,EAAO,CAAC,GAAGR,EAAOS,MAAM,EAAGF,CAAK,EAAG1B,EAAO,GAAGmB,EAAOS,MAAMF,EAAQ,CAAC,CAAC,CAAC,CAAA,EAGjEC,EAAUN,GAAqB,CACnC,MAAMU,EAAaV,EAAOW,QAASC,GAAUA,CAAK,EAClDlB,EAAST,EAAMI,EAAYR,EAAc6B,CAAU,EAAIA,EAAY,CACjEG,YAAa,EAAA,CACd,CAAA,EAGHC,OAAAA,EAAAA,QAAAA,UAAU,IAAM,CACdrB,EAASR,CAAI,CAAA,EACZ,CAACQ,CAAQ,CAAC,IAGXsB,EAAA,CAAA,SACGjB,EAAOkB,IAAI,CAACrC,EAAO0B,MACjBY,mBAAQ,CAAA,SAAA,CACPC,EAACC,EAAU,CAAA,SAAA,CACTC,EAACC,EAAS,CACR,cAAapC,EAAOoB,EACpB,SAAW1B,GAAU8B,EAAYJ,EAAO1B,CAAK,EAC7C,KAAO,GAAEM,KAAQoB,WACjB,MAAO1B,EACP,WAAAQ,EAAuB,GACnBG,CAAAA,CACJ,EACF8B,EAACE,EAAM,CACL,QAASC,EAAcC,KACvB,QAAS,IAAMpB,EAAOC,CAAK,EAC3B,SAAU,GACV,aAAYd,EAAE,eAAe,EAC7B,WAAYO,EAAOK,SAAW,EAAE,SAEhCiB,EAACK,EAAe,EAAA,CAAA,CACT,CAAA,CAAA,CACE,EACZpB,IAAUP,EAAOK,OAAS,KACxBmB,EAAM,CACL,QAASC,EAAcC,KACvB,QAAShB,EACT,SAAU,GACV,aAAYjB,EAAE,YAAY,EAC1B,cAAY,WACZ,WAAY,CAACZ,EAAM,SAEnB,CAAAyC,EAACM,EAAc,CAAA,CAAA,EAAI,IAACnC,EAAEL,GAAkB,YAAY,CAAC,CAAA,CAExD,CAAA,CAAA,EA/BYmB,CAAK,CAiCrB,CAAA,CACA,CAEP"}