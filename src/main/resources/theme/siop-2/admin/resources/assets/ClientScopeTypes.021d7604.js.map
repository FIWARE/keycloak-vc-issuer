{"version":3,"file":"ClientScopeTypes.021d7604.js","sources":["../../src/components/client-scope/ClientScopeTypes.tsx"],"sourcesContent":["import { useState } from \"react\";\n\nimport type { TFunction } from \"i18next\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  DropdownItem,\n  Select,\n  SelectOption,\n  SelectProps,\n} from \"@patternfly/react-core\";\n\nimport type ClientScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientScopeRepresentation\";\nimport type KeycloakAdminClient from \"@keycloak/keycloak-admin-client\";\nimport { toUpperCase } from \"../../util\";\n\nexport enum ClientScope {\n  default = \"default\",\n  optional = \"optional\",\n}\n\nexport enum AllClientScopes {\n  none = \"none\",\n}\n\nexport type ClientScopeType = ClientScope;\nexport type AllClientScopeType = ClientScope | AllClientScopes;\n\nconst clientScopeTypes = Object.keys(ClientScope);\nexport const allClientScopeTypes = Object.keys({\n  ...AllClientScopes,\n  ...ClientScope,\n}) as AllClientScopeType[];\n\nexport const clientScopeTypesSelectOptions = (\n  t: TFunction,\n  scopeTypes: string[] | undefined = clientScopeTypes\n) =>\n  scopeTypes.map((type) => (\n    <SelectOption key={type} value={type}>\n      {t(`common:clientScope.${type}`)}\n    </SelectOption>\n  ));\n\nexport const clientScopeTypesDropdown = (\n  t: TFunction,\n  onClick: (scope: ClientScopeType) => void\n) =>\n  clientScopeTypes.map((type) => (\n    <DropdownItem key={type} onClick={() => onClick(type as ClientScopeType)}>\n      {t(`common:clientScope.${type}`)}\n    </DropdownItem>\n  ));\n\ntype CellDropdownProps = Omit<SelectProps, \"onToggle\"> & {\n  clientScope: ClientScopeRepresentation;\n  type: ClientScopeType | AllClientScopeType;\n  all?: boolean;\n  onSelect: (value: ClientScopeType | AllClientScopeType) => void;\n};\n\nexport const CellDropdown = ({\n  clientScope,\n  type,\n  onSelect,\n  all = false,\n  ...props\n}: CellDropdownProps) => {\n  const { t } = useTranslation();\n  const [open, setOpen] = useState(false);\n\n  return (\n    <Select\n      className={`keycloak__client-scope__${type}`}\n      key={clientScope.id}\n      onToggle={() => setOpen(!open)}\n      isOpen={open}\n      selections={[type]}\n      onSelect={(_, value) => {\n        onSelect(\n          all ? (value as ClientScopeType) : (value as AllClientScopeType)\n        );\n        setOpen(false);\n      }}\n      {...props}\n    >\n      {clientScopeTypesSelectOptions(\n        t,\n        all ? allClientScopeTypes : clientScopeTypes\n      )}\n    </Select>\n  );\n};\n\nexport type ClientScopeDefaultOptionalType = ClientScopeRepresentation & {\n  type: AllClientScopeType;\n};\n\nexport const changeScope = async (\n  adminClient: KeycloakAdminClient,\n  clientScope: ClientScopeDefaultOptionalType,\n  changeTo: AllClientScopeType\n) => {\n  await removeScope(adminClient, clientScope);\n  await addScope(adminClient, clientScope, changeTo);\n};\n\nconst castAdminClient = (adminClient: KeycloakAdminClient) =>\n  adminClient.clientScopes as unknown as {\n    [index: string]: Function;\n  };\n\nexport const removeScope = async (\n  adminClient: KeycloakAdminClient,\n  clientScope: ClientScopeDefaultOptionalType\n) => {\n  if (clientScope.type !== AllClientScopes.none)\n    await castAdminClient(adminClient)[\n      `delDefault${\n        clientScope.type === ClientScope.optional ? \"Optional\" : \"\"\n      }ClientScope`\n    ]({\n      id: clientScope.id!,\n    });\n};\n\nconst addScope = async (\n  adminClient: KeycloakAdminClient,\n  clientScope: ClientScopeDefaultOptionalType,\n  type: AllClientScopeType\n) => {\n  if (type !== AllClientScopes.none)\n    await castAdminClient(adminClient)[\n      `addDefault${type === ClientScope.optional ? \"Optional\" : \"\"}ClientScope`\n    ]({\n      id: clientScope.id!,\n    });\n};\n\nexport const changeClientScope = async (\n  adminClient: KeycloakAdminClient,\n  clientId: string,\n  clientScope: ClientScopeRepresentation,\n  type: AllClientScopeType,\n  changeTo: ClientScopeType\n) => {\n  if (type !== \"none\") {\n    await removeClientScope(adminClient, clientId, clientScope, type);\n  }\n  await addClientScope(adminClient, clientId, clientScope, changeTo);\n};\n\nexport const removeClientScope = async (\n  adminClient: KeycloakAdminClient,\n  clientId: string,\n  clientScope: ClientScopeRepresentation,\n  type: ClientScope\n) => {\n  const methodName = `del${toUpperCase(type)}ClientScope` as const;\n\n  await adminClient.clients[methodName]({\n    id: clientId,\n    clientScopeId: clientScope.id!,\n  });\n};\n\nexport const addClientScope = async (\n  adminClient: KeycloakAdminClient,\n  clientId: string,\n  clientScope: ClientScopeRepresentation,\n  type: ClientScopeType\n) => {\n  const methodName = `add${toUpperCase(type)}ClientScope` as const;\n\n  await adminClient.clients[methodName]({\n    id: clientId,\n    clientScopeId: clientScope.id!,\n  });\n};\n"],"names":["ClientScope","default","optional","AllClientScopes","none","clientScopeTypes","Object","keys","allClientScopeTypes","clientScopeTypesSelectOptions","t","scopeTypes","map","type","_jsx","SelectOption","clientScopeTypesDropdown","onClick","DropdownItem","CellDropdown","clientScope","onSelect","all","props","useTranslation","open","setOpen","useState","Select","_","value","id","changeScope","adminClient","changeTo","removeScope","addScope","castAdminClient","clientScopes","changeClientScope","clientId","removeClientScope","addClientScope","methodName","toUpperCase","clients","clientScopeId"],"mappings":"qHAeYA,IAAAA,GAAAA,IACVC,EAAAA,QAAU,UACVC,EAAAA,SAAW,WAFDF,IAAAA,GAAAA,CAAAA,CAAAA,EAKAG,GAAAA,IACVC,EAAAA,KAAO,OADGD,IAAAA,GAAAA,CAAAA,CAAAA,EAOZ,MAAME,EAAmBC,OAAOC,KAAKP,CAAW,EACnCQ,EAAsBF,OAAOC,KAAK,CAC7C,GAAGJ,EACH,GAAGH,CACL,CAAC,EAEYS,EAAgC,CAC3CC,EACAC,EAAmCN,IAEnCM,EAAWC,IACTC,GAAAC,EAACC,EAAY,CAAY,MAAOF,EAAK,SAClCH,EAAG,sBAAqBG,GAAM,CAAC,EADfA,CAAI,CAGxB,EAEUG,EAA2B,CACtCN,EACAO,IAEAZ,EAAiBO,IAAKC,KACnBK,EAAY,CAAY,QAAS,IAAMD,EAAQJ,CAAyB,EAAA,SACtEH,EAAG,sBAAqBG,GAAM,CAAC,EADfA,CAAI,CAGxB,EASUM,EAAe,CAAC,CAC3BC,YAAAA,EACAP,KAAAA,EACAQ,SAAAA,EACAC,IAAAA,EAAM,MACHC,CACc,IAAM,CACjB,KAAA,CAAEb,EAAAA,GAAMc,EAAgB,EACxB,CAACC,EAAMC,CAAO,EAAIC,mBAAS,EAAK,EAEtC,SACGC,EAAM,CACL,UAAY,2BAA0Bf,IAEtC,SAAU,IAAMa,EAAQ,CAACD,CAAI,EAC7B,OAAQA,EACR,WAAY,CAACZ,CAAI,EACjB,SAAU,CAACgB,EAAGC,IAAU,CAEpBR,EAAOQ,CAAyD,EAElEJ,EAAQ,EAAK,CACf,EAAE,GACEH,EAAK,SAERd,EACCC,EACAY,EAAMd,EAAsBH,CAAgB,CAAA,EAdzCe,EAAYW,EAAE,CAkBzB,EAMaC,EAAc,MACzBC,EACAb,EACAc,IACG,CACGC,MAAAA,EAAYF,EAAab,CAAW,EACpCgB,MAAAA,EAASH,EAAab,EAAac,CAAQ,CACnD,EAEMG,EAAmBJ,GACvBA,EAAYK,aAIDH,EAAc,MACzBF,EACAb,IACG,CACCA,EAAYP,OAASV,QACjBkC,MAAAA,EAAgBJ,CAAW,EAC9B,aACCb,EAAYP,OAASb,WAAuB,WAAa,iBAE3D,CACA+B,GAAIX,EAAYW,EAAAA,CACjB,CACL,EAEMK,EAAW,MACfH,EACAb,EACAP,IACG,CACCA,IAASV,QACX,MAAMkC,EAAgBJ,CAAW,EAC9B,aAAYpB,IAASb,WAAuB,WAAa,iBAC1D,CACA+B,GAAIX,EAAYW,EAAAA,CACjB,CACL,EAEaQ,EAAoB,MAC/BN,EACAO,EACApB,EACAP,EACAqB,IACG,CACCrB,IAAS,QACX,MAAM4B,EAAkBR,EAAaO,EAAUpB,EAAaP,CAAI,EAElE,MAAM6B,EAAeT,EAAaO,EAAUpB,EAAac,CAAQ,CACnE,EAEaO,EAAoB,MAC/BR,EACAO,EACApB,EACAP,IACG,CACG8B,MAAAA,EAAc,MAAKC,EAAY/B,CAAI,eAEnCoB,MAAAA,EAAYY,QAAQF,GAAY,CACpCZ,GAAIS,EACJM,cAAe1B,EAAYW,EAAAA,CAC5B,CACH,EAEaW,EAAiB,MAC5BT,EACAO,EACApB,EACAP,IACG,CACG8B,MAAAA,EAAc,MAAKC,EAAY/B,CAAI,eAEnCoB,MAAAA,EAAYY,QAAQF,GAAY,CACpCZ,GAAIS,EACJM,cAAe1B,EAAYW,EAAAA,CAC5B,CACH"}