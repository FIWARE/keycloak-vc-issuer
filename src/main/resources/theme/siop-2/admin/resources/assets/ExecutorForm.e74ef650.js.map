{"version":3,"file":"ExecutorForm.e74ef650.js","sources":["../../src/realm-settings/ExecutorForm.tsx"],"sourcesContent":["import type { ConfigPropertyRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/authenticatorConfigInfoRepresentation\";\nimport type ClientProfileRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientProfileRepresentation\";\nimport type ComponentTypeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentTypeRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  FormGroup,\n  PageSection,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\n\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { DynamicComponents } from \"../components/dynamic/DynamicComponents\";\nimport { FormAccess } from \"../components/form-access/FormAccess\";\nimport { HelpItem } from \"../components/help-enabler/HelpItem\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useAdminClient, useFetch } from \"../context/auth/AdminClient\";\nimport { useServerInfo } from \"../context/server-info/ServerInfoProvider\";\nimport { useParams } from \"../utils/useParams\";\nimport { ClientProfileParams, toClientProfile } from \"./routes/ClientProfile\";\nimport type { ExecutorParams } from \"./routes/Executor\";\n\ntype ExecutorForm = {\n  config?: object;\n  executor: string;\n};\n\nconst defaultValues: ExecutorForm = {\n  config: {},\n  executor: \"\",\n};\n\nexport default function ExecutorForm() {\n  const { t } = useTranslation(\"realm-settings\");\n  const navigate = useNavigate();\n  const { realm, profileName } = useParams<ClientProfileParams>();\n  const { executorName } = useParams<ExecutorParams>();\n  const { addAlert, addError } = useAlerts();\n  const [selectExecutorTypeOpen, setSelectExecutorTypeOpen] = useState(false);\n  const serverInfo = useServerInfo();\n  const { adminClient } = useAdminClient();\n  const executorTypes =\n    serverInfo.componentTypes?.[\n      \"org.keycloak.services.clientpolicy.executor.ClientPolicyExecutorProvider\"\n    ];\n  const [executors, setExecutors] = useState<ComponentTypeRepresentation[]>([]);\n  const [executorProperties, setExecutorProperties] = useState<\n    ConfigPropertyRepresentation[]\n  >([]);\n  const [globalProfiles, setGlobalProfiles] = useState<\n    ClientProfileRepresentation[]\n  >([]);\n  const [profiles, setProfiles] = useState<ClientProfileRepresentation[]>([]);\n  const form = useForm({ defaultValues });\n  const { control, reset, handleSubmit } = form;\n  const editMode = !!executorName;\n\n  const setupForm = (profiles: ClientProfileRepresentation[]) => {\n    const profile = profiles.find((profile) => profile.name === profileName);\n    const executor = profile?.executors?.find(\n      (executor) => executor.executor === executorName\n    );\n    if (executor) reset({ config: executor.configuration });\n  };\n\n  useFetch(\n    () =>\n      adminClient.clientPolicies.listProfiles({ includeGlobalProfiles: true }),\n    (profiles) => {\n      setGlobalProfiles(profiles.globalProfiles!);\n      setProfiles(profiles.profiles!);\n\n      setupForm(profiles.profiles!);\n      setupForm(profiles.globalProfiles!);\n    },\n    []\n  );\n\n  const save = async () => {\n    const formValues = form.getValues();\n    const updatedProfiles = profiles.map((profile) => {\n      if (profile.name !== profileName) {\n        return profile;\n      }\n\n      const executors = (profile.executors ?? []).concat({\n        executor: formValues.executor,\n        configuration: formValues.config || {},\n      });\n\n      if (editMode) {\n        const profileExecutor = profile.executors!.find(\n          (executor) => executor.executor === executorName\n        );\n        profileExecutor!.configuration = {\n          ...profileExecutor!.configuration,\n          ...formValues.config,\n        };\n      }\n\n      if (editMode) {\n        return profile;\n      }\n      return {\n        ...profile,\n        executors,\n      };\n    });\n    try {\n      await adminClient.clientPolicies.createProfiles({\n        profiles: updatedProfiles,\n        globalProfiles: globalProfiles,\n      });\n      addAlert(\n        editMode\n          ? t(\"realm-settings:updateExecutorSuccess\")\n          : t(\"realm-settings:addExecutorSuccess\"),\n        AlertVariant.success\n      );\n\n      navigate(toClientProfile({ realm, profileName }));\n    } catch (error) {\n      addError(\n        editMode\n          ? \"realm-settings:updateExecutorError\"\n          : \"realm-settings:addExecutorError\",\n        error\n      );\n    }\n  };\n\n  const globalProfile = globalProfiles.find(\n    (globalProfile) => globalProfile.name === profileName\n  );\n\n  const profileExecutorType = executorTypes?.find(\n    (executor) => executor.id === executorName\n  );\n\n  const editedProfileExecutors =\n    profileExecutorType?.properties.map<ConfigPropertyRepresentation>(\n      (property) => {\n        const globalDefaultValues = editMode ? property.defaultValue : \"\";\n        return {\n          ...property,\n          defaultValue: globalDefaultValues,\n        };\n      }\n    );\n\n  return (\n    <>\n      <ViewHeader\n        titleKey={editMode ? executorName : t(\"addExecutor\")}\n        divider\n      />\n      <PageSection variant=\"light\">\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          className=\"pf-u-mt-lg\"\n          isReadOnly={!!globalProfile}\n        >\n          <FormGroup\n            label={t(\"executorType\")}\n            fieldId=\"kc-executorType\"\n            labelIcon={\n              executors.length > 0 && executors[0].helpText! !== \"\" ? (\n                <HelpItem\n                  helpText={executors[0].helpText}\n                  fieldLabelId=\"realm-settings:executorTypeHelpText\"\n                />\n              ) : editMode ? (\n                <HelpItem\n                  helpText={profileExecutorType?.helpText}\n                  fieldLabelId=\"realm-settings:executorTypeHelpText\"\n                />\n              ) : undefined\n            }\n          >\n            <Controller\n              name=\"executor\"\n              defaultValue=\"\"\n              control={control}\n              render={({ field }) => (\n                <Select\n                  toggleId=\"kc-executor\"\n                  placeholderText=\"Select an executor\"\n                  onToggle={(isOpen) => setSelectExecutorTypeOpen(isOpen)}\n                  onSelect={(_, value) => {\n                    reset({ ...defaultValues, executor: value.toString() });\n                    const selectedExecutor = executorTypes?.filter(\n                      (type) => type.id === value\n                    );\n                    setExecutors(selectedExecutor ?? []);\n                    setExecutorProperties(\n                      selectedExecutor?.[0].properties ?? []\n                    );\n                    setSelectExecutorTypeOpen(false);\n                  }}\n                  selections={editMode ? executorName : field.value}\n                  variant={SelectVariant.single}\n                  data-testid=\"executorType-select\"\n                  aria-label={t(\"executorType\")}\n                  isOpen={selectExecutorTypeOpen}\n                  maxHeight={580}\n                  isDisabled={editMode}\n                >\n                  {executorTypes?.map((option) => (\n                    <SelectOption\n                      selected={option.id === field.value}\n                      key={option.id}\n                      value={option.id}\n                      description={option.helpText}\n                    />\n                  ))}\n                </Select>\n              )}\n            />\n          </FormGroup>\n          <FormProvider {...form}>\n            <DynamicComponents\n              properties={\n                editMode ? editedProfileExecutors! : executorProperties\n              }\n            />\n          </FormProvider>\n          {!globalProfile && (\n            <ActionGroup>\n              <Button\n                variant=\"primary\"\n                onClick={() => handleSubmit(save)()}\n                data-testid=\"addExecutor-saveBtn\"\n              >\n                {editMode ? t(\"common:save\") : t(\"common:add\")}\n              </Button>\n              <Button\n                variant=\"link\"\n                component={(props) => (\n                  <Link\n                    {...props}\n                    to={toClientProfile({ realm, profileName })}\n                  />\n                )}\n                data-testid=\"addExecutor-cancelBtn\"\n              >\n                {t(\"common:cancel\")}\n              </Button>\n            </ActionGroup>\n          )}\n        </FormAccess>\n        {editMode && globalProfile && (\n          <div className=\"kc-backToProfile\">\n            <Button\n              component={(props) => (\n                <Link {...props} to={toClientProfile({ realm, profileName })} />\n              )}\n              variant=\"primary\"\n            >\n              {t(\"realm-settings:back\")}\n            </Button>\n          </div>\n        )}\n      </PageSection>\n    </>\n  );\n}\n"],"names":["defaultValues","config","executor","ExecutorForm","t","useTranslation","navigate","useNavigate","realm","profileName","useParams","executorName","addAlert","addError","useAlerts","selectExecutorTypeOpen","setSelectExecutorTypeOpen","useState","serverInfo","useServerInfo","adminClient","useAdminClient","executorTypes","componentTypes","executors","setExecutors","executorProperties","setExecutorProperties","globalProfiles","setGlobalProfiles","profiles","setProfiles","form","useForm","control","reset","handleSubmit","editMode","setupForm","find","profile","name","configuration","useFetch","clientPolicies","listProfiles","includeGlobalProfiles","save","formValues","getValues","updatedProfiles","map","concat","profileExecutor","createProfiles","AlertVariant","success","toClientProfile","error","globalProfile","profileExecutorType","id","editedProfileExecutors","properties","property","globalDefaultValues","defaultValue","_Fragment","_jsx","ViewHeader","_jsxs","PageSection","FormAccess","FormGroup","length","helpText","HelpItem","undefined","Controller","field","Select","isOpen","_","value","toString","selectedExecutor","filter","type","SelectVariant","single","option","SelectOption","FormProvider","DynamicComponents","ActionGroup","Button","props","Link"],"mappings":"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"}