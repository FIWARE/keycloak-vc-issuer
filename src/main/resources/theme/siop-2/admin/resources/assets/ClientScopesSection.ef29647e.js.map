{"version":3,"file":"ClientScopesSection.ef29647e.js","sources":["../../src/client-scopes/ClientScopesSection.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Dropdown,\n  DropdownItem,\n  KebabToggle,\n  PageSection,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { cellWidth } from \"@patternfly/react-table\";\n\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { KeycloakDataTable } from \"../components/table-toolbar/KeycloakDataTable\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { emptyFormatter } from \"../util\";\nimport useLocaleSort, { mapByKey } from \"../utils/useLocaleSort\";\nimport {\n  CellDropdown,\n  ClientScope,\n  AllClientScopes,\n  ClientScopeDefaultOptionalType,\n  changeScope,\n  removeScope,\n  AllClientScopeType,\n} from \"../components/client-scope/ClientScopeTypes\";\nimport { ChangeTypeDropdown } from \"./ChangeTypeDropdown\";\nimport { toNewClientScope } from \"./routes/NewClientScope\";\n\nimport { toClientScope } from \"./routes/ClientScope\";\nimport {\n  nameFilter,\n  protocolFilter,\n  ProtocolType,\n  SearchDropdown,\n  SearchToolbar,\n  SearchType,\n  typeFilter,\n} from \"./details/SearchFilter\";\nimport type { Row } from \"../clients/scopes/ClientScopes\";\nimport { getProtocolName } from \"../clients/utils\";\nimport helpUrls from \"../help-urls\";\n\nimport \"./client-scope.css\";\n\nexport default function ClientScopesSection() {\n  const { realm } = useRealm();\n  const { t } = useTranslation(\"client-scopes\");\n\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  const [kebabOpen, setKebabOpen] = useState(false);\n  const [selectedScopes, setSelectedScopes] = useState<\n    ClientScopeDefaultOptionalType[]\n  >([]);\n\n  const [searchType, setSearchType] = useState<SearchType>(\"name\");\n  const [searchTypeType, setSearchTypeType] = useState<AllClientScopes>(\n    AllClientScopes.none\n  );\n  const [searchProtocol, setSearchProtocol] = useState<ProtocolType>(\"all\");\n  const localeSort = useLocaleSort();\n\n  const [key, setKey] = useState(0);\n  const refresh = () => {\n    setSelectedScopes([]);\n    setKey(key + 1);\n  };\n\n  const loader = async (first?: number, max?: number, search?: string) => {\n    const defaultScopes =\n      await adminClient.clientScopes.listDefaultClientScopes();\n    const optionalScopes =\n      await adminClient.clientScopes.listDefaultOptionalClientScopes();\n    const clientScopes = await adminClient.clientScopes.find();\n\n    const filter =\n      searchType === \"name\"\n        ? nameFilter(search)\n        : searchType === \"type\"\n        ? typeFilter(searchTypeType)\n        : protocolFilter(searchProtocol);\n\n    const transformed = clientScopes\n      .map((scope) => {\n        const row: Row = {\n          ...scope,\n          type: defaultScopes.find(\n            (defaultScope) => defaultScope.name === scope.name\n          )\n            ? ClientScope.default\n            : optionalScopes.find(\n                (optionalScope) => optionalScope.name === scope.name\n              )\n            ? ClientScope.optional\n            : AllClientScopes.none,\n        };\n        return row;\n      })\n      .filter(filter);\n\n    return localeSort(transformed, mapByKey(\"name\")).slice(\n      first,\n      Number(first) + Number(max)\n    );\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: t(\"deleteClientScope\", {\n      count: selectedScopes.length,\n      name: selectedScopes[0]?.name,\n    }),\n    messageKey: \"client-scopes:deleteConfirm\",\n    continueButtonLabel: \"common:delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        for (const scope of selectedScopes) {\n          try {\n            await removeScope(adminClient, scope);\n          } catch (error: any) {\n            console.warn(\n              \"could not remove scope\",\n              error.response?.data?.errorMessage || error\n            );\n          }\n          await adminClient.clientScopes.del({ id: scope.id! });\n        }\n        addAlert(t(\"deletedSuccess\"), AlertVariant.success);\n        refresh();\n      } catch (error) {\n        addError(\"client-scopes:deleteError\", error);\n      }\n    },\n  });\n\n  const TypeSelector = (scope: ClientScopeDefaultOptionalType) => (\n    <CellDropdown\n      clientScope={scope}\n      type={scope.type}\n      all\n      onSelect={async (value) => {\n        try {\n          await changeScope(adminClient, scope, value as AllClientScopeType);\n          addAlert(t(\"clientScopeSuccess\"), AlertVariant.success);\n          refresh();\n        } catch (error) {\n          addError(\"client-scopes:clientScopeError\", error);\n        }\n      }}\n    />\n  );\n\n  const ClientScopeDetailLink = ({\n    id,\n    name,\n  }: ClientScopeDefaultOptionalType) => (\n    <Link key={id} to={toClientScope({ realm, id: id!, tab: \"settings\" })}>\n      {name}\n    </Link>\n  );\n  return (\n    <>\n      <DeleteConfirm />\n      <ViewHeader\n        titleKey=\"clientScopes\"\n        subKey=\"client-scopes:clientScopeExplain\"\n        helpUrl={helpUrls.clientScopesUrl}\n      />\n      <PageSection variant=\"light\" className=\"pf-u-p-0\">\n        <KeycloakDataTable\n          key={key}\n          loader={loader}\n          ariaLabelKey=\"client-scopes:clientScopeList\"\n          searchPlaceholderKey={\n            searchType === \"name\" ? \"client-scopes:searchFor\" : undefined\n          }\n          isSearching={searchType !== \"name\"}\n          searchTypeComponent={\n            <SearchDropdown\n              searchType={searchType}\n              onSelect={(searchType) => setSearchType(searchType)}\n              withProtocol\n            />\n          }\n          isPaginated\n          onSelect={(clientScopes) => setSelectedScopes([...clientScopes])}\n          canSelectAll\n          toolbarItem={\n            <>\n              <SearchToolbar\n                searchType={searchType}\n                type={searchTypeType}\n                onSelect={(searchType) => {\n                  setSearchType(searchType);\n                  setSearchProtocol(\"all\");\n                  setSearchTypeType(AllClientScopes.none);\n                  refresh();\n                }}\n                onType={(value) => {\n                  setSearchTypeType(value);\n                  setSearchProtocol(\"all\");\n                  refresh();\n                }}\n                protocol={searchProtocol}\n                onProtocol={(protocol) => {\n                  setSearchProtocol(protocol);\n                  setSearchTypeType(AllClientScopes.none);\n                  refresh();\n                }}\n              />\n\n              <ToolbarItem>\n                <Button\n                  component={(props) => (\n                    <Link {...props} to={toNewClientScope({ realm })} />\n                  )}\n                >\n                  {t(\"createClientScope\")}\n                </Button>\n              </ToolbarItem>\n              <ToolbarItem>\n                <ChangeTypeDropdown\n                  selectedRows={selectedScopes}\n                  refresh={refresh}\n                />\n              </ToolbarItem>\n              <ToolbarItem>\n                <Dropdown\n                  toggle={<KebabToggle onToggle={setKebabOpen} />}\n                  isOpen={kebabOpen}\n                  isPlain\n                  dropdownItems={[\n                    <DropdownItem\n                      key=\"action\"\n                      component=\"button\"\n                      isDisabled={selectedScopes.length === 0}\n                      onClick={() => {\n                        toggleDeleteDialog();\n                        setKebabOpen(false);\n                      }}\n                    >\n                      {t(\"common:delete\")}\n                    </DropdownItem>,\n                  ]}\n                />\n              </ToolbarItem>\n            </>\n          }\n          actions={[\n            {\n              title: t(\"common:delete\"),\n              onRowClick: (clientScope) => {\n                setSelectedScopes([clientScope]);\n                toggleDeleteDialog();\n              },\n            },\n          ]}\n          columns={[\n            {\n              name: \"name\",\n              cellRenderer: ClientScopeDetailLink,\n            },\n            {\n              name: \"type\",\n              displayKey: \"client-scopes:assignedType\",\n              cellRenderer: TypeSelector,\n            },\n            {\n              name: \"protocol\",\n              displayKey: \"client-scopes:protocol\",\n              cellRenderer: (client) =>\n                getProtocolName(t, client.protocol ?? \"openid-connect\"),\n              transforms: [cellWidth(15)],\n            },\n            {\n              name: \"attributes['gui.order']\",\n              displayKey: \"client-scopes:displayOrder\",\n              cellFormatters: [emptyFormatter()],\n              transforms: [cellWidth(15)],\n            },\n            { name: \"description\", cellFormatters: [emptyFormatter()] },\n          ]}\n        />\n      </PageSection>\n    </>\n  );\n}\n"],"names":["ClientScopesSection","realm","useRealm","t","useTranslation","adminClient","useAdminClient","addAlert","addError","useAlerts","kebabOpen","setKebabOpen","useState","selectedScopes","setSelectedScopes","searchType","setSearchType","searchTypeType","setSearchTypeType","AllClientScopes","none","searchProtocol","setSearchProtocol","localeSort","useLocaleSort","key","setKey","refresh","loader","first","max","search","defaultScopes","clientScopes","listDefaultClientScopes","optionalScopes","listDefaultOptionalClientScopes","find","filter","nameFilter","typeFilter","protocolFilter","transformed","map","scope","type","defaultScope","name","ClientScope","default","optionalScope","optional","mapByKey","slice","Number","toggleDeleteDialog","DeleteConfirm","useConfirmDialog","titleKey","count","length","messageKey","continueButtonLabel","continueButtonVariant","ButtonVariant","danger","onConfirm","removeScope","error","console","warn","response","data","errorMessage","del","id","AlertVariant","success","TypeSelector","_jsx","CellDropdown","value","changeScope","ClientScopeDetailLink","Link","toClientScope","tab","_Fragment","ViewHeader","helpUrls","clientScopesUrl","PageSection","KeycloakDataTable","undefined","SearchDropdown","SearchToolbar","protocol","ToolbarItem","Button","props","toNewClientScope","ChangeTypeDropdown","Dropdown","KebabToggle","DropdownItem","title","onRowClick","clientScope","cellRenderer","displayKey","getProtocolName","client","transforms","cellWidth","cellFormatters","emptyFormatter"],"mappings":"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"}