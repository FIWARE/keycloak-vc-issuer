{"version":3,"file":"RolesList.3b965012.js","sources":["../../src/components/roles-list/RolesList.tsx"],"sourcesContent":["import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport type RoleRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport { AlertVariant, Button, ButtonVariant } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, To, useNavigate } from \"react-router-dom\";\n\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { toRealmSettings } from \"../../realm-settings/routes/RealmSettings\";\nimport { emptyFormatter, upperCaseFormatter } from \"../../util\";\nimport { useAlerts } from \"../alert/Alerts\";\nimport { useConfirmDialog } from \"../confirm-dialog/ConfirmDialog\";\nimport { HelpItem } from \"../help-enabler/HelpItem\";\nimport { KeycloakSpinner } from \"../keycloak-spinner/KeycloakSpinner\";\nimport { ListEmptyState } from \"../list-empty-state/ListEmptyState\";\nimport { KeycloakDataTable } from \"../table-toolbar/KeycloakDataTable\";\n\nimport \"./RolesList.css\";\n\ntype RolesListProps = {\n  paginated?: boolean;\n  parentRoleId?: string;\n  messageBundle?: string;\n  isReadOnly: boolean;\n  toCreate: To;\n  toDetail: (roleId: string) => To;\n  loader?: (\n    first?: number,\n    max?: number,\n    search?: string\n  ) => Promise<RoleRepresentation[]>;\n};\n\nexport const RolesList = ({\n  loader,\n  paginated = true,\n  parentRoleId,\n  messageBundle = \"roles\",\n  toCreate,\n  toDetail,\n  isReadOnly,\n}: RolesListProps) => {\n  const { t } = useTranslation(messageBundle);\n  const navigate = useNavigate();\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const { realm: realmName } = useRealm();\n  const [realm, setRealm] = useState<RealmRepresentation>();\n\n  const [selectedRole, setSelectedRole] = useState<RoleRepresentation>();\n\n  useFetch(\n    () => adminClient.realms.findOne({ realm: realmName }),\n    (realm) => {\n      setRealm(realm);\n    },\n    []\n  );\n\n  const RoleDetailLink = (role: RoleRepresentation) =>\n    role.name !== realm?.defaultRole?.name ? (\n      <Link to={toDetail(role.id!)}>{role.name}</Link>\n    ) : (\n      <>\n        <Link\n          to={toRealmSettings({ realm: realmName, tab: \"user-registration\" })}\n        >\n          {role.name}{\" \"}\n        </Link>\n        <HelpItem\n          helpText={`${messageBundle}:defaultRole`}\n          fieldLabelId=\"defaultRole\"\n        />\n      </>\n    );\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"roles:roleDeleteConfirm\",\n    messageKey: t(\"roles:roleDeleteConfirmDialog\", {\n      selectedRoleName: selectedRole ? selectedRole!.name : \"\",\n    }),\n    continueButtonLabel: \"common:delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        if (!parentRoleId) {\n          await adminClient.roles.delById({\n            id: selectedRole!.id!,\n          });\n        } else {\n          await adminClient.roles.delCompositeRoles({ id: parentRoleId }, [\n            selectedRole!,\n          ]);\n        }\n        setSelectedRole(undefined);\n        addAlert(t(\"roleDeletedSuccess\"), AlertVariant.success);\n      } catch (error) {\n        addError(\"roles:roleDeleteError\", error);\n      }\n    },\n  });\n\n  if (!realm) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <>\n      <DeleteConfirm />\n      <KeycloakDataTable\n        key={selectedRole ? selectedRole.id : \"roleList\"}\n        loader={loader!}\n        ariaLabelKey=\"roles:roleList\"\n        searchPlaceholderKey=\"roles:searchFor\"\n        isPaginated={paginated}\n        toolbarItem={\n          !isReadOnly && (\n            <Button\n              data-testid=\"create-role\"\n              component={(props) => <Link {...props} to={toCreate} />}\n            >\n              {t(\"createRole\")}\n            </Button>\n          )\n        }\n        actions={\n          isReadOnly\n            ? []\n            : [\n                {\n                  title: t(\"common:delete\"),\n                  onRowClick: (role) => {\n                    setSelectedRole(role);\n                    if (role.name === realm!.defaultRole!.name) {\n                      addAlert(\n                        t(\"defaultRoleDeleteError\"),\n                        AlertVariant.danger\n                      );\n                    } else toggleDeleteDialog();\n                  },\n                },\n              ]\n        }\n        columns={[\n          {\n            name: \"name\",\n            displayKey: \"roles:roleName\",\n            cellRenderer: RoleDetailLink,\n          },\n          {\n            name: \"composite\",\n            displayKey: \"roles:composite\",\n            cellFormatters: [upperCaseFormatter(), emptyFormatter()],\n          },\n          {\n            name: \"description\",\n            displayKey: \"common:description\",\n            cellFormatters: [emptyFormatter()],\n          },\n        ]}\n        emptyState={\n          <ListEmptyState\n            hasIcon={true}\n            message={t(\"noRoles\")}\n            instructions={isReadOnly ? \"\" : t(\"noRolesInstructions\")}\n            primaryActionText={isReadOnly ? \"\" : t(\"createRole\")}\n            onPrimaryAction={() => navigate(toCreate)}\n          />\n        }\n      />\n    </>\n  );\n};\n"],"names":["RolesList","loader","paginated","parentRoleId","messageBundle","toCreate","toDetail","isReadOnly","t","useTranslation","navigate","useNavigate","adminClient","useAdminClient","addAlert","addError","useAlerts","realm","realmName","useRealm","setRealm","useState","selectedRole","setSelectedRole","useFetch","realms","findOne","RoleDetailLink","role","name","defaultRole","_jsx","Link","id","_jsxs","_Fragment","toRealmSettings","tab","HelpItem","toggleDeleteDialog","DeleteConfirm","useConfirmDialog","titleKey","messageKey","selectedRoleName","continueButtonLabel","continueButtonVariant","ButtonVariant","danger","onConfirm","roles","delCompositeRoles","delById","undefined","AlertVariant","success","error","KeycloakDataTable","Button","props","title","onRowClick","displayKey","cellRenderer","cellFormatters","upperCaseFormatter","emptyFormatter","ListEmptyState","KeycloakSpinner"],"mappings":"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"}