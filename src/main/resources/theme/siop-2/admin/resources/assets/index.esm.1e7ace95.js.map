{"version":3,"file":"index.esm.1e7ace95.js","sources":["../../../../node_modules/react-hook-form/dist/index.esm.mjs"],"sourcesContent":["import React from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\r\nvar isObject = (value) => !isNullOrUndefined(value) &&\r\n    !Array.isArray(value) &&\r\n    isObjectType(value) &&\r\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\r\n    ? isCheckBoxInput(event.target)\r\n        ? event.target.checked\r\n        : event.target.value\r\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (obj, path, defaultValue) => {\r\n    if (!path || !isObject(obj)) {\r\n        return defaultValue;\r\n    }\r\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\r\n    return isUndefined(result) || result === obj\r\n        ? isUndefined(obj[path])\r\n            ? defaultValue\r\n            : obj[path]\r\n        : result;\r\n};\n\nconst EVENTS = {\r\n    BLUR: 'blur',\r\n    FOCUS_OUT: 'focusout',\r\n    CHANGE: 'change',\r\n};\r\nconst VALIDATION_MODE = {\r\n    onBlur: 'onBlur',\r\n    onChange: 'onChange',\r\n    onSubmit: 'onSubmit',\r\n    onTouched: 'onTouched',\r\n    all: 'all',\r\n};\r\nconst INPUT_VALIDATION_RULES = {\r\n    max: 'max',\r\n    min: 'min',\r\n    maxLength: 'maxLength',\r\n    minLength: 'minLength',\r\n    pattern: 'pattern',\r\n    required: 'required',\r\n    validate: 'validate',\r\n};\n\nconst HookFormContext = React.createContext(null);\r\n/**\r\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\r\n *\r\n * @returns return all useForm methods\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const methods = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   return (\r\n *     <FormProvider {...methods} >\r\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\r\n *         <NestedInput />\r\n *         <input type=\"submit\" />\r\n *       </form>\r\n *     </FormProvider>\r\n *   );\r\n * }\r\n *\r\n *  function NestedInput() {\r\n *   const { register } = useFormContext(); // retrieve all hook methods\r\n *   return <input {...register(\"test\")} />;\r\n * }\r\n * ```\r\n */\r\nconst useFormContext = () => React.useContext(HookFormContext);\r\n/**\r\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\r\n *\r\n * @param props - all useFrom methods\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const methods = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   return (\r\n *     <FormProvider {...methods} >\r\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\r\n *         <NestedInput />\r\n *         <input type=\"submit\" />\r\n *       </form>\r\n *     </FormProvider>\r\n *   );\r\n * }\r\n *\r\n *  function NestedInput() {\r\n *   const { register } = useFormContext(); // retrieve all hook methods\r\n *   return <input {...register(\"test\")} />;\r\n * }\r\n * ```\r\n */\r\nconst FormProvider = (props) => {\r\n    const { children, ...data } = props;\r\n    return (React.createElement(HookFormContext.Provider, { value: data }, children));\r\n};\n\nvar getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {\r\n    const result = {\r\n        defaultValues: control._defaultValues,\r\n    };\r\n    for (const key in formState) {\r\n        Object.defineProperty(result, key, {\r\n            get: () => {\r\n                const _key = key;\r\n                if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\r\n                    control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\r\n                }\r\n                localProxyFormState && (localProxyFormState[_key] = true);\r\n                return formState[_key];\r\n            },\r\n        });\r\n    }\r\n    return result;\r\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {\r\n    updateFormState(formStateData);\r\n    const { name, ...formState } = formStateData;\r\n    return (isEmptyObject(formState) ||\r\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\r\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\r\n            (!isRoot || VALIDATION_MODE.all)));\r\n};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar shouldSubscribeByName = (name, signalName, exact) => exact && signalName\r\n    ? name === signalName\r\n    : !name ||\r\n        !signalName ||\r\n        name === signalName ||\r\n        convertToArrayPayload(name).some((currentName) => currentName &&\r\n            (currentName.startsWith(signalName) ||\r\n                signalName.startsWith(currentName)));\n\nfunction useSubscribe(props) {\r\n    const _props = React.useRef(props);\r\n    _props.current = props;\r\n    React.useEffect(() => {\r\n        const subscription = !props.disabled &&\r\n            _props.current.subject.subscribe({\r\n                next: _props.current.next,\r\n            });\r\n        return () => {\r\n            subscription && subscription.unsubscribe();\r\n        };\r\n    }, [props.disabled]);\r\n}\n\n/**\r\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\r\n *\r\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, handleSubmit, control } = useForm({\r\n *     defaultValues: {\r\n *     firstName: \"firstName\"\r\n *   }});\r\n *   const { dirtyFields } = useFormState({\r\n *     control\r\n *   });\r\n *   const onSubmit = (data) => console.log(data);\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(onSubmit)}>\r\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\r\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useFormState(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, disabled, name, exact } = props || {};\r\n    const [formState, updateFormState] = React.useState(control._formState);\r\n    const _mounted = React.useRef(true);\r\n    const _localProxyFormState = React.useRef({\r\n        isDirty: false,\r\n        isLoading: false,\r\n        dirtyFields: false,\r\n        touchedFields: false,\r\n        isValidating: false,\r\n        isValid: false,\r\n        errors: false,\r\n    });\r\n    const _name = React.useRef(name);\r\n    _name.current = name;\r\n    useSubscribe({\r\n        disabled,\r\n        next: (value) => _mounted.current &&\r\n            shouldSubscribeByName(_name.current, value.name, exact) &&\r\n            shouldRenderFormState(value, _localProxyFormState.current, control._updateFormState) &&\r\n            updateFormState({\r\n                ...control._formState,\r\n                ...value,\r\n            }),\r\n        subject: control._subjects.state,\r\n    });\r\n    React.useEffect(() => {\r\n        _mounted.current = true;\r\n        const isDirty = control._proxyFormState.isDirty && control._getDirty();\r\n        if (isDirty !== control._formState.isDirty) {\r\n            control._subjects.state.next({\r\n                isDirty,\r\n            });\r\n        }\r\n        _localProxyFormState.current.isValid && control._updateValid(true);\r\n        return () => {\r\n            _mounted.current = false;\r\n        };\r\n    }, [control]);\r\n    return getProxyFormState(formState, control, _localProxyFormState.current, false);\r\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {\r\n    if (isString(names)) {\r\n        isGlobal && _names.watch.add(names);\r\n        return get(formValues, names, defaultValue);\r\n    }\r\n    if (Array.isArray(names)) {\r\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));\r\n    }\r\n    isGlobal && (_names.watchAll = true);\r\n    return formValues;\r\n};\n\nvar isPlainObject = (tempObject) => {\r\n    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;\r\n    return (isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf'));\r\n};\n\nvar isWeb = typeof window !== 'undefined' &&\r\n    typeof window.HTMLElement !== 'undefined' &&\r\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\r\n    let copy;\r\n    const isArray = Array.isArray(data);\r\n    if (data instanceof Date) {\r\n        copy = new Date(data);\r\n    }\r\n    else if (data instanceof Set) {\r\n        copy = new Set(data);\r\n    }\r\n    else if (!(isWeb && (data instanceof Blob || data instanceof FileList)) &&\r\n        (isArray || isObject(data))) {\r\n        copy = isArray ? [] : {};\r\n        if (!Array.isArray(data) && !isPlainObject(data)) {\r\n            copy = data;\r\n        }\r\n        else {\r\n            for (const key in data) {\r\n                copy[key] = cloneObject(data[key]);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        return data;\r\n    }\r\n    return copy;\r\n}\n\n/**\r\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\r\n *\r\n * @remarks\r\n *\r\n * [API](https://react-hook-form.com/api/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\r\n *\r\n * @example\r\n * ```tsx\r\n * const { watch } = useForm();\r\n * const values = useWatch({\r\n *   name: \"fieldName\"\r\n *   control,\r\n * })\r\n * ```\r\n */\r\nfunction useWatch(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\r\n    const _name = React.useRef(name);\r\n    _name.current = name;\r\n    useSubscribe({\r\n        disabled,\r\n        subject: control._subjects.watch,\r\n        next: (formState) => {\r\n            if (shouldSubscribeByName(_name.current, formState.name, exact)) {\r\n                updateValue(cloneObject(generateWatchOutput(_name.current, control._names, formState.values || control._formValues, false, defaultValue)));\r\n            }\r\n        },\r\n    });\r\n    const [value, updateValue] = React.useState(control._getWatch(name, defaultValue));\r\n    React.useEffect(() => control._removeUnmounted());\r\n    return value;\r\n}\n\n/**\r\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\r\n *\r\n * @param props - the path name to the form field value, and validation rules.\r\n *\r\n * @returns field properties, field and form state. {@link UseControllerReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function Input(props) {\r\n *   const { field, fieldState, formState } = useController(props);\r\n *   return (\r\n *     <div>\r\n *       <input {...field} placeholder={props.name} />\r\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\r\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\r\n *     </div>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useController(props) {\r\n    const methods = useFormContext();\r\n    const { name, control = methods.control, shouldUnregister } = props;\r\n    const isArrayField = isNameInFieldArray(control._names.array, name);\r\n    const value = useWatch({\r\n        control,\r\n        name,\r\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\r\n        exact: true,\r\n    });\r\n    const formState = useFormState({\r\n        control,\r\n        name,\r\n    });\r\n    const _registerProps = React.useRef(control.register(name, {\r\n        ...props.rules,\r\n        value,\r\n    }));\r\n    React.useEffect(() => {\r\n        const updateMounted = (name, value) => {\r\n            const field = get(control._fields, name);\r\n            if (field) {\r\n                field._f.mount = value;\r\n            }\r\n        };\r\n        updateMounted(name, true);\r\n        return () => {\r\n            const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\r\n            (isArrayField\r\n                ? _shouldUnregisterField && !control._stateFlags.action\r\n                : _shouldUnregisterField)\r\n                ? control.unregister(name)\r\n                : updateMounted(name, false);\r\n        };\r\n    }, [name, control, isArrayField, shouldUnregister]);\r\n    return {\r\n        field: {\r\n            name,\r\n            value,\r\n            onChange: React.useCallback((event) => _registerProps.current.onChange({\r\n                target: {\r\n                    value: getEventValue(event),\r\n                    name: name,\r\n                },\r\n                type: EVENTS.CHANGE,\r\n            }), [name]),\r\n            onBlur: React.useCallback(() => _registerProps.current.onBlur({\r\n                target: {\r\n                    value: get(control._formValues, name),\r\n                    name: name,\r\n                },\r\n                type: EVENTS.BLUR,\r\n            }), [name, control]),\r\n            ref: (elm) => {\r\n                const field = get(control._fields, name);\r\n                if (field && elm) {\r\n                    field._f.ref = {\r\n                        focus: () => elm.focus(),\r\n                        select: () => elm.select(),\r\n                        setCustomValidity: (message) => elm.setCustomValidity(message),\r\n                        reportValidity: () => elm.reportValidity(),\r\n                    };\r\n                }\r\n            },\r\n        },\r\n        formState,\r\n        fieldState: Object.defineProperties({}, {\r\n            invalid: {\r\n                enumerable: true,\r\n                get: () => !!get(formState.errors, name),\r\n            },\r\n            isDirty: {\r\n                enumerable: true,\r\n                get: () => !!get(formState.dirtyFields, name),\r\n            },\r\n            isTouched: {\r\n                enumerable: true,\r\n                get: () => !!get(formState.touchedFields, name),\r\n            },\r\n            error: {\r\n                enumerable: true,\r\n                get: () => get(formState.errors, name),\r\n            },\r\n        }),\r\n    };\r\n}\n\n/**\r\n * Component based on `useController` hook to work with controlled component.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\r\n *\r\n * @param props - the path name to the form field value, and validation rules.\r\n *\r\n * @returns provide field handler functions, field and form state.\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { control } = useForm<FormValues>({\r\n *     defaultValues: {\r\n *       test: \"\"\r\n *     }\r\n *   });\r\n *\r\n *   return (\r\n *     <form>\r\n *       <Controller\r\n *         control={control}\r\n *         name=\"test\"\r\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\r\n *           <>\r\n *             <input\r\n *               onChange={onChange} // send value to hook form\r\n *               onBlur={onBlur} // notify when input is touched\r\n *               value={value} // return updated value\r\n *               ref={ref} // set ref for focus management\r\n *             />\r\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\r\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\r\n *           </>\r\n *         )}\r\n *       />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nconst Controller = (props) => props.render(useController(props));\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\r\n    ? {\r\n        ...errors[name],\r\n        types: {\r\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\r\n            [type]: message || true,\r\n        },\r\n    }\r\n    : {};\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nfunction set(object, path, value) {\r\n    let index = -1;\r\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\r\n    const length = tempPath.length;\r\n    const lastIndex = length - 1;\r\n    while (++index < length) {\r\n        const key = tempPath[index];\r\n        let newValue = value;\r\n        if (index !== lastIndex) {\r\n            const objValue = object[key];\r\n            newValue =\r\n                isObject(objValue) || Array.isArray(objValue)\r\n                    ? objValue\r\n                    : !isNaN(+tempPath[index + 1])\r\n                        ? []\r\n                        : {};\r\n        }\r\n        object[key] = newValue;\r\n        object = object[key];\r\n    }\r\n    return object;\r\n}\n\nconst focusFieldBy = (fields, callback, fieldsNames) => {\r\n    for (const key of fieldsNames || Object.keys(fields)) {\r\n        const field = get(fields, key);\r\n        if (field) {\r\n            const { _f, ...currentField } = field;\r\n            if (_f && callback(_f.name)) {\r\n                if (_f.ref.focus) {\r\n                    _f.ref.focus();\r\n                    break;\r\n                }\r\n                else if (_f.refs && _f.refs[0].focus) {\r\n                    _f.refs[0].focus();\r\n                    break;\r\n                }\r\n            }\r\n            else if (isObject(currentField)) {\r\n                focusFieldBy(currentField, callback);\r\n            }\r\n        }\r\n    }\r\n};\n\nvar generateId = () => {\r\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\r\n        const r = (Math.random() * 16 + d) % 16 | 0;\r\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n    });\r\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\r\n    ? options.focusName ||\r\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\r\n    : '';\n\nvar getValidationModes = (mode) => ({\r\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\r\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\r\n    isOnChange: mode === VALIDATION_MODE.onChange,\r\n    isOnAll: mode === VALIDATION_MODE.all,\r\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\r\n});\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\r\n    (_names.watchAll ||\r\n        _names.watch.has(name) ||\r\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\r\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nvar updateFieldArrayRootError = (errors, error, name) => {\r\n    const fieldArrayErrors = compact(get(errors, name));\r\n    set(fieldArrayErrors, 'root', error[name]);\r\n    set(errors, name, fieldArrayErrors);\r\n    return errors;\r\n};\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isHTMLElement = (value) => {\r\n    if (!isWeb) {\r\n        return false;\r\n    }\r\n    const owner = value ? value.ownerDocument : 0;\r\n    return (value instanceof\r\n        (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement));\r\n};\n\nvar isMessage = (value) => isString(value) || React.isValidElement(value);\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRegex = (value) => value instanceof RegExp;\n\nconst defaultResult = {\r\n    value: false,\r\n    isValid: false,\r\n};\r\nconst validResult = { value: true, isValid: true };\r\nvar getCheckboxValue = (options) => {\r\n    if (Array.isArray(options)) {\r\n        if (options.length > 1) {\r\n            const values = options\r\n                .filter((option) => option && option.checked && !option.disabled)\r\n                .map((option) => option.value);\r\n            return { value: values, isValid: !!values.length };\r\n        }\r\n        return options[0].checked && !options[0].disabled\r\n            ? // @ts-expect-error expected to work in the browser\r\n                options[0].attributes && !isUndefined(options[0].attributes.value)\r\n                    ? isUndefined(options[0].value) || options[0].value === ''\r\n                        ? validResult\r\n                        : { value: options[0].value, isValid: true }\r\n                    : validResult\r\n            : defaultResult;\r\n    }\r\n    return defaultResult;\r\n};\n\nconst defaultReturn = {\r\n    isValid: false,\r\n    value: null,\r\n};\r\nvar getRadioValue = (options) => Array.isArray(options)\r\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\r\n        ? {\r\n            isValid: true,\r\n            value: option.value,\r\n        }\r\n        : previous, defaultReturn)\r\n    : defaultReturn;\n\nfunction getValidateError(result, ref, type = 'validate') {\r\n    if (isMessage(result) ||\r\n        (Array.isArray(result) && result.every(isMessage)) ||\r\n        (isBoolean(result) && !result)) {\r\n        return {\r\n            type,\r\n            message: isMessage(result) ? result : '',\r\n            ref,\r\n        };\r\n    }\r\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\r\n    ? validationData\r\n    : {\r\n        value: validationData,\r\n        message: '',\r\n    };\n\nvar validateField = async (field, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\r\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, disabled, } = field._f;\r\n    const inputValue = get(formValues, name);\r\n    if (!mount || disabled) {\r\n        return {};\r\n    }\r\n    const inputRef = refs ? refs[0] : ref;\r\n    const setCustomValidity = (message) => {\r\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\r\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\r\n            inputRef.reportValidity();\r\n        }\r\n    };\r\n    const error = {};\r\n    const isRadio = isRadioInput(ref);\r\n    const isCheckBox = isCheckBoxInput(ref);\r\n    const isRadioOrCheckbox = isRadio || isCheckBox;\r\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) &&\r\n        isUndefined(ref.value) &&\r\n        isUndefined(inputValue)) ||\r\n        (isHTMLElement(ref) && ref.value === '') ||\r\n        inputValue === '' ||\r\n        (Array.isArray(inputValue) && !inputValue.length);\r\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\r\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\r\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\r\n        error[name] = {\r\n            type: exceedMax ? maxType : minType,\r\n            message,\r\n            ref,\r\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\r\n        };\r\n    };\r\n    if (isFieldArray\r\n        ? !Array.isArray(inputValue) || !inputValue.length\r\n        : required &&\r\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\r\n                (isBoolean(inputValue) && !inputValue) ||\r\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\r\n                (isRadio && !getRadioValue(refs).isValid))) {\r\n        const { value, message } = isMessage(required)\r\n            ? { value: !!required, message: required }\r\n            : getValueAndMessage(required);\r\n        if (value) {\r\n            error[name] = {\r\n                type: INPUT_VALIDATION_RULES.required,\r\n                message,\r\n                ref: inputRef,\r\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\r\n            };\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\r\n        let exceedMax;\r\n        let exceedMin;\r\n        const maxOutput = getValueAndMessage(max);\r\n        const minOutput = getValueAndMessage(min);\r\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\r\n            const valueNumber = ref.valueAsNumber ||\r\n                (inputValue ? +inputValue : inputValue);\r\n            if (!isNullOrUndefined(maxOutput.value)) {\r\n                exceedMax = valueNumber > maxOutput.value;\r\n            }\r\n            if (!isNullOrUndefined(minOutput.value)) {\r\n                exceedMin = valueNumber < minOutput.value;\r\n            }\r\n        }\r\n        else {\r\n            const valueDate = ref.valueAsDate || new Date(inputValue);\r\n            const convertTimeToDate = (time) => new Date(new Date().toDateString() + ' ' + time);\r\n            const isTime = ref.type == 'time';\r\n            const isWeek = ref.type == 'week';\r\n            if (isString(maxOutput.value) && inputValue) {\r\n                exceedMax = isTime\r\n                    ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\r\n                    : isWeek\r\n                        ? inputValue > maxOutput.value\r\n                        : valueDate > new Date(maxOutput.value);\r\n            }\r\n            if (isString(minOutput.value) && inputValue) {\r\n                exceedMin = isTime\r\n                    ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\r\n                    : isWeek\r\n                        ? inputValue < minOutput.value\r\n                        : valueDate < new Date(minOutput.value);\r\n            }\r\n        }\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(error[name].message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if ((maxLength || minLength) &&\r\n        !isEmpty &&\r\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\r\n        const maxLengthOutput = getValueAndMessage(maxLength);\r\n        const minLengthOutput = getValueAndMessage(minLength);\r\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\r\n            inputValue.length > maxLengthOutput.value;\r\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\r\n            inputValue.length < minLengthOutput.value;\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(error[name].message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (pattern && !isEmpty && isString(inputValue)) {\r\n        const { value: patternValue, message } = getValueAndMessage(pattern);\r\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\r\n            error[name] = {\r\n                type: INPUT_VALIDATION_RULES.pattern,\r\n                message,\r\n                ref,\r\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\r\n            };\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (validate) {\r\n        if (isFunction(validate)) {\r\n            const result = await validate(inputValue, formValues);\r\n            const validateError = getValidateError(result, inputRef);\r\n            if (validateError) {\r\n                error[name] = {\r\n                    ...validateError,\r\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\r\n                };\r\n                if (!validateAllFieldCriteria) {\r\n                    setCustomValidity(validateError.message);\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n        else if (isObject(validate)) {\r\n            let validationResult = {};\r\n            for (const key in validate) {\r\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\r\n                    break;\r\n                }\r\n                const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);\r\n                if (validateError) {\r\n                    validationResult = {\r\n                        ...validateError,\r\n                        ...appendErrorsCurry(key, validateError.message),\r\n                    };\r\n                    setCustomValidity(validateError.message);\r\n                    if (validateAllFieldCriteria) {\r\n                        error[name] = validationResult;\r\n                    }\r\n                }\r\n            }\r\n            if (!isEmptyObject(validationResult)) {\r\n                error[name] = {\r\n                    ref: inputRef,\r\n                    ...validationResult,\r\n                };\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    setCustomValidity(true);\r\n    return error;\r\n};\n\nfunction append(data, value) {\r\n    return [...data, ...convertToArrayPayload(value)];\r\n}\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\r\n    return [\r\n        ...data.slice(0, index),\r\n        ...convertToArrayPayload(value),\r\n        ...data.slice(index),\r\n    ];\r\n}\n\nvar moveArrayAt = (data, from, to) => {\r\n    if (!Array.isArray(data)) {\r\n        return [];\r\n    }\r\n    if (isUndefined(data[to])) {\r\n        data[to] = undefined;\r\n    }\r\n    data.splice(to, 0, data.splice(from, 1)[0]);\r\n    return data;\r\n};\n\nfunction prepend(data, value) {\r\n    return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\r\n}\n\nfunction removeAtIndexes(data, indexes) {\r\n    let i = 0;\r\n    const temp = [...data];\r\n    for (const index of indexes) {\r\n        temp.splice(index - i, 1);\r\n        i++;\r\n    }\r\n    return compact(temp).length ? temp : [];\r\n}\r\nvar removeArrayAt = (data, index) => isUndefined(index)\r\n    ? []\r\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\r\n    data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\r\n};\n\nfunction baseGet(object, updatePath) {\r\n    const length = updatePath.slice(0, -1).length;\r\n    let index = 0;\r\n    while (index < length) {\r\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\r\n    }\r\n    return object;\r\n}\r\nfunction isEmptyArray(obj) {\r\n    for (const key in obj) {\r\n        if (!isUndefined(obj[key])) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction unset(object, path) {\r\n    const paths = Array.isArray(path)\r\n        ? path\r\n        : isKey(path)\r\n            ? [path]\r\n            : stringToPath(path);\r\n    const childObject = paths.length === 1 ? object : baseGet(object, paths);\r\n    const index = paths.length - 1;\r\n    const key = paths[index];\r\n    if (childObject) {\r\n        delete childObject[key];\r\n    }\r\n    if (index !== 0 &&\r\n        ((isObject(childObject) && isEmptyObject(childObject)) ||\r\n            (Array.isArray(childObject) && isEmptyArray(childObject)))) {\r\n        unset(object, paths.slice(0, -1));\r\n    }\r\n    return object;\r\n}\n\nvar updateAt = (fieldValues, index, value) => {\r\n    fieldValues[index] = value;\r\n    return fieldValues;\r\n};\n\n/**\r\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\r\n *\r\n * @param props - useFieldArray props\r\n *\r\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\r\n *     defaultValues: {\r\n *       test: []\r\n *     }\r\n *   });\r\n *   const { fields, append } = useFieldArray({\r\n *     control,\r\n *     name: \"test\"\r\n *   });\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\r\n *       {fields.map((item, index) => (\r\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\r\n *       ))}\r\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\r\n *         append\r\n *       </button>\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useFieldArray(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, } = props;\r\n    const [fields, setFields] = React.useState(control._getFieldArray(name));\r\n    const ids = React.useRef(control._getFieldArray(name).map(generateId));\r\n    const _fieldIds = React.useRef(fields);\r\n    const _name = React.useRef(name);\r\n    const _actioned = React.useRef(false);\r\n    _name.current = name;\r\n    _fieldIds.current = fields;\r\n    control._names.array.add(name);\r\n    props.rules &&\r\n        control.register(name, props.rules);\r\n    useSubscribe({\r\n        next: ({ values, name: fieldArrayName, }) => {\r\n            if (fieldArrayName === _name.current || !fieldArrayName) {\r\n                const fieldValues = get(values, _name.current);\r\n                if (Array.isArray(fieldValues)) {\r\n                    setFields(fieldValues);\r\n                    ids.current = fieldValues.map(generateId);\r\n                }\r\n            }\r\n        },\r\n        subject: control._subjects.array,\r\n    });\r\n    const updateValues = React.useCallback((updatedFieldArrayValues) => {\r\n        _actioned.current = true;\r\n        control._updateFieldArray(name, updatedFieldArrayValues);\r\n    }, [control, name]);\r\n    const append$1 = (value, options) => {\r\n        const appendValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = append(control._getFieldArray(name), appendValue);\r\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\r\n        ids.current = append(ids.current, appendValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, append, {\r\n            argA: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const prepend$1 = (value, options) => {\r\n        const prependValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = prepend(control._getFieldArray(name), prependValue);\r\n        control._names.focus = getFocusFieldName(name, 0, options);\r\n        ids.current = prepend(ids.current, prependValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, prepend, {\r\n            argA: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const remove = (index) => {\r\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\r\n        ids.current = removeArrayAt(ids.current, index);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\r\n            argA: index,\r\n        });\r\n    };\r\n    const insert$1 = (index, value, options) => {\r\n        const insertValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\r\n        control._names.focus = getFocusFieldName(name, index, options);\r\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, insert, {\r\n            argA: index,\r\n            argB: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const swap = (indexA, indexB) => {\r\n        const updatedFieldArrayValues = control._getFieldArray(name);\r\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\r\n        swapArrayAt(ids.current, indexA, indexB);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\r\n            argA: indexA,\r\n            argB: indexB,\r\n        }, false);\r\n    };\r\n    const move = (from, to) => {\r\n        const updatedFieldArrayValues = control._getFieldArray(name);\r\n        moveArrayAt(updatedFieldArrayValues, from, to);\r\n        moveArrayAt(ids.current, from, to);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\r\n            argA: from,\r\n            argB: to,\r\n        }, false);\r\n    };\r\n    const update = (index, value) => {\r\n        const updateValue = cloneObject(value);\r\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\r\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields([...updatedFieldArrayValues]);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, updateAt, {\r\n            argA: index,\r\n            argB: updateValue,\r\n        }, true, false);\r\n    };\r\n    const replace = (value) => {\r\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\r\n        ids.current = updatedFieldArrayValues.map(generateId);\r\n        updateValues([...updatedFieldArrayValues]);\r\n        setFields([...updatedFieldArrayValues]);\r\n        control._updateFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\r\n    };\r\n    React.useEffect(() => {\r\n        control._stateFlags.action = false;\r\n        isWatched(name, control._names) && control._subjects.state.next({});\r\n        if (_actioned.current &&\r\n            (!getValidationModes(control._options.mode).isOnSubmit ||\r\n                control._formState.isSubmitted)) {\r\n            if (control._options.resolver) {\r\n                control._executeSchema([name]).then((result) => {\r\n                    const error = get(result.errors, name);\r\n                    const existingError = get(control._formState.errors, name);\r\n                    if (existingError ? !error && existingError.type : error && error.type) {\r\n                        error\r\n                            ? set(control._formState.errors, name, error)\r\n                            : unset(control._formState.errors, name);\r\n                        control._subjects.state.next({\r\n                            errors: control._formState.errors,\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                const field = get(control._fields, name);\r\n                if (field && field._f) {\r\n                    validateField(field, control._formValues, control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\r\n                        control._subjects.state.next({\r\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\r\n                        }));\r\n                }\r\n            }\r\n        }\r\n        control._subjects.watch.next({\r\n            name,\r\n            values: control._formValues,\r\n        });\r\n        control._names.focus &&\r\n            focusFieldBy(control._fields, (key) => !!key && key.startsWith(control._names.focus || ''));\r\n        control._names.focus = '';\r\n        control._updateValid();\r\n    }, [fields, name, control]);\r\n    React.useEffect(() => {\r\n        !get(control._formValues, name) && control._updateFieldArray(name);\r\n        return () => {\r\n            (control._options.shouldUnregister || shouldUnregister) &&\r\n                control.unregister(name);\r\n        };\r\n    }, [name, control, keyName, shouldUnregister]);\r\n    return {\r\n        swap: React.useCallback(swap, [updateValues, name, control]),\r\n        move: React.useCallback(move, [updateValues, name, control]),\r\n        prepend: React.useCallback(prepend$1, [updateValues, name, control]),\r\n        append: React.useCallback(append$1, [updateValues, name, control]),\r\n        remove: React.useCallback(remove, [updateValues, name, control]),\r\n        insert: React.useCallback(insert$1, [updateValues, name, control]),\r\n        update: React.useCallback(update, [updateValues, name, control]),\r\n        replace: React.useCallback(replace, [updateValues, name, control]),\r\n        fields: React.useMemo(() => fields.map((field, index) => ({\r\n            ...field,\r\n            [keyName]: ids.current[index] || generateId(),\r\n        })), [fields, keyName]),\r\n    };\r\n}\n\nfunction createSubject() {\r\n    let _observers = [];\r\n    const next = (value) => {\r\n        for (const observer of _observers) {\r\n            observer.next(value);\r\n        }\r\n    };\r\n    const subscribe = (observer) => {\r\n        _observers.push(observer);\r\n        return {\r\n            unsubscribe: () => {\r\n                _observers = _observers.filter((o) => o !== observer);\r\n            },\r\n        };\r\n    };\r\n    const unsubscribe = () => {\r\n        _observers = [];\r\n    };\r\n    return {\r\n        get observers() {\r\n            return _observers;\r\n        },\r\n        next,\r\n        subscribe,\r\n        unsubscribe,\r\n    };\r\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\r\n    if (isPrimitive(object1) || isPrimitive(object2)) {\r\n        return object1 === object2;\r\n    }\r\n    if (isDateObject(object1) && isDateObject(object2)) {\r\n        return object1.getTime() === object2.getTime();\r\n    }\r\n    const keys1 = Object.keys(object1);\r\n    const keys2 = Object.keys(object2);\r\n    if (keys1.length !== keys2.length) {\r\n        return false;\r\n    }\r\n    for (const key of keys1) {\r\n        const val1 = object1[key];\r\n        if (!keys2.includes(key)) {\r\n            return false;\r\n        }\r\n        if (key !== 'ref') {\r\n            const val2 = object2[key];\r\n            if ((isDateObject(val1) && isDateObject(val2)) ||\r\n                (isObject(val1) && isObject(val2)) ||\r\n                (Array.isArray(val1) && Array.isArray(val2))\r\n                ? !deepEqual(val1, val2)\r\n                : val1 !== val2) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nvar objectHasFunction = (data) => {\r\n    for (const key in data) {\r\n        if (isFunction(data[key])) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\n\nfunction markFieldsDirty(data, fields = {}) {\r\n    const isParentNodeArray = Array.isArray(data);\r\n    if (isObject(data) || isParentNodeArray) {\r\n        for (const key in data) {\r\n            if (Array.isArray(data[key]) ||\r\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\r\n                fields[key] = Array.isArray(data[key]) ? [] : {};\r\n                markFieldsDirty(data[key], fields[key]);\r\n            }\r\n            else if (!isNullOrUndefined(data[key])) {\r\n                fields[key] = true;\r\n            }\r\n        }\r\n    }\r\n    return fields;\r\n}\r\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\r\n    const isParentNodeArray = Array.isArray(data);\r\n    if (isObject(data) || isParentNodeArray) {\r\n        for (const key in data) {\r\n            if (Array.isArray(data[key]) ||\r\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\r\n                if (isUndefined(formValues) ||\r\n                    isPrimitive(dirtyFieldsFromValues[key])) {\r\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\r\n                        ? markFieldsDirty(data[key], [])\r\n                        : { ...markFieldsDirty(data[key]) };\r\n                }\r\n                else {\r\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\r\n                }\r\n            }\r\n            else {\r\n                deepEqual(data[key], formValues[key])\r\n                    ? delete dirtyFieldsFromValues[key]\r\n                    : (dirtyFieldsFromValues[key] = true);\r\n            }\r\n        }\r\n    }\r\n    return dirtyFieldsFromValues;\r\n}\r\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\r\n    ? value\r\n    : valueAsNumber\r\n        ? value === ''\r\n            ? NaN\r\n            : value\r\n                ? +value\r\n                : value\r\n        : valueAsDate && isString(value)\r\n            ? new Date(value)\r\n            : setValueAs\r\n                ? setValueAs(value)\r\n                : value;\n\nfunction getFieldValue(_f) {\r\n    const ref = _f.ref;\r\n    if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\r\n        return;\r\n    }\r\n    if (isFileInput(ref)) {\r\n        return ref.files;\r\n    }\r\n    if (isRadioInput(ref)) {\r\n        return getRadioValue(_f.refs).value;\r\n    }\r\n    if (isMultipleSelect(ref)) {\r\n        return [...ref.selectedOptions].map(({ value }) => value);\r\n    }\r\n    if (isCheckBoxInput(ref)) {\r\n        return getCheckboxValue(_f.refs).value;\r\n    }\r\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\r\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\r\n    const fields = {};\r\n    for (const name of fieldsNames) {\r\n        const field = get(_fields, name);\r\n        field && set(fields, name, field._f);\r\n    }\r\n    return {\r\n        criteriaMode,\r\n        names: [...fieldsNames],\r\n        fields,\r\n        shouldUseNativeValidation,\r\n    };\r\n};\n\nvar getRuleValue = (rule) => isUndefined(rule)\r\n    ? rule\r\n    : isRegex(rule)\r\n        ? rule.source\r\n        : isObject(rule)\r\n            ? isRegex(rule.value)\r\n                ? rule.value.source\r\n                : rule.value\r\n            : rule;\n\nvar hasValidation = (options) => options.mount &&\r\n    (options.required ||\r\n        options.min ||\r\n        options.max ||\r\n        options.maxLength ||\r\n        options.minLength ||\r\n        options.pattern ||\r\n        options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\r\n    const error = get(errors, name);\r\n    if (error || isKey(name)) {\r\n        return {\r\n            error,\r\n            name,\r\n        };\r\n    }\r\n    const names = name.split('.');\r\n    while (names.length) {\r\n        const fieldName = names.join('.');\r\n        const field = get(_fields, fieldName);\r\n        const foundError = get(errors, fieldName);\r\n        if (field && !Array.isArray(field) && name !== fieldName) {\r\n            return { name };\r\n        }\r\n        if (foundError && foundError.type) {\r\n            return {\r\n                name: fieldName,\r\n                error: foundError,\r\n            };\r\n        }\r\n        names.pop();\r\n    }\r\n    return {\r\n        name,\r\n    };\r\n}\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\r\n    if (mode.isOnAll) {\r\n        return false;\r\n    }\r\n    else if (!isSubmitted && mode.isOnTouch) {\r\n        return !(isTouched || isBlurEvent);\r\n    }\r\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\r\n        return !isBlurEvent;\r\n    }\r\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\r\n        return isBlurEvent;\r\n    }\r\n    return true;\r\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nconst defaultOptions = {\r\n    mode: VALIDATION_MODE.onSubmit,\r\n    reValidateMode: VALIDATION_MODE.onChange,\r\n    shouldFocusError: true,\r\n};\r\nfunction createFormControl(props = {}, flushRootRender) {\r\n    let _options = {\r\n        ...defaultOptions,\r\n        ...props,\r\n    };\r\n    const shouldCaptureDirtyFields = props.resetOptions && props.resetOptions.keepDirtyValues;\r\n    let _formState = {\r\n        submitCount: 0,\r\n        isDirty: false,\r\n        isLoading: true,\r\n        isValidating: false,\r\n        isSubmitted: false,\r\n        isSubmitting: false,\r\n        isSubmitSuccessful: false,\r\n        isValid: false,\r\n        touchedFields: {},\r\n        dirtyFields: {},\r\n        errors: {},\r\n    };\r\n    let _fields = {};\r\n    let _defaultValues = isObject(_options.defaultValues)\r\n        ? cloneObject(_options.defaultValues) || {}\r\n        : {};\r\n    let _formValues = _options.shouldUnregister\r\n        ? {}\r\n        : cloneObject(_defaultValues);\r\n    let _stateFlags = {\r\n        action: false,\r\n        mount: false,\r\n        watch: false,\r\n    };\r\n    let _names = {\r\n        mount: new Set(),\r\n        unMount: new Set(),\r\n        array: new Set(),\r\n        watch: new Set(),\r\n    };\r\n    let delayErrorCallback;\r\n    let timer = 0;\r\n    const _proxyFormState = {\r\n        isDirty: false,\r\n        dirtyFields: false,\r\n        touchedFields: false,\r\n        isValidating: false,\r\n        isValid: false,\r\n        errors: false,\r\n    };\r\n    const _subjects = {\r\n        watch: createSubject(),\r\n        array: createSubject(),\r\n        state: createSubject(),\r\n    };\r\n    const validationModeBeforeSubmit = getValidationModes(_options.mode);\r\n    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\r\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\r\n    const debounce = (callback) => (wait) => {\r\n        clearTimeout(timer);\r\n        timer = window.setTimeout(callback, wait);\r\n    };\r\n    const _updateValid = async (shouldUpdateValid) => {\r\n        if (_proxyFormState.isValid || shouldUpdateValid) {\r\n            const isValid = _options.resolver\r\n                ? isEmptyObject((await _executeSchema()).errors)\r\n                : await executeBuiltInValidation(_fields, true);\r\n            if (isValid !== _formState.isValid) {\r\n                _formState.isValid = isValid;\r\n                _subjects.state.next({\r\n                    isValid,\r\n                });\r\n            }\r\n        }\r\n    };\r\n    const _updateIsValidating = (value) => _proxyFormState.isValidating &&\r\n        _subjects.state.next({\r\n            isValidating: value,\r\n        });\r\n    const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\r\n        if (args && method) {\r\n            _stateFlags.action = true;\r\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\r\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\r\n                shouldSetValues && set(_fields, name, fieldValues);\r\n            }\r\n            if (shouldUpdateFieldsAndState &&\r\n                Array.isArray(get(_formState.errors, name))) {\r\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\r\n                shouldSetValues && set(_formState.errors, name, errors);\r\n                unsetEmptyArray(_formState.errors, name);\r\n            }\r\n            if (_proxyFormState.touchedFields &&\r\n                shouldUpdateFieldsAndState &&\r\n                Array.isArray(get(_formState.touchedFields, name))) {\r\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\r\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\r\n            }\r\n            if (_proxyFormState.dirtyFields) {\r\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\r\n            }\r\n            _subjects.state.next({\r\n                name,\r\n                isDirty: _getDirty(name, values),\r\n                dirtyFields: _formState.dirtyFields,\r\n                errors: _formState.errors,\r\n                isValid: _formState.isValid,\r\n            });\r\n        }\r\n        else {\r\n            set(_formValues, name, values);\r\n        }\r\n    };\r\n    const updateErrors = (name, error) => {\r\n        set(_formState.errors, name, error);\r\n        _subjects.state.next({\r\n            errors: _formState.errors,\r\n        });\r\n    };\r\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\r\n        const field = get(_fields, name);\r\n        if (field) {\r\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\r\n            isUndefined(defaultValue) ||\r\n                (ref && ref.defaultChecked) ||\r\n                shouldSkipSetValueAs\r\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\r\n                : setFieldValue(name, defaultValue);\r\n            _stateFlags.mount && _updateValid();\r\n        }\r\n    };\r\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\r\n        let shouldUpdateField = false;\r\n        let isPreviousDirty = false;\r\n        const output = {\r\n            name,\r\n        };\r\n        if (!isBlurEvent || shouldDirty) {\r\n            if (_proxyFormState.isDirty) {\r\n                isPreviousDirty = _formState.isDirty;\r\n                _formState.isDirty = output.isDirty = _getDirty();\r\n                shouldUpdateField = isPreviousDirty !== output.isDirty;\r\n            }\r\n            const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\r\n            isPreviousDirty = get(_formState.dirtyFields, name);\r\n            isCurrentFieldPristine\r\n                ? unset(_formState.dirtyFields, name)\r\n                : set(_formState.dirtyFields, name, true);\r\n            output.dirtyFields = _formState.dirtyFields;\r\n            shouldUpdateField =\r\n                shouldUpdateField ||\r\n                    (_proxyFormState.dirtyFields &&\r\n                        isPreviousDirty !== !isCurrentFieldPristine);\r\n        }\r\n        if (isBlurEvent) {\r\n            const isPreviousFieldTouched = get(_formState.touchedFields, name);\r\n            if (!isPreviousFieldTouched) {\r\n                set(_formState.touchedFields, name, isBlurEvent);\r\n                output.touchedFields = _formState.touchedFields;\r\n                shouldUpdateField =\r\n                    shouldUpdateField ||\r\n                        (_proxyFormState.touchedFields &&\r\n                            isPreviousFieldTouched !== isBlurEvent);\r\n            }\r\n        }\r\n        shouldUpdateField && shouldRender && _subjects.state.next(output);\r\n        return shouldUpdateField ? output : {};\r\n    };\r\n    const shouldRenderByError = (name, isValid, error, fieldState) => {\r\n        const previousFieldError = get(_formState.errors, name);\r\n        const shouldUpdateValid = _proxyFormState.isValid &&\r\n            isBoolean(isValid) &&\r\n            _formState.isValid !== isValid;\r\n        if (props.delayError && error) {\r\n            delayErrorCallback = debounce(() => updateErrors(name, error));\r\n            delayErrorCallback(props.delayError);\r\n        }\r\n        else {\r\n            clearTimeout(timer);\r\n            delayErrorCallback = null;\r\n            error\r\n                ? set(_formState.errors, name, error)\r\n                : unset(_formState.errors, name);\r\n        }\r\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\r\n            !isEmptyObject(fieldState) ||\r\n            shouldUpdateValid) {\r\n            const updatedFormState = {\r\n                ...fieldState,\r\n                ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\r\n                errors: _formState.errors,\r\n                name,\r\n            };\r\n            _formState = {\r\n                ..._formState,\r\n                ...updatedFormState,\r\n            };\r\n            _subjects.state.next(updatedFormState);\r\n        }\r\n        _updateIsValidating(false);\r\n    };\r\n    const _executeSchema = async (name) => await _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));\r\n    const executeSchemaAndUpdateState = async (names) => {\r\n        const { errors } = await _executeSchema();\r\n        if (names) {\r\n            for (const name of names) {\r\n                const error = get(errors, name);\r\n                error\r\n                    ? set(_formState.errors, name, error)\r\n                    : unset(_formState.errors, name);\r\n            }\r\n        }\r\n        else {\r\n            _formState.errors = errors;\r\n        }\r\n        return errors;\r\n    };\r\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\r\n        valid: true,\r\n    }) => {\r\n        for (const name in fields) {\r\n            const field = fields[name];\r\n            if (field) {\r\n                const { _f, ...fieldValue } = field;\r\n                if (_f) {\r\n                    const isFieldArrayRoot = _names.array.has(_f.name);\r\n                    const fieldError = await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation, isFieldArrayRoot);\r\n                    if (fieldError[_f.name]) {\r\n                        context.valid = false;\r\n                        if (shouldOnlyCheckValid) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    !shouldOnlyCheckValid &&\r\n                        (get(fieldError, _f.name)\r\n                            ? isFieldArrayRoot\r\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\r\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\r\n                            : unset(_formState.errors, _f.name));\r\n                }\r\n                fieldValue &&\r\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\r\n            }\r\n        }\r\n        return context.valid;\r\n    };\r\n    const _removeUnmounted = () => {\r\n        for (const name of _names.unMount) {\r\n            const field = get(_fields, name);\r\n            field &&\r\n                (field._f.refs\r\n                    ? field._f.refs.every((ref) => !live(ref))\r\n                    : !live(field._f.ref)) &&\r\n                unregister(name);\r\n        }\r\n        _names.unMount = new Set();\r\n    };\r\n    const _getDirty = (name, data) => (name && data && set(_formValues, name, data),\r\n        !deepEqual(getValues(), _defaultValues));\r\n    const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {\r\n        ...(_stateFlags.mount\r\n            ? _formValues\r\n            : isUndefined(defaultValue)\r\n                ? _defaultValues\r\n                : isString(names)\r\n                    ? { [names]: defaultValue }\r\n                    : defaultValue),\r\n    }, isGlobal, defaultValue);\r\n    const _getFieldArray = (name) => compact(get(_stateFlags.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []));\r\n    const setFieldValue = (name, value, options = {}) => {\r\n        const field = get(_fields, name);\r\n        let fieldValue = value;\r\n        if (field) {\r\n            const fieldReference = field._f;\r\n            if (fieldReference) {\r\n                !fieldReference.disabled &&\r\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\r\n                fieldValue =\r\n                    isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\r\n                        ? ''\r\n                        : value;\r\n                if (isMultipleSelect(fieldReference.ref)) {\r\n                    [...fieldReference.ref.options].forEach((optionRef) => (optionRef.selected = fieldValue.includes(optionRef.value)));\r\n                }\r\n                else if (fieldReference.refs) {\r\n                    if (isCheckBoxInput(fieldReference.ref)) {\r\n                        fieldReference.refs.length > 1\r\n                            ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\r\n                                (checkboxRef.checked = Array.isArray(fieldValue)\r\n                                    ? !!fieldValue.find((data) => data === checkboxRef.value)\r\n                                    : fieldValue === checkboxRef.value))\r\n                            : fieldReference.refs[0] &&\r\n                                (fieldReference.refs[0].checked = !!fieldValue);\r\n                    }\r\n                    else {\r\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\r\n                    }\r\n                }\r\n                else if (isFileInput(fieldReference.ref)) {\r\n                    fieldReference.ref.value = '';\r\n                }\r\n                else {\r\n                    fieldReference.ref.value = fieldValue;\r\n                    if (!fieldReference.ref.type) {\r\n                        _subjects.watch.next({\r\n                            name,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        (options.shouldDirty || options.shouldTouch) &&\r\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\r\n        options.shouldValidate && trigger(name);\r\n    };\r\n    const setValues = (name, value, options) => {\r\n        for (const fieldKey in value) {\r\n            const fieldValue = value[fieldKey];\r\n            const fieldName = `${name}.${fieldKey}`;\r\n            const field = get(_fields, fieldName);\r\n            (_names.array.has(name) ||\r\n                !isPrimitive(fieldValue) ||\r\n                (field && !field._f)) &&\r\n                !isDateObject(fieldValue)\r\n                ? setValues(fieldName, fieldValue, options)\r\n                : setFieldValue(fieldName, fieldValue, options);\r\n        }\r\n    };\r\n    const setValue = (name, value, options = {}) => {\r\n        const field = get(_fields, name);\r\n        const isFieldArray = _names.array.has(name);\r\n        const cloneValue = cloneObject(value);\r\n        set(_formValues, name, cloneValue);\r\n        if (isFieldArray) {\r\n            _subjects.array.next({\r\n                name,\r\n                values: _formValues,\r\n            });\r\n            if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\r\n                options.shouldDirty) {\r\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\r\n                _subjects.state.next({\r\n                    name,\r\n                    dirtyFields: _formState.dirtyFields,\r\n                    isDirty: _getDirty(name, cloneValue),\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            field && !field._f && !isNullOrUndefined(cloneValue)\r\n                ? setValues(name, cloneValue, options)\r\n                : setFieldValue(name, cloneValue, options);\r\n        }\r\n        isWatched(name, _names) && _subjects.state.next({});\r\n        _subjects.watch.next({\r\n            name,\r\n        });\r\n        !_stateFlags.mount && flushRootRender();\r\n    };\r\n    const onChange = async (event) => {\r\n        const target = event.target;\r\n        let name = target.name;\r\n        const field = get(_fields, name);\r\n        const getCurrentFieldValue = () => target.type ? getFieldValue(field._f) : getEventValue(event);\r\n        if (field) {\r\n            let error;\r\n            let isValid;\r\n            const fieldValue = getCurrentFieldValue();\r\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\r\n            const shouldSkipValidation = (!hasValidation(field._f) &&\r\n                !_options.resolver &&\r\n                !get(_formState.errors, name) &&\r\n                !field._f.deps) ||\r\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\r\n            const watched = isWatched(name, _names, isBlurEvent);\r\n            set(_formValues, name, fieldValue);\r\n            if (isBlurEvent) {\r\n                field._f.onBlur && field._f.onBlur(event);\r\n                delayErrorCallback && delayErrorCallback(0);\r\n            }\r\n            else if (field._f.onChange) {\r\n                field._f.onChange(event);\r\n            }\r\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\r\n            const shouldRender = !isEmptyObject(fieldState) || watched;\r\n            !isBlurEvent &&\r\n                _subjects.watch.next({\r\n                    name,\r\n                    type: event.type,\r\n                });\r\n            if (shouldSkipValidation) {\r\n                _proxyFormState.isValid && _updateValid();\r\n                return (shouldRender &&\r\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\r\n            }\r\n            !isBlurEvent && watched && _subjects.state.next({});\r\n            _updateIsValidating(true);\r\n            if (_options.resolver) {\r\n                const { errors } = await _executeSchema([name]);\r\n                const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\r\n                const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\r\n                error = errorLookupResult.error;\r\n                name = errorLookupResult.name;\r\n                isValid = isEmptyObject(errors);\r\n            }\r\n            else {\r\n                error = (await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\r\n                if (error) {\r\n                    isValid = false;\r\n                }\r\n                else if (_proxyFormState.isValid) {\r\n                    isValid = await executeBuiltInValidation(_fields, true);\r\n                }\r\n            }\r\n            field._f.deps &&\r\n                trigger(field._f.deps);\r\n            shouldRenderByError(name, isValid, error, fieldState);\r\n        }\r\n    };\r\n    const trigger = async (name, options = {}) => {\r\n        let isValid;\r\n        let validationResult;\r\n        const fieldNames = convertToArrayPayload(name);\r\n        _updateIsValidating(true);\r\n        if (_options.resolver) {\r\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\r\n            isValid = isEmptyObject(errors);\r\n            validationResult = name\r\n                ? !fieldNames.some((name) => get(errors, name))\r\n                : isValid;\r\n        }\r\n        else if (name) {\r\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\r\n                const field = get(_fields, fieldName);\r\n                return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);\r\n            }))).every(Boolean);\r\n            !(!validationResult && !_formState.isValid) && _updateValid();\r\n        }\r\n        else {\r\n            validationResult = isValid = await executeBuiltInValidation(_fields);\r\n        }\r\n        _subjects.state.next({\r\n            ...(!isString(name) ||\r\n                (_proxyFormState.isValid && isValid !== _formState.isValid)\r\n                ? {}\r\n                : { name }),\r\n            ...(_options.resolver || !name ? { isValid } : {}),\r\n            errors: _formState.errors,\r\n            isValidating: false,\r\n        });\r\n        options.shouldFocus &&\r\n            !validationResult &&\r\n            focusFieldBy(_fields, (key) => key && get(_formState.errors, key), name ? fieldNames : _names.mount);\r\n        return validationResult;\r\n    };\r\n    const getValues = (fieldNames) => {\r\n        const values = {\r\n            ..._defaultValues,\r\n            ...(_stateFlags.mount ? _formValues : {}),\r\n        };\r\n        return isUndefined(fieldNames)\r\n            ? values\r\n            : isString(fieldNames)\r\n                ? get(values, fieldNames)\r\n                : fieldNames.map((name) => get(values, name));\r\n    };\r\n    const getFieldState = (name, formState) => ({\r\n        invalid: !!get((formState || _formState).errors, name),\r\n        isDirty: !!get((formState || _formState).dirtyFields, name),\r\n        isTouched: !!get((formState || _formState).touchedFields, name),\r\n        error: get((formState || _formState).errors, name),\r\n    });\r\n    const clearErrors = (name) => {\r\n        name\r\n            ? convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName))\r\n            : (_formState.errors = {});\r\n        _subjects.state.next({\r\n            errors: _formState.errors,\r\n        });\r\n    };\r\n    const setError = (name, error, options) => {\r\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\r\n        set(_formState.errors, name, {\r\n            ...error,\r\n            ref,\r\n        });\r\n        _subjects.state.next({\r\n            name,\r\n            errors: _formState.errors,\r\n            isValid: false,\r\n        });\r\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\r\n    };\r\n    const watch = (name, defaultValue) => isFunction(name)\r\n        ? _subjects.watch.subscribe({\r\n            next: (payload) => name(_getWatch(undefined, defaultValue), payload),\r\n        })\r\n        : _getWatch(name, defaultValue, true);\r\n    const unregister = (name, options = {}) => {\r\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\r\n            _names.mount.delete(fieldName);\r\n            _names.array.delete(fieldName);\r\n            if (get(_fields, fieldName)) {\r\n                if (!options.keepValue) {\r\n                    unset(_fields, fieldName);\r\n                    unset(_formValues, fieldName);\r\n                }\r\n                !options.keepError && unset(_formState.errors, fieldName);\r\n                !options.keepDirty && unset(_formState.dirtyFields, fieldName);\r\n                !options.keepTouched && unset(_formState.touchedFields, fieldName);\r\n                !_options.shouldUnregister &&\r\n                    !options.keepDefaultValue &&\r\n                    unset(_defaultValues, fieldName);\r\n            }\r\n        }\r\n        _subjects.watch.next({});\r\n        _subjects.state.next({\r\n            ..._formState,\r\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\r\n        });\r\n        !options.keepIsValid && _updateValid();\r\n    };\r\n    const register = (name, options = {}) => {\r\n        let field = get(_fields, name);\r\n        const disabledIsDefined = isBoolean(options.disabled);\r\n        set(_fields, name, {\r\n            ...(field || {}),\r\n            _f: {\r\n                ...(field && field._f ? field._f : { ref: { name } }),\r\n                name,\r\n                mount: true,\r\n                ...options,\r\n            },\r\n        });\r\n        _names.mount.add(name);\r\n        field\r\n            ? disabledIsDefined &&\r\n                set(_formValues, name, options.disabled\r\n                    ? undefined\r\n                    : get(_formValues, name, getFieldValue(field._f)))\r\n            : updateValidAndValue(name, true, options.value);\r\n        return {\r\n            ...(disabledIsDefined ? { disabled: options.disabled } : {}),\r\n            ...(_options.shouldUseNativeValidation\r\n                ? {\r\n                    required: !!options.required,\r\n                    min: getRuleValue(options.min),\r\n                    max: getRuleValue(options.max),\r\n                    minLength: getRuleValue(options.minLength),\r\n                    maxLength: getRuleValue(options.maxLength),\r\n                    pattern: getRuleValue(options.pattern),\r\n                }\r\n                : {}),\r\n            name,\r\n            onChange,\r\n            onBlur: onChange,\r\n            ref: (ref) => {\r\n                if (ref) {\r\n                    register(name, options);\r\n                    field = get(_fields, name);\r\n                    const fieldRef = isUndefined(ref.value)\r\n                        ? ref.querySelectorAll\r\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\r\n                            : ref\r\n                        : ref;\r\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\r\n                    const refs = field._f.refs || [];\r\n                    if (radioOrCheckbox\r\n                        ? refs.find((option) => option === fieldRef)\r\n                        : fieldRef === field._f.ref) {\r\n                        return;\r\n                    }\r\n                    set(_fields, name, {\r\n                        _f: {\r\n                            ...field._f,\r\n                            ...(radioOrCheckbox\r\n                                ? {\r\n                                    refs: [\r\n                                        ...refs.filter(live),\r\n                                        fieldRef,\r\n                                        ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\r\n                                    ],\r\n                                    ref: { type: fieldRef.type, name },\r\n                                }\r\n                                : { ref: fieldRef }),\r\n                        },\r\n                    });\r\n                    updateValidAndValue(name, false, undefined, fieldRef);\r\n                }\r\n                else {\r\n                    field = get(_fields, name, {});\r\n                    if (field._f) {\r\n                        field._f.mount = false;\r\n                    }\r\n                    (_options.shouldUnregister || options.shouldUnregister) &&\r\n                        !(isNameInFieldArray(_names.array, name) && _stateFlags.action) &&\r\n                        _names.unMount.add(name);\r\n                }\r\n            },\r\n        };\r\n    };\r\n    const _focusError = () => _options.shouldFocusError &&\r\n        focusFieldBy(_fields, (key) => key && get(_formState.errors, key), _names.mount);\r\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\r\n        if (e) {\r\n            e.preventDefault && e.preventDefault();\r\n            e.persist && e.persist();\r\n        }\r\n        let fieldValues = cloneObject(_formValues);\r\n        _subjects.state.next({\r\n            isSubmitting: true,\r\n        });\r\n        if (_options.resolver) {\r\n            const { errors, values } = await _executeSchema();\r\n            _formState.errors = errors;\r\n            fieldValues = values;\r\n        }\r\n        else {\r\n            await executeBuiltInValidation(_fields);\r\n        }\r\n        if (isEmptyObject(_formState.errors)) {\r\n            _subjects.state.next({\r\n                errors: {},\r\n            });\r\n            await onValid(fieldValues, e);\r\n        }\r\n        else {\r\n            if (onInvalid) {\r\n                await onInvalid({ ..._formState.errors }, e);\r\n            }\r\n            _focusError();\r\n        }\r\n        _subjects.state.next({\r\n            isSubmitted: true,\r\n            isSubmitting: false,\r\n            isSubmitSuccessful: isEmptyObject(_formState.errors),\r\n            submitCount: _formState.submitCount + 1,\r\n            errors: _formState.errors,\r\n        });\r\n    };\r\n    const resetField = (name, options = {}) => {\r\n        if (get(_fields, name)) {\r\n            if (isUndefined(options.defaultValue)) {\r\n                setValue(name, get(_defaultValues, name));\r\n            }\r\n            else {\r\n                setValue(name, options.defaultValue);\r\n                set(_defaultValues, name, options.defaultValue);\r\n            }\r\n            if (!options.keepTouched) {\r\n                unset(_formState.touchedFields, name);\r\n            }\r\n            if (!options.keepDirty) {\r\n                unset(_formState.dirtyFields, name);\r\n                _formState.isDirty = options.defaultValue\r\n                    ? _getDirty(name, get(_defaultValues, name))\r\n                    : _getDirty();\r\n            }\r\n            if (!options.keepError) {\r\n                unset(_formState.errors, name);\r\n                _proxyFormState.isValid && _updateValid();\r\n            }\r\n            _subjects.state.next({ ..._formState });\r\n        }\r\n    };\r\n    const _reset = (formValues, keepStateOptions = {}) => {\r\n        const updatedValues = formValues || _defaultValues;\r\n        const cloneUpdatedValues = cloneObject(updatedValues);\r\n        const values = formValues && !isEmptyObject(formValues)\r\n            ? cloneUpdatedValues\r\n            : _defaultValues;\r\n        if (!keepStateOptions.keepDefaultValues) {\r\n            _defaultValues = updatedValues;\r\n        }\r\n        if (!keepStateOptions.keepValues) {\r\n            if (keepStateOptions.keepDirtyValues || shouldCaptureDirtyFields) {\r\n                for (const fieldName of _names.mount) {\r\n                    get(_formState.dirtyFields, fieldName)\r\n                        ? set(values, fieldName, get(_formValues, fieldName))\r\n                        : setValue(fieldName, get(values, fieldName));\r\n                }\r\n            }\r\n            else {\r\n                if (isWeb && isUndefined(formValues)) {\r\n                    for (const name of _names.mount) {\r\n                        const field = get(_fields, name);\r\n                        if (field && field._f) {\r\n                            const fieldReference = Array.isArray(field._f.refs)\r\n                                ? field._f.refs[0]\r\n                                : field._f.ref;\r\n                            if (isHTMLElement(fieldReference)) {\r\n                                const form = fieldReference.closest('form');\r\n                                if (form) {\r\n                                    form.reset();\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                _fields = {};\r\n            }\r\n            _formValues = props.shouldUnregister\r\n                ? keepStateOptions.keepDefaultValues\r\n                    ? cloneObject(_defaultValues)\r\n                    : {}\r\n                : cloneUpdatedValues;\r\n            _subjects.array.next({\r\n                values,\r\n            });\r\n            _subjects.watch.next({\r\n                values,\r\n            });\r\n        }\r\n        _names = {\r\n            mount: new Set(),\r\n            unMount: new Set(),\r\n            array: new Set(),\r\n            watch: new Set(),\r\n            watchAll: false,\r\n            focus: '',\r\n        };\r\n        !_stateFlags.mount && flushRootRender();\r\n        _stateFlags.mount =\r\n            !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\r\n        _stateFlags.watch = !!props.shouldUnregister;\r\n        _subjects.state.next({\r\n            submitCount: keepStateOptions.keepSubmitCount\r\n                ? _formState.submitCount\r\n                : 0,\r\n            isDirty: keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues\r\n                ? _formState.isDirty\r\n                : !!(keepStateOptions.keepDefaultValues &&\r\n                    !deepEqual(formValues, _defaultValues)),\r\n            isSubmitted: keepStateOptions.keepIsSubmitted\r\n                ? _formState.isSubmitted\r\n                : false,\r\n            dirtyFields: keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues\r\n                ? _formState.dirtyFields\r\n                : keepStateOptions.keepDefaultValues && formValues\r\n                    ? getDirtyFields(_defaultValues, formValues)\r\n                    : {},\r\n            touchedFields: keepStateOptions.keepTouched\r\n                ? _formState.touchedFields\r\n                : {},\r\n            errors: keepStateOptions.keepErrors ? _formState.errors : {},\r\n            isSubmitting: false,\r\n            isSubmitSuccessful: false,\r\n        });\r\n    };\r\n    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues)\r\n        ? formValues(_formValues)\r\n        : formValues, keepStateOptions);\r\n    const setFocus = (name, options = {}) => {\r\n        const field = get(_fields, name);\r\n        const fieldReference = field && field._f;\r\n        if (fieldReference) {\r\n            const fieldRef = fieldReference.refs\r\n                ? fieldReference.refs[0]\r\n                : fieldReference.ref;\r\n            if (fieldRef.focus) {\r\n                fieldRef.focus();\r\n                options.shouldSelect && fieldRef.select();\r\n            }\r\n        }\r\n    };\r\n    const _updateFormState = (updatedFormState) => {\r\n        _formState = {\r\n            ..._formState,\r\n            ...updatedFormState,\r\n        };\r\n    };\r\n    if (isFunction(_options.defaultValues)) {\r\n        _options.defaultValues().then((values) => {\r\n            reset(values, _options.resetOptions);\r\n            _subjects.state.next({\r\n                isLoading: false,\r\n            });\r\n        });\r\n    }\r\n    return {\r\n        control: {\r\n            register,\r\n            unregister,\r\n            getFieldState,\r\n            _executeSchema,\r\n            _focusError,\r\n            _getWatch,\r\n            _getDirty,\r\n            _updateValid,\r\n            _removeUnmounted,\r\n            _updateFieldArray,\r\n            _getFieldArray,\r\n            _reset,\r\n            _updateFormState,\r\n            _subjects,\r\n            _proxyFormState,\r\n            get _fields() {\r\n                return _fields;\r\n            },\r\n            get _formValues() {\r\n                return _formValues;\r\n            },\r\n            get _stateFlags() {\r\n                return _stateFlags;\r\n            },\r\n            set _stateFlags(value) {\r\n                _stateFlags = value;\r\n            },\r\n            get _defaultValues() {\r\n                return _defaultValues;\r\n            },\r\n            get _names() {\r\n                return _names;\r\n            },\r\n            set _names(value) {\r\n                _names = value;\r\n            },\r\n            get _formState() {\r\n                return _formState;\r\n            },\r\n            set _formState(value) {\r\n                _formState = value;\r\n            },\r\n            get _options() {\r\n                return _options;\r\n            },\r\n            set _options(value) {\r\n                _options = {\r\n                    ..._options,\r\n                    ...value,\r\n                };\r\n            },\r\n        },\r\n        trigger,\r\n        register,\r\n        handleSubmit,\r\n        watch,\r\n        setValue,\r\n        getValues,\r\n        reset,\r\n        resetField,\r\n        clearErrors,\r\n        unregister,\r\n        setError,\r\n        setFocus,\r\n        getFieldState,\r\n    };\r\n}\n\n/**\r\n * Custom hook to manage the entire form.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\r\n *\r\n * @param props - form configuration and validation parameters.\r\n *\r\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   console.log(watch(\"example\"));\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(onSubmit)}>\r\n *       <input defaultValue=\"test\" {...register(\"example\")} />\r\n *       <input {...register(\"exampleRequired\", { required: true })} />\r\n *       {errors.exampleRequired && <span>This field is required</span>}\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useForm(props = {}) {\r\n    const _formControl = React.useRef();\r\n    const [formState, updateFormState] = React.useState({\r\n        isDirty: false,\r\n        isValidating: false,\r\n        isLoading: true,\r\n        isSubmitted: false,\r\n        isSubmitting: false,\r\n        isSubmitSuccessful: false,\r\n        isValid: false,\r\n        submitCount: 0,\r\n        dirtyFields: {},\r\n        touchedFields: {},\r\n        errors: {},\r\n        defaultValues: isFunction(props.defaultValues)\r\n            ? undefined\r\n            : props.defaultValues,\r\n    });\r\n    if (!_formControl.current) {\r\n        _formControl.current = {\r\n            ...createFormControl(props, () => updateFormState((formState) => ({ ...formState }))),\r\n            formState,\r\n        };\r\n    }\r\n    const control = _formControl.current.control;\r\n    control._options = props;\r\n    useSubscribe({\r\n        subject: control._subjects.state,\r\n        next: (value) => {\r\n            if (shouldRenderFormState(value, control._proxyFormState, control._updateFormState, true)) {\r\n                updateFormState({ ...control._formState });\r\n            }\r\n        },\r\n    });\r\n    React.useEffect(() => {\r\n        if (!control._stateFlags.mount) {\r\n            control._updateValid();\r\n            control._stateFlags.mount = true;\r\n        }\r\n        if (control._stateFlags.watch) {\r\n            control._stateFlags.watch = false;\r\n            control._subjects.state.next({});\r\n        }\r\n        control._removeUnmounted();\r\n    });\r\n    React.useEffect(() => {\r\n        if (props.values && !deepEqual(props.values, control._defaultValues)) {\r\n            control._reset(props.values, control._options.resetOptions);\r\n        }\r\n    }, [props.values, control]);\r\n    React.useEffect(() => {\r\n        formState.submitCount && control._focusError();\r\n    }, [control, formState.submitCount]);\r\n    _formControl.current.formState = getProxyFormState(formState, control);\r\n    return _formControl.current;\r\n}\n\nexport { Controller, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n"],"names":["isCheckBoxInput","element","type","isDateObject","value","Date","isNullOrUndefined","isObjectType","isObject","Array","isArray","getEventValue","event","target","checked","getNodeParentName","name","substring","search","isNameInFieldArray","names","has","compact","filter","Boolean","isUndefined","val","undefined","get","obj","path","defaultValue","result","split","reduce","key","EVENTS","BLUR","FOCUS_OUT","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","max","min","maxLength","minLength","pattern","required","validate","HookFormContext","React","createContext","useFormContext","useContext","FormProvider","props","children","data","_jsx","getProxyFormState","formState","control","localProxyFormState","isRoot","defaultValues","_defaultValues","Object","defineProperty","_key","_proxyFormState","isEmptyObject","keys","length","shouldRenderFormState","formStateData","updateFormState","find","convertToArrayPayload","shouldSubscribeByName","signalName","exact","some","currentName","startsWith","useSubscribe","_props","useRef","current","useEffect","subscription","disabled","subject","subscribe","next","unsubscribe","useFormState","methods","useState","_formState","_mounted","_localProxyFormState","isDirty","isLoading","dirtyFields","touchedFields","isValidating","isValid","errors","_name","_updateFormState","_subjects","state","_getDirty","_updateValid","isString","generateWatchOutput","_names","formValues","isGlobal","watch","add","map","fieldName","watchAll","isPlainObject","tempObject","prototypeCopy","constructor","prototype","hasOwnProperty","isWeb","window","HTMLElement","document","cloneObject","copy","Set","Blob","FileList","useWatch","updateValue","values","_formValues","_getWatch","_removeUnmounted","useController","shouldUnregister","isArrayField","array","_registerProps","register","rules","updateMounted","field","_fields","_f","mount","_shouldUnregisterField","_options","_stateFlags","action","unregister","useCallback","ref","elm","focus","select","setCustomValidity","message","reportValidity","fieldState","defineProperties","invalid","enumerable","isTouched","error","Controller","render","appendErrors","validateAllFieldCriteria","types","isKey","test","stringToPath","input","replace","set","object","index","tempPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","callback","fieldsNames","currentField","refs","generateId","d","performance","now","c","r","Math","random","toString","getFocusFieldName","options","shouldFocus","focusName","focusIndex","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","isWatched","isBlurEvent","watchName","slice","updateFieldArrayRootError","fieldArrayErrors","isBoolean","isFileInput","isFunction","isHTMLElement","owner","ownerDocument","defaultView","isMessage","isValidElement","isRadioInput","isRegex","RegExp","defaultResult","validResult","getCheckboxValue","option","attributes","defaultReturn","getRadioValue","previous","getValidateError","every","getValueAndMessage","validationData","validateField","shouldUseNativeValidation","isFieldArray","valueAsNumber","inputValue","inputRef","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueNumber","valueDate","valueAsDate","convertTimeToDate","time","toDateString","isTime","isWeek","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","append","fillEmptyArray","insert","moveArrayAt","from","to","splice","prepend","removeAtIndexes","indexes","i","temp","removeArrayAt","sort","a","b","swapArrayAt","indexA","indexB","baseGet","updatePath","isEmptyArray","unset","paths","childObject","updateAt","fieldValues","useFieldArray","keyName","setFields","_getFieldArray","ids","_fieldIds","_actioned","fieldArrayName","updateValues","updatedFieldArrayValues","_updateFieldArray","append$1","appendValue","argA","prepend$1","prependValue","remove","insert$1","insertValue","argB","swap","move","update","item","isSubmitted","resolver","_executeSchema","then","existingError","criteriaMode","useMemo","createSubject","_observers","observers","observer","push","o","isPrimitive","deepEqual","object1","object2","getTime","keys1","keys2","val1","includes","val2","isMultipleSelect","live","isConnected","objectHasFunction","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","getFieldValueAs","setValueAs","NaN","getFieldValue","files","selectedOptions","getResolverOptions","getRuleValue","rule","source","hasValidation","schemaErrorLookup","join","foundError","pop","skipValidation","reValidateMode","unsetEmptyArray","defaultOptions","shouldFocusError","createFormControl","flushRootRender","shouldCaptureDirtyFields","resetOptions","keepDirtyValues","submitCount","isSubmitting","isSubmitSuccessful","unMount","delayErrorCallback","timer","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","clearTimeout","setTimeout","shouldUpdateValid","executeBuiltInValidation","_updateIsValidating","method","args","shouldSetValues","shouldUpdateFieldsAndState","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","shouldUpdateField","isPreviousDirty","output","isCurrentFieldPristine","isPreviousFieldTouched","shouldRenderByError","previousFieldError","delayError","updatedFormState","context","executeSchemaAndUpdateState","shouldOnlyCheckValid","valid","isFieldArrayRoot","fieldError","getValues","fieldReference","forEach","optionRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","cloneValue","getCurrentFieldValue","shouldSkipValidation","deps","watched","previousErrorLookupResult","errorLookupResult","fieldNames","Promise","getFieldState","clearErrors","inputName","setError","payload","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","disabledIsDefined","fieldRef","querySelectorAll","radioOrCheckbox","_focusError","handleSubmit","onValid","onInvalid","e","preventDefault","persist","resetField","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","form","closest","reset","keepSubmitCount","keepIsSubmitted","keepErrors","setFocus","shouldSelect","useForm","_formControl"],"mappings":"iDAEA,IAAIA,GAAmBC,GAAYA,EAAQC,OAAS,WAEhDC,GAAgBC,GAAUA,aAAiBC,KAE3CC,EAAqBF,GAAUA,GAAS,KAE5C,MAAMG,GAAgBH,GAAU,OAAOA,GAAU,SACjD,IAAII,EAAYJ,GAAU,CAACE,EAAkBF,CAAK,GAC9C,CAACK,MAAMC,QAAQN,CAAK,GACpBG,GAAaH,CAAK,GAClB,CAACD,GAAaC,CAAK,EAEnBO,GAAiBC,GAAUJ,EAASI,CAAK,GAAKA,EAAMC,OAClDb,GAAgBY,EAAMC,MAAM,EACxBD,EAAMC,OAAOC,QACbF,EAAMC,OAAOT,MACjBQ,EAEFG,GAAqBC,GAASA,EAAKC,UAAU,EAAGD,EAAKE,OAAO,aAAa,CAAC,GAAKF,EAE/EG,GAAqB,CAACC,EAAOJ,IAASI,EAAMC,IAAIN,GAAkBC,CAAI,CAAC,EAEvEM,GAAWlB,GAAUK,MAAMC,QAAQN,CAAK,EAAIA,EAAMmB,OAAOC,OAAO,EAAI,GAEpEC,EAAeC,GAAQA,IAAQC,OAE/BC,EAAM,CAACC,EAAKC,EAAMC,IAAiB,CACnC,GAAI,CAACD,GAAQ,CAACtB,EAASqB,CAAG,EACtB,OAAOE,EAEX,MAAMC,EAASV,GAAQQ,EAAKG,MAAM,WAAW,CAAC,EAAEC,OAAO,CAACF,EAAQG,IAAQ7B,EAAkB0B,CAAM,EAAIA,EAASA,EAAOG,GAAMN,CAAG,EAC7H,OAAOJ,EAAYO,CAAM,GAAKA,IAAWH,EACnCJ,EAAYI,EAAIC,EAAK,EACjBC,EACAF,EAAIC,GACRE,CACV,EAEA,MAAMI,GAAS,CACXC,KAAM,OACNC,UAAW,WACXC,OAAQ,QACZ,EACMC,EAAkB,CACpBC,OAAQ,SACRC,SAAU,WACVC,SAAU,WACVC,UAAW,YACXC,IAAK,KACT,EACMC,EAAyB,CAC3BC,IAAK,MACLC,IAAK,MACLC,UAAW,YACXC,UAAW,YACXC,QAAS,UACTC,SAAU,WACVC,SAAU,UACd,EAEMC,GAAkBC,EAAMC,cAAc,IAAI,EA+B1CC,GAAiB,IAAMF,EAAMG,WAAWJ,EAAe,EA+BvDK,GAAgBC,GAAU,CAC5B,KAAM,CAAEC,SAAAA,KAAaC,CAAM,EAAGF,EAC9B,OAAAG,GAAAT,GAAA,SAAA,CAAA,MAA+DQ,EAAI,SAAID,CAAQ,CAAA,CACnF,EAEA,IAAIG,GAAoB,CAACC,EAAWC,EAASC,EAAqBC,EAAS,KAAS,CAChF,MAAMpC,EAAS,CACXqC,cAAeH,EAAQI,gBAE3B,UAAWnC,KAAO8B,EACdM,OAAOC,eAAexC,EAAQG,EAAK,CAC/BP,IAAK,IAAM,CACP,MAAM6C,EAAOtC,EACb,OAAI+B,EAAQQ,gBAAgBD,KAAUjC,EAAgBK,MAClDqB,EAAQQ,gBAAgBD,GAAQ,CAACL,GAAU5B,EAAgBK,KAE/DsB,IAAwBA,EAAoBM,GAAQ,IAC7CR,EAAUQ,EACrB,CACJ,CAAC,EAEL,OAAOzC,CACX,EAEI2C,EAAiBvE,GAAUI,EAASJ,CAAK,GAAK,CAACmE,OAAOK,KAAKxE,CAAK,EAAEyE,OAElEC,GAAwB,CAACC,EAAeL,EAAiBM,EAAiBZ,IAAW,CACrFY,EAAgBD,CAAa,EAC7B,KAAM,CAAE/D,KAAAA,KAASiD,CAAW,EAAGc,EAC/B,OAAQJ,EAAcV,CAAS,GAC3BM,OAAOK,KAAKX,CAAS,EAAEY,QAAUN,OAAOK,KAAKF,CAAe,EAAEG,QAC9DN,OAAOK,KAAKX,CAAS,EAAEgB,KAAM9C,GAAQuC,EAAgBvC,MAChD,CAACiC,GAAU5B,EAAgBK,IAAI,CAC5C,EAEIqC,EAAyB9E,GAAWK,MAAMC,QAAQN,CAAK,EAAIA,EAAQ,CAACA,CAAK,EAEzE+E,GAAwB,CAACnE,EAAMoE,EAAYC,IAAUA,GAASD,EAC5DpE,IAASoE,EACT,CAACpE,GACC,CAACoE,GACDpE,IAASoE,GACTF,EAAsBlE,CAAI,EAAEsE,KAAMC,GAAgBA,IAC7CA,EAAYC,WAAWJ,CAAU,GAC9BA,EAAWI,WAAWD,CAAW,EAAE,EAEnD,SAASE,GAAa7B,EAAO,CACzB,MAAM8B,EAASnC,EAAMoC,OAAO/B,CAAK,EACjC8B,EAAOE,QAAUhC,EACjBL,EAAMsC,UAAU,IAAM,CAClB,MAAMC,EAAe,CAAClC,EAAMmC,UACxBL,EAAOE,QAAQI,QAAQC,UAAU,CAC7BC,KAAMR,EAAOE,QAAQM,IACzB,CAAC,EACL,MAAO,IAAM,CACTJ,GAAgBA,EAAaK,cAErC,EAAG,CAACvC,EAAMmC,QAAQ,CAAC,CACvB,CAgCA,SAASK,GAAaxC,EAAO,CACzB,MAAMyC,EAAU5C,KACV,CAAES,QAAAA,EAAUmC,EAAQnC,QAAS6B,SAAAA,EAAU/E,KAAAA,EAAMqE,MAAAA,CAAM,EAAIzB,GAAS,CAAA,EAChE,CAACK,EAAWe,CAAe,EAAIzB,EAAM+C,SAASpC,EAAQqC,UAAU,EAChEC,EAAWjD,EAAMoC,OAAO,EAAI,EAC5Bc,EAAuBlD,EAAMoC,OAAO,CACtCe,QAAS,GACTC,UAAW,GACXC,YAAa,GACbC,cAAe,GACfC,aAAc,GACdC,QAAS,GACTC,OAAQ,EACZ,CAAC,EACKC,EAAQ1D,EAAMoC,OAAO3E,CAAI,EAC/BiG,OAAAA,EAAMrB,QAAU5E,EAChByE,GAAa,CACTM,SAAAA,EACAG,KAAO9F,GAAUoG,EAASZ,SACtBT,GAAsB8B,EAAMrB,QAASxF,EAAMY,KAAMqE,CAAK,GACtDP,GAAsB1E,EAAOqG,EAAqBb,QAAS1B,EAAQgD,gBAAgB,GACnFlC,EAAgB,CACZ,GAAGd,EAAQqC,WACX,GAAGnG,CACP,CAAC,EACL4F,QAAS9B,EAAQiD,UAAUC,KAC/B,CAAC,EACD7D,EAAMsC,UAAU,IAAM,CAClBW,EAASZ,QAAU,GACnB,MAAMc,EAAUxC,EAAQQ,gBAAgBgC,SAAWxC,EAAQmD,YAC3D,OAAIX,IAAYxC,EAAQqC,WAAWG,SAC/BxC,EAAQiD,UAAUC,MAAMlB,KAAK,CACzBQ,QAAAA,CACJ,CAAC,EAELD,EAAqBb,QAAQmB,SAAW7C,EAAQoD,aAAa,EAAI,EAC1D,IAAM,CACTd,EAASZ,QAAU,GAE3B,EAAG,CAAC1B,CAAO,CAAC,EACLF,GAAkBC,EAAWC,EAASuC,EAAqBb,QAAS,EAAK,CACpF,CAEA,IAAI2B,EAAYnH,GAAU,OAAOA,GAAU,SAEvCoH,GAAsB,CAACpG,EAAOqG,EAAQC,EAAYC,EAAU5F,IACxDwF,EAASnG,CAAK,GACduG,GAAYF,EAAOG,MAAMC,IAAIzG,CAAK,EAC3BQ,EAAI8F,EAAYtG,EAAOW,CAAY,GAE1CtB,MAAMC,QAAQU,CAAK,EACZA,EAAM0G,IAAKC,IAAeJ,GAAYF,EAAOG,MAAMC,IAAIE,CAAS,EAAGnG,EAAI8F,EAAYK,CAAS,EAAE,GAEzGJ,IAAaF,EAAOO,SAAW,IACxBN,GAGPO,GAAiBC,GAAe,CAChC,MAAMC,EAAgBD,EAAWE,aAAeF,EAAWE,YAAYC,UACvE,OAAQ7H,EAAS2H,CAAa,GAAKA,EAAcG,eAAe,eAAe,CACnF,EAEIC,GAAQ,OAAOC,OAAW,KAC1B,OAAOA,OAAOC,YAAgB,KAC9B,OAAOC,SAAa,IAExB,SAASC,EAAY7E,EAAM,CACvB,IAAI8E,EACJ,MAAMlI,EAAUD,MAAMC,QAAQoD,CAAI,EAClC,GAAIA,aAAgBzD,KAChBuI,EAAO,IAAIvI,KAAKyD,CAAI,UAEfA,aAAgB+E,IACrBD,EAAO,IAAIC,IAAI/E,CAAI,UAEd,EAAEyE,KAAUzE,aAAgBgF,MAAQhF,aAAgBiF,aACxDrI,GAAWF,EAASsD,CAAI,GAEzB,GADA8E,EAAOlI,EAAU,CAAE,EAAG,GAClB,CAACD,MAAMC,QAAQoD,CAAI,GAAK,CAACmE,GAAcnE,CAAI,EAC3C8E,EAAO9E,MAGP,WAAW3B,KAAO2B,EACd8E,EAAKzG,GAAOwG,EAAY7E,EAAK3B,EAAI,MAKzC,QAAO2B,EAEX,OAAO8E,CACX,CAkBA,SAASI,GAASpF,EAAO,CACrB,MAAMyC,EAAU5C,KACV,CAAES,QAAAA,EAAUmC,EAAQnC,QAASlD,KAAAA,EAAMe,aAAAA,EAAcgE,SAAAA,EAAUV,MAAAA,CAAO,EAAIzB,GAAS,CAAA,EAC/EqD,EAAQ1D,EAAMoC,OAAO3E,CAAI,EAC/BiG,EAAMrB,QAAU5E,EAChByE,GAAa,CACTM,SAAAA,EACAC,QAAS9B,EAAQiD,UAAUS,MAC3B1B,KAAOjC,GAAc,CACbkB,GAAsB8B,EAAMrB,QAAS3B,EAAUjD,KAAMqE,CAAK,GAC1D4D,EAAYN,EAAYnB,GAAoBP,EAAMrB,QAAS1B,EAAQuD,OAAQxD,EAAUiF,QAAUhF,EAAQiF,YAAa,GAAOpH,CAAY,CAAC,CAAC,CAEjJ,CACJ,CAAC,EACD,KAAM,CAAC3B,EAAO6I,CAAW,EAAI1F,EAAM+C,SAASpC,EAAQkF,UAAUpI,EAAMe,CAAY,CAAC,EACjFwB,OAAAA,EAAMsC,UAAU,IAAM3B,EAAQmF,iBAAkB,CAAA,EACzCjJ,CACX,CA0BA,SAASkJ,GAAc1F,EAAO,CAC1B,MAAMyC,EAAU5C,KACV,CAAEzC,KAAAA,EAAMkD,QAAAA,EAAUmC,EAAQnC,QAASqF,iBAAAA,CAAkB,EAAG3F,EACxD4F,EAAerI,GAAmB+C,EAAQuD,OAAOgC,MAAOzI,CAAI,EAC5DZ,EAAQ4I,GAAS,CACnB9E,QAAAA,EACAlD,KAAAA,EACAe,aAAcH,EAAIsC,EAAQiF,YAAanI,EAAMY,EAAIsC,EAAQI,eAAgBtD,EAAM4C,EAAM7B,YAAY,CAAC,EAClGsD,MAAO,EACX,CAAC,EACKpB,EAAYmC,GAAa,CAC3BlC,QAAAA,EACAlD,KAAAA,CACJ,CAAC,EACK0I,EAAiBnG,EAAMoC,OAAOzB,EAAQyF,SAAS3I,EAAM,CACvD,GAAG4C,EAAMgG,MACTxJ,MAAAA,CACH,CAAA,CAAC,EACFmD,OAAAA,EAAMsC,UAAU,IAAM,CAClB,MAAMgE,EAAgB,CAAC7I,EAAMZ,IAAU,CACnC,MAAM0J,EAAQlI,EAAIsC,EAAQ6F,QAAS/I,CAAI,EACnC8I,IACAA,EAAME,GAAGC,MAAQ7J,IAGzByJ,OAAAA,EAAc7I,EAAM,EAAI,EACjB,IAAM,CACT,MAAMkJ,EAAyBhG,EAAQiG,SAASZ,kBAAoBA,GACnEC,EACKU,GAA0B,CAAChG,EAAQkG,YAAYC,OAC/CH,GACAhG,EAAQoG,WAAWtJ,CAAI,EACvB6I,EAAc7I,EAAM,EAAK,EAEtC,EAAE,CAACA,EAAMkD,EAASsF,EAAcD,CAAgB,CAAC,EAC3C,CACHO,MAAO,CACH9I,KAAAA,EACAZ,MAAAA,EACAsC,SAAUa,EAAMgH,YAAa3J,GAAU8I,EAAe9D,QAAQlD,SAAS,CACnE7B,OAAQ,CACJT,MAAOO,GAAcC,CAAK,EAC1BI,KAAMA,CACT,EACDd,KAAMkC,GAAOG,MACjB,CAAC,EAAG,CAACvB,CAAI,CAAC,EACVyB,OAAQc,EAAMgH,YAAY,IAAMb,EAAe9D,QAAQnD,OAAO,CAC1D5B,OAAQ,CACJT,MAAOwB,EAAIsC,EAAQiF,YAAanI,CAAI,EACpCA,KAAMA,CACT,EACDd,KAAMkC,GAAOC,IACjB,CAAC,EAAG,CAACrB,EAAMkD,CAAO,CAAC,EACnBsG,IAAMC,GAAQ,CACV,MAAMX,EAAQlI,EAAIsC,EAAQ6F,QAAS/I,CAAI,EACnC8I,GAASW,IACTX,EAAME,GAAGQ,IAAM,CACXE,MAAO,IAAMD,EAAIC,MAAO,EACxBC,OAAQ,IAAMF,EAAIE,OAAQ,EAC1BC,kBAAoBC,GAAYJ,EAAIG,kBAAkBC,CAAO,EAC7DC,eAAgB,IAAML,EAAIK,eAAc,GAGpD,CACH,EACD7G,UAAAA,EACA8G,WAAYxG,OAAOyG,iBAAiB,GAAI,CACpCC,QAAS,CACLC,WAAY,GACZtJ,IAAK,IAAM,CAAC,CAACA,EAAIqC,EAAU+C,OAAQhG,CAAI,CAC1C,EACD0F,QAAS,CACLwE,WAAY,GACZtJ,IAAK,IAAM,CAAC,CAACA,EAAIqC,EAAU2C,YAAa5F,CAAI,CAC/C,EACDmK,UAAW,CACPD,WAAY,GACZtJ,IAAK,IAAM,CAAC,CAACA,EAAIqC,EAAU4C,cAAe7F,CAAI,CACjD,EACDoK,MAAO,CACHF,WAAY,GACZtJ,IAAK,IAAMA,EAAIqC,EAAU+C,OAAQhG,CAAI,CACzC,EACH,EAET,CA4CA,MAAMqK,GAAczH,GAAUA,EAAM0H,OAAOhC,GAAc1F,CAAK,CAAC,EAE/D,IAAI2H,GAAe,CAACvK,EAAMwK,EAA0BxE,EAAQ9G,EAAM2K,IAAYW,EACxE,CACE,GAAGxE,EAAOhG,GACVyK,MAAO,CACH,GAAIzE,EAAOhG,IAASgG,EAAOhG,GAAMyK,MAAQzE,EAAOhG,GAAMyK,MAAQ,CAAA,EAC9D,CAACvL,GAAO2K,GAAW,EACvB,CACJ,EACE,GAEFa,GAAStL,GAAU,QAAQuL,KAAKvL,CAAK,EAErCwL,GAAgBC,GAAUvK,GAAQuK,EAAMC,QAAQ,YAAa,EAAE,EAAE7J,MAAM,OAAO,CAAC,EAEnF,SAAS8J,EAAIC,EAAQlK,EAAM1B,EAAO,CAC9B,IAAI6L,EAAQ,GACZ,MAAMC,EAAWR,GAAM5J,CAAI,EAAI,CAACA,CAAI,EAAI8J,GAAa9J,CAAI,EACnD+C,EAASqH,EAASrH,OAClBsH,EAAYtH,EAAS,EAC3B,KAAO,EAAEoH,EAAQpH,GAAQ,CACrB,MAAM1C,EAAM+J,EAASD,GACrB,IAAIG,EAAWhM,EACf,GAAI6L,IAAUE,EAAW,CACrB,MAAME,EAAWL,EAAO7J,GACxBiK,EACI5L,EAAS6L,CAAQ,GAAK5L,MAAMC,QAAQ2L,CAAQ,EACtCA,EACCC,MAAM,CAACJ,EAASD,EAAQ,EAAE,EAEvB,GADA,CAAE,CAEpB,CACAD,EAAO7J,GAAOiK,EACdJ,EAASA,EAAO7J,EACpB,CACA,OAAO6J,CACX,CAEA,MAAMO,GAAe,CAACC,EAAQC,EAAUC,IAAgB,CACpD,UAAWvK,KAAOuK,GAAenI,OAAOK,KAAK4H,CAAM,EAAG,CAClD,MAAM1C,EAAQlI,EAAI4K,EAAQrK,CAAG,EAC7B,GAAI2H,EAAO,CACP,KAAM,CAAEE,GAAAA,KAAO2C,CAAc,EAAG7C,EAChC,GAAIE,GAAMyC,EAASzC,EAAGhJ,IAAI,GACtB,GAAIgJ,EAAGQ,IAAIE,MAAO,CACdV,EAAGQ,IAAIE,QACP,KACJ,SACSV,EAAG4C,MAAQ5C,EAAG4C,KAAK,GAAGlC,MAAO,CAClCV,EAAG4C,KAAK,GAAGlC,MAAK,EAChB,KACJ,OAEKlK,EAASmM,CAAY,GAC1BJ,GAAaI,EAAcF,CAAQ,CAE3C,CACJ,CACJ,EAEA,IAAII,EAAa,IAAM,CACnB,MAAMC,EAAI,OAAOC,YAAgB,IAAc1M,KAAK2M,IAAG,EAAKD,YAAYC,IAAK,EAAG,IAChF,MAAO,uCAAuClB,QAAQ,QAAUmB,GAAM,CAClE,MAAMC,GAAKC,KAAKC,OAAM,EAAK,GAAKN,GAAK,GAAK,EAC1C,OAAQG,GAAK,IAAMC,EAAKA,EAAI,EAAO,GAAKG,SAAS,EAAE,CACvD,CAAC,CACL,EAEIC,GAAoB,CAACtM,EAAMiL,EAAOsB,EAAU,CAAE,IAAKA,EAAQC,aAAe/L,EAAY8L,EAAQC,WAAW,EACvGD,EAAQE,WACL,GAAEzM,KAAQS,EAAY8L,EAAQG,UAAU,EAAIzB,EAAQsB,EAAQG,cAC/D,GAEFC,GAAsBC,IAAU,CAChCC,WAAY,CAACD,GAAQA,IAASpL,EAAgBG,SAC9CmL,SAAUF,IAASpL,EAAgBC,OACnCsL,WAAYH,IAASpL,EAAgBE,SACrCsL,QAASJ,IAASpL,EAAgBK,IAClCoL,UAAWL,IAASpL,EAAgBI,SACxC,GAEIsL,GAAY,CAAClN,EAAMyG,EAAQ0G,IAAgB,CAACA,IAC3C1G,EAAOO,UACJP,EAAOG,MAAMvG,IAAIL,CAAI,GACrB,CAAC,GAAGyG,EAAOG,KAAK,EAAEtC,KAAM8I,GAAcpN,EAAKwE,WAAW4I,CAAS,GAC3D,SAASzC,KAAK3K,EAAKqN,MAAMD,EAAUvJ,MAAM,CAAC,CAAC,GAEnDyJ,GAA4B,CAACtH,EAAQoE,EAAOpK,IAAS,CACrD,MAAMuN,EAAmBjN,GAAQM,EAAIoF,EAAQhG,CAAI,CAAC,EAClD+K,OAAAA,EAAIwC,EAAkB,OAAQnD,EAAMpK,EAAK,EACzC+K,EAAI/E,EAAQhG,EAAMuN,CAAgB,EAC3BvH,CACX,EAEIwH,GAAapO,GAAU,OAAOA,GAAU,UAExCqO,GAAexO,GAAYA,EAAQC,OAAS,OAE5CwO,GAActO,GAAU,OAAOA,GAAU,WAEzCuO,GAAiBvO,GAAU,CAC3B,GAAI,CAACmI,GACD,MAAO,GAEX,MAAMqG,EAAQxO,EAAQA,EAAMyO,cAAgB,EAC5C,OAAQzO,aACHwO,GAASA,EAAME,YAAcF,EAAME,YAAYrG,YAAcA,YACtE,EAEIsG,GAAa3O,GAAUmH,EAASnH,CAAK,GAAKmD,EAAMyL,eAAe5O,CAAK,EAEpE6O,GAAgBhP,GAAYA,EAAQC,OAAS,QAE7CgP,GAAW9O,GAAUA,aAAiB+O,OAE1C,MAAMC,GAAgB,CAClBhP,MAAO,GACP2G,QAAS,EACb,EACMsI,GAAc,CAAEjP,MAAO,GAAM2G,QAAS,EAAK,EACjD,IAAIuI,GAAoB/B,GAAY,CAChC,GAAI9M,MAAMC,QAAQ6M,CAAO,EAAG,CACxB,GAAIA,EAAQ1I,OAAS,EAAG,CACpB,MAAMqE,EAASqE,EACVhM,OAAQgO,GAAWA,GAAUA,EAAOzO,SAAW,CAACyO,EAAOxJ,QAAQ,EAC/D+B,IAAKyH,GAAWA,EAAOnP,KAAK,EACjC,MAAO,CAAEA,MAAO8I,EAAQnC,QAAS,CAAC,CAACmC,EAAOrE,OAC9C,CACA,OAAO0I,EAAQ,GAAGzM,SAAW,CAACyM,EAAQ,GAAGxH,SAEjCwH,EAAQ,GAAGiC,YAAc,CAAC/N,EAAY8L,EAAQ,GAAGiC,WAAWpP,KAAK,EAC3DqB,EAAY8L,EAAQ,GAAGnN,KAAK,GAAKmN,EAAQ,GAAGnN,QAAU,GAClDiP,GACA,CAAEjP,MAAOmN,EAAQ,GAAGnN,MAAO2G,QAAS,IACxCsI,GACRD,EACV,CACA,OAAOA,EACX,EAEA,MAAMK,GAAgB,CAClB1I,QAAS,GACT3G,MAAO,IACX,EACA,IAAIsP,GAAiBnC,GAAY9M,MAAMC,QAAQ6M,CAAO,EAChDA,EAAQrL,OAAO,CAACyN,EAAUJ,IAAWA,GAAUA,EAAOzO,SAAW,CAACyO,EAAOxJ,SACrE,CACEgB,QAAS,GACT3G,MAAOmP,EAAOnP,KAClB,EACEuP,EAAUF,EAAa,EAC3BA,GAEN,SAASG,GAAiB5N,EAAQwI,EAAKtK,EAAO,WAAY,CACtD,GAAI6O,GAAU/M,CAAM,GACfvB,MAAMC,QAAQsB,CAAM,GAAKA,EAAO6N,MAAMd,EAAS,GAC/CP,GAAUxM,CAAM,GAAK,CAACA,EACvB,MAAO,CACH9B,KAAAA,EACA2K,QAASkE,GAAU/M,CAAM,EAAIA,EAAS,GACtCwI,IAAAA,EAGZ,CAEA,IAAIsF,GAAsBC,GAAmBvP,EAASuP,CAAc,GAAK,CAACb,GAAQa,CAAc,EAC1FA,EACA,CACE3P,MAAO2P,EACPlF,QAAS,EACb,EAEAmF,GAAgB,MAAOlG,EAAOpC,EAAY8D,EAA0ByE,EAA2BC,IAAiB,CAChH,KAAM,CAAE1F,IAAAA,EAAKoC,KAAAA,EAAMxJ,SAAAA,EAAUH,UAAAA,EAAWC,UAAAA,EAAWF,IAAAA,EAAKD,IAAAA,EAAKI,QAAAA,EAASE,SAAAA,EAAUrC,KAAAA,EAAMmP,cAAAA,GAAelG,MAAAA,GAAOlE,SAAAA,IAAc+D,EAAME,GAC1HoG,EAAaxO,EAAI8F,EAAY1G,CAAI,EACvC,GAAI,CAACiJ,IAASlE,GACV,MAAO,GAEX,MAAMsK,EAAWzD,EAAOA,EAAK,GAAKpC,EAC5BI,EAAqBC,GAAY,CAC/BoF,GAA6BI,EAASvF,iBACtCuF,EAASzF,kBAAkB4D,GAAU3D,CAAO,EAAI,GAAKA,GAAW,EAAE,EAClEwF,EAASvF,eAAc,IAGzBM,EAAQ,CAAA,EACRkF,EAAUrB,GAAazE,CAAG,EAC1B+F,EAAavQ,GAAgBwK,CAAG,EAChCgG,EAAoBF,GAAWC,EAC/BE,GAAYN,IAAiB1B,GAAYjE,CAAG,IAC9C/I,EAAY+I,EAAIpK,KAAK,GACrBqB,EAAY2O,CAAU,GACrBzB,GAAcnE,CAAG,GAAKA,EAAIpK,QAAU,IACrCgQ,IAAe,IACd3P,MAAMC,QAAQ0P,CAAU,GAAK,CAACA,EAAWvL,OACxC6L,EAAoBnF,GAAaoF,KAAK,KAAM3P,EAAMwK,EAA0BJ,CAAK,EACjFwF,EAAmB,CAACC,EAAWC,EAAkBC,EAAkBC,EAAUlO,EAAuBG,UAAWgO,EAAUnO,EAAuBI,YAAc,CAChK,MAAM2H,EAAUgG,EAAYC,EAAmBC,EAC/C3F,EAAMpK,GAAQ,CACVd,KAAM2Q,EAAYG,EAAUC,EAC5BpG,QAAAA,EACAL,IAAAA,EACA,GAAGkG,EAAkBG,EAAYG,EAAUC,EAASpG,CAAO,IAGnE,GAAIqF,EACE,CAACzP,MAAMC,QAAQ0P,CAAU,GAAK,CAACA,EAAWvL,OAC1CzB,IACI,CAACoN,IAAsBC,GAAWnQ,EAAkB8P,CAAU,IAC3D5B,GAAU4B,CAAU,GAAK,CAACA,GAC1BG,GAAc,CAACjB,GAAiB1C,CAAI,EAAE7F,SACtCuJ,GAAW,CAACZ,GAAc9C,CAAI,EAAE7F,SAAW,CACpD,KAAM,CAAE3G,MAAAA,EAAOyK,QAAAA,CAAQ,EAAIkE,GAAU3L,CAAQ,EACvC,CAAEhD,MAAO,CAAC,CAACgD,EAAUyH,QAASzH,CAAS,EACvC0M,GAAmB1M,CAAQ,EACjC,GAAIhD,IACAgL,EAAMpK,GAAQ,CACVd,KAAM4C,EAAuBM,SAC7ByH,QAAAA,EACAL,IAAK6F,EACL,GAAGK,EAAkB5N,EAAuBM,SAAUyH,CAAO,GAE7D,CAACW,GACDZ,OAAAA,EAAkBC,CAAO,EAClBO,CAGnB,CACA,GAAI,CAACqF,IAAY,CAACnQ,EAAkB0C,CAAG,GAAK,CAAC1C,EAAkByC,CAAG,GAAI,CAClE,IAAI8N,EACAK,EACJ,MAAMC,EAAYrB,GAAmB/M,CAAG,EAClCqO,EAAYtB,GAAmB9M,CAAG,EACxC,GAAI,CAAC1C,EAAkB8P,CAAU,GAAK,CAAC9D,MAAM8D,CAAU,EAAG,CACtD,MAAMiB,EAAc7G,EAAI2F,eACnBC,GAAa,CAACA,EACd9P,EAAkB6Q,EAAU/Q,KAAK,IAClCyQ,EAAYQ,EAAcF,EAAU/Q,OAEnCE,EAAkB8Q,EAAUhR,KAAK,IAClC8Q,EAAYG,EAAcD,EAAUhR,MAE5C,KACK,CACD,MAAMkR,EAAY9G,EAAI+G,aAAe,IAAIlR,KAAK+P,CAAU,EAClDoB,EAAqBC,IAAS,IAAIpR,KAAK,IAAIA,KAAM,EAACqR,aAAc,EAAG,IAAMD,EAAI,EAC7EE,GAASnH,EAAItK,MAAQ,OACrB0R,GAASpH,EAAItK,MAAQ,OACvBqH,EAAS4J,EAAU/Q,KAAK,GAAKgQ,IAC7BS,EAAYc,GACNH,EAAkBpB,CAAU,EAAIoB,EAAkBL,EAAU/Q,KAAK,EACjEwR,GACIxB,EAAae,EAAU/Q,MACvBkR,EAAY,IAAIjR,KAAK8Q,EAAU/Q,KAAK,GAE9CmH,EAAS6J,EAAUhR,KAAK,GAAKgQ,IAC7Bc,EAAYS,GACNH,EAAkBpB,CAAU,EAAIoB,EAAkBJ,EAAUhR,KAAK,EACjEwR,GACIxB,EAAagB,EAAUhR,MACvBkR,EAAY,IAAIjR,KAAK+Q,EAAUhR,KAAK,EAEtD,CACA,IAAIyQ,GAAaK,KACbN,EAAiB,CAAC,CAACC,EAAWM,EAAUtG,QAASuG,EAAUvG,QAAS/H,EAAuBC,IAAKD,EAAuBE,GAAG,EACtH,CAACwI,GACDZ,OAAAA,EAAkBQ,EAAMpK,GAAM6J,OAAO,EAC9BO,CAGnB,CACA,IAAKnI,GAAaC,IACd,CAACuN,IACAlJ,EAAS6I,CAAU,GAAMF,GAAgBzP,MAAMC,QAAQ0P,CAAU,GAAK,CACvE,MAAMyB,EAAkB/B,GAAmB7M,CAAS,EAC9C6O,EAAkBhC,GAAmB5M,CAAS,EAC9C2N,EAAY,CAACvQ,EAAkBuR,EAAgBzR,KAAK,GACtDgQ,EAAWvL,OAASgN,EAAgBzR,MAClC8Q,EAAY,CAAC5Q,EAAkBwR,EAAgB1R,KAAK,GACtDgQ,EAAWvL,OAASiN,EAAgB1R,MACxC,IAAIyQ,GAAaK,KACbN,EAAiBC,EAAWgB,EAAgBhH,QAASiH,EAAgBjH,OAAO,EACxE,CAACW,GACDZ,OAAAA,EAAkBQ,EAAMpK,GAAM6J,OAAO,EAC9BO,CAGnB,CACA,GAAIjI,GAAW,CAACsN,GAAWlJ,EAAS6I,CAAU,EAAG,CAC7C,KAAM,CAAEhQ,MAAO2R,EAAclH,QAAAA,CAAQ,EAAIiF,GAAmB3M,CAAO,EACnE,GAAI+L,GAAQ6C,CAAY,GAAK,CAAC3B,EAAW4B,MAAMD,CAAY,IACvD3G,EAAMpK,GAAQ,CACVd,KAAM4C,EAAuBK,QAC7B0H,QAAAA,EACAL,IAAAA,EACA,GAAGkG,EAAkB5N,EAAuBK,QAAS0H,CAAO,GAE5D,CAACW,GACDZ,OAAAA,EAAkBC,CAAO,EAClBO,CAGnB,CACA,GAAI/H,GACA,GAAIqL,GAAWrL,CAAQ,EAAG,CACtB,MAAMrB,EAAS,MAAMqB,EAAS+M,EAAY1I,CAAU,EAC9CuK,EAAgBrC,GAAiB5N,EAAQqO,CAAQ,EACvD,GAAI4B,IACA7G,EAAMpK,GAAQ,CACV,GAAGiR,EACH,GAAGvB,EAAkB5N,EAAuBO,SAAU4O,EAAcpH,OAAO,GAE3E,CAACW,GACDZ,OAAAA,EAAkBqH,EAAcpH,OAAO,EAChCO,CAGnB,SACS5K,EAAS6C,CAAQ,EAAG,CACzB,IAAI6O,EAAmB,CAAA,EACvB,UAAW/P,KAAOkB,EAAU,CACxB,GAAI,CAACsB,EAAcuN,CAAgB,GAAK,CAAC1G,EACrC,MAEJ,MAAMyG,EAAgBrC,GAAiB,MAAMvM,EAASlB,GAAKiO,EAAY1I,CAAU,EAAG2I,EAAUlO,CAAG,EAC7F8P,IACAC,EAAmB,CACf,GAAGD,EACH,GAAGvB,EAAkBvO,EAAK8P,EAAcpH,OAAO,GAEnDD,EAAkBqH,EAAcpH,OAAO,EACnCW,IACAJ,EAAMpK,GAAQkR,GAG1B,CACA,GAAI,CAACvN,EAAcuN,CAAgB,IAC/B9G,EAAMpK,GAAQ,CACVwJ,IAAK6F,EACL,GAAG6B,GAEH,CAAC1G,GACD,OAAOJ,CAGnB,EAEJR,OAAAA,EAAkB,EAAI,EACfQ,CACX,EAEA,SAAS+G,GAAOrO,EAAM1D,EAAO,CACzB,MAAO,CAAC,GAAG0D,EAAM,GAAGoB,EAAsB9E,CAAK,CAAC,CACpD,CAEA,IAAIgS,GAAkBhS,GAAUK,MAAMC,QAAQN,CAAK,EAAIA,EAAM0H,IAAI,IAAA,EAAe,EAAInG,OAEpF,SAAS0Q,GAAOvO,EAAMmI,EAAO7L,EAAO,CAChC,MAAO,CACH,GAAG0D,EAAKuK,MAAM,EAAGpC,CAAK,EACtB,GAAG/G,EAAsB9E,CAAK,EAC9B,GAAG0D,EAAKuK,MAAMpC,CAAK,CAAC,CAE5B,CAEA,IAAIqG,GAAc,CAACxO,EAAMyO,EAAMC,IACtB/R,MAAMC,QAAQoD,CAAI,GAGnBrC,EAAYqC,EAAK0O,EAAG,IACpB1O,EAAK0O,GAAM7Q,QAEfmC,EAAK2O,OAAOD,EAAI,EAAG1O,EAAK2O,OAAOF,EAAM,CAAC,EAAE,EAAE,EACnCzO,GANI,GASf,SAAS4O,GAAQ5O,EAAM1D,EAAO,CAC1B,MAAO,CAAC,GAAG8E,EAAsB9E,CAAK,EAAG,GAAG8E,EAAsBpB,CAAI,CAAC,CAC3E,CAEA,SAAS6O,GAAgB7O,EAAM8O,EAAS,CACpC,IAAIC,EAAI,EACR,MAAMC,EAAO,CAAC,GAAGhP,CAAI,EACrB,UAAWmI,KAAS2G,EAChBE,EAAKL,OAAOxG,EAAQ4G,EAAG,CAAC,EACxBA,IAEJ,OAAOvR,GAAQwR,CAAI,EAAEjO,OAASiO,EAAO,CAAA,CACzC,CACA,IAAIC,GAAgB,CAACjP,EAAMmI,IAAUxK,EAAYwK,CAAK,EAChD,CAAE,EACF0G,GAAgB7O,EAAMoB,EAAsB+G,CAAK,EAAE+G,KAAK,CAACC,EAAGC,IAAMD,EAAIC,CAAC,CAAC,EAE1EC,GAAc,CAACrP,EAAMsP,EAAQC,IAAW,CACxCvP,EAAKsP,GAAU,CAACtP,EAAKuP,GAAUvP,EAAKuP,GAAUvP,EAAKsP,EAAO,EAAG,EACjE,EAEA,SAASE,GAAQtH,EAAQuH,EAAY,CACjC,MAAM1O,EAAS0O,EAAWlF,MAAM,EAAG,EAAE,EAAExJ,OACvC,IAAIoH,EAAQ,EACZ,KAAOA,EAAQpH,GACXmH,EAASvK,EAAYuK,CAAM,EAAIC,IAAUD,EAAOuH,EAAWtH,MAE/D,OAAOD,CACX,CACA,SAASwH,GAAa3R,EAAK,CACvB,UAAWM,KAAON,EACd,GAAI,CAACJ,EAAYI,EAAIM,EAAI,EACrB,MAAO,GAGf,MAAO,EACX,CACA,SAASsR,EAAMzH,EAAQlK,EAAM,CACzB,MAAM4R,EAAQjT,MAAMC,QAAQoB,CAAI,EAC1BA,EACA4J,GAAM5J,CAAI,EACN,CAACA,CAAI,EACL8J,GAAa9J,CAAI,EACrB6R,EAAcD,EAAM7O,SAAW,EAAImH,EAASsH,GAAQtH,EAAQ0H,CAAK,EACjEzH,EAAQyH,EAAM7O,OAAS,EACvB1C,EAAMuR,EAAMzH,GAClB,OAAI0H,GACA,OAAOA,EAAYxR,GAEnB8J,IAAU,IACRzL,EAASmT,CAAW,GAAKhP,EAAcgP,CAAW,GAC/ClT,MAAMC,QAAQiT,CAAW,GAAKH,GAAaG,CAAW,IAC3DF,EAAMzH,EAAQ0H,EAAMrF,MAAM,EAAG,EAAE,CAAC,EAE7BrC,CACX,CAEA,IAAI4H,GAAW,CAACC,EAAa5H,EAAO7L,KAChCyT,EAAY5H,GAAS7L,EACdyT,GAwCX,SAASC,GAAclQ,EAAO,CAC1B,MAAMyC,EAAU5C,KACV,CAAES,QAAAA,EAAUmC,EAAQnC,QAASlD,KAAAA,EAAM+S,QAAAA,EAAU,KAAMxK,iBAAAA,CAAmB,EAAG3F,EACzE,CAAC4I,EAAQwH,CAAS,EAAIzQ,EAAM+C,SAASpC,EAAQ+P,eAAejT,CAAI,CAAC,EACjEkT,EAAM3Q,EAAMoC,OAAOzB,EAAQ+P,eAAejT,CAAI,EAAE8G,IAAI+E,CAAU,CAAC,EAC/DsH,EAAY5Q,EAAMoC,OAAO6G,CAAM,EAC/BvF,EAAQ1D,EAAMoC,OAAO3E,CAAI,EACzBoT,EAAY7Q,EAAMoC,OAAO,EAAK,EACpCsB,EAAMrB,QAAU5E,EAChBmT,EAAUvO,QAAU4G,EACpBtI,EAAQuD,OAAOgC,MAAM5B,IAAI7G,CAAI,EAC7B4C,EAAMgG,OACF1F,EAAQyF,SAAS3I,EAAM4C,EAAMgG,KAAK,EACtCnE,GAAa,CACTS,KAAM,CAAC,CAAEgD,OAAAA,EAAQlI,KAAMqT,CAAgB,IAAM,CACzC,GAAIA,IAAmBpN,EAAMrB,SAAW,CAACyO,EAAgB,CACrD,MAAMR,EAAcjS,EAAIsH,EAAQjC,EAAMrB,OAAO,EACzCnF,MAAMC,QAAQmT,CAAW,IACzBG,EAAUH,CAAW,EACrBK,EAAItO,QAAUiO,EAAY/L,IAAI+E,CAAU,EAEhD,CACH,EACD7G,QAAS9B,EAAQiD,UAAUsC,KAC/B,CAAC,EACD,MAAM6K,EAAe/Q,EAAMgH,YAAagK,GAA4B,CAChEH,EAAUxO,QAAU,GACpB1B,EAAQsQ,kBAAkBxT,EAAMuT,CAAuB,CAC3D,EAAG,CAACrQ,EAASlD,CAAI,CAAC,EACZyT,EAAW,CAACrU,EAAOmN,IAAY,CACjC,MAAMmH,EAAcxP,EAAsByD,EAAYvI,CAAK,CAAC,EACtDmU,EAA0BpC,GAAOjO,EAAQ+P,eAAejT,CAAI,EAAG0T,CAAW,EAChFxQ,EAAQuD,OAAOiD,MAAQ4C,GAAkBtM,EAAMuT,EAAwB1P,OAAS,EAAG0I,CAAO,EAC1F2G,EAAItO,QAAUuM,GAAO+B,EAAItO,QAAS8O,EAAY5M,IAAI+E,CAAU,CAAC,EAC7DyH,EAAaC,CAAuB,EACpCP,EAAUO,CAAuB,EACjCrQ,EAAQsQ,kBAAkBxT,EAAMuT,EAAyBpC,GAAQ,CAC7DwC,KAAMvC,GAAehS,CAAK,CAC9B,CAAC,GAECwU,EAAY,CAACxU,EAAOmN,IAAY,CAClC,MAAMsH,EAAe3P,EAAsByD,EAAYvI,CAAK,CAAC,EACvDmU,EAA0B7B,GAAQxO,EAAQ+P,eAAejT,CAAI,EAAG6T,CAAY,EAClF3Q,EAAQuD,OAAOiD,MAAQ4C,GAAkBtM,EAAM,EAAGuM,CAAO,EACzD2G,EAAItO,QAAU8M,GAAQwB,EAAItO,QAASiP,EAAa/M,IAAI+E,CAAU,CAAC,EAC/DyH,EAAaC,CAAuB,EACpCP,EAAUO,CAAuB,EACjCrQ,EAAQsQ,kBAAkBxT,EAAMuT,EAAyB7B,GAAS,CAC9DiC,KAAMvC,GAAehS,CAAK,CAC9B,CAAC,GAEC0U,GAAU7I,GAAU,CACtB,MAAMsI,EAA0BxB,GAAc7O,EAAQ+P,eAAejT,CAAI,EAAGiL,CAAK,EACjFiI,EAAItO,QAAUmN,GAAcmB,EAAItO,QAASqG,CAAK,EAC9CqI,EAAaC,CAAuB,EACpCP,EAAUO,CAAuB,EACjCrQ,EAAQsQ,kBAAkBxT,EAAMuT,EAAyBxB,GAAe,CACpE4B,KAAM1I,CACV,CAAC,GAEC8I,GAAW,CAAC9I,EAAO7L,EAAOmN,IAAY,CACxC,MAAMyH,EAAc9P,EAAsByD,EAAYvI,CAAK,CAAC,EACtDmU,EAA0BlC,GAAOnO,EAAQ+P,eAAejT,CAAI,EAAGiL,EAAO+I,CAAW,EACvF9Q,EAAQuD,OAAOiD,MAAQ4C,GAAkBtM,EAAMiL,EAAOsB,CAAO,EAC7D2G,EAAItO,QAAUyM,GAAO6B,EAAItO,QAASqG,EAAO+I,EAAYlN,IAAI+E,CAAU,CAAC,EACpEyH,EAAaC,CAAuB,EACpCP,EAAUO,CAAuB,EACjCrQ,EAAQsQ,kBAAkBxT,EAAMuT,EAAyBlC,GAAQ,CAC7DsC,KAAM1I,EACNgJ,KAAM7C,GAAehS,CAAK,CAC9B,CAAC,GAEC8U,GAAO,CAAC9B,EAAQC,IAAW,CAC7B,MAAMkB,EAA0BrQ,EAAQ+P,eAAejT,CAAI,EAC3DmS,GAAYoB,EAAyBnB,EAAQC,CAAM,EACnDF,GAAYe,EAAItO,QAASwN,EAAQC,CAAM,EACvCiB,EAAaC,CAAuB,EACpCP,EAAUO,CAAuB,EACjCrQ,EAAQsQ,kBAAkBxT,EAAMuT,EAAyBpB,GAAa,CAClEwB,KAAMvB,EACN6B,KAAM5B,CACT,EAAE,EAAK,GAEN8B,EAAO,CAAC5C,EAAMC,IAAO,CACvB,MAAM+B,EAA0BrQ,EAAQ+P,eAAejT,CAAI,EAC3DsR,GAAYiC,EAAyBhC,EAAMC,CAAE,EAC7CF,GAAY4B,EAAItO,QAAS2M,EAAMC,CAAE,EACjC8B,EAAaC,CAAuB,EACpCP,EAAUO,CAAuB,EACjCrQ,EAAQsQ,kBAAkBxT,EAAMuT,EAAyBjC,GAAa,CAClEqC,KAAMpC,EACN0C,KAAMzC,CACT,EAAE,EAAK,GAEN4C,EAAS,CAACnJ,EAAO7L,IAAU,CAC7B,MAAM6I,EAAcN,EAAYvI,CAAK,EAC/BmU,EAA0BX,GAAS1P,EAAQ+P,eAAejT,CAAI,EAAGiL,EAAOhD,CAAW,EACzFiL,EAAItO,QAAU,CAAC,GAAG2O,CAAuB,EAAEzM,IAAI,CAACuN,EAAMxC,IAAM,CAACwC,GAAQxC,IAAM5G,EAAQY,EAAU,EAAKqH,EAAItO,QAAQiN,EAAE,EAChHyB,EAAaC,CAAuB,EACpCP,EAAU,CAAC,GAAGO,CAAuB,CAAC,EACtCrQ,EAAQsQ,kBAAkBxT,EAAMuT,EAAyBX,GAAU,CAC/De,KAAM1I,EACNgJ,KAAMhM,CACV,EAAG,GAAM,EAAK,GAEZ6C,EAAW1L,GAAU,CACvB,MAAMmU,EAA0BrP,EAAsByD,EAAYvI,CAAK,CAAC,EACxE8T,EAAItO,QAAU2O,EAAwBzM,IAAI+E,CAAU,EACpDyH,EAAa,CAAC,GAAGC,CAAuB,CAAC,EACzCP,EAAU,CAAC,GAAGO,CAAuB,CAAC,EACtCrQ,EAAQsQ,kBAAkBxT,EAAM,CAAC,GAAGuT,CAAuB,EAAIzQ,GAASA,EAAM,CAAA,EAAI,GAAM,EAAK,GAEjGP,OAAAA,EAAMsC,UAAU,IAAM,CAGlB,GAFA3B,EAAQkG,YAAYC,OAAS,GAC7B6D,GAAUlN,EAAMkD,EAAQuD,MAAM,GAAKvD,EAAQiD,UAAUC,MAAMlB,KAAK,CAAA,CAAE,EAC9DkO,EAAUxO,UACT,CAAC+H,GAAmBzJ,EAAQiG,SAASyD,IAAI,EAAEC,YACxC3J,EAAQqC,WAAW+O,aACvB,GAAIpR,EAAQiG,SAASoL,SACjBrR,EAAQsR,eAAe,CAACxU,CAAI,CAAC,EAAEyU,KAAMzT,GAAW,CAC5C,MAAMoJ,EAAQxJ,EAAII,EAAOgF,OAAQhG,CAAI,EAC/B0U,EAAgB9T,EAAIsC,EAAQqC,WAAWS,OAAQhG,CAAI,GACrD0U,EAAgB,CAACtK,GAASsK,EAAcxV,KAAOkL,GAASA,EAAMlL,QAC9DkL,EACMW,EAAI7H,EAAQqC,WAAWS,OAAQhG,EAAMoK,CAAK,EAC1CqI,EAAMvP,EAAQqC,WAAWS,OAAQhG,CAAI,EAC3CkD,EAAQiD,UAAUC,MAAMlB,KAAK,CACzBc,OAAQ9C,EAAQqC,WAAWS,MAC/B,CAAC,EAET,CAAC,MAEA,CACD,MAAM8C,EAAQlI,EAAIsC,EAAQ6F,QAAS/I,CAAI,EACnC8I,GAASA,EAAME,IACfgG,GAAclG,EAAO5F,EAAQiF,YAAajF,EAAQiG,SAASwL,eAAiBnT,EAAgBK,IAAKqB,EAAQiG,SAAS8F,0BAA2B,EAAI,EAAEwF,KAAMrK,GAAU,CAACzG,EAAcyG,CAAK,GACnLlH,EAAQiD,UAAUC,MAAMlB,KAAK,CACzBc,OAAQsH,GAA0BpK,EAAQqC,WAAWS,OAAQoE,EAAOpK,CAAI,CAC3E,CAAA,CAAC,CAEd,CAEJkD,EAAQiD,UAAUS,MAAM1B,KAAK,CACzBlF,KAAAA,EACAkI,OAAQhF,EAAQiF,WACpB,CAAC,EACDjF,EAAQuD,OAAOiD,OACX6B,GAAarI,EAAQ6F,QAAU5H,GAAQ,CAAC,CAACA,GAAOA,EAAIqD,WAAWtB,EAAQuD,OAAOiD,OAAS,EAAE,CAAC,EAC9FxG,EAAQuD,OAAOiD,MAAQ,GACvBxG,EAAQoD,aAAY,CACvB,EAAE,CAACkF,EAAQxL,EAAMkD,CAAO,CAAC,EAC1BX,EAAMsC,UAAU,KACZ,CAACjE,EAAIsC,EAAQiF,YAAanI,CAAI,GAAKkD,EAAQsQ,kBAAkBxT,CAAI,EAC1D,IAAM,EACRkD,EAAQiG,SAASZ,kBAAoBA,IAClCrF,EAAQoG,WAAWtJ,CAAI,IAEhC,CAACA,EAAMkD,EAAS6P,EAASxK,CAAgB,CAAC,EACtC,CACH2L,KAAM3R,EAAMgH,YAAY2K,GAAM,CAACZ,EAActT,EAAMkD,CAAO,CAAC,EAC3DiR,KAAM5R,EAAMgH,YAAY4K,EAAM,CAACb,EAActT,EAAMkD,CAAO,CAAC,EAC3DwO,QAASnP,EAAMgH,YAAYqK,EAAW,CAACN,EAActT,EAAMkD,CAAO,CAAC,EACnEiO,OAAQ5O,EAAMgH,YAAYkK,EAAU,CAACH,EAActT,EAAMkD,CAAO,CAAC,EACjE4Q,OAAQvR,EAAMgH,YAAYuK,GAAQ,CAACR,EAActT,EAAMkD,CAAO,CAAC,EAC/DmO,OAAQ9O,EAAMgH,YAAYwK,GAAU,CAACT,EAActT,EAAMkD,CAAO,CAAC,EACjEkR,OAAQ7R,EAAMgH,YAAY6K,EAAQ,CAACd,EAActT,EAAMkD,CAAO,CAAC,EAC/D4H,QAASvI,EAAMgH,YAAYuB,EAAS,CAACwI,EAActT,EAAMkD,CAAO,CAAC,EACjEsI,OAAQjJ,EAAMqS,QAAQ,IAAMpJ,EAAO1E,IAAI,CAACgC,EAAOmC,KAAW,CACtD,GAAGnC,EACH,CAACiK,GAAUG,EAAItO,QAAQqG,IAAUY,EAAU,CAC9C,EAAC,EAAG,CAACL,EAAQuH,CAAO,CAAC,EAE9B,CAEA,SAAS8B,IAAgB,CACrB,IAAIC,EAAa,CAAA,EAiBjB,MAAO,CACH,IAAIC,WAAY,CACZ,OAAOD,CACV,EACD5P,KApBU9F,GAAU,CACpB,UAAW4V,KAAYF,EACnBE,EAAS9P,KAAK9F,CAAK,GAmBvB6F,UAhBe+P,IACfF,EAAWG,KAAKD,CAAQ,EACjB,CACH7P,YAAa,IAAM,CACf2P,EAAaA,EAAWvU,OAAQ2U,GAAMA,IAAMF,CAAQ,CACxD,IAYJ7P,YATgB,IAAM,CACtB2P,EAAa,CAAA,GAUrB,CAEA,IAAIK,GAAe/V,GAAUE,EAAkBF,CAAK,GAAK,CAACG,GAAaH,CAAK,EAE5E,SAASgW,GAAUC,EAASC,EAAS,CACjC,GAAIH,GAAYE,CAAO,GAAKF,GAAYG,CAAO,EAC3C,OAAOD,IAAYC,EAEvB,GAAInW,GAAakW,CAAO,GAAKlW,GAAamW,CAAO,EAC7C,OAAOD,EAAQE,QAAO,IAAOD,EAAQC,QAAO,EAEhD,MAAMC,EAAQjS,OAAOK,KAAKyR,CAAO,EAC3BI,EAAQlS,OAAOK,KAAK0R,CAAO,EACjC,GAAIE,EAAM3R,SAAW4R,EAAM5R,OACvB,MAAO,GAEX,UAAW1C,KAAOqU,EAAO,CACrB,MAAME,EAAOL,EAAQlU,GACrB,GAAI,CAACsU,EAAME,SAASxU,CAAG,EACnB,MAAO,GAEX,GAAIA,IAAQ,MAAO,CACf,MAAMyU,EAAON,EAAQnU,GACrB,GAAKhC,GAAauW,CAAI,GAAKvW,GAAayW,CAAI,GACvCpW,EAASkW,CAAI,GAAKlW,EAASoW,CAAI,GAC/BnW,MAAMC,QAAQgW,CAAI,GAAKjW,MAAMC,QAAQkW,CAAI,EACxC,CAACR,GAAUM,EAAME,CAAI,EACrBF,IAASE,EACX,MAAO,EAEf,CACJ,CACA,MAAO,EACX,CAEA,IAAIC,GAAoB5W,GAAYA,EAAQC,OAAU,kBAElDsQ,GAAqBhG,GAAQyE,GAAazE,CAAG,GAAKxK,GAAgBwK,CAAG,EAErEsM,GAAQtM,GAAQmE,GAAcnE,CAAG,GAAKA,EAAIuM,YAE1CC,GAAqBlT,GAAS,CAC9B,UAAW3B,KAAO2B,EACd,GAAI4K,GAAW5K,EAAK3B,EAAI,EACpB,MAAO,GAGf,MAAO,EACX,EAEA,SAAS8U,GAAgBnT,EAAM0I,EAAS,GAAI,CACxC,MAAM0K,EAAoBzW,MAAMC,QAAQoD,CAAI,EAC5C,GAAItD,EAASsD,CAAI,GAAKoT,EAClB,UAAW/U,KAAO2B,EACVrD,MAAMC,QAAQoD,EAAK3B,EAAI,GACtB3B,EAASsD,EAAK3B,EAAI,GAAK,CAAC6U,GAAkBlT,EAAK3B,EAAI,GACpDqK,EAAOrK,GAAO1B,MAAMC,QAAQoD,EAAK3B,EAAI,EAAI,CAAE,EAAG,GAC9C8U,GAAgBnT,EAAK3B,GAAMqK,EAAOrK,EAAI,GAEhC7B,EAAkBwD,EAAK3B,EAAI,IACjCqK,EAAOrK,GAAO,IAI1B,OAAOqK,CACX,CACA,SAAS2K,GAAgCrT,EAAM4D,EAAY0P,EAAuB,CAC9E,MAAMF,EAAoBzW,MAAMC,QAAQoD,CAAI,EAC5C,GAAItD,EAASsD,CAAI,GAAKoT,EAClB,UAAW/U,KAAO2B,EACVrD,MAAMC,QAAQoD,EAAK3B,EAAI,GACtB3B,EAASsD,EAAK3B,EAAI,GAAK,CAAC6U,GAAkBlT,EAAK3B,EAAI,EAChDV,EAAYiG,CAAU,GACtByO,GAAYiB,EAAsBjV,EAAI,EACtCiV,EAAsBjV,GAAO1B,MAAMC,QAAQoD,EAAK3B,EAAI,EAC9C8U,GAAgBnT,EAAK3B,GAAM,CAAE,CAAA,EAC7B,CAAE,GAAG8U,GAAgBnT,EAAK3B,EAAI,GAGpCgV,GAAgCrT,EAAK3B,GAAM7B,EAAkBoH,CAAU,EAAI,GAAKA,EAAWvF,GAAMiV,EAAsBjV,EAAI,EAI/HiU,GAAUtS,EAAK3B,GAAMuF,EAAWvF,EAAI,EAC9B,OAAOiV,EAAsBjV,GAC5BiV,EAAsBjV,GAAO,GAIhD,OAAOiV,CACX,CACA,IAAIC,GAAiB,CAAChT,EAAeqD,IAAeyP,GAAgC9S,EAAeqD,EAAYuP,GAAgBvP,CAAU,CAAC,EAEtI4P,GAAkB,CAAClX,EAAO,CAAE+P,cAAAA,EAAeoB,YAAAA,EAAagG,WAAAA,CAAW,IAAM9V,EAAYrB,CAAK,EACxFA,EACA+P,EACI/P,IAAU,GACNoX,IACApX,GACI,CAACA,EAETmR,GAAehK,EAASnH,CAAK,EACzB,IAAIC,KAAKD,CAAK,EACdmX,EACIA,EAAWnX,CAAK,EAChBA,EAElB,SAASqX,GAAczN,EAAI,CACvB,MAAMQ,EAAMR,EAAGQ,IACf,GAAIR,EAAAA,EAAG4C,KAAO5C,EAAG4C,KAAKiD,MAAOrF,GAAQA,EAAIzE,QAAQ,EAAIyE,EAAIzE,UAGzD,OAAI0I,GAAYjE,CAAG,EACRA,EAAIkN,MAEXzI,GAAazE,CAAG,EACTkF,GAAc1F,EAAG4C,IAAI,EAAExM,MAE9ByW,GAAiBrM,CAAG,EACb,CAAC,GAAGA,EAAImN,eAAe,EAAE7P,IAAI,CAAC,CAAE1H,MAAAA,CAAO,IAAKA,CAAK,EAExDJ,GAAgBwK,CAAG,EACZ8E,GAAiBtF,EAAG4C,IAAI,EAAExM,MAE9BkX,GAAgB7V,EAAY+I,EAAIpK,KAAK,EAAI4J,EAAGQ,IAAIpK,MAAQoK,EAAIpK,MAAO4J,CAAE,CAChF,CAEA,IAAI4N,GAAqB,CAAClL,EAAa3C,EAAS4L,EAAc1F,IAA8B,CACxF,MAAMzD,EAAS,CAAA,EACf,UAAWxL,KAAQ0L,EAAa,CAC5B,MAAM5C,EAAQlI,EAAImI,EAAS/I,CAAI,EAC/B8I,GAASiC,EAAIS,EAAQxL,EAAM8I,EAAME,EAAE,CACvC,CACA,MAAO,CACH2L,aAAAA,EACAvU,MAAO,CAAC,GAAGsL,CAAW,EACtBF,OAAAA,EACAyD,0BAAAA,EAER,EAEI4H,GAAgBC,GAASrW,EAAYqW,CAAI,EACvCA,EACA5I,GAAQ4I,CAAI,EACRA,EAAKC,OACLvX,EAASsX,CAAI,EACT5I,GAAQ4I,EAAK1X,KAAK,EACd0X,EAAK1X,MAAM2X,OACXD,EAAK1X,MACT0X,EAEVE,GAAiBzK,GAAYA,EAAQtD,QACpCsD,EAAQnK,UACLmK,EAAQvK,KACRuK,EAAQxK,KACRwK,EAAQtK,WACRsK,EAAQrK,WACRqK,EAAQpK,SACRoK,EAAQlK,UAEhB,SAAS4U,GAAkBjR,EAAQ+C,EAAS/I,EAAM,CAC9C,MAAMoK,EAAQxJ,EAAIoF,EAAQhG,CAAI,EAC9B,GAAIoK,GAASM,GAAM1K,CAAI,EACnB,MAAO,CACHoK,MAAAA,EACApK,KAAAA,GAGR,MAAMI,EAAQJ,EAAKiB,MAAM,GAAG,EAC5B,KAAOb,EAAMyD,QAAQ,CACjB,MAAMkD,EAAY3G,EAAM8W,KAAK,GAAG,EAC1BpO,EAAQlI,EAAImI,EAAShC,CAAS,EAC9BoQ,EAAavW,EAAIoF,EAAQe,CAAS,EACxC,GAAI+B,GAAS,CAACrJ,MAAMC,QAAQoJ,CAAK,GAAK9I,IAAS+G,EAC3C,MAAO,CAAE/G,KAAAA,GAEb,GAAImX,GAAcA,EAAWjY,KACzB,MAAO,CACHc,KAAM+G,EACNqD,MAAO+M,GAGf/W,EAAMgX,IAAG,CACb,CACA,MAAO,CACHpX,KAAAA,EAER,CAEA,IAAIqX,GAAiB,CAAClK,EAAahD,EAAWmK,EAAagD,EAAgB1K,IACnEA,EAAKI,QACE,GAEF,CAACsH,GAAe1H,EAAKK,UACnB,EAAE9C,GAAagD,IAEjBmH,EAAcgD,EAAexK,SAAWF,EAAKE,UAC3C,CAACK,GAEHmH,EAAcgD,EAAevK,WAAaH,EAAKG,YAC7CI,EAEJ,GAGPoK,GAAkB,CAAC/N,EAAKxJ,IAAS,CAACM,GAAQM,EAAI4I,EAAKxJ,CAAI,CAAC,EAAE6D,QAAU4O,EAAMjJ,EAAKxJ,CAAI,EAEvF,MAAMwX,GAAiB,CACnB5K,KAAMpL,EAAgBG,SACtB2V,eAAgB9V,EAAgBE,SAChC+V,iBAAkB,EACtB,EACA,SAASC,GAAkB9U,EAAQ,CAAE,EAAE+U,EAAiB,CACpD,IAAIxO,EAAW,CACX,GAAGqO,GACH,GAAG5U,GAEP,MAAMgV,EAA2BhV,EAAMiV,cAAgBjV,EAAMiV,aAAaC,gBAC1E,IAAIvS,EAAa,CACbwS,YAAa,EACbrS,QAAS,GACTC,UAAW,GACXG,aAAc,GACdwO,YAAa,GACb0D,aAAc,GACdC,mBAAoB,GACpBlS,QAAS,GACTF,cAAe,CAAE,EACjBD,YAAa,CAAE,EACfI,OAAQ,CAAC,GAET+C,EAAU,CAAA,EACVzF,EAAiB9D,EAAS2J,EAAS9F,aAAa,EAC9CsE,EAAYwB,EAAS9F,aAAa,GAAK,CAAE,EACzC,GACF8E,EAAcgB,EAASZ,iBACrB,CAAA,EACAZ,EAAYrE,CAAc,EAC5B8F,EAAc,CACdC,OAAQ,GACRJ,MAAO,GACPrC,MAAO,IAEPH,EAAS,CACTwC,MAAO,IAAIpB,IACXqQ,QAAS,IAAIrQ,IACbY,MAAO,IAAIZ,IACXjB,MAAO,IAAIiB,KAEXsQ,EACAC,EAAQ,EACZ,MAAM1U,EAAkB,CACpBgC,QAAS,GACTE,YAAa,GACbC,cAAe,GACfC,aAAc,GACdC,QAAS,GACTC,OAAQ,IAENG,EAAY,CACdS,MAAOiO,GAAe,EACtBpM,MAAOoM,GAAe,EACtBzO,MAAOyO,GAAa,GAElBwD,EAA6B1L,GAAmBxD,EAASyD,IAAI,EAC7D0L,GAA4B3L,GAAmBxD,EAASmO,cAAc,EACtEiB,GAAmCpP,EAASwL,eAAiBnT,EAAgBK,IAC7E2W,GAAY/M,GAAcgN,GAAS,CACrCC,aAAaN,CAAK,EAClBA,EAAQ5Q,OAAOmR,WAAWlN,EAAUgN,CAAI,GAEtCnS,EAAe,MAAOsS,GAAsB,CAC9C,GAAIlV,EAAgBqC,SAAW6S,EAAmB,CAC9C,MAAM7S,EAAUoD,EAASoL,SACnB5Q,GAAe,MAAM6Q,KAAkBxO,MAAM,EAC7C,MAAM6S,EAAyB9P,EAAS,EAAI,EAC9ChD,IAAYR,EAAWQ,UACvBR,EAAWQ,QAAUA,EACrBI,EAAUC,MAAMlB,KAAK,CACjBa,QAAAA,CACJ,CAAC,EAET,GAEE+S,EAAuB1Z,GAAUsE,EAAgBoC,cACnDK,EAAUC,MAAMlB,KAAK,CACjBY,aAAc1G,CAClB,CAAC,EACCoU,EAAoB,CAACxT,EAAMkI,EAAS,CAAE,EAAE6Q,EAAQC,EAAMC,EAAkB,GAAMC,EAA6B,KAAS,CACtH,GAAIF,GAAQD,EAAQ,CAEhB,GADA3P,EAAYC,OAAS,GACjB6P,GAA8BzZ,MAAMC,QAAQkB,EAAImI,EAAS/I,CAAI,CAAC,EAAG,CACjE,MAAM6S,EAAckG,EAAOnY,EAAImI,EAAS/I,CAAI,EAAGgZ,EAAKrF,KAAMqF,EAAK/E,IAAI,EACnEgF,GAAmBlO,EAAIhC,EAAS/I,EAAM6S,CAAW,CACrD,CACA,GAAIqG,GACAzZ,MAAMC,QAAQkB,EAAI2E,EAAWS,OAAQhG,CAAI,CAAC,EAAG,CAC7C,MAAMgG,EAAS+S,EAAOnY,EAAI2E,EAAWS,OAAQhG,CAAI,EAAGgZ,EAAKrF,KAAMqF,EAAK/E,IAAI,EACxEgF,GAAmBlO,EAAIxF,EAAWS,OAAQhG,EAAMgG,CAAM,EACtDuR,GAAgBhS,EAAWS,OAAQhG,CAAI,CAC3C,CACA,GAAI0D,EAAgBmC,eAChBqT,GACAzZ,MAAMC,QAAQkB,EAAI2E,EAAWM,cAAe7F,CAAI,CAAC,EAAG,CACpD,MAAM6F,EAAgBkT,EAAOnY,EAAI2E,EAAWM,cAAe7F,CAAI,EAAGgZ,EAAKrF,KAAMqF,EAAK/E,IAAI,EACtFgF,GAAmBlO,EAAIxF,EAAWM,cAAe7F,EAAM6F,CAAa,CACxE,CACInC,EAAgBkC,cAChBL,EAAWK,YAAcyQ,GAAe/S,EAAgB6E,CAAW,GAEvEhC,EAAUC,MAAMlB,KAAK,CACjBlF,KAAAA,EACA0F,QAASW,EAAUrG,EAAMkI,CAAM,EAC/BtC,YAAaL,EAAWK,YACxBI,OAAQT,EAAWS,OACnBD,QAASR,EAAWQ,OACxB,CAAC,CACL,MAEIgF,EAAI5C,EAAanI,EAAMkI,CAAM,GAG/BiR,EAAe,CAACnZ,EAAMoK,IAAU,CAClCW,EAAIxF,EAAWS,OAAQhG,EAAMoK,CAAK,EAClCjE,EAAUC,MAAMlB,KAAK,CACjBc,OAAQT,EAAWS,MACvB,CAAC,GAECoT,EAAsB,CAACpZ,EAAMqZ,EAAsBja,EAAOoK,IAAQ,CACpE,MAAMV,EAAQlI,EAAImI,EAAS/I,CAAI,EAC/B,GAAI8I,EAAO,CACP,MAAM/H,EAAeH,EAAIuH,EAAanI,EAAMS,EAAYrB,CAAK,EAAIwB,EAAI0C,EAAgBtD,CAAI,EAAIZ,CAAK,EAClGqB,EAAYM,CAAY,GACnByI,GAAOA,EAAI8P,gBACZD,EACEtO,EAAI5C,EAAanI,EAAMqZ,EAAuBtY,EAAe0V,GAAc3N,EAAME,EAAE,CAAC,EACpFuQ,EAAcvZ,EAAMe,CAAY,EACtCqI,EAAYH,OAAS3C,GACzB,GAEEkT,EAAsB,CAACxZ,EAAMyZ,EAAYtM,EAAauM,EAAaC,IAAiB,CACtF,IAAIC,EAAoB,GACpBC,EAAkB,GACtB,MAAMC,EAAS,CACX9Z,KAAAA,GAEJ,GAAI,CAACmN,GAAeuM,EAAa,CACzBhW,EAAgBgC,UAChBmU,EAAkBtU,EAAWG,QAC7BH,EAAWG,QAAUoU,EAAOpU,QAAUW,EAAS,EAC/CuT,EAAoBC,IAAoBC,EAAOpU,SAEnD,MAAMqU,EAAyB3E,GAAUxU,EAAI0C,EAAgBtD,CAAI,EAAGyZ,CAAU,EAC9EI,EAAkBjZ,EAAI2E,EAAWK,YAAa5F,CAAI,EAClD+Z,EACMtH,EAAMlN,EAAWK,YAAa5F,CAAI,EAClC+K,EAAIxF,EAAWK,YAAa5F,EAAM,EAAI,EAC5C8Z,EAAOlU,YAAcL,EAAWK,YAChCgU,EACIA,GACKlW,EAAgBkC,aACbiU,IAAoB,CAACE,CACrC,CACA,GAAI5M,EAAa,CACb,MAAM6M,EAAyBpZ,EAAI2E,EAAWM,cAAe7F,CAAI,EAC5Dga,IACDjP,EAAIxF,EAAWM,cAAe7F,EAAMmN,CAAW,EAC/C2M,EAAOjU,cAAgBN,EAAWM,cAClC+T,EACIA,GACKlW,EAAgBmC,eACbmU,IAA2B7M,EAE/C,CACAyM,OAAAA,GAAqBD,GAAgBxT,EAAUC,MAAMlB,KAAK4U,CAAM,EACzDF,EAAoBE,EAAS,IAElCG,EAAsB,CAACja,EAAM+F,EAASqE,EAAOL,IAAe,CAC9D,MAAMmQ,EAAqBtZ,EAAI2E,EAAWS,OAAQhG,CAAI,EAChD4Y,EAAoBlV,EAAgBqC,SACtCyH,GAAUzH,CAAO,GACjBR,EAAWQ,UAAYA,EAY3B,GAXInD,EAAMuX,YAAc/P,GACpB+N,EAAqBK,GAAS,IAAMW,EAAanZ,EAAMoK,CAAK,CAAC,EAC7D+N,EAAmBvV,EAAMuX,UAAU,IAGnCzB,aAAaN,CAAK,EAClBD,EAAqB,KACrB/N,EACMW,EAAIxF,EAAWS,OAAQhG,EAAMoK,CAAK,EAClCqI,EAAMlN,EAAWS,OAAQhG,CAAI,IAElCoK,EAAQ,CAACgL,GAAU8E,EAAoB9P,CAAK,EAAI8P,IACjD,CAACvW,EAAcoG,CAAU,GACzB6O,EAAmB,CACnB,MAAMwB,EAAmB,CACrB,GAAGrQ,EACH,GAAI6O,GAAqBpL,GAAUzH,CAAO,EAAI,CAAEA,QAAAA,CAAS,EAAG,GAC5DC,OAAQT,EAAWS,OACnBhG,KAAAA,GAEJuF,EAAa,CACT,GAAGA,EACH,GAAG6U,GAEPjU,EAAUC,MAAMlB,KAAKkV,CAAgB,CACzC,CACAtB,EAAoB,EAAK,GAEvBtE,EAAiB,MAAOxU,GAAS,MAAMmJ,EAASoL,SAASpM,EAAagB,EAASkR,QAASzD,GAAmB5W,GAAQyG,EAAOwC,MAAOF,EAASI,EAASwL,aAAcxL,EAAS8F,yBAAyB,CAAC,EACpMqL,EAA8B,MAAOla,GAAU,CACjD,KAAM,CAAE4F,OAAAA,GAAW,MAAMwO,EAAc,EACvC,GAAIpU,EACA,UAAWJ,KAAQI,EAAO,CACtB,MAAMgK,EAAQxJ,EAAIoF,EAAQhG,CAAI,EAC9BoK,EACMW,EAAIxF,EAAWS,OAAQhG,EAAMoK,CAAK,EAClCqI,EAAMlN,EAAWS,OAAQhG,CAAI,CACvC,MAGAuF,EAAWS,OAASA,EAExB,OAAOA,GAEL6S,EAA2B,MAAOrN,EAAQ+O,EAAsBF,EAAU,CAC5EG,MAAO,EACX,IAAM,CACF,UAAWxa,KAAQwL,EAAQ,CACvB,MAAM1C,EAAQ0C,EAAOxL,GACrB,GAAI8I,EAAO,CACP,KAAM,CAAEE,GAAAA,KAAOyQ,CAAY,EAAG3Q,EAC9B,GAAIE,EAAI,CACJ,MAAMyR,EAAmBhU,EAAOgC,MAAMpI,IAAI2I,EAAGhJ,IAAI,EAC3C0a,EAAa,MAAM1L,GAAclG,EAAOX,EAAaoQ,GAAkCpP,EAAS8F,0BAA2BwL,CAAgB,EACjJ,GAAIC,EAAW1R,EAAGhJ,QACdqa,EAAQG,MAAQ,GACZD,GACA,MAGR,CAACA,IACI3Z,EAAI8Z,EAAY1R,EAAGhJ,IAAI,EAClBya,EACInN,GAA0B/H,EAAWS,OAAQ0U,EAAY1R,EAAGhJ,IAAI,EAChE+K,EAAIxF,EAAWS,OAAQgD,EAAGhJ,KAAM0a,EAAW1R,EAAGhJ,KAAK,EACvDyS,EAAMlN,EAAWS,OAAQgD,EAAGhJ,IAAI,EAC9C,CACAyZ,GACK,MAAMZ,EAAyBY,EAAYc,EAAsBF,CAAO,CACjF,CACJ,CACA,OAAOA,EAAQG,OAEbnS,EAAmB,IAAM,CAC3B,UAAWrI,KAAQyG,EAAOyR,QAAS,CAC/B,MAAMpP,EAAQlI,EAAImI,EAAS/I,CAAI,EAC/B8I,IACKA,EAAME,GAAG4C,KACJ9C,EAAME,GAAG4C,KAAKiD,MAAOrF,GAAQ,CAACsM,GAAKtM,CAAG,CAAC,EACvC,CAACsM,GAAKhN,EAAME,GAAGQ,GAAG,IACxBF,GAAWtJ,CAAI,CACvB,CACAyG,EAAOyR,QAAU,IAAIrQ,KAEnBxB,EAAY,CAACrG,EAAM8C,KAAU9C,GAAQ8C,GAAQiI,EAAI5C,EAAanI,EAAM8C,CAAI,EAC1E,CAACsS,GAAUuF,GAAW,EAAErX,CAAc,GACpC8E,EAAY,CAAChI,EAAOW,EAAc4F,IAAaH,GAAoBpG,EAAOqG,EAAQ,CACpF,GAAI2C,EAAYH,MACVd,EACA1H,EAAYM,CAAY,EACpBuC,EACAiD,EAASnG,CAAK,EACV,CAAE,CAACA,GAAQW,CAAc,EACzBA,CAClB,EAAG4F,EAAU5F,CAAY,EACnBkS,EAAkBjT,GAASM,GAAQM,EAAIwI,EAAYH,MAAQd,EAAc7E,EAAgBtD,EAAM4C,EAAM2F,iBAAmB3H,EAAI0C,EAAgBtD,EAAM,EAAE,EAAI,CAAE,CAAA,CAAC,EAC3JuZ,EAAgB,CAACvZ,EAAMZ,EAAOmN,EAAU,CAAA,IAAO,CACjD,MAAMzD,EAAQlI,EAAImI,EAAS/I,CAAI,EAC/B,IAAIyZ,EAAara,EACjB,GAAI0J,EAAO,CACP,MAAM8R,EAAiB9R,EAAME,GACzB4R,IACA,CAACA,EAAe7V,UACZgG,EAAI5C,EAAanI,EAAMsW,GAAgBlX,EAAOwb,CAAc,CAAC,EACjEnB,EACI9L,GAAciN,EAAepR,GAAG,GAAKlK,EAAkBF,CAAK,EACtD,GACAA,EACNyW,GAAiB+E,EAAepR,GAAG,EACnC,CAAC,GAAGoR,EAAepR,IAAI+C,OAAO,EAAEsO,QAASC,GAAeA,EAAUC,SAAWtB,EAAW9D,SAASmF,EAAU1b,KAAK,CAAE,EAE7Gwb,EAAehP,KAChB5M,GAAgB4b,EAAepR,GAAG,EAClCoR,EAAehP,KAAK/H,OAAS,EACvB+W,EAAehP,KAAKiP,QAASG,IAAiB,CAACA,EAAY1B,gBAAkB,CAAC0B,EAAYjW,YACvFiW,EAAYlb,QAAUL,MAAMC,QAAQ+Z,CAAU,EACzC,CAAC,CAACA,EAAWxV,KAAMnB,GAASA,IAASkY,EAAY5b,KAAK,EACtDqa,IAAeuB,EAAY5b,MAAM,EACzCwb,EAAehP,KAAK,KACjBgP,EAAehP,KAAK,GAAG9L,QAAU,CAAC,CAAC2Z,GAG5CmB,EAAehP,KAAKiP,QAASI,GAAcA,EAASnb,QAAUmb,EAAS7b,QAAUqa,CAAW,EAG3FhM,GAAYmN,EAAepR,GAAG,EACnCoR,EAAepR,IAAIpK,MAAQ,IAG3Bwb,EAAepR,IAAIpK,MAAQqa,EACtBmB,EAAepR,IAAItK,MACpBiH,EAAUS,MAAM1B,KAAK,CACjBlF,KAAAA,CACJ,CAAC,GAIjB,EACCuM,EAAQmN,aAAenN,EAAQ2O,cAC5B1B,EAAoBxZ,EAAMyZ,EAAYlN,EAAQ2O,YAAa3O,EAAQmN,YAAa,EAAI,EACxFnN,EAAQ4O,gBAAkBC,GAAQpb,CAAI,GAEpCqb,EAAY,CAACrb,EAAMZ,EAAOmN,IAAY,CACxC,UAAW+O,KAAYlc,EAAO,CAC1B,MAAMqa,EAAara,EAAMkc,GACnBvU,EAAa,GAAE/G,KAAQsb,IACvBxS,EAAQlI,EAAImI,EAAShC,CAAS,GACnCN,EAAOgC,MAAMpI,IAAIL,CAAI,GAClB,CAACmV,GAAYsE,CAAU,GACtB3Q,GAAS,CAACA,EAAME,KACjB,CAAC7J,GAAasa,CAAU,EACtB4B,EAAUtU,EAAW0S,EAAYlN,CAAO,EACxCgN,EAAcxS,EAAW0S,EAAYlN,CAAO,CACtD,GAEEgP,GAAW,CAACvb,EAAMZ,EAAOmN,EAAU,CAAA,IAAO,CAC5C,MAAMzD,EAAQlI,EAAImI,EAAS/I,CAAI,EACzBkP,EAAezI,EAAOgC,MAAMpI,IAAIL,CAAI,EACpCwb,EAAa7T,EAAYvI,CAAK,EACpC2L,EAAI5C,EAAanI,EAAMwb,CAAU,EAC7BtM,GACA/I,EAAUsC,MAAMvD,KAAK,CACjBlF,KAAAA,EACAkI,OAAQC,CACZ,CAAC,GACIzE,EAAgBgC,SAAWhC,EAAgBkC,cAC5C2G,EAAQmN,cACRnU,EAAWK,YAAcyQ,GAAe/S,EAAgB6E,CAAW,EACnEhC,EAAUC,MAAMlB,KAAK,CACjBlF,KAAAA,EACA4F,YAAaL,EAAWK,YACxBF,QAASW,EAAUrG,EAAMwb,CAAU,CACvC,CAAC,IAIL1S,GAAS,CAACA,EAAME,IAAM,CAAC1J,EAAkBkc,CAAU,EAC7CH,EAAUrb,EAAMwb,EAAYjP,CAAO,EACnCgN,EAAcvZ,EAAMwb,EAAYjP,CAAO,EAEjDW,GAAUlN,EAAMyG,CAAM,GAAKN,EAAUC,MAAMlB,KAAK,CAAA,CAAE,EAClDiB,EAAUS,MAAM1B,KAAK,CACjBlF,KAAAA,CACJ,CAAC,EACD,CAACoJ,EAAYH,OAAS0O,KAEpBjW,GAAW,MAAO9B,GAAU,CAC9B,MAAMC,EAASD,EAAMC,OACrB,IAAIG,EAAOH,EAAOG,KAClB,MAAM8I,EAAQlI,EAAImI,EAAS/I,CAAI,EACzByb,EAAuB,IAAM5b,EAAOX,KAAOuX,GAAc3N,EAAME,EAAE,EAAIrJ,GAAcC,CAAK,EAC9F,GAAIkJ,EAAO,CACP,IAAIsB,EACArE,EACJ,MAAM0T,EAAagC,IACbtO,EAAcvN,EAAMV,OAASkC,GAAOC,MAAQzB,EAAMV,OAASkC,GAAOE,UAClEoa,GAAwB,CAAC1E,GAAclO,EAAME,EAAE,GACjD,CAACG,EAASoL,UACV,CAAC3T,EAAI2E,EAAWS,OAAQhG,CAAI,GAC5B,CAAC8I,EAAME,GAAG2S,MACVtE,GAAelK,EAAavM,EAAI2E,EAAWM,cAAe7F,CAAI,EAAGuF,EAAW+O,YAAagE,GAA2BD,CAA0B,EAC5IuD,GAAU1O,GAAUlN,EAAMyG,EAAQ0G,CAAW,EACnDpC,EAAI5C,EAAanI,EAAMyZ,CAAU,EAC7BtM,GACArE,EAAME,GAAGvH,QAAUqH,EAAME,GAAGvH,OAAO7B,CAAK,EACxCuY,GAAsBA,EAAmB,CAAC,GAErCrP,EAAME,GAAGtH,UACdoH,EAAME,GAAGtH,SAAS9B,CAAK,EAE3B,MAAMmK,GAAayP,EAAoBxZ,EAAMyZ,EAAYtM,EAAa,EAAK,EACrEwM,GAAe,CAAChW,EAAcoG,EAAU,GAAK6R,GAMnD,GALA,CAACzO,GACGhH,EAAUS,MAAM1B,KAAK,CACjBlF,KAAAA,EACAd,KAAMU,EAAMV,IAChB,CAAC,EACDwc,GACAhY,OAAAA,EAAgBqC,SAAWO,IACnBqT,IACJxT,EAAUC,MAAMlB,KAAK,CAAElF,KAAAA,EAAM,GAAI4b,GAAU,CAAE,EAAG7R,EAAY,CAAC,EAIrE,GAFA,CAACoD,GAAeyO,IAAWzV,EAAUC,MAAMlB,KAAK,CAAA,CAAE,EAClD4T,EAAoB,EAAI,EACpB3P,EAASoL,SAAU,CACnB,KAAM,CAAEvO,OAAAA,EAAQ,EAAG,MAAMwO,EAAe,CAACxU,CAAI,CAAC,EACxC6b,GAA4B5E,GAAkB1R,EAAWS,OAAQ+C,EAAS/I,CAAI,EAC9E8b,GAAoB7E,GAAkBjR,GAAQ+C,EAAS8S,GAA0B7b,MAAQA,CAAI,EACnGoK,EAAQ0R,GAAkB1R,MAC1BpK,EAAO8b,GAAkB9b,KACzB+F,EAAUpC,EAAcqC,EAAM,CAClC,MAEIoE,GAAS,MAAM4E,GAAclG,EAAOX,EAAaoQ,GAAkCpP,EAAS8F,yBAAyB,GAAGjP,GACpHoK,EACArE,EAAU,GAELrC,EAAgBqC,UACrBA,EAAU,MAAM8S,EAAyB9P,EAAS,EAAI,GAG9DD,EAAME,GAAG2S,MACLP,GAAQtS,EAAME,GAAG2S,IAAI,EACzB1B,EAAoBja,EAAM+F,EAASqE,EAAOL,EAAU,CACxD,GAEEqR,GAAU,MAAOpb,EAAMuM,EAAU,CAAA,IAAO,CAC1C,IAAIxG,EACAmL,EACJ,MAAM6K,EAAa7X,EAAsBlE,CAAI,EAE7C,GADA8Y,EAAoB,EAAI,EACpB3P,EAASoL,SAAU,CACnB,MAAMvO,EAAS,MAAMsU,EAA4B7Z,EAAYT,CAAI,EAAIA,EAAO+b,CAAU,EACtFhW,EAAUpC,EAAcqC,CAAM,EAC9BkL,EAAmBlR,EACb,CAAC+b,EAAWzX,KAAMtE,GAASY,EAAIoF,EAAQhG,CAAI,CAAC,EAC5C+F,CACT,MACQ/F,GACLkR,GAAoB,MAAM8K,QAAQna,IAAIka,EAAWjV,IAAI,MAAOC,GAAc,CACtE,MAAM+B,EAAQlI,EAAImI,EAAShC,CAAS,EACpC,OAAO,MAAM8R,EAAyB/P,GAASA,EAAME,GAAK,CAAE,CAACjC,GAAY+B,CAAO,EAAGA,CAAK,CAC5F,CAAC,CAAC,GAAG+F,MAAMrO,OAAO,EAClB,EAAE,CAAC0Q,GAAoB,CAAC3L,EAAWQ,UAAYO,EAAY,GAG3D4K,EAAmBnL,EAAU,MAAM8S,EAAyB9P,CAAO,EAEvE5C,OAAAA,EAAUC,MAAMlB,KAAK,CACjB,GAAI,CAACqB,EAASvG,CAAI,GACb0D,EAAgBqC,SAAWA,IAAYR,EAAWQ,QACjD,GACA,CAAE/F,KAAAA,CAAK,EACb,GAAImJ,EAASoL,UAAY,CAACvU,EAAO,CAAE+F,QAAAA,CAAS,EAAG,GAC/CC,OAAQT,EAAWS,OACnBF,aAAc,EAClB,CAAC,EACDyG,EAAQC,aACJ,CAAC0E,GACD3F,GAAaxC,EAAU5H,GAAQA,GAAOP,EAAI2E,EAAWS,OAAQ7E,CAAG,EAAGnB,EAAO+b,EAAatV,EAAOwC,KAAK,EAChGiI,GAELyJ,GAAaoB,GAAe,CAC9B,MAAM7T,EAAS,CACX,GAAG5E,EACH,GAAI8F,EAAYH,MAAQd,EAAc,IAE1C,OAAO1H,EAAYsb,CAAU,EACvB7T,EACA3B,EAASwV,CAAU,EACfnb,EAAIsH,EAAQ6T,CAAU,EACtBA,EAAWjV,IAAK9G,GAASY,EAAIsH,EAAQlI,CAAI,CAAC,GAElDic,GAAgB,CAACjc,EAAMiD,KAAe,CACxCgH,QAAS,CAAC,CAACrJ,GAAKqC,GAAasC,GAAYS,OAAQhG,CAAI,EACrD0F,QAAS,CAAC,CAAC9E,GAAKqC,GAAasC,GAAYK,YAAa5F,CAAI,EAC1DmK,UAAW,CAAC,CAACvJ,GAAKqC,GAAasC,GAAYM,cAAe7F,CAAI,EAC9DoK,MAAOxJ,GAAKqC,GAAasC,GAAYS,OAAQhG,CAAI,CACrD,GACMkc,GAAelc,GAAS,CAC1BA,EACMkE,EAAsBlE,CAAI,EAAE6a,QAASsB,GAAc1J,EAAMlN,EAAWS,OAAQmW,CAAS,CAAC,EACrF5W,EAAWS,OAAS,CAAA,EAC3BG,EAAUC,MAAMlB,KAAK,CACjBc,OAAQT,EAAWS,MACvB,CAAC,GAECoW,GAAW,CAACpc,EAAMoK,EAAOmC,IAAY,CACvC,MAAM/C,GAAO5I,EAAImI,EAAS/I,EAAM,CAAEgJ,GAAI,CAAC,CAAE,CAAC,EAAEA,IAAM,CAAE,GAAEQ,IACtDuB,EAAIxF,EAAWS,OAAQhG,EAAM,CACzB,GAAGoK,EACHZ,IAAAA,CACJ,CAAC,EACDrD,EAAUC,MAAMlB,KAAK,CACjBlF,KAAAA,EACAgG,OAAQT,EAAWS,OACnBD,QAAS,EACb,CAAC,EACDwG,GAAWA,EAAQC,aAAehD,GAAOA,EAAIE,OAASF,EAAIE,SAExD9C,GAAQ,CAAC5G,EAAMe,IAAiB2M,GAAW1N,CAAI,EAC/CmG,EAAUS,MAAM3B,UAAU,CACxBC,KAAOmX,GAAYrc,EAAKoI,EAAUzH,OAAWI,CAAY,EAAGsb,CAAO,CACtE,CAAA,EACCjU,EAAUpI,EAAMe,EAAc,EAAI,EAClCuI,GAAa,CAACtJ,EAAMuM,EAAU,CAAA,IAAO,CACvC,UAAWxF,KAAa/G,EAAOkE,EAAsBlE,CAAI,EAAIyG,EAAOwC,MAChExC,EAAOwC,MAAMqT,OAAOvV,CAAS,EAC7BN,EAAOgC,MAAM6T,OAAOvV,CAAS,EACzBnG,EAAImI,EAAShC,CAAS,IACjBwF,EAAQgQ,YACT9J,EAAM1J,EAAShC,CAAS,EACxB0L,EAAMtK,EAAapB,CAAS,GAEhC,CAACwF,EAAQiQ,WAAa/J,EAAMlN,EAAWS,OAAQe,CAAS,EACxD,CAACwF,EAAQkQ,WAAahK,EAAMlN,EAAWK,YAAamB,CAAS,EAC7D,CAACwF,EAAQmQ,aAAejK,EAAMlN,EAAWM,cAAekB,CAAS,EACjE,CAACoC,EAASZ,kBACN,CAACgE,EAAQoQ,kBACTlK,EAAMnP,EAAgByD,CAAS,GAG3CZ,EAAUS,MAAM1B,KAAK,CAAA,CAAE,EACvBiB,EAAUC,MAAMlB,KAAK,CACjB,GAAGK,EACH,GAAKgH,EAAQkQ,UAAiB,CAAE/W,QAASW,EAAS,GAAzB,EAC7B,CAAC,EACD,CAACkG,EAAQqQ,aAAetW,KAEtBqC,GAAW,CAAC3I,EAAMuM,EAAU,CAAA,IAAO,CACrC,IAAIzD,EAAQlI,EAAImI,EAAS/I,CAAI,EAC7B,MAAM6c,EAAoBrP,GAAUjB,EAAQxH,QAAQ,EACpDgG,OAAAA,EAAIhC,EAAS/I,EAAM,CACf,GAAI8I,GAAS,CAAA,EACbE,GAAI,CACA,GAAIF,GAASA,EAAME,GAAKF,EAAME,GAAK,CAAEQ,IAAK,CAAExJ,KAAAA,CAAK,CAAE,EACnDA,KAAAA,EACAiJ,MAAO,GACP,GAAGsD,CACP,CACJ,CAAC,EACD9F,EAAOwC,MAAMpC,IAAI7G,CAAI,EACrB8I,EACM+T,GACE9R,EAAI5C,EAAanI,EAAMuM,EAAQxH,SACzBpE,OACAC,EAAIuH,EAAanI,EAAMyW,GAAc3N,EAAME,EAAE,CAAC,CAAC,EACvDoQ,EAAoBpZ,EAAM,GAAMuM,EAAQnN,KAAK,EAC5C,CACH,GAAIyd,EAAoB,CAAE9X,SAAUwH,EAAQxH,QAAU,EAAG,GACzD,GAAIoE,EAAS8F,0BACP,CACE7M,SAAU,CAAC,CAACmK,EAAQnK,SACpBJ,IAAK6U,GAAatK,EAAQvK,GAAG,EAC7BD,IAAK8U,GAAatK,EAAQxK,GAAG,EAC7BG,UAAW2U,GAAatK,EAAQrK,SAAS,EACzCD,UAAW4U,GAAatK,EAAQtK,SAAS,EACzCE,QAAS0U,GAAatK,EAAQpK,OAAO,CACxC,EACC,GACNnC,KAAAA,EACA0B,SAAAA,GACAD,OAAQC,GACR8H,IAAMA,GAAQ,CACV,GAAIA,EAAK,CACLb,GAAS3I,EAAMuM,CAAO,EACtBzD,EAAQlI,EAAImI,EAAS/I,CAAI,EACzB,MAAM8c,EAAWrc,EAAY+I,EAAIpK,KAAK,GAChCoK,EAAIuT,kBACAvT,EAAIuT,iBAAiB,uBAAuB,EAAE,IAAMvT,EAGxDwT,EAAkBxN,GAAkBsN,CAAQ,EAC5ClR,EAAO9C,EAAME,GAAG4C,MAAQ,CAAA,EAC9B,GAAIoR,EACEpR,EAAK3H,KAAMsK,GAAWA,IAAWuO,CAAQ,EACzCA,IAAahU,EAAME,GAAGQ,IACxB,OAEJuB,EAAIhC,EAAS/I,EAAM,CACfgJ,GAAI,CACA,GAAGF,EAAME,GACT,GAAIgU,EACE,CACEpR,KAAM,CACF,GAAGA,EAAKrL,OAAOuV,EAAI,EACnBgH,EACA,GAAIrd,MAAMC,QAAQkB,EAAI0C,EAAgBtD,CAAI,CAAC,EAAI,CAAC,CAAE,CAAA,EAAI,CAAA,CAAG,EAE7DwJ,IAAK,CAAEtK,KAAM4d,EAAS5d,KAAMc,KAAAA,CAAK,CACrC,EACE,CAAEwJ,IAAKsT,EACjB,CACJ,CAAC,EACD1D,EAAoBpZ,EAAM,GAAOW,OAAWmc,CAAQ,CACxD,MAEIhU,EAAQlI,EAAImI,EAAS/I,EAAM,CAAE,CAAA,EACzB8I,EAAME,KACNF,EAAME,GAAGC,MAAQ,KAEpBE,EAASZ,kBAAoBgE,EAAQhE,mBAClC,EAAEpI,GAAmBsG,EAAOgC,MAAOzI,CAAI,GAAKoJ,EAAYC,SACxD5C,EAAOyR,QAAQrR,IAAI7G,CAAI,CAEnC,IAGFid,GAAc,IAAM9T,EAASsO,kBAC/BlM,GAAaxC,EAAU5H,GAAQA,GAAOP,EAAI2E,EAAWS,OAAQ7E,CAAG,EAAGsF,EAAOwC,KAAK,EAC7EiU,GAAe,CAACC,EAASC,IAAc,MAAOC,GAAM,CAClDA,IACAA,EAAEC,gBAAkBD,EAAEC,iBACtBD,EAAEE,SAAWF,EAAEE,WAEnB,IAAI1K,EAAclL,EAAYQ,CAAW,EAIzC,GAHAhC,EAAUC,MAAMlB,KAAK,CACjB8S,aAAc,EAClB,CAAC,EACG7O,EAASoL,SAAU,CACnB,KAAM,CAAEvO,OAAAA,EAAQkC,OAAAA,GAAW,MAAMsM,EAAc,EAC/CjP,EAAWS,OAASA,EACpB6M,EAAc3K,CAClB,MAEI,MAAM2Q,EAAyB9P,CAAO,EAEtCpF,EAAc4B,EAAWS,MAAM,GAC/BG,EAAUC,MAAMlB,KAAK,CACjBc,OAAQ,CAAC,CACb,CAAC,EACD,MAAMmX,EAAQtK,EAAawK,CAAC,IAGxBD,GACA,MAAMA,EAAU,CAAE,GAAG7X,EAAWS,MAAQ,EAAEqX,CAAC,EAE/CJ,MAEJ9W,EAAUC,MAAMlB,KAAK,CACjBoP,YAAa,GACb0D,aAAc,GACdC,mBAAoBtU,EAAc4B,EAAWS,MAAM,EACnD+R,YAAaxS,EAAWwS,YAAc,EACtC/R,OAAQT,EAAWS,MACvB,CAAC,GAECwX,GAAa,CAACxd,EAAMuM,EAAU,CAAA,IAAO,CACnC3L,EAAImI,EAAS/I,CAAI,IACbS,EAAY8L,EAAQxL,YAAY,EAChCwa,GAASvb,EAAMY,EAAI0C,EAAgBtD,CAAI,CAAC,GAGxCub,GAASvb,EAAMuM,EAAQxL,YAAY,EACnCgK,EAAIzH,EAAgBtD,EAAMuM,EAAQxL,YAAY,GAE7CwL,EAAQmQ,aACTjK,EAAMlN,EAAWM,cAAe7F,CAAI,EAEnCuM,EAAQkQ,YACThK,EAAMlN,EAAWK,YAAa5F,CAAI,EAClCuF,EAAWG,QAAU6G,EAAQxL,aACvBsF,EAAUrG,EAAMY,EAAI0C,EAAgBtD,CAAI,CAAC,EACzCqG,EAAS,GAEdkG,EAAQiQ,YACT/J,EAAMlN,EAAWS,OAAQhG,CAAI,EAC7B0D,EAAgBqC,SAAWO,KAE/BH,EAAUC,MAAMlB,KAAK,CAAE,GAAGK,CAAW,CAAC,IAGxCkY,GAAS,CAAC/W,EAAYgX,EAAmB,CAAA,IAAO,CAClD,MAAMC,EAAgBjX,GAAcpD,EAC9Bsa,EAAqBjW,EAAYgW,CAAa,EAC9CzV,EAASxB,GAAc,CAAC/C,EAAc+C,CAAU,EAChDkX,EACAta,EAIN,GAHKoa,EAAiBG,oBAClBva,EAAiBqa,GAEjB,CAACD,EAAiBI,WAAY,CAC9B,GAAIJ,EAAiB5F,iBAAmBF,EACpC,UAAW7Q,KAAaN,EAAOwC,MAC3BrI,EAAI2E,EAAWK,YAAamB,CAAS,EAC/BgE,EAAI7C,EAAQnB,EAAWnG,EAAIuH,EAAapB,CAAS,CAAC,EAClDwU,GAASxU,EAAWnG,EAAIsH,EAAQnB,CAAS,CAAC,MAGnD,CACD,GAAIQ,IAAS9G,EAAYiG,CAAU,EAC/B,UAAW1G,KAAQyG,EAAOwC,MAAO,CAC7B,MAAMH,EAAQlI,EAAImI,EAAS/I,CAAI,EAC/B,GAAI8I,GAASA,EAAME,GAAI,CACnB,MAAM4R,EAAiBnb,MAAMC,QAAQoJ,EAAME,GAAG4C,IAAI,EAC5C9C,EAAME,GAAG4C,KAAK,GACd9C,EAAME,GAAGQ,IACf,GAAImE,GAAciN,CAAc,EAAG,CAC/B,MAAMmD,EAAOnD,EAAeoD,QAAQ,MAAM,EAC1C,GAAID,EAAM,CACNA,EAAKE,MAAK,EACV,KACJ,CACJ,CACJ,CACJ,CAEJlV,EAAU,CAAA,CACd,CACAZ,EAAcvF,EAAM2F,iBACdmV,EAAiBG,kBACblW,EAAYrE,CAAc,EAC1B,CAAE,EACNsa,EACNzX,EAAUsC,MAAMvD,KAAK,CACjBgD,OAAAA,CACJ,CAAC,EACD/B,EAAUS,MAAM1B,KAAK,CACjBgD,OAAAA,CACJ,CAAC,CACL,CACAzB,EAAS,CACLwC,MAAO,IAAIpB,IACXqQ,QAAS,IAAIrQ,IACbY,MAAO,IAAIZ,IACXjB,MAAO,IAAIiB,IACXb,SAAU,GACV0C,MAAO,IAEX,CAACN,EAAYH,OAAS0O,IACtBvO,EAAYH,MACR,CAACvF,EAAgBqC,SAAW,CAAC,CAAC2X,EAAiBd,YACnDxT,EAAYxC,MAAQ,CAAC,CAAChE,EAAM2F,iBAC5BpC,EAAUC,MAAMlB,KAAK,CACjB6S,YAAa2F,EAAiBQ,gBACxB3Y,EAAWwS,YACX,EACNrS,QAASgY,EAAiBjB,WAAaiB,EAAiB5F,gBAClDvS,EAAWG,QACX,CAAC,EAAEgY,EAAiBG,mBAClB,CAACzI,GAAU1O,EAAYpD,CAAc,GAC7CgR,YAAaoJ,EAAiBS,gBACxB5Y,EAAW+O,YACX,GACN1O,YAAa8X,EAAiBjB,WAAaiB,EAAiB5F,gBACtDvS,EAAWK,YACX8X,EAAiBG,mBAAqBnX,EAClC2P,GAAe/S,EAAgBoD,CAAU,EACzC,CAAE,EACZb,cAAe6X,EAAiBhB,YAC1BnX,EAAWM,cACX,CAAE,EACRG,OAAQ0X,EAAiBU,WAAa7Y,EAAWS,OAAS,CAAE,EAC5DgS,aAAc,GACdC,mBAAoB,EACxB,CAAC,GAECgG,GAAQ,CAACvX,EAAYgX,IAAqBD,GAAO/P,GAAWhH,CAAU,EACtEA,EAAWyB,CAAW,EACtBzB,EAAYgX,CAAgB,EAC5BW,GAAW,CAACre,EAAMuM,EAAU,CAAA,IAAO,CACrC,MAAMzD,EAAQlI,EAAImI,EAAS/I,CAAI,EACzB4a,EAAiB9R,GAASA,EAAME,GACtC,GAAI4R,EAAgB,CAChB,MAAMkC,EAAWlC,EAAehP,KAC1BgP,EAAehP,KAAK,GACpBgP,EAAepR,IACjBsT,EAASpT,QACToT,EAASpT,MAAK,EACd6C,EAAQ+R,cAAgBxB,EAASnT,SAEzC,GAEEzD,GAAoBkU,GAAqB,CAC3C7U,EAAa,CACT,GAAGA,EACH,GAAG6U,IAGX,OAAI1M,GAAWvE,EAAS9F,aAAa,GACjC8F,EAAS9F,cAAa,EAAGoR,KAAMvM,GAAW,CACtC+V,GAAM/V,EAAQiB,EAAS0O,YAAY,EACnC1R,EAAUC,MAAMlB,KAAK,CACjBS,UAAW,EACf,CAAC,CACL,CAAC,EAEE,CACHzC,QAAS,CACLyF,SAAAA,GACAW,WAAAA,GACA2S,cAAAA,GACAzH,eAAAA,EACAyI,YAAAA,GACA7U,UAAAA,EACA/B,UAAAA,EACAC,aAAAA,EACA+B,iBAAAA,EACAmL,kBAAAA,EACAP,eAAAA,EACAwK,OAAAA,GACAvX,iBAAAA,GACAC,UAAAA,EACAzC,gBAAAA,EACA,IAAIqF,SAAU,CACV,OAAOA,CACV,EACD,IAAIZ,aAAc,CACd,OAAOA,CACV,EACD,IAAIiB,aAAc,CACd,OAAOA,CACV,EACD,IAAIA,YAAYhK,EAAO,CACnBgK,EAAchK,CACjB,EACD,IAAIkE,gBAAiB,CACjB,OAAOA,CACV,EACD,IAAImD,QAAS,CACT,OAAOA,CACV,EACD,IAAIA,OAAOrH,EAAO,CACdqH,EAASrH,CACZ,EACD,IAAImG,YAAa,CACb,OAAOA,CACV,EACD,IAAIA,WAAWnG,EAAO,CAClBmG,EAAanG,CAChB,EACD,IAAI+J,UAAW,CACX,OAAOA,CACV,EACD,IAAIA,SAAS/J,EAAO,CAChB+J,EAAW,CACP,GAAGA,EACH,GAAG/J,EAEX,CACH,EACDgc,QAAAA,GACAzS,SAAAA,GACAuU,aAAAA,GACAtW,MAAAA,GACA2U,SAAAA,GACAZ,UAAAA,GACAsD,MAAAA,GACAT,WAAAA,GACAtB,YAAAA,GACA5S,WAAAA,GACA8S,SAAAA,GACAiC,SAAAA,GACApC,cAAAA,GAER,CA+BA,SAASsC,GAAQ3b,EAAQ,GAAI,CACzB,MAAM4b,EAAejc,EAAMoC,SACrB,CAAC1B,EAAWe,CAAe,EAAIzB,EAAM+C,SAAS,CAChDI,QAAS,GACTI,aAAc,GACdH,UAAW,GACX2O,YAAa,GACb0D,aAAc,GACdC,mBAAoB,GACpBlS,QAAS,GACTgS,YAAa,EACbnS,YAAa,CAAE,EACfC,cAAe,CAAE,EACjBG,OAAQ,CAAE,EACV3C,cAAeqK,GAAW9K,EAAMS,aAAa,EACvC1C,OACAiC,EAAMS,aAChB,CAAC,EACImb,EAAa5Z,UACd4Z,EAAa5Z,QAAU,CACnB,GAAG8S,GAAkB9U,EAAO,IAAMoB,EAAiBf,IAAe,CAAE,GAAGA,CAAW,EAAC,CAAC,EACpFA,UAAAA,IAGR,MAAMC,EAAUsb,EAAa5Z,QAAQ1B,QACrCA,OAAAA,EAAQiG,SAAWvG,EACnB6B,GAAa,CACTO,QAAS9B,EAAQiD,UAAUC,MAC3BlB,KAAO9F,GAAU,CACT0E,GAAsB1E,EAAO8D,EAAQQ,gBAAiBR,EAAQgD,iBAAkB,EAAI,GACpFlC,EAAgB,CAAE,GAAGd,EAAQqC,UAAW,CAAC,CAEjD,CACJ,CAAC,EACDhD,EAAMsC,UAAU,IAAM,CACb3B,EAAQkG,YAAYH,QACrB/F,EAAQoD,aAAY,EACpBpD,EAAQkG,YAAYH,MAAQ,IAE5B/F,EAAQkG,YAAYxC,QACpB1D,EAAQkG,YAAYxC,MAAQ,GAC5B1D,EAAQiD,UAAUC,MAAMlB,KAAK,CAAE,CAAA,GAEnChC,EAAQmF,iBAAgB,CAC5B,CAAC,EACD9F,EAAMsC,UAAU,IAAM,CACdjC,EAAMsF,QAAU,CAACkN,GAAUxS,EAAMsF,OAAQhF,EAAQI,cAAc,GAC/DJ,EAAQua,OAAO7a,EAAMsF,OAAQhF,EAAQiG,SAAS0O,YAAY,CAEjE,EAAE,CAACjV,EAAMsF,OAAQhF,CAAO,CAAC,EAC1BX,EAAMsC,UAAU,IAAM,CAClB5B,EAAU8U,aAAe7U,EAAQ+Z,aACpC,EAAE,CAAC/Z,EAASD,EAAU8U,WAAW,CAAC,EACnCyG,EAAa5Z,QAAQ3B,UAAYD,GAAkBC,EAAWC,CAAO,EAC9Dsb,EAAa5Z,OACxB"}