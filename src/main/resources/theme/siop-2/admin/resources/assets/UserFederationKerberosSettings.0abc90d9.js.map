{"version":3,"file":"UserFederationKerberosSettings.0abc90d9.js","sources":["../../src/user-federation/kerberos/KerberosSettingsRequired.tsx","../../src/user-federation/UserFederationKerberosSettings.tsx"],"sourcesContent":["// @ts-nocheck\nimport {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { isEqual } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { Controller, UseFormReturn, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { WizardSectionHeader } from \"../../components/wizard-section-header/WizardSectionHeader\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\n\nexport type KerberosSettingsRequiredProps = {\n  form: UseFormReturn;\n  showSectionHeading?: boolean;\n  showSectionDescription?: boolean;\n};\n\nexport const KerberosSettingsRequired = ({\n  form,\n  showSectionHeading = false,\n  showSectionDescription = false,\n}: KerberosSettingsRequiredProps) => {\n  const { t } = useTranslation(\"user-federation\");\n  const { t: helpText } = useTranslation(\"user-federation-help\");\n\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n\n  const [isEditModeDropdownOpen, setIsEditModeDropdownOpen] = useState(false);\n\n  const allowPassAuth = useWatch({\n    control: form.control,\n    name: \"config.allowPasswordAuthentication\",\n  });\n\n  useFetch(\n    () => adminClient.realms.findOne({ realm }),\n    (result) => form.setValue(\"parentId\", result!.id),\n    []\n  );\n\n  return (\n    <>\n      {showSectionHeading && (\n        <WizardSectionHeader\n          title={t(\"requiredSettings\")}\n          description={helpText(\"kerberosRequiredSettingsDescription\")}\n          showDescription={showSectionDescription}\n        />\n      )}\n\n      {/* Required settings */}\n      <FormAccess role=\"manage-realm\" isHorizontal>\n        <FormGroup\n          label={t(\"uiDisplayName\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"user-federation-help:uiDisplayNameHelp\"\n              fieldLabelId=\"user-federation:uiDisplayName\"\n            />\n          }\n          fieldId=\"kc-ui-display-name\"\n          isRequired\n          validated={form.formState.errors.name ? \"error\" : \"default\"}\n          helperTextInvalid={form.formState.errors.name?.message}\n        >\n          {/* These hidden fields are required so data object written back matches data retrieved */}\n          <KeycloakTextInput\n            hidden\n            id=\"kc-ui-providerId\"\n            defaultValue=\"kerberos\"\n            {...form.register(\"providerId\")}\n          />\n          <KeycloakTextInput\n            hidden\n            id=\"kc-ui-providerType\"\n            defaultValue=\"org.keycloak.storage.UserStorageProvider\"\n            {...form.register(\"providerType\")}\n          />\n          <KeycloakTextInput\n            hidden\n            id=\"kc-ui-parentId\"\n            defaultValue={realm}\n            {...form.register(\"parentId\")}\n          />\n\n          <KeycloakTextInput\n            isRequired\n            id=\"kc-ui-name\"\n            data-testid=\"kerberos-name\"\n            validated={form.formState.errors.name ? \"error\" : \"default\"}\n            aria-label={t(\"uiDisplayName\")}\n            {...form.register(\"name\", {\n              required: {\n                value: true,\n                message: t(\"validateName\"),\n              },\n            })}\n          />\n        </FormGroup>\n\n        <FormGroup\n          label={t(\"kerberosRealm\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"user-federation-help:kerberosRealmHelp\"\n              fieldLabelId=\"user-federation:kc-kerberos-realm\"\n            />\n          }\n          fieldId=\"kc-kerberos-realm\"\n          isRequired\n          validated={\n            form.formState.errors.config?.kerberosRealm?.[0]\n              ? \"error\"\n              : \"default\"\n          }\n          helperTextInvalid={\n            form.formState.errors.config?.kerberosRealm?.[0].message\n          }\n        >\n          <KeycloakTextInput\n            isRequired\n            id=\"kc-kerberos-realm\"\n            data-testid=\"kerberos-realm\"\n            validated={\n              form.formState.errors.config?.kerberosRealm?.[0]\n                ? \"error\"\n                : \"default\"\n            }\n            {...form.register(\"config.kerberosRealm.0\", {\n              required: {\n                value: true,\n                message: t(\"validateRealm\"),\n              },\n            })}\n          />\n        </FormGroup>\n\n        <FormGroup\n          label={t(\"serverPrincipal\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"user-federation-help:serverPrincipalHelp\"\n              fieldLabelId=\"user-federation:serverPrincipal\"\n            />\n          }\n          fieldId=\"kc-server-principal\"\n          isRequired\n          validated={\n            form.formState.errors.config?.serverPrincipal?.[0]\n              ? \"error\"\n              : \"default\"\n          }\n          helperTextInvalid={\n            form.formState.errors.config?.serverPrincipal?.[0].message\n          }\n        >\n          <KeycloakTextInput\n            isRequired\n            id=\"kc-server-principal\"\n            data-testid=\"kerberos-principal\"\n            validated={\n              form.formState.errors.config?.serverPrincipal?.[0]\n                ? \"error\"\n                : \"default\"\n            }\n            {...form.register(\"config.serverPrincipal.0\", {\n              required: {\n                value: true,\n                message: t(\"validateServerPrincipal\"),\n              },\n            })}\n          />\n        </FormGroup>\n\n        <FormGroup\n          label={t(\"keyTab\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"user-federation-help:keyTabHelp\"\n              fieldLabelId=\"user-federation:keyTab\"\n            />\n          }\n          fieldId=\"kc-key-tab\"\n          isRequired\n          validated={\n            form.formState.errors.config?.keyTab?.[0] ? \"error\" : \"default\"\n          }\n          helperTextInvalid={form.formState.errors.config?.keyTab?.[0].message}\n        >\n          <KeycloakTextInput\n            isRequired\n            id=\"kc-key-tab\"\n            data-testid=\"kerberos-keytab\"\n            validated={\n              form.formState.errors.config?.keyTab?.[0] ? \"error\" : \"default\"\n            }\n            {...form.register(\"config.keyTab.0\", {\n              required: {\n                value: true,\n                message: t(\"validateKeyTab\"),\n              },\n            })}\n          />\n        </FormGroup>\n\n        <FormGroup\n          label={t(\"debug\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"user-federation-help:debugHelp\"\n              fieldLabelId=\"user-federation:debug\"\n            />\n          }\n          fieldId=\"kc-debug\"\n          hasNoPaddingTop\n        >\n          {\" \"}\n          <Controller\n            name=\"config.debug\"\n            defaultValue={[\"false\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id={\"kc-debug\"}\n                data-testid=\"debug\"\n                onChange={(value) => field.onChange([`${value}`])}\n                isChecked={field.value?.[0] === \"true\"}\n                label={t(\"common:on\")}\n                labelOff={t(\"common:off\")}\n                aria-label={t(\"debug\")}\n              />\n            )}\n          />\n        </FormGroup>\n\n        <FormGroup\n          label={t(\"allowPasswordAuthentication\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"user-federation-help:allowPasswordAuthenticationHelp\"\n              fieldLabelId=\"user-federation:allowPasswordAuthentication\"\n            />\n          }\n          fieldId=\"kc-allow-password-authentication\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.allowPasswordAuthentication\"\n            defaultValue={[\"false\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id={\"kc-allow-password-authentication\"}\n                data-testid=\"allow-password-authentication\"\n                onChange={(value) => field.onChange([`${value}`])}\n                isChecked={field.value?.[0] === \"true\"}\n                label={t(\"common:on\")}\n                labelOff={t(\"common:off\")}\n                aria-label={t(\"allowPasswordAuthentication\")}\n              />\n            )}\n          />\n        </FormGroup>\n\n        {isEqual(allowPassAuth, [\"true\"]) ? (\n          <FormGroup\n            label={t(\"editMode\")}\n            labelIcon={\n              <HelpItem\n                helpText=\"user-federation-help:editModeKerberosHelp\"\n                fieldLabelId=\"user-federation:editMode\"\n              />\n            }\n            isRequired\n            fieldId=\"kc-edit-mode\"\n          >\n            {\" \"}\n            <Controller\n              name=\"config.editMode[0]\"\n              defaultValue=\"READ_ONLY\"\n              control={form.control}\n              rules={{ required: true }}\n              render={({ field }) => (\n                <Select\n                  toggleId=\"kc-edit-mode\"\n                  required\n                  onToggle={() =>\n                    setIsEditModeDropdownOpen(!isEditModeDropdownOpen)\n                  }\n                  isOpen={isEditModeDropdownOpen}\n                  onSelect={(_, value) => {\n                    field.onChange(value as string);\n                    setIsEditModeDropdownOpen(false);\n                  }}\n                  selections={field.value}\n                  variant={SelectVariant.single}\n                >\n                  <SelectOption key={0} value=\"READ_ONLY\" isPlaceholder />\n                  <SelectOption key={1} value=\"UNSYNCED\" />\n                </Select>\n              )}\n            ></Controller>\n          </FormGroup>\n        ) : null}\n\n        <FormGroup\n          label={t(\"updateFirstLogin\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"user-federation-help:updateFirstLoginHelp\"\n              fieldLabelId=\"user-federation:updateFirstLogin\"\n            />\n          }\n          fieldId=\"kc-update-first-login\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.updateProfileFirstLogin\"\n            defaultValue={[\"false\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id={\"kc-update-first-login\"}\n                data-testid=\"update-first-login\"\n                onChange={(value) => field.onChange([`${value}`])}\n                isChecked={field.value?.[0] === \"true\"}\n                label={t(\"common:on\")}\n                labelOff={t(\"common:off\")}\n                aria-label={t(\"updateFirstLogin\")}\n              />\n            )}\n          />\n        </FormGroup>\n      </FormAccess>\n    </>\n  );\n};\n","import type ComponentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  Form,\n  PageSection,\n} from \"@patternfly/react-core\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useAdminClient, useFetch } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { useParams } from \"../utils/useParams\";\nimport { KerberosSettingsRequired } from \"./kerberos/KerberosSettingsRequired\";\nimport { toUserFederation } from \"./routes/UserFederation\";\nimport { Header } from \"./shared/Header\";\nimport { SettingsCache } from \"./shared/SettingsCache\";\n\nexport default function UserFederationKerberosSettings() {\n  const { t } = useTranslation(\"user-federation\");\n  const form = useForm<ComponentRepresentation>({ mode: \"onChange\" });\n  const navigate = useNavigate();\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n\n  const { id } = useParams<{ id?: string }>();\n\n  const { addAlert, addError } = useAlerts();\n\n  useFetch(\n    async () => {\n      if (id) {\n        return adminClient.components.findOne({ id });\n      }\n    },\n    (fetchedComponent) => {\n      if (fetchedComponent) {\n        setupForm(fetchedComponent);\n      } else if (id) {\n        throw new Error(t(\"common:notFound\"));\n      }\n    },\n    []\n  );\n\n  const setupForm = (component: ComponentRepresentation) => {\n    form.reset({ ...component });\n  };\n\n  const save = async (component: ComponentRepresentation) => {\n    try {\n      if (!id) {\n        await adminClient.components.create(component);\n        navigate(`/${realm}/user-federation`);\n      } else {\n        await adminClient.components.update({ id }, component);\n      }\n      setupForm(component as ComponentRepresentation);\n      addAlert(t(!id ? \"createSuccess\" : \"saveSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(`user-federation:${!id ? \"createError\" : \"saveError\"}`, error);\n    }\n  };\n\n  return (\n    <>\n      <FormProvider {...form}>\n        <Header provider=\"Kerberos\" save={() => form.handleSubmit(save)()} />\n      </FormProvider>\n      <PageSection variant=\"light\">\n        <KerberosSettingsRequired form={form} showSectionHeading />\n      </PageSection>\n      <PageSection variant=\"light\" isFilled>\n        <SettingsCache form={form} showSectionHeading />\n        <Form onSubmit={form.handleSubmit(save)}>\n          <ActionGroup>\n            <Button\n              isDisabled={!form.formState.isDirty}\n              variant=\"primary\"\n              type=\"submit\"\n              data-testid=\"kerberos-save\"\n            >\n              {t(\"common:save\")}\n            </Button>\n            <Button\n              variant=\"link\"\n              onClick={() => navigate(toUserFederation({ realm }))}\n              data-testid=\"kerberos-cancel\"\n            >\n              {t(\"common:cancel\")}\n            </Button>\n          </ActionGroup>\n        </Form>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["KerberosSettingsRequired","form","showSectionHeading","showSectionDescription","t","useTranslation","helpText","adminClient","useAdminClient","realm","useRealm","isEditModeDropdownOpen","setIsEditModeDropdownOpen","useState","allowPassAuth","useWatch","control","name","useFetch","realms","findOne","result","setValue","id","_Fragment","_jsx","WizardSectionHeader","_jsxs","FormAccess","FormGroup","HelpItem","formState","errors","message","KeycloakTextInput","register","required","value","config","kerberosRealm","serverPrincipal","keyTab","Controller","field","Switch","onChange","isEqual","Select","_","SelectVariant","single","SelectOption","UserFederationKerberosSettings","useForm","mode","navigate","useNavigate","useParams","addAlert","addError","useAlerts","components","fetchedComponent","setupForm","Error","component","reset","save","update","create","AlertVariant","success","error","FormProvider","Header","handleSubmit","PageSection","SettingsCache","Form","ActionGroup","Button","isDirty","toUserFederation"],"mappings":"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"}