{"version":3,"file":"OIDCGeneralSettings.2c10f679.js","sources":["../../src/identity-providers/add/DiscoverySettings.tsx","../../src/identity-providers/add/OIDCAuthentication.tsx","../../src/identity-providers/add/OIDCGeneralSettings.tsx"],"sourcesContent":["import IdentityProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/identityProviderRepresentation\";\nimport {\n  ExpandableSection,\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { SwitchField } from \"../component/SwitchField\";\nimport { TextField } from \"../component/TextField\";\n\nimport \"./discovery-settings.css\";\n\nconst PKCE_METHODS = [\"plain\", \"S256\"] as const;\n\ntype DiscoverySettingsProps = {\n  readOnly: boolean;\n};\n\nconst Fields = ({ readOnly }: DiscoverySettingsProps) => {\n  const { t } = useTranslation(\"identity-providers\");\n  const [pkceMethodOpen, setPkceMethodOpen] = useState(false);\n  const {\n    register,\n    control,\n    formState: { errors },\n  } = useFormContext<IdentityProviderRepresentation>();\n\n  const validateSignature = useWatch({\n    control,\n    name: \"config.validateSignature\",\n  });\n  const useJwks = useWatch({\n    control,\n    name: \"config.useJwksUrl\",\n  });\n  const isPkceEnabled = useWatch({\n    control,\n    name: \"config.pkceEnabled\",\n  });\n\n  return (\n    <div className=\"pf-c-form pf-m-horizontal\">\n      <FormGroup\n        label={t(\"authorizationUrl\")}\n        fieldId=\"kc-authorization-url\"\n        isRequired\n        validated={\n          errors.config?.authorizationUrl\n            ? ValidatedOptions.error\n            : ValidatedOptions.default\n        }\n        helperTextInvalid={t(\"common:required\")}\n      >\n        <KeycloakTextInput\n          type=\"url\"\n          data-testid=\"authorizationUrl\"\n          id=\"kc-authorization-url\"\n          validated={\n            errors.config?.authorizationUrl\n              ? ValidatedOptions.error\n              : ValidatedOptions.default\n          }\n          isReadOnly={readOnly}\n          {...register(\"config.authorizationUrl\", { required: true })}\n        />\n      </FormGroup>\n\n      <FormGroup\n        label={t(\"tokenUrl\")}\n        fieldId=\"tokenUrl\"\n        isRequired\n        validated={\n          errors.config?.tokenUrl\n            ? ValidatedOptions.error\n            : ValidatedOptions.default\n        }\n        helperTextInvalid={t(\"common:required\")}\n      >\n        <KeycloakTextInput\n          type=\"url\"\n          id=\"tokenUrl\"\n          data-testid=\"tokenUrl\"\n          validated={\n            errors.config?.tokenUrl\n              ? ValidatedOptions.error\n              : ValidatedOptions.default\n          }\n          isReadOnly={readOnly}\n          {...register(\"config.tokenUrl\", { required: true })}\n        />\n      </FormGroup>\n      <TextField\n        field=\"config.logoutUrl\"\n        label=\"logoutUrl\"\n        isReadOnly={readOnly}\n      />\n      <TextField\n        field=\"config.userInfoUrl\"\n        label=\"userInfoUrl\"\n        isReadOnly={readOnly}\n      />\n      <TextField field=\"config.issuer\" label=\"issuer\" isReadOnly={readOnly} />\n      <SwitchField\n        field=\"config.validateSignature\"\n        label=\"validateSignature\"\n        isReadOnly={readOnly}\n      />\n      {validateSignature === \"true\" && (\n        <>\n          <SwitchField\n            field=\"config.useJwksUrl\"\n            label=\"useJwksUrl\"\n            data-testid=\"useJwksUrl\"\n            isReadOnly={readOnly}\n          />\n          {useJwks === \"true\" && (\n            <TextField\n              field=\"config.jwksUrl\"\n              label=\"jwksUrl\"\n              isReadOnly={readOnly}\n            />\n          )}\n        </>\n      )}\n      <SwitchField\n        field=\"config.pkceEnabled\"\n        label=\"pkceEnabled\"\n        isReadOnly={readOnly}\n      />\n      {isPkceEnabled === \"true\" && (\n        <FormGroup\n          className=\"pf-u-pb-3xl\"\n          label={t(\"pkceMethod\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"identity-providers-help:pkceMethod\"\n              fieldLabelId=\"identity-providers:pkceMethod\"\n            />\n          }\n          fieldId=\"pkceMethod\"\n        >\n          <Controller\n            name=\"config.pkceMethod\"\n            defaultValue={PKCE_METHODS[0]}\n            control={control}\n            render={({ field }) => (\n              <Select\n                toggleId=\"pkceMethod\"\n                required\n                direction=\"down\"\n                onToggle={() => setPkceMethodOpen(!pkceMethodOpen)}\n                onSelect={(_, value) => {\n                  field.onChange(value as string);\n                  setPkceMethodOpen(false);\n                }}\n                selections={t(`${field.value}`)}\n                variant={SelectVariant.single}\n                aria-label={t(\"pkceMethod\")}\n                isOpen={pkceMethodOpen}\n              >\n                {PKCE_METHODS.map((option) => (\n                  <SelectOption\n                    selected={option === field.value}\n                    key={option}\n                    value={option}\n                  >\n                    {t(`${option}`)}\n                  </SelectOption>\n                ))}\n              </Select>\n            )}\n          />\n        </FormGroup>\n      )}\n    </div>\n  );\n};\n\nexport const DiscoverySettings = ({ readOnly }: DiscoverySettingsProps) => {\n  const { t } = useTranslation(\"identity-providers\");\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  return (\n    <>\n      {readOnly && (\n        <ExpandableSection\n          className=\"keycloak__discovery-settings__metadata\"\n          toggleText={isExpanded ? t(\"hideMetaData\") : t(\"showMetaData\")}\n          onToggle={() => setIsExpanded(!isExpanded)}\n          isExpanded={isExpanded}\n        >\n          <Fields readOnly={readOnly} />\n        </ExpandableSection>\n      )}\n      {!readOnly && <Fields readOnly={readOnly} />}\n    </>\n  );\n};\n","import {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { ClientIdSecret } from \"../component/ClientIdSecret\";\nimport { sortProviders } from \"../../util\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\n\nconst clientAuthentications = [\n  \"client_secret_post\",\n  \"client_secret_basic\",\n  \"client_secret_jwt\",\n  \"private_key_jwt\",\n];\n\nexport const OIDCAuthentication = ({ create = true }: { create?: boolean }) => {\n  const providers = useServerInfo().providers!.clientSignature.providers;\n  const { t } = useTranslation(\"identity-providers\");\n\n  const { control } = useFormContext();\n  const [openClientAuth, setOpenClientAuth] = useState(false);\n  const [openClientAuthSigAlg, setOpenClientAuthSigAlg] = useState(false);\n\n  const clientAuthMethod = useWatch({\n    control: control,\n    name: \"config.clientAuthMethod\",\n  });\n\n  return (\n    <>\n      <FormGroup\n        label={t(\"clientAuthentication\")}\n        labelIcon={\n          <HelpItem\n            helpText=\"identity-providers-help:clientAuthentication\"\n            fieldLabelId=\"identity-providers:clientAuthentication\"\n          />\n        }\n        fieldId=\"clientAuthentication\"\n      >\n        <Controller\n          name=\"config.clientAuthMethod\"\n          defaultValue={clientAuthentications[0]}\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"clientAuthentication\"\n              required\n              onToggle={() => setOpenClientAuth(!openClientAuth)}\n              onSelect={(_, value) => {\n                field.onChange(value as string);\n                setOpenClientAuth(false);\n              }}\n              selections={field.value}\n              variant={SelectVariant.single}\n              aria-label={t(\"clientAuthentication\")}\n              isOpen={openClientAuth}\n            >\n              {clientAuthentications.map((option) => (\n                <SelectOption\n                  selected={option === field.value}\n                  key={option}\n                  value={option}\n                >\n                  {t(`clientAuthentications.${option}`)}\n                </SelectOption>\n              ))}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <ClientIdSecret\n        secretRequired={clientAuthMethod !== \"private_key_jwt\"}\n        create={create}\n      />\n      <FormGroup\n        label={t(\"clientAssertionSigningAlg\")}\n        labelIcon={\n          <HelpItem\n            helpText=\"identity-providers-help:clientAssertionSigningAlg\"\n            fieldLabelId=\"identity-providers:clientAssertionSigningAlg\"\n          />\n        }\n        fieldId=\"clientAssertionSigningAlg\"\n      >\n        <Controller\n          name=\"config.clientAssertionSigningAlg\"\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              maxHeight={200}\n              toggleId=\"clientAssertionSigningAlg\"\n              onToggle={() => setOpenClientAuthSigAlg(!openClientAuthSigAlg)}\n              onSelect={(_, value) => {\n                field.onChange(value.toString());\n                setOpenClientAuthSigAlg(false);\n              }}\n              selections={field.value || t(\"algorithmNotSpecified\")}\n              variant={SelectVariant.single}\n              isOpen={openClientAuthSigAlg}\n            >\n              {[\n                <SelectOption selected={field.value === \"\"} key=\"\" value=\"\">\n                  {t(\"algorithmNotSpecified\")}\n                </SelectOption>,\n                ...sortProviders(providers).map((option) => (\n                  <SelectOption\n                    selected={option === field.value}\n                    key={option}\n                    value={option}\n                  />\n                )),\n              ]}\n            </Select>\n          )}\n        />\n      </FormGroup>\n    </>\n  );\n};\n","import { FormGroup, ValidatedOptions } from \"@patternfly/react-core\";\nimport { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useParams } from \"react-router-dom\";\n\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { DisplayOrder } from \"../component/DisplayOrder\";\nimport { RedirectUrl } from \"../component/RedirectUrl\";\nimport { TextField } from \"../component/TextField\";\nimport type { IdentityProviderParams } from \"../routes/IdentityProvider\";\n\nexport const OIDCGeneralSettings = ({ id }: { id: string }) => {\n  const { t } = useTranslation(\"identity-providers\");\n  const { tab } = useParams<IdentityProviderParams>();\n\n  const {\n    register,\n    formState: { errors },\n  } = useFormContext();\n\n  return (\n    <>\n      <RedirectUrl id={id} />\n\n      <FormGroup\n        label={t(\"alias\")}\n        labelIcon={\n          <HelpItem\n            helpText=\"identity-providers-help:alias\"\n            fieldLabelId=\"identity-providers:alias\"\n          />\n        }\n        fieldId=\"alias\"\n        isRequired\n        validated={\n          errors.alias ? ValidatedOptions.error : ValidatedOptions.default\n        }\n        helperTextInvalid={t(\"common:required\")}\n      >\n        <KeycloakTextInput\n          isReadOnly={tab === \"settings\"}\n          isRequired\n          id=\"alias\"\n          data-testid=\"alias\"\n          validated={\n            errors.alias ? ValidatedOptions.error : ValidatedOptions.default\n          }\n          {...register(\"alias\", { required: true })}\n        />\n      </FormGroup>\n\n      <TextField field=\"displayName\" label=\"displayName\" />\n      <DisplayOrder />\n    </>\n  );\n};\n"],"names":["PKCE_METHODS","Fields","readOnly","t","useTranslation","pkceMethodOpen","setPkceMethodOpen","useState","register","control","formState","errors","useFormContext","validateSignature","useWatch","name","useJwks","isPkceEnabled","_jsx","FormGroup","config","authorizationUrl","ValidatedOptions","error","default","KeycloakTextInput","required","tokenUrl","TextField","SwitchField","_Fragment","HelpItem","Controller","field","Select","_","value","onChange","SelectVariant","single","map","option","SelectOption","DiscoverySettings","isExpanded","setIsExpanded","ExpandableSection","clientAuthentications","OIDCAuthentication","create","providers","useServerInfo","clientSignature","openClientAuth","setOpenClientAuth","openClientAuthSigAlg","setOpenClientAuthSigAlg","clientAuthMethod","ClientIdSecret","toString","sortProviders","OIDCGeneralSettings","id","tab","useParams","RedirectUrl","alias","DisplayOrder"],"mappings":"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"}