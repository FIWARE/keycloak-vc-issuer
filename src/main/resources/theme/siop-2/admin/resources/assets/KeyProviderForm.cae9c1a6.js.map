{"version":3,"file":"KeyProviderForm.cae9c1a6.js","sources":["../../src/realm-settings/keys/key-providers/KeyProviderForm.tsx"],"sourcesContent":["import type ComponentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  FormGroup,\n  PageSection,\n  TextInput,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { Controller, FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useAlerts } from \"../../../components/alert/Alerts\";\nimport { DynamicComponents } from \"../../../components/dynamic/DynamicComponents\";\nimport { FormAccess } from \"../../../components/form-access/FormAccess\";\nimport { HelpItem } from \"../../../components/help-enabler/HelpItem\";\nimport { KeycloakTextInput } from \"../../../components/keycloak-text-input/KeycloakTextInput\";\nimport { ViewHeader } from \"../../../components/view-header/ViewHeader\";\nimport { useAdminClient, useFetch } from \"../../../context/auth/AdminClient\";\nimport { useServerInfo } from \"../../../context/server-info/ServerInfoProvider\";\nimport { KEY_PROVIDER_TYPE } from \"../../../util\";\nimport { useParams } from \"../../../utils/useParams\";\nimport type { KeyProviderParams, ProviderType } from \"../../routes/KeyProvider\";\n\ntype KeyProviderFormProps = {\n  id?: string;\n  providerType: ProviderType;\n  onClose?: () => void;\n};\n\nexport const KeyProviderForm = ({\n  providerType,\n  onClose,\n}: KeyProviderFormProps) => {\n  const { t } = useTranslation(\"realm-settings\");\n  const { id } = useParams<{ id: string }>();\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  const serverInfo = useServerInfo();\n  const allComponentTypes =\n    serverInfo.componentTypes?.[KEY_PROVIDER_TYPE] ?? [];\n\n  const form = useForm<ComponentRepresentation>({\n    mode: \"onChange\",\n  });\n  const {\n    register,\n    control,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = form;\n\n  const save = async (component: ComponentRepresentation) => {\n    if (component.config)\n      Object.entries(component.config).forEach(\n        ([key, value]) =>\n          (component.config![key] = Array.isArray(value) ? value : [value])\n      );\n    try {\n      if (id) {\n        await adminClient.components.update(\n          { id },\n          {\n            ...component,\n            providerType: KEY_PROVIDER_TYPE,\n          }\n        );\n        addAlert(t(\"saveProviderSuccess\"), AlertVariant.success);\n      } else {\n        await adminClient.components.create({\n          ...component,\n          providerId: providerType,\n          providerType: KEY_PROVIDER_TYPE,\n          config: { ...component.config, priority: [\"0\"] },\n        });\n        addAlert(t(\"saveProviderSuccess\"), AlertVariant.success);\n        onClose?.();\n      }\n    } catch (error) {\n      addError(\"realm-settings:saveProviderError\", error);\n    }\n  };\n\n  useFetch(\n    async () => {\n      if (id) return await adminClient.components.findOne({ id });\n    },\n    (result) => {\n      if (result) {\n        reset({ ...result });\n      }\n    },\n    []\n  );\n\n  return (\n    <FormAccess isHorizontal role=\"manage-realm\" onSubmit={handleSubmit(save)}>\n      {id && (\n        <FormGroup\n          label={t(\"providerId\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"client-scopes-help:mapperName\"\n              fieldLabelId=\"providerId\"\n            />\n          }\n          fieldId=\"providerId\"\n          isRequired\n        >\n          <KeycloakTextInput\n            id=\"providerId\"\n            data-testid=\"providerId-input\"\n            isReadOnly\n            {...register(\"id\")}\n          />\n        </FormGroup>\n      )}\n      <FormGroup\n        label={t(\"common:name\")}\n        labelIcon={\n          <HelpItem\n            helpText=\"client-scopes-help:mapperName\"\n            fieldLabelId=\"name\"\n          />\n        }\n        fieldId=\"name\"\n        isRequired\n        validated={\n          errors.name ? ValidatedOptions.error : ValidatedOptions.default\n        }\n        helperTextInvalid={t(\"common:required\")}\n      >\n        <Controller\n          name=\"name\"\n          control={control}\n          rules={{ required: true }}\n          defaultValue={providerType}\n          render={({ field }) => (\n            <TextInput\n              id=\"name\"\n              value={field.value}\n              onChange={field.onChange}\n              data-testid=\"name-input\"\n            />\n          )}\n        />\n      </FormGroup>\n      <FormProvider {...form}>\n        <DynamicComponents\n          properties={\n            allComponentTypes.find((type) => type.id === providerType)\n              ?.properties || []\n          }\n        />\n      </FormProvider>\n      <ActionGroup>\n        <Button\n          data-testid=\"add-provider-button\"\n          variant=\"primary\"\n          type=\"submit\"\n        >\n          {t(\"common:save\")}\n        </Button>\n        <Button onClick={() => onClose?.()} variant=\"link\">\n          {t(\"common:cancel\")}\n        </Button>\n      </ActionGroup>\n    </FormAccess>\n  );\n};\n\nexport default function KeyProviderFormPage() {\n  const { t } = useTranslation(\"realm-settings\");\n  const params = useParams<KeyProviderParams>();\n  return (\n    <>\n      <ViewHeader titleKey={t(\"editProvider\")} subKey={params.providerType} />\n      <PageSection variant=\"light\">\n        <KeyProviderForm {...params} />\n      </PageSection>\n    </>\n  );\n}\n"],"names":["KeyProviderForm","providerType","onClose","t","useTranslation","id","useParams","adminClient","useAdminClient","addAlert","addError","useAlerts","allComponentTypes","useServerInfo","componentTypes","KEY_PROVIDER_TYPE","form","useForm","mode","register","control","handleSubmit","formState","errors","reset","save","component","config","entries","forEach","key","value","Array","isArray","components","update","AlertVariant","success","create","providerId","priority","error","useFetch","findOne","result","FormAccess","_jsx","FormGroup","HelpItem","KeycloakTextInput","name","ValidatedOptions","default","Controller","required","field","TextInput","onChange","FormProvider","DynamicComponents","find","type","properties","_jsxs","ActionGroup","Button","KeyProviderFormPage","params","_Fragment","ViewHeader","PageSection"],"mappings":"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"}