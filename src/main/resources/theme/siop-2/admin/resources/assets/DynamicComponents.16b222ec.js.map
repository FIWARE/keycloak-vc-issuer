{"version":3,"file":"DynamicComponents.16b222ec.js","sources":["../../src/components/dynamic/BooleanComponent.tsx","../../src/components/dynamic/ClientSelectComponent.tsx","../../src/components/dynamic/FileComponent.tsx","../../src/components/dynamic/GroupComponent.tsx","../../src/components/dynamic/ListComponent.tsx","../../src/components/dynamic/MapComponent.tsx","../../src/components/dynamic/MultivaluedListComponent.tsx","../../src/components/dynamic/MultivaluedStringComponent.tsx","../../src/components/dynamic/PasswordComponent.tsx","../../src/components/dynamic/RoleComponent.tsx","../../src/components/dynamic/ScriptComponent.tsx","../../src/components/dynamic/StringComponent.tsx","../../src/components/dynamic/TextComponent.tsx","../../src/components/dynamic/components.ts","../../src/components/dynamic/DynamicComponents.tsx"],"sourcesContent":["import { FormGroup, Switch } from \"@patternfly/react-core\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"../help-enabler/HelpItem\";\nimport type { ComponentProps } from \"./components\";\nimport { convertToName } from \"./DynamicComponents\";\n\nexport const BooleanComponent = ({\n  name,\n  label,\n  helpText,\n  isDisabled = false,\n}: ComponentProps) => {\n  const { t } = useTranslation(\"dynamic\");\n  const { control } = useFormContext();\n\n  return (\n    <FormGroup\n      hasNoPaddingTop\n      label={t(label!)}\n      fieldId={name!}\n      labelIcon={\n        <HelpItem helpText={t(helpText!)} fieldLabelId={`dynamic:${label}`} />\n      }\n    >\n      <Controller\n        name={convertToName(name!)}\n        data-testid={name}\n        defaultValue={false}\n        control={control}\n        render={({ field }) => (\n          <Switch\n            id={name!}\n            isDisabled={isDisabled}\n            label={t(\"common:on\")}\n            labelOff={t(\"common:off\")}\n            isChecked={\n              field.value === \"true\" ||\n              field.value === true ||\n              field.value[0] === \"true\"\n            }\n            onChange={(value) => field.onChange(\"\" + value)}\n            data-testid={name}\n            aria-label={t(label!)}\n          />\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import type { ComponentProps } from \"./components\";\nimport { ClientSelect } from \"../client/ClientSelect\";\nimport { convertToName } from \"./DynamicComponents\";\n\nexport const ClientSelectComponent = (props: ComponentProps) => {\n  return (\n    <ClientSelect\n      {...props}\n      name={convertToName(props.name!)}\n      namespace=\"dynamic\"\n    />\n  );\n};\n","import { FormGroup } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"../help-enabler/HelpItem\";\nimport { FileUpload } from \"../json-file-upload/patternfly/FileUpload\";\nimport type { ComponentProps } from \"./components\";\nimport { convertToName } from \"./DynamicComponents\";\n\nexport const FileComponent = ({\n  name,\n  label,\n  helpText,\n  defaultValue,\n  isDisabled = false,\n}: ComponentProps) => {\n  const { t } = useTranslation(\"dynamic\");\n  const { control } = useFormContext();\n  const [filename, setFilename] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  return (\n    <FormGroup\n      label={t(label!)}\n      labelIcon={\n        <HelpItem helpText={t(helpText!)} fieldLabelId={`dynamic:${label}`} />\n      }\n      fieldId={name!}\n    >\n      <Controller\n        name={convertToName(name!)}\n        control={control}\n        defaultValue={defaultValue || \"\"}\n        render={({ field }) => (\n          <FileUpload\n            id={name!}\n            value={field.value}\n            type=\"text\"\n            filename={filename}\n            isDisabled={isDisabled}\n            onFileInputChange={(_, file) => setFilename(file.name)}\n            onReadStarted={() => setIsLoading(true)}\n            onReadFinished={() => setIsLoading(false)}\n            onClearClick={() => {\n              field.onChange(\"\");\n              setFilename(\"\");\n            }}\n            isLoading={isLoading}\n            allowEditingUploadedText={false}\n            onChange={(value, filename) => {\n              field.onChange(value);\n              setFilename(filename);\n            }}\n          />\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport {\n  Button,\n  Chip,\n  ChipGroup,\n  FormGroup,\n  InputGroup,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { GroupPickerDialog } from \"../group/GroupPickerDialog\";\nimport { HelpItem } from \"../help-enabler/HelpItem\";\nimport type { ComponentProps } from \"./components\";\nimport { convertToName } from \"./DynamicComponents\";\n\nexport const GroupComponent = ({ name, label, helpText }: ComponentProps) => {\n  const { t } = useTranslation(\"dynamic\");\n  const [open, setOpen] = useState(false);\n  const [groups, setGroups] = useState<GroupRepresentation[]>();\n  const { control } = useFormContext();\n\n  return (\n    <Controller\n      name={convertToName(name!)}\n      defaultValue=\"\"\n      control={control}\n      render={({ field }) => (\n        <>\n          {open && (\n            <GroupPickerDialog\n              type=\"selectOne\"\n              text={{\n                title: \"dynamic:selectGroup\",\n                ok: \"common:select\",\n              }}\n              onConfirm={(groups) => {\n                field.onChange(groups?.[0].path);\n                setGroups(groups);\n                setOpen(false);\n              }}\n              onClose={() => setOpen(false)}\n              filterGroups={groups}\n            />\n          )}\n\n          <FormGroup\n            label={t(label!)}\n            labelIcon={\n              <HelpItem\n                helpText={t(helpText!)}\n                fieldLabelId={`dynamic:${label}`}\n              />\n            }\n            fieldId={name!}\n          >\n            <InputGroup>\n              <ChipGroup>\n                {field.value && (\n                  <Chip onClick={() => field.onChange(undefined)}>\n                    {field.value}\n                  </Chip>\n                )}\n              </ChipGroup>\n              <Button\n                id=\"kc-join-groups-button\"\n                onClick={() => setOpen(!open)}\n                variant=\"secondary\"\n                data-testid=\"join-groups-button\"\n              >\n                {t(\"selectGroup\")}\n              </Button>\n            </InputGroup>\n          </FormGroup>\n        </>\n      )}\n    />\n  );\n};\n","import {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"../help-enabler/HelpItem\";\nimport type { ComponentProps } from \"./components\";\nimport { convertToName } from \"./DynamicComponents\";\n\nexport const ListComponent = ({\n  name,\n  label,\n  helpText,\n  defaultValue,\n  options,\n  isDisabled = false,\n}: ComponentProps) => {\n  const { t } = useTranslation(\"dynamic\");\n  const { control } = useFormContext();\n  const [open, setOpen] = useState(false);\n\n  return (\n    <FormGroup\n      label={t(label!)}\n      labelIcon={\n        <HelpItem helpText={t(helpText!)} fieldLabelId={`dynamic:${label}`} />\n      }\n      fieldId={name!}\n    >\n      <Controller\n        name={convertToName(name!)}\n        data-testid={name}\n        defaultValue={defaultValue || \"\"}\n        control={control}\n        render={({ field }) => (\n          <Select\n            toggleId={name}\n            isDisabled={isDisabled}\n            onToggle={(toggle) => setOpen(toggle)}\n            onSelect={(_, value) => {\n              field.onChange(value as string);\n              setOpen(false);\n            }}\n            selections={field.value}\n            variant={SelectVariant.single}\n            aria-label={t(label!)}\n            isOpen={open}\n          >\n            {options?.map((option) => (\n              <SelectOption\n                selected={option === field.value}\n                key={option}\n                value={option}\n              />\n            ))}\n          </Select>\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import {\n  ActionList,\n  ActionListItem,\n  Button,\n  Flex,\n  FlexItem,\n  FormGroup,\n  TextInput,\n} from \"@patternfly/react-core\";\nimport { MinusCircleIcon, PlusCircleIcon } from \"@patternfly/react-icons\";\nimport { useEffect, useState } from \"react\";\nimport { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"../help-enabler/HelpItem\";\nimport { KeyValueType } from \"../key-value-form/key-value-convert\";\nimport type { ComponentProps } from \"./components\";\nimport { convertToName } from \"./DynamicComponents\";\n\ntype IdKeyValueType = KeyValueType & {\n  id: number;\n};\n\nconst generateId = () => Math.floor(Math.random() * 100);\n\nexport const MapComponent = ({ name, label, helpText }: ComponentProps) => {\n  const { t } = useTranslation(\"dynamic\");\n\n  const { getValues, setValue, register } = useFormContext();\n  const [map, setMap] = useState<IdKeyValueType[]>([]);\n  const fieldName = convertToName(name!);\n\n  useEffect(() => {\n    register(fieldName);\n    const values: KeyValueType[] = JSON.parse(getValues(fieldName) || \"[]\");\n    if (!values.length) {\n      values.push({ key: \"\", value: \"\" });\n    }\n    setMap(values.map((value) => ({ ...value, id: generateId() })));\n  }, [register, getValues]);\n\n  const update = (val = map) => {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setValue(fieldName, JSON.stringify(val.map(({ id, ...entry }) => entry)));\n  };\n\n  const updateKey = (index: number, key: string) => {\n    updateEntry(index, { ...map[index], key });\n  };\n\n  const updateValue = (index: number, value: string) => {\n    updateEntry(index, { ...map[index], value });\n  };\n\n  const updateEntry = (index: number, entry: IdKeyValueType) =>\n    setMap([...map.slice(0, index), entry, ...map.slice(index + 1)]);\n\n  const remove = (index: number) => {\n    const value = [...map.slice(0, index), ...map.slice(index + 1)];\n    setMap(value);\n    update(value);\n  };\n\n  return (\n    <FormGroup\n      label={t(label!)}\n      labelIcon={\n        <HelpItem helpText={t(helpText!)} fieldLabelId={`dynamic:${label}`} />\n      }\n      fieldId={name!}\n    >\n      <Flex direction={{ default: \"column\" }}>\n        <Flex>\n          <FlexItem\n            grow={{ default: \"grow\" }}\n            spacer={{ default: \"spacerNone\" }}\n          >\n            <strong>{t(\"common:key\")}</strong>\n          </FlexItem>\n          <FlexItem grow={{ default: \"grow\" }}>\n            <strong>{t(\"common:value\")}</strong>\n          </FlexItem>\n        </Flex>\n        {map.map((attribute, index) => (\n          <Flex key={attribute.id} data-testid=\"row\">\n            <FlexItem grow={{ default: \"grow\" }}>\n              <TextInput\n                name={`${fieldName}[${index}].key`}\n                placeholder={t(\"common:keyPlaceholder\")}\n                aria-label={t(\"key\")}\n                defaultValue={attribute.key}\n                data-testid={`${fieldName}[${index}].key`}\n                onChange={(value) => updateKey(index, value)}\n                onBlur={() => update()}\n              />\n            </FlexItem>\n            <FlexItem\n              grow={{ default: \"grow\" }}\n              spacer={{ default: \"spacerNone\" }}\n            >\n              <TextInput\n                name={`${fieldName}[${index}].value`}\n                placeholder={t(\"common:valuePlaceholder\")}\n                aria-label={t(\"common:value\")}\n                defaultValue={attribute.value}\n                data-testid={`${fieldName}[${index}].value`}\n                onChange={(value) => updateValue(index, value)}\n                onBlur={() => update()}\n              />\n            </FlexItem>\n            <FlexItem>\n              <Button\n                variant=\"link\"\n                title={t(\"common:removeAttribute\")}\n                isDisabled={map.length === 1}\n                onClick={() => remove(index)}\n                data-testid={`${fieldName}[${index}].remove`}\n              >\n                <MinusCircleIcon />\n              </Button>\n            </FlexItem>\n          </Flex>\n        ))}\n      </Flex>\n      <ActionList>\n        <ActionListItem>\n          <Button\n            data-testid={`${fieldName}-add-row`}\n            className=\"pf-u-px-0 pf-u-mt-sm\"\n            variant=\"link\"\n            icon={<PlusCircleIcon />}\n            onClick={() =>\n              setMap([...map, { key: \"\", value: \"\", id: generateId() }])\n            }\n          >\n            {t(\"common:addAttribute\")}\n          </Button>\n        </ActionListItem>\n      </ActionList>\n    </FormGroup>\n  );\n};\n","import {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"../help-enabler/HelpItem\";\nimport type { ComponentProps } from \"./components\";\nimport { convertToName } from \"./DynamicComponents\";\n\nexport const MultiValuedListComponent = ({\n  name,\n  label,\n  helpText,\n  defaultValue,\n  options,\n  isDisabled = false,\n}: ComponentProps) => {\n  const { t } = useTranslation(\"dynamic\");\n  const { control } = useFormContext();\n  const [open, setOpen] = useState(false);\n\n  return (\n    <FormGroup\n      label={t(label!)}\n      labelIcon={\n        <HelpItem helpText={t(helpText!)} fieldLabelId={`dynamic:${label}`} />\n      }\n      fieldId={name!}\n    >\n      <Controller\n        name={convertToName(name!)}\n        control={control}\n        defaultValue={defaultValue ? [defaultValue] : []}\n        render={({ field }) => (\n          <Select\n            toggleId={name}\n            data-testid={name}\n            isDisabled={isDisabled}\n            chipGroupProps={{\n              numChips: 3,\n              expandedText: t(\"common:hide\"),\n              collapsedText: t(\"common:showRemaining\"),\n            }}\n            variant={SelectVariant.typeaheadMulti}\n            typeAheadAriaLabel=\"Select\"\n            onToggle={(isOpen) => setOpen(isOpen)}\n            selections={field.value}\n            onSelect={(_, v) => {\n              const option = v.toString();\n              if (field.value.includes(option)) {\n                field.onChange(\n                  field.value.filter((item: string) => item !== option)\n                );\n              } else {\n                field.onChange([...field.value, option]);\n              }\n            }}\n            onClear={(event) => {\n              event.stopPropagation();\n              field.onChange([]);\n            }}\n            isOpen={open}\n            aria-label={t(label!)}\n          >\n            {options?.map((option) => (\n              <SelectOption key={option} value={option} />\n            ))}\n          </Select>\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { FormGroup } from \"@patternfly/react-core\";\n\nimport type { ComponentProps } from \"./components\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { MultiLineInput } from \"../multi-line-input/MultiLineInput\";\nimport { convertToName } from \"./DynamicComponents\";\n\nexport const MultiValuedStringComponent = ({\n  name,\n  label,\n  defaultValue,\n  helpText,\n  isDisabled = false,\n}: ComponentProps) => {\n  const { t } = useTranslation(\"dynamic\");\n  const fieldName = convertToName(name!);\n\n  return (\n    <FormGroup\n      label={t(label!)}\n      labelIcon={\n        <HelpItem helpText={t(helpText!)} fieldLabelId={`dynamic:${label}`} />\n      }\n      fieldId={name!}\n    >\n      <MultiLineInput\n        name={fieldName}\n        isDisabled={isDisabled}\n        defaultValue={[defaultValue]}\n        addButtonLabel={t(\"addMultivaluedLabel\", {\n          fieldLabel: t(label!).toLowerCase(),\n        })}\n      />\n    </FormGroup>\n  );\n};\n","import { FormGroup } from \"@patternfly/react-core\";\nimport { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"../help-enabler/HelpItem\";\nimport { PasswordInput } from \"../password-input/PasswordInput\";\nimport type { ComponentProps } from \"./components\";\nimport { convertToName } from \"./DynamicComponents\";\n\nexport const PasswordComponent = ({\n  name,\n  label,\n  helpText,\n  defaultValue,\n  isDisabled = false,\n}: ComponentProps) => {\n  const { t } = useTranslation(\"dynamic\");\n  const { register } = useFormContext();\n\n  return (\n    <FormGroup\n      label={t(label!)}\n      labelIcon={\n        <HelpItem helpText={t(helpText!)} fieldLabelId={`dynamic:${label}`} />\n      }\n      fieldId={name!}\n    >\n      <PasswordInput\n        id={name!}\n        data-testid={name}\n        isDisabled={isDisabled}\n        defaultValue={defaultValue?.toString()}\n        {...register(convertToName(name!))}\n      />\n    </FormGroup>\n  );\n};\n","import {\n  Button,\n  Chip,\n  FormGroup,\n  Split,\n  SplitItem,\n} from \"@patternfly/react-core\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport useToggle from \"../../utils/useToggle\";\nimport { HelpItem } from \"../help-enabler/HelpItem\";\nimport { AddRoleMappingModal } from \"../role-mapping/AddRoleMappingModal\";\nimport { Row, ServiceRole } from \"../role-mapping/RoleMapping\";\nimport type { ComponentProps } from \"./components\";\nimport { convertToName } from \"./DynamicComponents\";\n\nconst parseValue = (value: any) =>\n  value?.includes(\".\") ? value.split(\".\") : [\"\", value || \"\"];\n\nconst parseRow = (value: Row) =>\n  value.client?.clientId\n    ? `${value.client.clientId}.${value.role.name}`\n    : value.role.name;\n\nexport const RoleComponent = ({\n  name,\n  label,\n  helpText,\n  defaultValue,\n  isDisabled = false,\n}: ComponentProps) => {\n  const { t } = useTranslation(\"dynamic\");\n\n  const [openModal, toggleModal] = useToggle();\n  const {\n    control,\n    formState: { errors },\n  } = useFormContext();\n\n  const fieldName = convertToName(name!);\n\n  return (\n    <FormGroup\n      label={t(label!)}\n      labelIcon={\n        <HelpItem helpText={t(helpText!)} fieldLabelId={`dynamic:${label}`} />\n      }\n      validated={errors[fieldName] ? \"error\" : \"default\"}\n      helperTextInvalid={t(\"common:required\")}\n      fieldId={name!}\n    >\n      <Controller\n        name={fieldName}\n        defaultValue={defaultValue || \"\"}\n        control={control}\n        render={({ field }) => (\n          <Split>\n            {openModal && (\n              <AddRoleMappingModal\n                id=\"id\"\n                type=\"roles\"\n                name={name}\n                onAssign={(rows) => field.onChange(parseRow(rows[0]))}\n                onClose={toggleModal}\n                isRadio\n              />\n            )}\n\n            {field.value !== \"\" && (\n              <SplitItem>\n                <Chip textMaxWidth=\"500px\" onClick={() => field.onChange(\"\")}>\n                  <ServiceRole\n                    role={{ name: parseValue(field.value)[1] }}\n                    client={{ clientId: parseValue(field.value)[0] }}\n                  />\n                </Chip>\n              </SplitItem>\n            )}\n            <SplitItem>\n              <Button\n                onClick={toggleModal}\n                variant=\"secondary\"\n                data-testid=\"add-roles\"\n                disabled={isDisabled}\n              >\n                {t(\"selectRole.label\")}\n              </Button>\n            </SplitItem>\n          </Split>\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import { CodeEditor, Language } from \"@patternfly/react-code-editor\";\nimport { FormGroup } from \"@patternfly/react-core\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"../help-enabler/HelpItem\";\nimport type { ComponentProps } from \"./components\";\nimport { convertToName } from \"./DynamicComponents\";\n\nexport const ScriptComponent = ({\n  name,\n  label,\n  helpText,\n  defaultValue,\n  isDisabled = false,\n}: ComponentProps) => {\n  const { t } = useTranslation(\"dynamic\");\n  const { control } = useFormContext();\n\n  return (\n    <FormGroup\n      label={t(label!)}\n      labelIcon={\n        <HelpItem\n          helpText={<span style={{ whiteSpace: \"pre-wrap\" }}>{helpText}</span>}\n          fieldLabelId={`dynamic:${label}`}\n        />\n      }\n      fieldId={name!}\n    >\n      <Controller\n        name={convertToName(name!)}\n        defaultValue={defaultValue}\n        control={control}\n        render={({ field }) => (\n          <CodeEditor\n            id={name!}\n            data-testid={name}\n            isReadOnly={isDisabled}\n            type=\"text\"\n            onChange={field.onChange}\n            code={field.value}\n            height=\"600px\"\n            language={Language.javascript}\n          />\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import { FormGroup } from \"@patternfly/react-core\";\nimport { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"../help-enabler/HelpItem\";\nimport { KeycloakTextInput } from \"../keycloak-text-input/KeycloakTextInput\";\nimport type { ComponentProps } from \"./components\";\nimport { convertToName } from \"./DynamicComponents\";\n\nexport const StringComponent = ({\n  name,\n  label,\n  helpText,\n  defaultValue,\n  isDisabled = false,\n}: ComponentProps) => {\n  const { t } = useTranslation(\"dynamic\");\n  const { register } = useFormContext();\n\n  return (\n    <FormGroup\n      label={t(label!)}\n      labelIcon={\n        <HelpItem helpText={t(helpText!)} fieldLabelId={`dynamic:${label}`} />\n      }\n      fieldId={name!}\n    >\n      <KeycloakTextInput\n        id={name!}\n        data-testid={name}\n        isDisabled={isDisabled}\n        defaultValue={defaultValue?.toString()}\n        {...register(convertToName(name!))}\n      />\n    </FormGroup>\n  );\n};\n","import { FormGroup } from \"@patternfly/react-core\";\nimport { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"../help-enabler/HelpItem\";\nimport { KeycloakTextArea } from \"../keycloak-text-area/KeycloakTextArea\";\nimport type { ComponentProps } from \"./components\";\nimport { convertToName } from \"./DynamicComponents\";\n\nexport const TextComponent = ({\n  name,\n  label,\n  helpText,\n  defaultValue,\n  isDisabled = false,\n}: ComponentProps) => {\n  const { t } = useTranslation(\"dynamic\");\n  const { register } = useFormContext();\n\n  return (\n    <FormGroup\n      label={t(label!)}\n      labelIcon={\n        <HelpItem helpText={t(helpText!)} fieldLabelId={`dynamic:${label}`} />\n      }\n      fieldId={name!}\n    >\n      <KeycloakTextArea\n        id={name!}\n        data-testid={name}\n        isDisabled={isDisabled}\n        defaultValue={defaultValue?.toString()}\n        {...register(convertToName(name!))}\n      />\n    </FormGroup>\n  );\n};\n","import type { ConfigPropertyRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/authenticatorConfigInfoRepresentation\";\n\nimport { BooleanComponent } from \"./BooleanComponent\";\nimport { ClientSelectComponent } from \"./ClientSelectComponent\";\nimport { FileComponent } from \"./FileComponent\";\nimport { GroupComponent } from \"./GroupComponent\";\nimport { ListComponent } from \"./ListComponent\";\nimport { MapComponent } from \"./MapComponent\";\nimport { MultiValuedListComponent } from \"./MultivaluedListComponent\";\nimport { MultiValuedStringComponent } from \"./MultivaluedStringComponent\";\nimport { PasswordComponent } from \"./PasswordComponent\";\nimport { RoleComponent } from \"./RoleComponent\";\nimport { ScriptComponent } from \"./ScriptComponent\";\nimport { StringComponent } from \"./StringComponent\";\nimport { TextComponent } from \"./TextComponent\";\n\nexport type ComponentProps = Omit<ConfigPropertyRepresentation, \"type\"> & {\n  isDisabled?: boolean;\n};\n\nconst ComponentTypes = [\n  \"String\",\n  \"Text\",\n  \"boolean\",\n  \"List\",\n  \"Role\",\n  \"Script\",\n  \"Map\",\n  \"Group\",\n  \"MultivaluedList\",\n  \"ClientList\",\n  \"MultivaluedString\",\n  \"File\",\n  \"Password\",\n] as const;\n\nexport type Components = (typeof ComponentTypes)[number];\n\nexport const COMPONENTS: {\n  [index in Components]: (props: ComponentProps) => JSX.Element;\n} = {\n  String: StringComponent,\n  Text: TextComponent,\n  boolean: BooleanComponent,\n  List: ListComponent,\n  Role: RoleComponent,\n  Script: ScriptComponent,\n  Map: MapComponent,\n  Group: GroupComponent,\n  ClientList: ClientSelectComponent,\n  MultivaluedList: MultiValuedListComponent,\n  MultivaluedString: MultiValuedStringComponent,\n  File: FileComponent,\n  Password: PasswordComponent,\n} as const;\n\nexport const isValidComponentType = (value: string): value is Components =>\n  value in COMPONENTS;\n","import type { ConfigPropertyRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/authenticatorConfigInfoRepresentation\";\n\nimport { COMPONENTS, isValidComponentType } from \"./components\";\nimport { convertAttributeNameToForm } from \"../../util\";\n\ntype DynamicComponentProps = {\n  properties: ConfigPropertyRepresentation[];\n  selectedValues?: string[];\n  parentCallback?: (data: string[]) => void;\n};\n\nexport const DynamicComponents = ({\n  properties,\n  ...rest\n}: DynamicComponentProps) => (\n  <>\n    {properties.map((property) => {\n      const componentType = property.type!;\n      if (isValidComponentType(componentType)) {\n        const Component = COMPONENTS[componentType];\n        return <Component key={property.name} {...property} {...rest} />;\n      } else {\n        console.warn(`There is no editor registered for ${componentType}`);\n      }\n    })}\n  </>\n);\n\nexport const convertToName = (name: string): string =>\n  convertAttributeNameToForm(`config.${name}`);\n"],"names":["BooleanComponent","name","label","helpText","isDisabled","t","useTranslation","control","useFormContext","FormGroup","HelpItem","Controller","convertToName","field","Switch","value","onChange","ClientSelectComponent","props","ClientSelect","FileComponent","defaultValue","filename","setFilename","useState","isLoading","setIsLoading","FileUpload","_","file","GroupComponent","open","setOpen","groups","setGroups","_Fragment","_jsx","GroupPickerDialog","title","ok","path","InputGroup","ChipGroup","Chip","undefined","Button","ListComponent","options","Select","toggle","SelectVariant","single","map","option","SelectOption","generateId","Math","floor","random","MapComponent","getValues","setValue","register","setMap","fieldName","useEffect","values","JSON","parse","length","push","key","id","update","val","stringify","entry","updateKey","index","updateEntry","updateValue","slice","remove","_jsxs","Flex","default","FlexItem","attribute","TextInput","MinusCircleIcon","ActionList","ActionListItem","PlusCircleIcon","MultiValuedListComponent","numChips","expandedText","collapsedText","typeaheadMulti","isOpen","v","toString","includes","filter","item","event","stopPropagation","MultiValuedStringComponent","MultiLineInput","fieldLabel","toLowerCase","PasswordComponent","PasswordInput","parseValue","split","parseRow","client","clientId","role","RoleComponent","openModal","toggleModal","useToggle","formState","errors","Split","AddRoleMappingModal","rows","SplitItem","ServiceRole","ScriptComponent","whiteSpace","CodeEditor","Language","javascript","StringComponent","KeycloakTextInput","TextComponent","KeycloakTextArea","COMPONENTS","isValidComponentType","DynamicComponents","properties","rest","property","componentType","type","Component","warn","convertAttributeNameToForm"],"mappings":"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"}