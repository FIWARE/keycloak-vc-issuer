{"version":3,"file":"SamlGeneralSettings.a85cd435.js","sources":["../../src/identity-providers/add/DescriptorSettings.tsx","../../src/identity-providers/add/SamlGeneralSettings.tsx"],"sourcesContent":["import IdentityProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/identityProviderRepresentation\";\nimport {\n  ExpandableSection,\n  FormGroup,\n  NumberInput,\n  Select,\n  SelectOption,\n  SelectVariant,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { SwitchField } from \"../component/SwitchField\";\nimport { TextField } from \"../component/TextField\";\n\nimport \"./discovery-settings.css\";\n\ntype DescriptorSettingsProps = {\n  readOnly: boolean;\n};\n\nconst Fields = ({ readOnly }: DescriptorSettingsProps) => {\n  const { t } = useTranslation(\"identity-providers\");\n  const { t: th } = useTranslation(\"identity-providers-help\");\n\n  const {\n    register,\n    control,\n    formState: { errors },\n  } = useFormContext<IdentityProviderRepresentation>();\n  const [namedPolicyDropdownOpen, setNamedPolicyDropdownOpen] = useState(false);\n  const [principalTypeDropdownOpen, setPrincipalTypeDropdownOpen] =\n    useState(false);\n  const [signatureAlgorithmDropdownOpen, setSignatureAlgorithmDropdownOpen] =\n    useState(false);\n  const [encryptionAlgorithmDropdownOpen, setEncryptionAlgorithmDropdownOpen] =\n    useState(false);\n  const [\n    samlSignatureKeyNameDropdownOpen,\n    setSamlSignatureKeyNameDropdownOpen,\n  ] = useState(false);\n\n  const wantAuthnSigned = useWatch({\n    control,\n    name: \"config.wantAuthnRequestsSigned\",\n  });\n\n  const validateSignature = useWatch({\n    control,\n    name: \"config.validateSignature\",\n  });\n\n  const principalType = useWatch({\n    control,\n    name: \"config.principalType\",\n  });\n\n  return (\n    <div className=\"pf-c-form pf-m-horizontal\">\n      <FormGroup\n        label={t(\"serviceProviderEntityId\")}\n        fieldId=\"kc-saml-service-provider-entity-id\"\n        labelIcon={\n          <HelpItem\n            helpText=\"identity-providers-help:serviceProviderEntityId\"\n            fieldLabelId=\"identity-providers:serviceProviderEntityId\"\n          />\n        }\n      >\n        <KeycloakTextInput\n          data-testid=\"serviceProviderEntityId\"\n          id=\"kc-saml-service-provider-entity-id\"\n          {...register(\"config.entityId\")}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"identityProviderEntityId\")}\n        fieldId=\"kc-identity-provider-entity-id\"\n        labelIcon={\n          <HelpItem\n            helpText=\"identity-providers-help:identityProviderEntityId\"\n            fieldLabelId=\"identity-providers:identityProviderEntityId\"\n          />\n        }\n      >\n        <KeycloakTextInput\n          data-testid=\"identityProviderEntityId\"\n          id=\"kc-identity-provider-entity-id\"\n          {...register(\"config.idpEntityId\")}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"ssoServiceUrl\")}\n        labelIcon={\n          <HelpItem\n            helpText={th(\"ssoServiceUrl\")}\n            fieldLabelId=\"identity-providers:ssoServiceUrl\"\n          />\n        }\n        fieldId=\"kc-sso-service-url\"\n        isRequired\n        validated={\n          errors.config?.singleSignOnServiceUrl\n            ? ValidatedOptions.error\n            : ValidatedOptions.default\n        }\n        helperTextInvalid={t(\"common:required\")}\n      >\n        <KeycloakTextInput\n          type=\"url\"\n          data-testid=\"sso-service-url\"\n          id=\"kc-sso-service-url\"\n          validated={\n            errors.config?.singleSignOnServiceUrl\n              ? ValidatedOptions.error\n              : ValidatedOptions.default\n          }\n          isReadOnly={readOnly}\n          {...register(\"config.singleSignOnServiceUrl\", { required: true })}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"singleLogoutServiceUrl\")}\n        labelIcon={\n          <HelpItem\n            helpText={th(\"singleLogoutServiceUrl\")}\n            fieldLabelId=\"identity-providers:singleLogoutServiceUrl\"\n          />\n        }\n        fieldId=\"single-logout-service-url\"\n        data-testid=\"single-logout-service-url\"\n        validated={\n          errors.config?.singleLogoutServiceUrl\n            ? ValidatedOptions.error\n            : ValidatedOptions.default\n        }\n        helperTextInvalid={t(\"common:required\")}\n      >\n        <KeycloakTextInput\n          type=\"url\"\n          id=\"single-logout-service-url\"\n          isReadOnly={readOnly}\n          {...register(\"config.singleLogoutServiceUrl\")}\n        />\n      </FormGroup>\n      <SwitchField\n        field=\"config.backchannelSupported\"\n        label=\"backchannelLogout\"\n        data-testid=\"backchannelLogout\"\n        isReadOnly={readOnly}\n      />\n      <FormGroup\n        label={t(\"nameIdPolicyFormat\")}\n        labelIcon={\n          <HelpItem\n            helpText={th(\"nameIdPolicyFormat\")}\n            fieldLabelId=\"identity-providers:nameIdPolicyFormat\"\n          />\n        }\n        fieldId=\"kc-nameIdPolicyFormat\"\n        helperTextInvalid={t(\"common:required\")}\n      >\n        <Controller\n          name=\"config.nameIDPolicyFormat\"\n          defaultValue={\"urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\"}\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"kc-nameIdPolicyFormat\"\n              onToggle={(isExpanded) => setNamedPolicyDropdownOpen(isExpanded)}\n              isOpen={namedPolicyDropdownOpen}\n              onSelect={(_, value) => {\n                field.onChange(value as string);\n                setNamedPolicyDropdownOpen(false);\n              }}\n              selections={field.value}\n              variant={SelectVariant.single}\n              isDisabled={readOnly}\n            >\n              <SelectOption\n                data-testid=\"persistent-option\"\n                value={\"urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\"}\n                isPlaceholder\n              >\n                {t(\"persistent\")}\n              </SelectOption>\n              <SelectOption\n                data-testid=\"transient-option\"\n                value=\"urn:oasis:names:tc:SAML:2.0:nameid-format:transient\"\n              >\n                {t(\"transient\")}\n              </SelectOption>\n              <SelectOption\n                data-testid=\"email-option\"\n                value=\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\"\n              >\n                {t(\"email\")}\n              </SelectOption>\n              <SelectOption\n                data-testid=\"kerberos-option\"\n                value=\"urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos\"\n              >\n                {t(\"kerberos\")}\n              </SelectOption>\n\n              <SelectOption\n                data-testid=\"x509-option\"\n                value=\"urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName\"\n              >\n                {t(\"x509\")}\n              </SelectOption>\n\n              <SelectOption\n                data-testid=\"windowsDomainQN-option\"\n                value=\"urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName\"\n              >\n                {t(\"windowsDomainQN\")}\n              </SelectOption>\n\n              <SelectOption\n                data-testid=\"unspecified-option\"\n                value={\"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\"}\n              >\n                {t(\"unspecified\")}\n              </SelectOption>\n            </Select>\n          )}\n        ></Controller>\n      </FormGroup>\n\n      <FormGroup\n        label={t(\"principalType\")}\n        labelIcon={\n          <HelpItem\n            helpText={th(\"principalType\")}\n            fieldLabelId=\"identity-providers:principalType\"\n          />\n        }\n        fieldId=\"kc-principalType\"\n        helperTextInvalid={t(\"common:required\")}\n      >\n        <Controller\n          name=\"config.principalType\"\n          defaultValue={t(\"subjectNameId\")}\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"kc-principalType\"\n              onToggle={(isExpanded) =>\n                setPrincipalTypeDropdownOpen(isExpanded)\n              }\n              isOpen={principalTypeDropdownOpen}\n              onSelect={(_, value) => {\n                field.onChange(value.toString());\n                setPrincipalTypeDropdownOpen(false);\n              }}\n              selections={field.value}\n              variant={SelectVariant.single}\n              isDisabled={readOnly}\n            >\n              <SelectOption\n                data-testid=\"subjectNameId-option\"\n                value=\"SUBJECT\"\n                isPlaceholder\n              >\n                {t(\"subjectNameId\")}\n              </SelectOption>\n              <SelectOption\n                data-testid=\"attributeName-option\"\n                value=\"ATTRIBUTE\"\n              >\n                {t(\"attributeName\")}\n              </SelectOption>\n              <SelectOption\n                data-testid=\"attributeFriendlyName-option\"\n                value=\"FRIENDLY_ATTRIBUTE\"\n              >\n                {t(\"attributeFriendlyName\")}\n              </SelectOption>\n            </Select>\n          )}\n        ></Controller>\n      </FormGroup>\n\n      {principalType?.includes(\"ATTRIBUTE\") && (\n        <FormGroup\n          label={t(\"principalAttribute\")}\n          labelIcon={\n            <HelpItem\n              helpText={th(\"principalAttribute\")}\n              fieldLabelId=\"identity-providers:principalAttribute\"\n            />\n          }\n          fieldId=\"principalAttribute\"\n        >\n          <KeycloakTextInput\n            id=\"principalAttribute\"\n            data-testid=\"principalAttribute\"\n            isReadOnly={readOnly}\n            {...register(\"config.principalAttribute\")}\n          />\n        </FormGroup>\n      )}\n      <SwitchField\n        field=\"config.allowCreate\"\n        label=\"allowCreate\"\n        isReadOnly={readOnly}\n      />\n\n      <SwitchField\n        field=\"config.postBindingResponse\"\n        label=\"httpPostBindingResponse\"\n        isReadOnly={readOnly}\n      />\n\n      <SwitchField\n        field=\"config.postBindingAuthnRequest\"\n        label=\"httpPostBindingAuthnRequest\"\n        isReadOnly={readOnly}\n      />\n\n      <SwitchField\n        field=\"config.postBindingLogout\"\n        label=\"httpPostBindingLogout\"\n        isReadOnly={readOnly}\n      />\n\n      <SwitchField\n        field=\"config.wantAuthnRequestsSigned\"\n        label=\"wantAuthnRequestsSigned\"\n        isReadOnly={readOnly}\n      />\n\n      {wantAuthnSigned === \"true\" && (\n        <>\n          <FormGroup\n            label={t(\"signatureAlgorithm\")}\n            labelIcon={\n              <HelpItem\n                helpText={th(\"signatureAlgorithm\")}\n                fieldLabelId=\"identity-providers:signatureAlgorithm\"\n              />\n            }\n            fieldId=\"kc-signatureAlgorithm\"\n          >\n            <Controller\n              name=\"config.signatureAlgorithm\"\n              defaultValue=\"RSA_SHA256\"\n              control={control}\n              render={({ field }) => (\n                <Select\n                  toggleId=\"kc-signatureAlgorithm\"\n                  onToggle={(isExpanded) =>\n                    setSignatureAlgorithmDropdownOpen(isExpanded)\n                  }\n                  isOpen={signatureAlgorithmDropdownOpen}\n                  onSelect={(_, value) => {\n                    field.onChange(value.toString());\n                    setSignatureAlgorithmDropdownOpen(false);\n                  }}\n                  selections={field.value}\n                  variant={SelectVariant.single}\n                  isDisabled={readOnly}\n                >\n                  <SelectOption value=\"RSA_SHA1\" />\n                  <SelectOption value=\"RSA_SHA256\" isPlaceholder />\n                  <SelectOption value=\"RSA_SHA256_MGF1\" />\n                  <SelectOption value=\"RSA_SHA512\" />\n                  <SelectOption value=\"RSA_SHA512_MGF1\" />\n                  <SelectOption value=\"DSA_SHA1\" />\n                </Select>\n              )}\n            ></Controller>\n          </FormGroup>\n          <FormGroup\n            label={t(\"encryptionAlgorithm\")}\n            labelIcon={\n              <HelpItem\n                helpText={th(\"encryptionAlgorithm\")}\n                fieldLabelId=\"identity-provider:encryptionAlgorithm\"\n              />\n            }\n            fieldId=\"kc-encryptionAlgorithm\"\n          >\n            <Controller\n              name=\"config.encryptionAlgorithm\"\n              defaultValue=\"RSA-OAEP\"\n              control={control}\n              render={({ field }) => (\n                <Select\n                  toggleId=\"kc-encryptionAlgorithm\"\n                  onToggle={(isExpanded) =>\n                    setEncryptionAlgorithmDropdownOpen(isExpanded)\n                  }\n                  isOpen={encryptionAlgorithmDropdownOpen}\n                  onSelect={(_, value) => {\n                    field.onChange(value.toString());\n                    setEncryptionAlgorithmDropdownOpen(false);\n                  }}\n                  selections={field.value}\n                  variant={SelectVariant.single}\n                  isDisabled={readOnly}\n                >\n                  <SelectOption value=\"RSA-OAEP\" />\n                  <SelectOption value=\"RSA1_5\" />\n                </Select>\n              )}\n            ></Controller>\n          </FormGroup>\n          <FormGroup\n            label={t(\"samlSignatureKeyName\")}\n            labelIcon={\n              <HelpItem\n                helpText={th(\"samlSignatureKeyName\")}\n                fieldLabelId=\"identity-providers:samlSignatureKeyName\"\n              />\n            }\n            fieldId=\"kc-samlSignatureKeyName\"\n          >\n            <Controller\n              name=\"config.xmlSigKeyInfoKeyNameTransformer\"\n              defaultValue={t(\"keyID\")}\n              control={control}\n              render={({ field }) => (\n                <Select\n                  toggleId=\"kc-samlSignatureKeyName\"\n                  onToggle={(isExpanded) =>\n                    setSamlSignatureKeyNameDropdownOpen(isExpanded)\n                  }\n                  isOpen={samlSignatureKeyNameDropdownOpen}\n                  onSelect={(_, value) => {\n                    field.onChange(value.toString());\n                    setSamlSignatureKeyNameDropdownOpen(false);\n                  }}\n                  selections={field.value}\n                  variant={SelectVariant.single}\n                  isDisabled={readOnly}\n                >\n                  <SelectOption value=\"NONE\" />\n                  <SelectOption value={t(\"keyID\")} isPlaceholder />\n                  <SelectOption value={t(\"certSubject\")} />\n                </Select>\n              )}\n            ></Controller>\n          </FormGroup>\n        </>\n      )}\n\n      <SwitchField\n        field=\"config.wantAssertionsSigned\"\n        label=\"wantAssertionsSigned\"\n        isReadOnly={readOnly}\n      />\n\n      <SwitchField\n        field=\"config.wantAssertionsEncrypted\"\n        label=\"wantAssertionsEncrypted\"\n        isReadOnly={readOnly}\n      />\n      <SwitchField\n        field=\"config.forceAuthn\"\n        label=\"forceAuthentication\"\n        isReadOnly={readOnly}\n      />\n\n      <SwitchField\n        field=\"config.validateSignature\"\n        label=\"validateSignature\"\n        isReadOnly={readOnly}\n      />\n      {validateSignature === \"true\" && (\n        <TextField\n          field=\"config.signingCertificate\"\n          label=\"validatingX509Certs\"\n          data-testid=\"validatingX509Certs\"\n          isReadOnly={readOnly}\n        />\n      )}\n      <SwitchField\n        field=\"config.signSpMetadata\"\n        label=\"signServiceProviderMetadata\"\n        data-testid=\"signServiceProviderMetadata\"\n        isReadOnly={readOnly}\n      />\n      <SwitchField\n        field=\"config.loginHint\"\n        label=\"passSubject\"\n        data-testid=\"passSubject\"\n        isReadOnly={readOnly}\n      />\n\n      <FormGroup\n        label={t(\"allowedClockSkew\")}\n        labelIcon={\n          <HelpItem\n            helpText={th(\"allowedClockSkew\")}\n            fieldLabelId=\"identity-providers:allowedClockSkew\"\n          />\n        }\n        fieldId=\"allowedClockSkew\"\n        helperTextInvalid={t(\"common:required\")}\n      >\n        <Controller\n          name=\"config.allowedClockSkew\"\n          defaultValue={0}\n          control={control}\n          render={({ field }) => {\n            const v = Number(field.value);\n            return (\n              <NumberInput\n                data-testid=\"allowedClockSkew\"\n                inputName=\"allowedClockSkew\"\n                min={0}\n                max={2147483}\n                value={v}\n                readOnly\n                onPlus={() => field.onChange(v + 1)}\n                onMinus={() => field.onChange(v - 1)}\n                onChange={(event) => {\n                  const value = Number(\n                    (event.target as HTMLInputElement).value\n                  );\n                  field.onChange(value < 0 ? 0 : value);\n                }}\n              />\n            );\n          }}\n        />\n      </FormGroup>\n\n      <FormGroup\n        label={t(\"attributeConsumingServiceIndex\")}\n        labelIcon={\n          <HelpItem\n            helpText={th(\"attributeConsumingServiceIndex\")}\n            fieldLabelId=\"identity-providers:attributeConsumingServiceIndex\"\n          />\n        }\n        fieldId=\"attributeConsumingServiceIndex\"\n        helperTextInvalid={t(\"common:required\")}\n      >\n        <Controller\n          name=\"config.attributeConsumingServiceIndex\"\n          defaultValue={0}\n          control={control}\n          render={({ field }) => {\n            const v = Number(field.value);\n            return (\n              <NumberInput\n                data-testid=\"attributeConsumingServiceIndex\"\n                inputName=\"attributeConsumingServiceIndex\"\n                min={0}\n                max={2147483}\n                value={v}\n                readOnly\n                onPlus={() => field.onChange(v + 1)}\n                onMinus={() => field.onChange(v - 1)}\n                onChange={(event) => {\n                  const value = Number(\n                    (event.target as HTMLInputElement).value\n                  );\n                  field.onChange(value < 0 ? 0 : value);\n                }}\n              />\n            );\n          }}\n        />\n      </FormGroup>\n\n      <FormGroup\n        label={t(\"attributeConsumingServiceName\")}\n        labelIcon={\n          <HelpItem\n            helpText={th(\"attributeConsumingServiceName\")}\n            fieldLabelId=\"identity-providers:attributeConsumingServiceName\"\n          />\n        }\n        fieldId=\"attributeConsumingServiceName\"\n        helperTextInvalid={t(\"common:required\")}\n      >\n        <KeycloakTextInput\n          id=\"attributeConsumingServiceName\"\n          data-testid=\"attributeConsumingServiceName\"\n          isReadOnly={readOnly}\n          {...register(\"config.attributeConsumingServiceName\")}\n        />\n      </FormGroup>\n    </div>\n  );\n};\n\nexport const DescriptorSettings = ({ readOnly }: DescriptorSettingsProps) => {\n  const { t } = useTranslation(\"identity-providers\");\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  return readOnly ? (\n    <ExpandableSection\n      className=\"keycloak__discovery-settings__metadata\"\n      toggleText={isExpanded ? t(\"hideMetaData\") : t(\"showMetaData\")}\n      onToggle={(isOpen) => setIsExpanded(isOpen)}\n      isExpanded={isExpanded}\n    >\n      <Fields readOnly={readOnly} />\n    </ExpandableSection>\n  ) : (\n    <Fields readOnly={readOnly} />\n  );\n};\n","import { FormGroup, ValidatedOptions } from \"@patternfly/react-core\";\nimport { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormattedLink } from \"../../components/external-link/FormattedLink\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport environment from \"../../environment\";\nimport { DisplayOrder } from \"../component/DisplayOrder\";\nimport { RedirectUrl } from \"../component/RedirectUrl\";\nimport { TextField } from \"../component/TextField\";\n\nimport \"./saml-general-settings.css\";\n\ntype SamlGeneralSettingsProps = {\n  id: string;\n  isAliasReadonly?: boolean;\n};\n\nexport const SamlGeneralSettings = ({\n  id,\n  isAliasReadonly = false,\n}: SamlGeneralSettingsProps) => {\n  const { t } = useTranslation(\"identity-providers\");\n  const { realm } = useRealm();\n\n  const {\n    register,\n    watch,\n    formState: { errors },\n  } = useFormContext();\n\n  const alias = watch(\"alias\");\n\n  return (\n    <>\n      <RedirectUrl id={id} />\n\n      <FormGroup\n        label={t(\"alias\")}\n        labelIcon={\n          <HelpItem\n            helpText=\"identity-providers-help:alias\"\n            fieldLabelId=\"identity-providers:alias\"\n          />\n        }\n        fieldId=\"alias\"\n        isRequired\n        validated={\n          errors.alias ? ValidatedOptions.error : ValidatedOptions.default\n        }\n        helperTextInvalid={t(\"common:required\")}\n      >\n        <KeycloakTextInput\n          isRequired\n          id=\"alias\"\n          data-testid=\"alias\"\n          isReadOnly={isAliasReadonly}\n          validated={\n            errors.alias ? ValidatedOptions.error : ValidatedOptions.default\n          }\n          {...register(\"alias\", { required: true })}\n        />\n      </FormGroup>\n\n      <TextField\n        field=\"displayName\"\n        label=\"displayName\"\n        data-testid=\"displayName\"\n      />\n      <DisplayOrder />\n      <FormGroup\n        label={t(\"endpoints\")}\n        fieldId=\"endpoints\"\n        labelIcon={\n          <HelpItem\n            helpText=\"identity-providers-help:alias\"\n            fieldLabelId=\"identity-providers:alias\"\n          />\n        }\n        className=\"keycloak__identity-providers__saml_link\"\n      >\n        <FormattedLink\n          title={t(\"samlEndpointsLabel\")}\n          href={`${environment.authUrl}/realms/${realm}/broker/${alias}/endpoint/descriptor`}\n          isInline\n        />\n      </FormGroup>\n    </>\n  );\n};\n"],"names":["Fields","readOnly","t","useTranslation","th","register","control","formState","errors","useFormContext","namedPolicyDropdownOpen","setNamedPolicyDropdownOpen","useState","principalTypeDropdownOpen","setPrincipalTypeDropdownOpen","signatureAlgorithmDropdownOpen","setSignatureAlgorithmDropdownOpen","encryptionAlgorithmDropdownOpen","setEncryptionAlgorithmDropdownOpen","samlSignatureKeyNameDropdownOpen","setSamlSignatureKeyNameDropdownOpen","wantAuthnSigned","useWatch","name","validateSignature","principalType","_jsx","FormGroup","HelpItem","KeycloakTextInput","config","singleSignOnServiceUrl","ValidatedOptions","error","default","required","singleLogoutServiceUrl","SwitchField","Controller","field","Select","isExpanded","_","value","onChange","SelectVariant","single","SelectOption","toString","includes","_Fragment","TextField","v","Number","NumberInput","event","target","DescriptorSettings","setIsExpanded","ExpandableSection","isOpen","SamlGeneralSettings","id","isAliasReadonly","realm","useRealm","watch","alias","RedirectUrl","DisplayOrder","FormattedLink","environment","authUrl"],"mappings":"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"}