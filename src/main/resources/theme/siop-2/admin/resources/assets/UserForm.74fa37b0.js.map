{"version":3,"file":"UserForm.74fa37b0.js","sources":["../../src/user/FederatedUserLink.tsx","../../src/user/UserProfileFields.tsx","../../src/user/UserForm.tsx"],"sourcesContent":["import { Button } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport type ComponentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentRepresentation\";\nimport type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport { useAccess } from \"../context/access/Access\";\nimport { useAdminClient, useFetch } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { toUserFederationLdap } from \"../user-federation/routes/UserFederationLdap\";\n\ntype FederatedUserLinkProps = {\n  user: UserRepresentation;\n};\n\nexport const FederatedUserLink = ({ user }: FederatedUserLinkProps) => {\n  const access = useAccess();\n  const { realm } = useRealm();\n  const { adminClient } = useAdminClient();\n\n  const [component, setComponent] = useState<ComponentRepresentation>();\n\n  useFetch(\n    () =>\n      access.hasAccess(\"view-realm\")\n        ? adminClient.components.findOne({\n            id: (user.federationLink || user.origin)!,\n          })\n        : adminClient.userStorageProvider.name({\n            id: (user.federationLink || user.origin)!,\n          }),\n    setComponent,\n    []\n  );\n\n  if (!component) return null;\n\n  return (\n    <Button\n      variant=\"link\"\n      isDisabled={!access.hasAccess(\"view-realm\")}\n      component={(props) => (\n        <Link\n          {...props}\n          to={toUserFederationLdap({\n            id: component.id!,\n            realm,\n          })}\n        />\n      )}\n    >\n      {component.name}\n    </Button>\n  );\n};\n","import type {\n  UserProfileAttribute,\n  UserProfileAttributeRequired,\n} from \"@keycloak/keycloak-admin-client/lib/defs/userProfileConfig\";\nimport {\n  Form,\n  FormGroup,\n  Select,\n  SelectOption,\n  Text,\n} from \"@patternfly/react-core\";\nimport { Fragment } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { KeycloakTextInput } from \"../components/keycloak-text-input/KeycloakTextInput\";\nimport { ScrollForm } from \"../components/scroll-form/ScrollForm\";\nimport { useUserProfile } from \"../realm-settings/user-profile/UserProfileContext\";\nimport useToggle from \"../utils/useToggle\";\n\nconst ROOT_ATTRIBUTES = [\"username\", \"firstName\", \"lastName\", \"email\"];\nconst DEFAULT_ROLES = [\"admin\", \"user\"];\n\ntype UserProfileFieldsProps = {\n  roles?: string[];\n};\n\nexport type UserProfileError = {\n  responseData: { errors?: { errorMessage: string }[] };\n};\n\nexport function isUserProfileError(error: unknown): error is UserProfileError {\n  return !!(error as UserProfileError).responseData.errors;\n}\n\nexport function userProfileErrorToString(error: UserProfileError) {\n  return (\n    error.responseData[\"errors\"]?.map((e) => e[\"errorMessage\"]).join(\"\\n\") || \"\"\n  );\n}\n\nexport const UserProfileFields = ({\n  roles = [\"admin\"],\n}: UserProfileFieldsProps) => {\n  const { t } = useTranslation(\"realm-settings\");\n  const { config } = useUserProfile();\n\n  return (\n    <ScrollForm\n      sections={[{ name: \"\" }, ...(config?.groups || [])].map((g) => ({\n        title: g.name || t(\"general\"),\n        panel: (\n          <Form>\n            {g.displayDescription && (\n              <Text className=\"pf-u-pb-lg\">{g.displayDescription}</Text>\n            )}\n            {config?.attributes?.map((attribute) => (\n              <Fragment key={attribute.name}>\n                {(attribute.group || \"\") === g.name &&\n                  (attribute.permissions?.view || DEFAULT_ROLES).some((r) =>\n                    roles.includes(r)\n                  ) && <FormField attribute={attribute} roles={roles} />}\n              </Fragment>\n            ))}\n          </Form>\n        ),\n      }))}\n    />\n  );\n};\n\ntype FormFieldProps = {\n  attribute: UserProfileAttribute;\n  roles: string[];\n};\n\nconst FormField = ({ attribute, roles }: FormFieldProps) => {\n  const { t } = useTranslation(\"users\");\n  const {\n    formState: { errors },\n    register,\n    control,\n  } = useFormContext();\n  const [open, toggle] = useToggle();\n\n  const isBundleKey = (displayName?: string) => displayName?.includes(\"${\");\n  const unWrap = (key: string) => key.substring(2, key.length - 1);\n\n  const isSelect = (attribute: UserProfileAttribute) =>\n    Object.hasOwn(attribute.validations || {}, \"options\");\n\n  const isRootAttribute = (attr?: string) =>\n    attr && ROOT_ATTRIBUTES.includes(attr);\n\n  const isRequired = (required: UserProfileAttributeRequired | undefined) =>\n    Object.keys(required || {}).length !== 0;\n\n  const fieldName = (attribute: UserProfileAttribute) =>\n    `${isRootAttribute(attribute.name) ? \"\" : \"attributes.\"}${attribute.name}`;\n\n  return (\n    <FormGroup\n      key={attribute.name}\n      label={\n        (isBundleKey(attribute.displayName)\n          ? t(unWrap(attribute.displayName!))\n          : attribute.displayName) || attribute.name\n      }\n      fieldId={attribute.name}\n      isRequired={isRequired(attribute.required)}\n      validated={errors.username ? \"error\" : \"default\"}\n      helperTextInvalid={t(\"common:required\")}\n    >\n      {isSelect(attribute) ? (\n        <Controller\n          name={fieldName(attribute)}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId={attribute.name}\n              onToggle={toggle}\n              onSelect={(_, value) => {\n                field.onChange(value.toString());\n                toggle();\n              }}\n              selections={field.value}\n              variant=\"single\"\n              aria-label={t(\"common:selectOne\")}\n              isOpen={open}\n              isDisabled={\n                !(attribute.permissions?.edit || DEFAULT_ROLES).some((r) =>\n                  roles.includes(r)\n                )\n              }\n            >\n              {[\n                <SelectOption key=\"empty\" value=\"\">\n                  {t(\"common:choose\")}\n                </SelectOption>,\n                ...(\n                  attribute.validations?.options as { options: string[] }\n                ).options.map((option) => (\n                  <SelectOption\n                    selected={field.value === option}\n                    key={option}\n                    value={option}\n                  >\n                    {option}\n                  </SelectOption>\n                )),\n              ]}\n            </Select>\n          )}\n        />\n      ) : (\n        <KeycloakTextInput\n          id={attribute.name}\n          isDisabled={\n            !(attribute.permissions?.edit || DEFAULT_ROLES).some((r) =>\n              roles.includes(r)\n            )\n          }\n          {...register(fieldName(attribute))}\n        />\n      )}\n    </FormGroup>\n  );\n};\n","import type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport type RequiredActionProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/requiredActionProviderRepresentation\";\nimport type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  Chip,\n  ChipGroup,\n  FormGroup,\n  InputGroup,\n  Select,\n  SelectOption,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { FormAccess } from \"../components/form-access/FormAccess\";\nimport { GroupPickerDialog } from \"../components/group/GroupPickerDialog\";\nimport { HelpItem } from \"../components/help-enabler/HelpItem\";\nimport { KeycloakTextInput } from \"../components/keycloak-text-input/KeycloakTextInput\";\nimport { useAccess } from \"../context/access/Access\";\nimport { useAdminClient, useFetch } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { emailRegexPattern } from \"../util\";\nimport useFormatDate from \"../utils/useFormatDate\";\nimport useIsFeatureEnabled, { Feature } from \"../utils/useIsFeatureEnabled\";\nimport { FederatedUserLink } from \"./FederatedUserLink\";\nimport { UserProfileFields } from \"./UserProfileFields\";\n\nexport type BruteForced = {\n  isBruteForceProtected?: boolean;\n  isLocked?: boolean;\n};\n\nexport type UserFormProps = {\n  user?: UserRepresentation;\n  bruteForce?: BruteForced;\n  save: (user: UserRepresentation) => void;\n  onGroupsUpdate?: (groups: GroupRepresentation[]) => void;\n};\n\nconst EmailVerified = () => {\n  const { t } = useTranslation(\"users\");\n  const { control } = useFormContext();\n  return (\n    <FormGroup\n      label={t(\"emailVerified\")}\n      fieldId=\"kc-email-verified\"\n      helperTextInvalid={t(\"common:required\")}\n      labelIcon={\n        <HelpItem\n          helpText=\"users-help:emailVerified\"\n          fieldLabelId=\"users:emailVerified\"\n        />\n      }\n    >\n      <Controller\n        name=\"emailVerified\"\n        defaultValue={false}\n        control={control}\n        render={({ field }) => (\n          <Switch\n            data-testid=\"email-verified-switch\"\n            id=\"kc-user-email-verified\"\n            onChange={(value) => field.onChange(value)}\n            isChecked={field.value}\n            label={t(\"common:yes\")}\n            labelOff={t(\"common:no\")}\n          />\n        )}\n      />\n    </FormGroup>\n  );\n};\n\nexport const UserForm = ({\n  user,\n  bruteForce: { isBruteForceProtected, isLocked } = {\n    isBruteForceProtected: false,\n    isLocked: false,\n  },\n  save,\n  onGroupsUpdate,\n}: UserFormProps) => {\n  const { t } = useTranslation(\"users\");\n  const { realm: realmName } = useRealm();\n  const formatDate = useFormatDate();\n  const isFeatureEnabled = useIsFeatureEnabled();\n\n  const [\n    isRequiredUserActionsDropdownOpen,\n    setRequiredUserActionsDropdownOpen,\n  ] = useState(false);\n  const navigate = useNavigate();\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-users\");\n\n  const {\n    handleSubmit,\n    register,\n    watch,\n    control,\n    reset,\n    formState: { errors },\n  } = useFormContext();\n  const watchUsernameInput = watch(\"username\");\n  const [selectedGroups, setSelectedGroups] = useState<GroupRepresentation[]>(\n    []\n  );\n  const [open, setOpen] = useState(false);\n  const [locked, setLocked] = useState(isLocked);\n  const [realm, setRealm] = useState<RealmRepresentation>();\n  const [requiredActions, setRequiredActions] = useState<\n    RequiredActionProviderRepresentation[]\n  >([]);\n\n  useFetch(\n    () =>\n      Promise.all([\n        adminClient.realms.findOne({ realm: realmName }),\n        adminClient.authenticationManagement.getRequiredActions(),\n      ]),\n    ([realm, actions]) => {\n      if (!realm) {\n        throw new Error(t(\"common:notFound\"));\n      }\n      setRealm(realm);\n      setRequiredActions(actions);\n    },\n    []\n  );\n\n  const unLockUser = async () => {\n    try {\n      await adminClient.attackDetection.del({ id: user!.id! });\n      addAlert(t(\"unlockSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"users:unlockError\", error);\n    }\n  };\n\n  const clearSelection = () => {\n    setRequiredUserActionsDropdownOpen(false);\n  };\n\n  const deleteItem = (id: string) => {\n    setSelectedGroups(selectedGroups.filter((item) => item.name !== id));\n    onGroupsUpdate?.(selectedGroups);\n  };\n\n  const addChips = async (groups: GroupRepresentation[]): Promise<void> => {\n    setSelectedGroups([...selectedGroups!, ...groups]);\n    onGroupsUpdate?.([...selectedGroups!, ...groups]);\n  };\n\n  const addGroups = async (groups: GroupRepresentation[]): Promise<void> => {\n    const newGroups = groups;\n\n    newGroups.forEach(async (group) => {\n      try {\n        await adminClient.users.addToGroup({\n          id: user!.id!,\n          groupId: group.id!,\n        });\n        addAlert(t(\"users:addedGroupMembership\"), AlertVariant.success);\n      } catch (error) {\n        addError(\"users:addedGroupMembershipError\", error);\n      }\n    });\n  };\n\n  const toggleModal = () => {\n    setOpen(!open);\n  };\n\n  const isUserProfileEnabled =\n    isFeatureEnabled(Feature.DeclarativeUserProfile) &&\n    realm?.attributes?.userProfileEnabled === \"true\";\n\n  return (\n    <FormAccess\n      isHorizontal\n      onSubmit={handleSubmit(save)}\n      role=\"query-users\"\n      fineGrainedAccess={user?.access?.manage}\n      className=\"pf-u-mt-lg\"\n    >\n      {open && (\n        <GroupPickerDialog\n          type=\"selectMany\"\n          text={{\n            title: \"users:selectGroups\",\n            ok: \"users:join\",\n          }}\n          canBrowse={isManager}\n          onConfirm={(groups) => {\n            user?.id ? addGroups(groups || []) : addChips(groups || []);\n            setOpen(false);\n          }}\n          onClose={() => setOpen(false)}\n          filterGroups={selectedGroups}\n        />\n      )}\n      {isUserProfileEnabled && <EmailVerified />}\n      {user?.id && (\n        <>\n          <FormGroup label={t(\"common:id\")} fieldId=\"kc-id\" isRequired>\n            <KeycloakTextInput\n              id={user.id}\n              aria-label={t(\"userID\")}\n              value={user.id}\n              type=\"text\"\n              isReadOnly\n            />\n          </FormGroup>\n          <FormGroup label={t(\"createdAt\")} fieldId=\"kc-created-at\" isRequired>\n            <KeycloakTextInput\n              value={formatDate(new Date(user.createdTimestamp!))}\n              type=\"text\"\n              id=\"kc-created-at\"\n              aria-label={t(\"createdAt\")}\n              name=\"createdTimestamp\"\n              isReadOnly\n            />\n          </FormGroup>\n        </>\n      )}\n      <FormGroup\n        label={t(\"requiredUserActions\")}\n        fieldId=\"kc-required-user-actions\"\n        validated={errors.requiredActions ? \"error\" : \"default\"}\n        helperTextInvalid={t(\"common:required\")}\n        labelIcon={\n          <HelpItem\n            helpText=\"users-help:requiredUserActions\"\n            fieldLabelId=\"users:requiredUserActions\"\n          />\n        }\n      >\n        <Controller\n          name=\"requiredActions\"\n          defaultValue={[]}\n          control={control}\n          render={({ field }) => (\n            <Select\n              data-testid=\"required-actions-select\"\n              placeholderText=\"Select action\"\n              toggleId=\"kc-required-user-actions\"\n              onToggle={() =>\n                setRequiredUserActionsDropdownOpen(\n                  !isRequiredUserActionsDropdownOpen\n                )\n              }\n              isOpen={isRequiredUserActionsDropdownOpen}\n              selections={field.value}\n              onSelect={(_, v) => {\n                const option = v as string;\n                if (field.value.includes(option)) {\n                  field.onChange(\n                    field.value.filter((item: string) => item !== option)\n                  );\n                } else {\n                  field.onChange([...field.value, option]);\n                }\n              }}\n              onClear={clearSelection}\n              variant=\"typeaheadmulti\"\n            >\n              {requiredActions.map(({ alias, name }) => (\n                <SelectOption key={alias} value={alias}>\n                  {name}\n                </SelectOption>\n              ))}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      {(user?.federationLink || user?.origin) && (\n        <FormGroup\n          label={t(\"federationLink\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"users-help:federationLink\"\n              fieldLabelId=\"users:federationLink\"\n            />\n          }\n        >\n          <FederatedUserLink user={user} />\n        </FormGroup>\n      )}\n      {isUserProfileEnabled ? (\n        <UserProfileFields />\n      ) : (\n        <>\n          {!realm?.registrationEmailAsUsername && (\n            <FormGroup\n              label={t(\"username\")}\n              fieldId=\"kc-username\"\n              isRequired\n              validated={errors.username ? \"error\" : \"default\"}\n              helperTextInvalid={t(\"common:required\")}\n            >\n              <KeycloakTextInput\n                id=\"kc-username\"\n                isReadOnly={\n                  !!user?.id &&\n                  !realm?.editUsernameAllowed &&\n                  realm?.editUsernameAllowed !== undefined\n                }\n                {...register(\"username\")}\n              />\n            </FormGroup>\n          )}\n          <FormGroup\n            label={t(\"email\")}\n            fieldId=\"kc-description\"\n            validated={errors.email ? \"error\" : \"default\"}\n            helperTextInvalid={t(\"users:emailInvalid\")}\n          >\n            <KeycloakTextInput\n              type=\"email\"\n              id=\"kc-email\"\n              data-testid=\"email-input\"\n              {...register(\"email\", {\n                pattern: emailRegexPattern,\n              })}\n            />\n          </FormGroup>\n          <EmailVerified />\n          <FormGroup\n            label={t(\"firstName\")}\n            fieldId=\"kc-firstname\"\n            validated={errors.firstName ? \"error\" : \"default\"}\n            helperTextInvalid={t(\"common:required\")}\n          >\n            <KeycloakTextInput\n              data-testid=\"firstName-input\"\n              id=\"kc-firstname\"\n              {...register(\"firstName\")}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"lastName\")}\n            fieldId=\"kc-name\"\n            validated={errors.lastName ? \"error\" : \"default\"}\n          >\n            <KeycloakTextInput\n              data-testid=\"lastName-input\"\n              id=\"kc-lastname\"\n              {...register(\"lastName\")}\n            />\n          </FormGroup>\n        </>\n      )}\n      {isBruteForceProtected && (\n        <FormGroup\n          label={t(\"temporaryLocked\")}\n          fieldId=\"temporaryLocked\"\n          labelIcon={\n            <HelpItem\n              helpText=\"users-help:temporaryLocked\"\n              fieldLabelId=\"users:temporaryLocked\"\n            />\n          }\n        >\n          <Switch\n            data-testid=\"user-locked-switch\"\n            id=\"temporaryLocked\"\n            onChange={(value) => {\n              unLockUser();\n              setLocked(value);\n            }}\n            isChecked={locked}\n            isDisabled={!locked}\n            label={t(\"common:on\")}\n            labelOff={t(\"common:off\")}\n          />\n        </FormGroup>\n      )}\n      {!user?.id && (\n        <FormGroup\n          label={t(\"common:groups\")}\n          fieldId=\"kc-groups\"\n          validated={errors.requiredActions ? \"error\" : \"default\"}\n          helperTextInvalid={t(\"common:required\")}\n          labelIcon={\n            <HelpItem helpText=\"users-help:groups\" fieldLabelId=\"groups\" />\n          }\n        >\n          <Controller\n            name=\"groups\"\n            defaultValue={[]}\n            control={control}\n            render={() => (\n              <InputGroup>\n                <ChipGroup categoryName={\" \"}>\n                  {selectedGroups.map((currentChip) => (\n                    <Chip\n                      key={currentChip.id}\n                      onClick={() => deleteItem(currentChip.name!)}\n                    >\n                      {currentChip.path}\n                    </Chip>\n                  ))}\n                </ChipGroup>\n                <Button\n                  id=\"kc-join-groups-button\"\n                  onClick={toggleModal}\n                  variant=\"secondary\"\n                  data-testid=\"join-groups-button\"\n                >\n                  {t(\"users:joinGroups\")}\n                </Button>\n              </InputGroup>\n            )}\n          />\n        </FormGroup>\n      )}\n\n      <ActionGroup>\n        <Button\n          data-testid={!user?.id ? \"create-user\" : \"save-user\"}\n          isDisabled={\n            !user?.id &&\n            !watchUsernameInput &&\n            !realm?.registrationEmailAsUsername\n          }\n          variant=\"primary\"\n          type=\"submit\"\n        >\n          {user?.id ? t(\"common:save\") : t(\"common:create\")}\n        </Button>\n        <Button\n          data-testid=\"cancel-create-user\"\n          onClick={() =>\n            user?.id ? reset(user) : navigate(`/${realmName}/users`)\n          }\n          variant=\"link\"\n        >\n          {user?.id ? t(\"common:revert\") : t(\"common:cancel\")}\n        </Button>\n      </ActionGroup>\n    </FormAccess>\n  );\n};\n"],"names":["FederatedUserLink","user","access","useAccess","realm","useRealm","adminClient","useAdminClient","component","setComponent","useState","useFetch","hasAccess","components","findOne","id","federationLink","origin","userStorageProvider","name","Button","props","_jsx","Link","toUserFederationLdap","ROOT_ATTRIBUTES","DEFAULT_ROLES","isUserProfileError","error","responseData","errors","userProfileErrorToString","map","e","join","UserProfileFields","roles","t","useTranslation","config","useUserProfile","ScrollForm","groups","g","title","panel","Form","displayDescription","Text","attributes","attribute","Fragment","group","permissions","view","some","includes","r","FormField","formState","register","control","useFormContext","open","toggle","useToggle","isBundleKey","displayName","unWrap","key","substring","length","isSelect","Object","hasOwn","validations","isRootAttribute","attr","isRequired","required","keys","fieldName","FormGroup","username","Controller","field","Select","_","value","onChange","toString","edit","SelectOption","options","option","KeycloakTextInput","EmailVerified","HelpItem","Switch","UserForm","bruteForce","isBruteForceProtected","isLocked","save","onGroupsUpdate","realmName","formatDate","useFormatDate","isFeatureEnabled","useIsFeatureEnabled","isRequiredUserActionsDropdownOpen","setRequiredUserActionsDropdownOpen","navigate","useNavigate","addAlert","addError","useAlerts","isManager","handleSubmit","watch","reset","watchUsernameInput","selectedGroups","setSelectedGroups","setOpen","locked","setLocked","setRealm","requiredActions","setRequiredActions","Promise","all","realms","authenticationManagement","getRequiredActions","actions","Error","unLockUser","attackDetection","del","AlertVariant","success","clearSelection","deleteItem","filter","item","addChips","addGroups","forEach","users","addToGroup","groupId","toggleModal","isUserProfileEnabled","Feature","DeclarativeUserProfile","userProfileEnabled","FormAccess","manage","GroupPickerDialog","ok","_jsxs","_Fragment","Date","createdTimestamp","v","alias","registrationEmailAsUsername","editUsernameAllowed","undefined","email","pattern","emailRegexPattern","firstName","lastName","InputGroup","ChipGroup","currentChip","Chip","path","ActionGroup"],"mappings":"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"}