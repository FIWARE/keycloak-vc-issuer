{"version":3,"file":"UserProfileContext.1a5ea02c.js","sources":["../../src/realm-settings/user-profile/UserProfileContext.tsx"],"sourcesContent":["import type UserProfileConfig from \"@keycloak/keycloak-admin-client/lib/defs/userProfileConfig\";\nimport { AlertVariant } from \"@patternfly/react-core\";\nimport { PropsWithChildren, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { createNamedContext } from \"../../utils/createNamedContext\";\nimport useRequiredContext from \"../../utils/useRequiredContext\";\n\ntype UserProfileProps = {\n  config: UserProfileConfig | null;\n  save: SaveCallback;\n  isSaving: boolean;\n};\n\nexport type SaveCallback = (\n  updatedConfig: UserProfileConfig,\n  options?: SaveOptions\n) => Promise<boolean>;\n\nexport type SaveOptions = {\n  successMessageKey?: string;\n  errorMessageKey?: string;\n};\n\nexport const UserProfileContext = createNamedContext<\n  UserProfileProps | undefined\n>(\"UserProfileContext\", undefined);\n\nexport const UserProfileProvider = ({\n  children,\n}: PropsWithChildren<unknown>) => {\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n  const { addAlert, addError } = useAlerts();\n  const { t } = useTranslation();\n  const [config, setConfig] = useState<UserProfileConfig | null>(null);\n  const [refreshCount, setRefreshCount] = useState(0);\n  const [isSaving, setIsSaving] = useState(false);\n\n  useFetch(\n    () => adminClient.users.getProfile({ realm }),\n    (config) => setConfig(config),\n    [refreshCount]\n  );\n\n  const save: SaveCallback = async (updatedConfig, options) => {\n    setIsSaving(true);\n\n    try {\n      await adminClient.users.updateProfile({\n        ...updatedConfig,\n        realm,\n      });\n\n      setIsSaving(false);\n      setRefreshCount(refreshCount + 1);\n      addAlert(\n        t(options?.successMessageKey ?? \"realm-settings:userProfileSuccess\"),\n        AlertVariant.success\n      );\n\n      return true;\n    } catch (error) {\n      setIsSaving(false);\n      addError(\n        options?.errorMessageKey ?? \"realm-settings:userProfileError\",\n        error\n      );\n\n      return false;\n    }\n  };\n\n  return (\n    <UserProfileContext.Provider value={{ config, save, isSaving }}>\n      {children}\n    </UserProfileContext.Provider>\n  );\n};\n\nexport const useUserProfile = () => useRequiredContext(UserProfileContext);\n"],"names":["UserProfileContext","createNamedContext","undefined","UserProfileProvider","children","adminClient","useAdminClient","realm","useRealm","addAlert","addError","useAlerts","t","useTranslation","config","setConfig","useState","refreshCount","setRefreshCount","isSaving","setIsSaving","useFetch","users","getProfile","save","updatedConfig","options","updateProfile","successMessageKey","AlertVariant","success","error","errorMessageKey","_jsx","useUserProfile","useRequiredContext"],"mappings":"wGA2BaA,MAAAA,EAAqBC,EAEhC,qBAAsBC,MAAS,EAEpBC,EAAsB,CAAC,CAClCC,SAAAA,CAC0B,IAAM,CAC1B,KAAA,CAAEC,YAAAA,GAAgBC,EAAgB,EAClC,CAAEC,MAAAA,GAAUC,EAAU,EACtB,CAAEC,SAAAA,EAAUC,SAAAA,GAAaC,EAAW,EACpC,CAAEC,EAAAA,GAAMC,EAAgB,EACxB,CAACC,EAAQC,CAAS,EAAIC,mBAAmC,IAAI,EAC7D,CAACC,EAAcC,CAAe,EAAIF,mBAAS,CAAC,EAC5C,CAACG,EAAUC,CAAW,EAAIJ,mBAAS,EAAK,EAG5CK,EAAA,IAAMhB,EAAYiB,MAAMC,WAAW,CAAEhB,MAAAA,CAAAA,CAAO,EAC3CO,GAAWC,EAAUD,CAAM,EAC5B,CAACG,CAAY,CAAC,EAGVO,MAAAA,EAAqB,MAAOC,EAAeC,IAAY,CAC3DN,EAAY,EAAI,EAEZ,GAAA,CACIf,aAAAA,EAAYiB,MAAMK,cAAc,CACpC,GAAGF,EACHlB,MAAAA,CAAAA,CACD,EAEDa,EAAY,EAAK,EACjBF,EAAgBD,EAAe,CAAC,EAChCR,EACEG,EAAEc,GAASE,mBAAqB,mCAAmC,EACnEC,EAAaC,OAAO,EAGf,SACAC,GACPX,OAAAA,EAAY,EAAK,EAEfM,EAAAA,GAASM,iBAAmB,kCAC5BD,CAAK,EAGA,EACT,CAAA,EAIA,OAAAE,EAACjC,EAAmB,SAAQ,CAAC,MAAO,CAAEc,OAAAA,EAAQU,KAAAA,EAAML,SAAAA,CAAS,EAAE,SAAAf,CAAA,CAEjC,CAElC,EAEa8B,EAAiB,IAAMC,EAAmBnC,CAAkB"}