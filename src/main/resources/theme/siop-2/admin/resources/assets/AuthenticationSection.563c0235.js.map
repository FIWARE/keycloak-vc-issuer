{"version":3,"file":"AuthenticationSection.563c0235.js","sources":["../../../../node_modules/@patternfly/react-core/dist/esm/components/EmptyState/EmptyStatePrimary.js","../../src/authentication/DuplicateFlowModal.tsx","../../src/authentication/RequiredActions.tsx","../../src/authentication/policies/PolicyRow.tsx","../../src/authentication/policies/util.ts","../../src/authentication/policies/PasswordPolicy.tsx","../../src/authentication/policies/OtpPolicy.tsx","../../src/authentication/policies/WebauthnPolicy.tsx","../../src/authentication/policies/Policies.tsx","../../src/authentication/BindFlowDialog.tsx","../../src/authentication/components/UsedBy.tsx","../../src/authentication/AuthenticationSection.tsx"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/EmptyState/empty-state';\nexport const EmptyStatePrimary = (_a) => {\n    var { children, className = '' } = _a, props = __rest(_a, [\"children\", \"className\"]);\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.emptyStatePrimary, className) }, props), children));\n};\nEmptyStatePrimary.displayName = 'EmptyStatePrimary';\n//# sourceMappingURL=EmptyStatePrimary.js.map","import AuthenticationFlowRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/authenticationFlowRepresentation\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Form,\n  Modal,\n  ModalVariant,\n} from \"@patternfly/react-core\";\nimport { useEffect } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { NameDescription } from \"./form/NameDescription\";\nimport { toFlow } from \"./routes/Flow\";\n\ntype DuplicateFlowModalProps = {\n  name: string;\n  description: string;\n  toggleDialog: () => void;\n  onComplete: () => void;\n};\n\nexport const DuplicateFlowModal = ({\n  name,\n  description,\n  toggleDialog,\n  onComplete,\n}: DuplicateFlowModalProps) => {\n  const { t } = useTranslation(\"authentication\");\n  const form = useForm<AuthenticationFlowRepresentation>({ mode: \"onChange\" });\n  const { setValue, getValues, handleSubmit } = form;\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const navigate = useNavigate();\n  const { realm } = useRealm();\n\n  useEffect(() => {\n    setValue(\"alias\", t(\"copyOf\", { name }));\n    setValue(\"description\", description);\n  }, [name, description]);\n\n  const onSubmit = async () => {\n    const form = getValues();\n    try {\n      await adminClient.authenticationManagement.copyFlow({\n        flow: name,\n        newName: form.alias!,\n      });\n      const newFlow = (\n        await adminClient.authenticationManagement.getFlows()\n      ).find((flow) => flow.alias === form.alias)!;\n\n      if (form.description !== description) {\n        newFlow.description = form.description;\n        await adminClient.authenticationManagement.updateFlow(\n          { flowId: newFlow.id! },\n          newFlow\n        );\n      }\n      addAlert(t(\"copyFlowSuccess\"), AlertVariant.success);\n      navigate(\n        toFlow({\n          realm,\n          id: newFlow.id!,\n          usedBy: \"notInUse\",\n          builtIn: newFlow.builtIn ? \"builtIn\" : undefined,\n        })\n      );\n    } catch (error) {\n      addError(\"authentication:copyFlowError\", error);\n    }\n    onComplete();\n  };\n\n  return (\n    <Modal\n      title={t(\"duplicateFlow\")}\n      onClose={toggleDialog}\n      variant={ModalVariant.small}\n      actions={[\n        <Button\n          key=\"confirm\"\n          data-testid=\"confirm\"\n          type=\"submit\"\n          form=\"duplicate-flow-form\"\n        >\n          {t(\"duplicate\")}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          data-testid=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={toggleDialog}\n        >\n          {t(\"common:cancel\")}\n        </Button>,\n      ]}\n      isOpen\n    >\n      <FormProvider {...form}>\n        <Form\n          id=\"duplicate-flow-form\"\n          onSubmit={handleSubmit(onSubmit)}\n          isHorizontal\n        >\n          <NameDescription />\n        </Form>\n      </FormProvider>\n    </Modal>\n  );\n};\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { AlertVariant, Switch } from \"@patternfly/react-core\";\n\nimport type RequiredActionProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/requiredActionProviderRepresentation\";\nimport type RequiredActionProviderSimpleRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/requiredActionProviderSimpleRepresentation\";\nimport { useAdminClient, useFetch } from \"../context/auth/AdminClient\";\nimport { DraggableTable } from \"./components/DraggableTable\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport { toKey } from \"../util\";\n\ntype DataType = RequiredActionProviderRepresentation &\n  RequiredActionProviderSimpleRepresentation;\n\ntype Row = {\n  name: string;\n  enabled: boolean;\n  defaultAction: boolean;\n  data: DataType;\n};\n\nexport const RequiredActions = () => {\n  const { t } = useTranslation(\"authentication\");\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  const [actions, setActions] = useState<Row[]>();\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  useFetch(\n    async () => {\n      const [requiredActions, unregisteredRequiredActions] = await Promise.all([\n        adminClient.authenticationManagement.getRequiredActions(),\n        adminClient.authenticationManagement.getUnregisteredRequiredActions(),\n      ]);\n      return [\n        ...requiredActions.map((a) => ({\n          name: a.name!,\n          enabled: a.enabled!,\n          defaultAction: a.defaultAction!,\n          data: a,\n        })),\n        ...unregisteredRequiredActions.map((a) => ({\n          name: a.name!,\n          enabled: false,\n          defaultAction: false,\n          data: a,\n        })),\n      ];\n    },\n    (actions) => setActions(actions),\n    [key]\n  );\n\n  const isUnregisteredAction = (data: DataType): boolean => {\n    return !(\"alias\" in data);\n  };\n\n  const updateAction = async (\n    action: DataType,\n    field: \"enabled\" | \"defaultAction\"\n  ) => {\n    try {\n      if (field in action) {\n        action[field] = !action[field];\n        await adminClient.authenticationManagement.updateRequiredAction(\n          { alias: action.alias! },\n          action\n        );\n      } else if (isUnregisteredAction(action)) {\n        await adminClient.authenticationManagement.registerRequiredAction({\n          name: action.name,\n          providerId: action.providerId,\n        });\n      }\n      refresh();\n      addAlert(t(\"updatedRequiredActionSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"authentication:updatedRequiredActionError\", error);\n    }\n  };\n\n  const executeMove = async (\n    action: RequiredActionProviderRepresentation,\n    times: number\n  ) => {\n    try {\n      const alias = action.alias!;\n      for (let index = 0; index < Math.abs(times); index++) {\n        if (times > 0) {\n          await adminClient.authenticationManagement.lowerRequiredActionPriority(\n            {\n              alias,\n            }\n          );\n        } else {\n          await adminClient.authenticationManagement.raiseRequiredActionPriority(\n            {\n              alias,\n            }\n          );\n        }\n      }\n      refresh();\n\n      addAlert(t(\"updatedRequiredActionSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"authentication:updatedRequiredActionError\", error);\n    }\n  };\n\n  if (!actions) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <DraggableTable\n      keyField=\"name\"\n      onDragFinish={async (nameDragged, items) => {\n        const keys = actions.map((e) => e.name);\n        const newIndex = items.indexOf(nameDragged);\n        const oldIndex = keys.indexOf(nameDragged);\n        const dragged = actions[oldIndex].data;\n        if (!dragged.alias) return;\n\n        const times = newIndex - oldIndex;\n        executeMove(dragged, times);\n      }}\n      columns={[\n        {\n          name: \"name\",\n          displayKey: \"authentication:requiredActions\",\n        },\n        {\n          name: \"enabled\",\n          displayKey: \"common:enabled\",\n          cellRenderer: (row) => (\n            <Switch\n              id={`enable-${toKey(row.name)}`}\n              label={t(\"common:on\")}\n              labelOff={t(\"common:off\")}\n              isChecked={row.enabled}\n              onChange={() => {\n                updateAction(row.data, \"enabled\");\n              }}\n              aria-label={toKey(row.name)}\n            />\n          ),\n        },\n        {\n          name: \"default\",\n          displayKey: \"authentication:setAsDefaultAction\",\n          cellRenderer: (row) => (\n            <Switch\n              id={`default-${toKey(row.name)}`}\n              label={t(\"common:on\")}\n              isDisabled={!row.enabled}\n              labelOff={!row.enabled ? t(\"disabledOff\") : t(\"common:off\")}\n              isChecked={row.defaultAction}\n              onChange={() => {\n                updateAction(row.data, \"defaultAction\");\n              }}\n              aria-label={toKey(row.name)}\n            />\n          ),\n        },\n      ]}\n      data={actions}\n    />\n  );\n};\n","import type PasswordPolicyTypeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/passwordPolicyTypeRepresentation\";\nimport {\n  Button,\n  FormGroup,\n  NumberInput,\n  Split,\n  SplitItem,\n  Switch,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { MinusCircleIcon } from \"@patternfly/react-icons\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\n\nimport \"./policy-row.css\";\n\ntype PolicyRowProps = {\n  policy: PasswordPolicyTypeRepresentation;\n  onRemove: (id?: string) => void;\n};\n\nexport const PolicyRow = ({\n  policy: { id, configType, defaultValue, displayName },\n  onRemove,\n}: PolicyRowProps) => {\n  const { t } = useTranslation(\"authentication\");\n  const {\n    control,\n    register,\n    formState: { errors },\n  } = useFormContext();\n\n  return (\n    <FormGroup\n      label={displayName}\n      fieldId={id!}\n      isRequired\n      helperTextInvalid={t(\"common:required\")}\n      validated={\n        errors[id!] ? ValidatedOptions.error : ValidatedOptions.default\n      }\n      labelIcon={\n        <HelpItem\n          helpText={`authentication-help:passwordPolicies.${id}`}\n          fieldLabelId={`authentication:${id}`}\n        />\n      }\n    >\n      <Split>\n        <SplitItem isFilled>\n          {configType && configType !== \"int\" && (\n            <KeycloakTextInput\n              id={id}\n              data-testid={id}\n              {...register(id!, { required: true })}\n              defaultValue={defaultValue}\n              validated={\n                errors[id!] ? ValidatedOptions.error : ValidatedOptions.default\n              }\n            />\n          )}\n          {configType === \"int\" && (\n            <Controller\n              name={id!}\n              defaultValue={Number.parseInt(defaultValue || \"0\")}\n              control={control}\n              render={({ field }) => {\n                const MIN_VALUE = 0;\n                const setValue = (newValue: number) =>\n                  field.onChange(Math.max(newValue, MIN_VALUE));\n                const value = Number(field.value);\n\n                return (\n                  <NumberInput\n                    id={id}\n                    value={value}\n                    min={MIN_VALUE}\n                    onPlus={() => setValue(value + 1)}\n                    onMinus={() => setValue(value - 1)}\n                    onChange={(event) => {\n                      const newValue = Number(event.currentTarget.value);\n                      setValue(!isNaN(newValue) ? newValue : 0);\n                    }}\n                    className=\"keycloak__policies_authentication__number-field\"\n                  />\n                );\n              }}\n            />\n          )}\n          {!configType && (\n            <Switch\n              id={id!}\n              label={t(\"common:on\")}\n              labelOff={t(\"common:off\")}\n              isChecked\n              isDisabled\n              aria-label={displayName}\n            />\n          )}\n        </SplitItem>\n        <SplitItem>\n          <Button\n            data-testid={`remove-${id}`}\n            variant=\"link\"\n            className=\"keycloak__policies_authentication__minus-icon\"\n            onClick={() => onRemove(id)}\n            aria-label={t(\"common:remove\")}\n          >\n            <MinusCircleIcon />\n          </Button>\n        </SplitItem>\n      </Split>\n    </FormGroup>\n  );\n};\n","import type PasswordPolicyTypeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/passwordPolicyTypeRepresentation\";\n\nexport type SubmittedValues = {\n  [index: string]: string;\n};\n\nconst POLICY_SEPARATOR = \" and \";\n\nexport const serializePolicy = (\n  policies: PasswordPolicyTypeRepresentation[],\n  submitted: SubmittedValues\n) =>\n  policies\n    .map((policy) => `${policy.id}(${submitted[policy.id!]})`)\n    .join(POLICY_SEPARATOR);\n\ntype PolicyValue = PasswordPolicyTypeRepresentation & {\n  value?: string;\n};\n\nexport const parsePolicy = (\n  value: string,\n  policies: PasswordPolicyTypeRepresentation[]\n) =>\n  value\n    .split(POLICY_SEPARATOR)\n    .map(parsePolicyToken)\n    .reduce<PolicyValue[]>((result, { id, value }) => {\n      const matchingPolicy = policies.find((policy) => policy.id === id);\n\n      if (!matchingPolicy) {\n        return result;\n      }\n\n      return result.concat({ ...matchingPolicy, value });\n    }, []);\n\ntype PolicyTokenParsed = {\n  id: string;\n  value?: string;\n};\n\nfunction parsePolicyToken(token: string): PolicyTokenParsed {\n  const valueStart = token.indexOf(\"(\");\n\n  if (valueStart === -1) {\n    return { id: token.trim() };\n  }\n\n  const id = token.substring(0, valueStart).trim();\n  const valueEnd = token.lastIndexOf(\")\");\n\n  if (valueEnd === -1) {\n    return { id };\n  }\n\n  const value = token.substring(valueStart + 1, valueEnd).trim();\n\n  return { id, value };\n}\n","import {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Divider,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStatePrimary,\n  PageSection,\n  Select,\n  SelectOption,\n  Title,\n  Toolbar,\n  ToolbarContent,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { PlusCircleIcon } from \"@patternfly/react-icons\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport type PasswordPolicyTypeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/passwordPolicyTypeRepresentation\";\nimport type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { PolicyRow } from \"./PolicyRow\";\nimport { parsePolicy, serializePolicy, SubmittedValues } from \"./util\";\n\ntype PolicySelectProps = {\n  onSelect: (row: PasswordPolicyTypeRepresentation) => void;\n  selectedPolicies: PasswordPolicyTypeRepresentation[];\n};\n\nconst PolicySelect = ({ onSelect, selectedPolicies }: PolicySelectProps) => {\n  const { t } = useTranslation(\"authentication\");\n  const { passwordPolicies } = useServerInfo();\n  const [open, setOpen] = useState(false);\n\n  const policies = useMemo(\n    () =>\n      passwordPolicies?.filter(\n        (p) => selectedPolicies.find((o) => o.id === p.id) === undefined\n      ),\n    [selectedPolicies]\n  );\n\n  return (\n    <Select\n      width={300}\n      onSelect={(_, selection) => {\n        onSelect(selection as PasswordPolicyTypeRepresentation);\n        setOpen(false);\n      }}\n      onToggle={(value) => setOpen(value)}\n      isOpen={open}\n      selections={t(\"addPolicy\")}\n      isDisabled={policies?.length === 0}\n    >\n      {policies?.map((policy) => (\n        <SelectOption key={policy.id} value={policy}>\n          {policy.displayName}\n        </SelectOption>\n      ))}\n    </Select>\n  );\n};\n\ntype PasswordPolicyProps = {\n  realm: RealmRepresentation;\n  realmUpdated: (realm: RealmRepresentation) => void;\n};\n\nexport const PasswordPolicy = ({\n  realm,\n  realmUpdated,\n}: PasswordPolicyProps) => {\n  const { t } = useTranslation(\"authentication\");\n  const { passwordPolicies } = useServerInfo();\n\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const { realm: realmName } = useRealm();\n\n  const [rows, setRows] = useState<PasswordPolicyTypeRepresentation[]>([]);\n  const onSelect = (row: PasswordPolicyTypeRepresentation) => {\n    setRows([...rows, row]);\n    setValue(row.id!, row.defaultValue!, { shouldDirty: true });\n  };\n\n  const form = useForm<SubmittedValues>({\n    defaultValues: {},\n  });\n  const {\n    handleSubmit,\n    setValue,\n    reset,\n    formState: { isDirty },\n  } = form;\n\n  const setupForm = (realm: RealmRepresentation) => {\n    reset();\n    const values = parsePolicy(realm.passwordPolicy || \"\", passwordPolicies!);\n    values.forEach((v) => {\n      setValue(v.id!, v.value!);\n    });\n    setRows(values);\n  };\n\n  useEffect(() => setupForm(realm), []);\n\n  const save = async (values: SubmittedValues) => {\n    const updatedRealm = {\n      ...realm,\n      passwordPolicy: serializePolicy(rows, values),\n    };\n    try {\n      await adminClient.realms.update({ realm: realmName }, updatedRealm);\n      realmUpdated(updatedRealm);\n      setupForm(updatedRealm);\n      addAlert(t(\"updatePasswordPolicySuccess\"), AlertVariant.success);\n    } catch (error: any) {\n      addError(\"authentication:updatePasswordPolicyError\", error);\n    }\n  };\n\n  return (\n    <PageSection variant=\"light\" className=\"pf-u-p-0\">\n      {(rows.length !== 0 || realm.passwordPolicy) && (\n        <>\n          <Toolbar>\n            <ToolbarContent>\n              <ToolbarItem>\n                <PolicySelect onSelect={onSelect} selectedPolicies={rows} />\n              </ToolbarItem>\n            </ToolbarContent>\n          </Toolbar>\n          <Divider />\n          <PageSection variant=\"light\">\n            <FormProvider {...form}>\n              <FormAccess\n                className=\"keycloak__policies_authentication__form\"\n                role=\"manage-realm\"\n                isHorizontal\n                onSubmit={handleSubmit(save)}\n              >\n                {rows.map((r, index) => (\n                  <PolicyRow\n                    key={`${r.id}-${index}`}\n                    policy={r}\n                    onRemove={(id) => {\n                      setRows(rows.filter((r) => r.id !== id));\n                      setValue(r.id!, \"\", { shouldDirty: true });\n                    }}\n                  />\n                ))}\n                <ActionGroup>\n                  <Button\n                    data-testid=\"save\"\n                    variant=\"primary\"\n                    type=\"submit\"\n                    isDisabled={!isDirty}\n                  >\n                    {t(\"common:save\")}\n                  </Button>\n                  <Button\n                    data-testid=\"reload\"\n                    variant={ButtonVariant.link}\n                    onClick={() => setupForm(realm)}\n                  >\n                    {t(\"common:reload\")}\n                  </Button>\n                </ActionGroup>\n              </FormAccess>\n            </FormProvider>\n          </PageSection>\n        </>\n      )}\n      {!rows.length && !realm.passwordPolicy && (\n        <EmptyState data-testid=\"empty-state\" variant=\"large\">\n          <EmptyStateIcon icon={PlusCircleIcon} />\n          <Title headingLevel=\"h1\" size=\"lg\">\n            {t(\"noPasswordPolicies\")}\n          </Title>\n          <EmptyStateBody>{t(\"noPasswordPoliciesInstructions\")}</EmptyStateBody>\n          <EmptyStatePrimary>\n            <PolicySelect onSelect={onSelect} selectedPolicies={[]} />\n          </EmptyStatePrimary>\n        </EmptyState>\n      )}\n    </PageSection>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Chip,\n  ChipGroup,\n  FormGroup,\n  NumberInput,\n  PageSection,\n  Radio,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Switch,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { useEffect, useMemo } from \"react\";\nimport { Controller, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { TimeSelector } from \"../../components/time-selector/TimeSelector\";\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport useLocaleSort from \"../../utils/useLocaleSort\";\nimport useToggle from \"../../utils/useToggle\";\n\nimport \"./otp-policy.css\";\n\nconst POLICY_TYPES = [\"totp\", \"hotp\"] as const;\nconst OTP_HASH_ALGORITHMS = [\"SHA1\", \"SHA256\", \"SHA512\"] as const;\nconst NUMBER_OF_DIGITS = [6, 8] as const;\n\ntype OtpPolicyProps = {\n  realm: RealmRepresentation;\n  realmUpdated: (realm: RealmRepresentation) => void;\n};\n\ntype FormFields = Omit<\n  RealmRepresentation,\n  \"clients\" | \"components\" | \"groups\"\n>;\n\nexport const OtpPolicy = ({ realm, realmUpdated }: OtpPolicyProps) => {\n  const { t } = useTranslation(\"authentication\");\n  const {\n    control,\n    reset,\n    handleSubmit,\n    formState: { isValid, isDirty, errors },\n  } = useForm<FormFields>({ mode: \"onChange\", defaultValues: realm });\n  const { adminClient } = useAdminClient();\n  const { realm: realmName } = useRealm();\n  const { addAlert, addError } = useAlerts();\n  const localeSort = useLocaleSort();\n  const [open, toggle] = useToggle();\n\n  const otpType = useWatch({\n    name: \"otpPolicyType\",\n    control,\n    defaultValue: POLICY_TYPES[0],\n  });\n\n  const setupForm = (formValues: FormFields) => reset(formValues);\n\n  useEffect(() => setupForm(realm), []);\n\n  const supportedApplications = useMemo(() => {\n    const labels = (realm.otpSupportedApplications ?? []).map((key) =>\n      t(`otpSupportedApplications.${key}`)\n    );\n\n    return localeSort(labels, (label) => label);\n  }, [realm.otpSupportedApplications]);\n\n  const onSubmit = async (formValues: FormFields) => {\n    try {\n      await adminClient.realms.update({ realm: realmName }, formValues);\n      const updatedRealm = await adminClient.realms.findOne({\n        realm: realmName,\n      });\n      realmUpdated(updatedRealm!);\n      setupForm(updatedRealm!);\n      addAlert(t(\"updateOtpSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"authentication:updateOtpError\", error);\n    }\n  };\n\n  return (\n    <PageSection variant=\"light\">\n      <FormAccess\n        role=\"manage-realm\"\n        isHorizontal\n        onSubmit={handleSubmit(onSubmit)}\n        className=\"keycloak__otp_policies_authentication__form\"\n      >\n        <FormGroup\n          label={t(\"otpType\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"authentication-help:otpType\"\n              fieldLabelId=\"authentication:otpType\"\n            />\n          }\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"otpPolicyType\"\n            data-testid=\"otpPolicyType\"\n            defaultValue={POLICY_TYPES[0]}\n            control={control}\n            render={({ field }) => (\n              <>\n                {POLICY_TYPES.map((type) => (\n                  <Radio\n                    key={type}\n                    id={type}\n                    data-testid={type}\n                    isChecked={field.value === type}\n                    name=\"otpPolicyType\"\n                    onChange={() => field.onChange(type)}\n                    label={t(`policyType.${type}`)}\n                    className=\"keycloak__otp_policies_authentication__policy-type\"\n                  />\n                ))}\n              </>\n            )}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"otpHashAlgorithm\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"authentication-help:otpHashAlgorithm\"\n              fieldLabelId=\"authentication:otpHashAlgorithm\"\n            />\n          }\n          fieldId=\"otpHashAlgorithm\"\n        >\n          <Controller\n            name=\"otpPolicyAlgorithm\"\n            defaultValue={`Hmac${OTP_HASH_ALGORITHMS[0]}`}\n            control={control}\n            render={({ field }) => (\n              <Select\n                toggleId=\"otpHashAlgorithm\"\n                onToggle={toggle}\n                onSelect={(_, value) => {\n                  field.onChange(value.toString());\n                  toggle();\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n                isOpen={open}\n              >\n                {OTP_HASH_ALGORITHMS.map((type) => (\n                  <SelectOption\n                    key={type}\n                    selected={`Hmac${type}` === field.value}\n                    value={`Hmac${type}`}\n                  >\n                    {type}\n                  </SelectOption>\n                ))}\n              </Select>\n            )}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"otpPolicyDigits\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"authentication-help:otpPolicyDigits\"\n              fieldLabelId=\"authentication:otpPolicyDigits\"\n            />\n          }\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"otpPolicyDigits\"\n            data-testid=\"otpPolicyDigits\"\n            defaultValue={NUMBER_OF_DIGITS[0]}\n            control={control}\n            render={({ field }) => (\n              <>\n                {NUMBER_OF_DIGITS.map((type) => (\n                  <Radio\n                    key={type}\n                    id={`digit-${type}`}\n                    data-testid={`digit-${type}`}\n                    isChecked={field.value === type}\n                    name=\"otpPolicyDigits\"\n                    onChange={() => field.onChange(type)}\n                    label={type}\n                    className=\"keycloak__otp_policies_authentication__number-of-digits\"\n                  />\n                ))}\n              </>\n            )}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"lookAhead\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"authentication-help:lookAhead\"\n              fieldLabelId=\"authentication:lookAhead\"\n            />\n          }\n          fieldId=\"lookAhead\"\n        >\n          <Controller\n            name=\"otpPolicyLookAheadWindow\"\n            defaultValue={1}\n            control={control}\n            render={({ field }) => {\n              const MIN_VALUE = 0;\n              const value = field.value ?? 1;\n              const setValue = (newValue: number) =>\n                field.onChange(Math.max(newValue, MIN_VALUE));\n\n              return (\n                <NumberInput\n                  id=\"lookAhead\"\n                  value={value}\n                  min={MIN_VALUE}\n                  onPlus={() => setValue(value + 1)}\n                  onMinus={() => setValue(value - 1)}\n                  onChange={(event) => {\n                    const newValue = Number(event.currentTarget.value);\n                    setValue(!isNaN(newValue) ? newValue : 0);\n                  }}\n                />\n              );\n            }}\n          />\n        </FormGroup>\n        {otpType === POLICY_TYPES[0] && (\n          <FormGroup\n            label={t(\"otpPolicyPeriod\")}\n            fieldId=\"otpPolicyPeriod\"\n            helperTextInvalid={t(\"otpPolicyPeriodErrorHint\")}\n            validated={\n              errors.otpPolicyPeriod\n                ? ValidatedOptions.error\n                : ValidatedOptions.default\n            }\n            labelIcon={\n              <HelpItem\n                helpText=\"authentication-help:otpPolicyPeriod\"\n                fieldLabelId=\"authentication:otpPolicyPeriod\"\n              />\n            }\n          >\n            <Controller\n              name=\"otpPolicyPeriod\"\n              defaultValue={30}\n              control={control}\n              rules={{ min: 1, max: 120 }}\n              render={({ field }) => {\n                const value = field.value ?? 30;\n\n                return (\n                  <TimeSelector\n                    id=\"otpPolicyPeriod\"\n                    data-testid=\"otpPolicyPeriod\"\n                    value={value}\n                    onChange={field.onChange}\n                    units={[\"second\", \"minute\"]}\n                    validated={\n                      errors.otpPolicyPeriod\n                        ? ValidatedOptions.error\n                        : ValidatedOptions.default\n                    }\n                  />\n                );\n              }}\n            />\n          </FormGroup>\n        )}\n        {otpType === POLICY_TYPES[1] && (\n          <FormGroup\n            label={t(\"initialCounter\")}\n            fieldId=\"initialCounter\"\n            helperTextInvalid={t(\"initialCounterErrorHint\")}\n            validated={\n              errors.otpPolicyInitialCounter\n                ? ValidatedOptions.error\n                : ValidatedOptions.default\n            }\n            labelIcon={\n              <HelpItem\n                helpText=\"authentication-help:initialCounter\"\n                fieldLabelId=\"authentication:initialCounter\"\n              />\n            }\n          >\n            <Controller\n              name=\"otpPolicyInitialCounter\"\n              defaultValue={30}\n              control={control}\n              rules={{ min: 1, max: 120 }}\n              render={({ field }) => {\n                const MIN_VALUE = 1;\n                const value = field.value ?? 30;\n                const setValue = (newValue: number) =>\n                  field.onChange(Math.max(newValue, MIN_VALUE));\n\n                return (\n                  <NumberInput\n                    id=\"initialCounter\"\n                    value={value}\n                    min={MIN_VALUE}\n                    onPlus={() => setValue(value + 1)}\n                    onMinus={() => setValue(value - 1)}\n                    onChange={(event) => {\n                      const newValue = Number(event.currentTarget.value);\n                      setValue(!isNaN(newValue) ? newValue : 30);\n                    }}\n                  />\n                );\n              }}\n            />\n          </FormGroup>\n        )}\n        <FormGroup\n          label={t(\"supportedApplications\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"authentication-help:supportedApplications\"\n              fieldLabelId=\"authentication:supportedApplications\"\n            />\n          }\n        >\n          <ChipGroup data-testid=\"supportedApplications\">\n            {supportedApplications.map((label) => (\n              <Chip key={label} isReadOnly>\n                {label}\n              </Chip>\n            ))}\n          </ChipGroup>\n        </FormGroup>\n\n        {otpType === POLICY_TYPES[0] && (\n          <FormGroup\n            label={t(\"otpPolicyCodeReusable\")}\n            fieldId=\"otpPolicyCodeReusable\"\n            labelIcon={\n              <HelpItem\n                helpText=\"authentication-help:otpPolicyCodeReusable\"\n                fieldLabelId=\"authentication:otpPolicyCodeReusable\"\n              />\n            }\n          >\n            <Controller\n              name=\"otpPolicyCodeReusable\"\n              defaultValue={true}\n              control={control}\n              render={({ field }) => (\n                <Switch\n                  id=\"otpPolicyCodeReusable\"\n                  label={t(\"common:on\")}\n                  labelOff={t(\"common:off\")}\n                  isChecked={field.value}\n                  onChange={field.onChange}\n                />\n              )}\n            />\n          </FormGroup>\n        )}\n\n        <ActionGroup>\n          <Button\n            data-testid=\"save\"\n            variant=\"primary\"\n            type=\"submit\"\n            isDisabled={!isValid || !isDirty}\n          >\n            {t(\"common:save\")}\n          </Button>\n          <Button\n            data-testid=\"reload\"\n            variant={ButtonVariant.link}\n            onClick={() => reset({ ...realm })}\n          >\n            {t(\"common:reload\")}\n          </Button>\n        </ActionGroup>\n      </FormAccess>\n    </PageSection>\n  );\n};\n","import {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  FormGroup,\n  PageSection,\n  Popover,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Switch,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { QuestionCircleIcon } from \"@patternfly/react-icons\";\nimport { useEffect, useState } from \"react\";\nimport {\n  Controller,\n  FormProvider,\n  useForm,\n  useFormContext,\n} from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { useHelp } from \"../../components/help-enabler/HelpHeader\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { MultiLineInput } from \"../../components/multi-line-input/MultiLineInput\";\nimport { TimeSelector } from \"../../components/time-selector/TimeSelector\";\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { convertFormValuesToObject, convertToFormValues } from \"../../util\";\n\nimport \"./webauthn-policy.css\";\n\nconst SIGNATURE_ALGORITHMS = [\n  \"ES256\",\n  \"ES384\",\n  \"ES512\",\n  \"RS256\",\n  \"RS384\",\n  \"RS512\",\n  \"RS1\",\n] as const;\nconst ATTESTATION_PREFERENCE = [\n  \"not specified\",\n  \"none\",\n  \"indirect\",\n  \"direct\",\n] as const;\n\nconst AUTHENTICATOR_ATTACHMENT = [\n  \"not specified\",\n  \"platform\",\n  \"cross-platform\",\n] as const;\n\nconst RESIDENT_KEY_OPTIONS = [\"not specified\", \"Yes\", \"No\"] as const;\n\nconst USER_VERIFY = [\n  \"not specified\",\n  \"required\",\n  \"preferred\",\n  \"discouraged\",\n] as const;\n\ntype WeauthnSelectProps = {\n  name: string;\n  label: string;\n  options: readonly string[];\n  labelPrefix?: string;\n  isMultiSelect?: boolean;\n};\n\nconst WebauthnSelect = ({\n  name,\n  label,\n  options,\n  labelPrefix,\n  isMultiSelect = false,\n}: WeauthnSelectProps) => {\n  const { t } = useTranslation(\"authentication\");\n  const { control } = useFormContext();\n\n  const [open, toggle] = useState(false);\n  return (\n    <FormGroup\n      label={t(label)}\n      labelIcon={\n        <HelpItem\n          helpText={`authentication-help:${label}`}\n          fieldLabelId={`authentication:${label}`}\n        />\n      }\n      fieldId={name}\n    >\n      <Controller\n        name={name}\n        defaultValue={options[0]}\n        control={control}\n        render={({ field }) => (\n          <Select\n            toggleId={name}\n            onToggle={toggle}\n            onSelect={(_, selectedValue) => {\n              if (isMultiSelect) {\n                const changedValue = field.value.find(\n                  (item: string) => item === selectedValue\n                )\n                  ? field.value.filter((item: string) => item !== selectedValue)\n                  : [...field.value, selectedValue];\n                field.onChange(changedValue);\n              } else {\n                field.onChange(selectedValue.toString());\n                toggle(false);\n              }\n            }}\n            selections={\n              labelPrefix ? t(`${labelPrefix}.${field.value}`) : field.value\n            }\n            variant={\n              isMultiSelect\n                ? SelectVariant.typeaheadMulti\n                : SelectVariant.single\n            }\n            aria-label={t(name)}\n            typeAheadAriaLabel={t(name)}\n            isOpen={open}\n          >\n            {options.map((option) => (\n              <SelectOption\n                selected={option === field.value}\n                key={option}\n                value={option}\n              >\n                {labelPrefix ? t(`${labelPrefix}.${option}`) : option}\n              </SelectOption>\n            ))}\n          </Select>\n        )}\n      />\n    </FormGroup>\n  );\n};\n\ntype WebauthnPolicyProps = {\n  realm: RealmRepresentation;\n  realmUpdated: (realm: RealmRepresentation) => void;\n  isPasswordLess?: boolean;\n};\n\nexport const WebauthnPolicy = ({\n  realm,\n  realmUpdated,\n  isPasswordLess = false,\n}: WebauthnPolicyProps) => {\n  const { t } = useTranslation(\"authentication\");\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const { realm: realmName } = useRealm();\n  const { enabled } = useHelp();\n  const form = useForm({ mode: \"onChange\" });\n  const {\n    control,\n    register,\n    setValue,\n    handleSubmit,\n    formState: { isDirty, errors },\n  } = form;\n\n  const namePrefix = isPasswordLess\n    ? \"webAuthnPolicyPasswordless\"\n    : \"webAuthnPolicy\";\n\n  const setupForm = (realm: RealmRepresentation) =>\n    convertToFormValues(realm, setValue);\n\n  useEffect(() => setupForm(realm), []);\n\n  const onSubmit = async (realm: RealmRepresentation) => {\n    const submittedRealm = convertFormValuesToObject(realm);\n    try {\n      await adminClient.realms.update({ realm: realmName }, submittedRealm);\n      realmUpdated(submittedRealm);\n      setupForm(submittedRealm);\n      addAlert(t(\"webAuthnUpdateSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"authentication:webAuthnUpdateError\", error);\n    }\n  };\n\n  return (\n    <PageSection variant=\"light\">\n      {enabled && (\n        <Popover bodyContent={t(`authentication-help:${namePrefix}FormHelp`)}>\n          <TextContent className=\"keycloak__section_intro__help\">\n            <Text>\n              <QuestionCircleIcon /> {t(\"authentication-help:webauthnIntro\")}\n            </Text>\n          </TextContent>\n        </Popover>\n      )}\n\n      <FormAccess\n        role=\"manage-realm\"\n        isHorizontal\n        onSubmit={handleSubmit(onSubmit)}\n        className=\"keycloak__webauthn_policies_authentication__form\"\n      >\n        <FormGroup\n          label={t(\"webAuthnPolicyRpEntityName\")}\n          fieldId=\"webAuthnPolicyRpEntityName\"\n          helperTextInvalid={t(\"common:required\")}\n          validated={errors.webAuthnPolicyRpEntityName ? \"error\" : \"default\"}\n          isRequired\n          labelIcon={\n            <HelpItem\n              helpText=\"authentication-help:webAuthnPolicyRpEntityName\"\n              fieldLabelId=\"authentication:webAuthnPolicyRpEntityName\"\n            />\n          }\n        >\n          <KeycloakTextInput\n            id=\"webAuthnPolicyRpEntityName\"\n            data-testid=\"webAuthnPolicyRpEntityName\"\n            validated={errors.webAuthnPolicyRpEntityName ? \"error\" : \"default\"}\n            {...register(`${namePrefix}RpEntityName`, { required: true })}\n          />\n        </FormGroup>\n        <FormProvider {...form}>\n          <WebauthnSelect\n            name={`${namePrefix}SignatureAlgorithms`}\n            label=\"webAuthnPolicySignatureAlgorithms\"\n            options={SIGNATURE_ALGORITHMS}\n            isMultiSelect\n          />\n          <FormGroup\n            label={t(\"webAuthnPolicyRpId\")}\n            labelIcon={\n              <HelpItem\n                helpText=\"authentication-help:webAuthnPolicyRpId\"\n                fieldLabelId=\"authentication:webAuthnPolicyRpId\"\n              />\n            }\n            fieldId=\"webAuthnPolicyRpId\"\n          >\n            <KeycloakTextInput\n              id=\"webAuthnPolicyRpId\"\n              data-testid=\"webAuthnPolicyRpId\"\n              {...register(`${namePrefix}RpId`)}\n            />\n          </FormGroup>\n          <WebauthnSelect\n            name={`${namePrefix}AttestationConveyancePreference`}\n            label=\"webAuthnPolicyAttestationConveyancePreference\"\n            options={ATTESTATION_PREFERENCE}\n            labelPrefix=\"attestationPreference\"\n          />\n          <WebauthnSelect\n            name={`${namePrefix}AuthenticatorAttachment`}\n            label=\"webAuthnPolicyAuthenticatorAttachment\"\n            options={AUTHENTICATOR_ATTACHMENT}\n            labelPrefix=\"authenticatorAttachment\"\n          />\n          <WebauthnSelect\n            name={`${namePrefix}RequireResidentKey`}\n            label=\"webAuthnPolicyRequireResidentKey\"\n            options={RESIDENT_KEY_OPTIONS}\n            labelPrefix=\"residentKey\"\n          />\n          <WebauthnSelect\n            name={`${namePrefix}UserVerificationRequirement`}\n            label=\"webAuthnPolicyUserVerificationRequirement\"\n            options={USER_VERIFY}\n            labelPrefix=\"userVerify\"\n          />\n          <FormGroup\n            label={t(\"webAuthnPolicyCreateTimeout\")}\n            fieldId=\"webAuthnPolicyCreateTimeout\"\n            helperTextInvalid={t(\"webAuthnPolicyCreateTimeoutHint\")}\n            validated={errors.webAuthnPolicyCreateTimeout ? \"error\" : \"default\"}\n            labelIcon={\n              <HelpItem\n                helpText=\"authentication-help:webAuthnPolicyCreateTimeout\"\n                fieldLabelId=\"authentication:webAuthnPolicyCreateTimeout\"\n              />\n            }\n          >\n            <Controller\n              name={`${namePrefix}CreateTimeout`}\n              defaultValue={0}\n              control={control}\n              rules={{ min: 0, max: 31536 }}\n              render={({ field }) => (\n                <TimeSelector\n                  data-testid=\"webAuthnPolicyCreateTimeout\"\n                  aria-label={t(\"webAuthnPolicyCreateTimeout\")}\n                  value={field.value}\n                  onChange={field.onChange}\n                  units={[\"second\", \"minute\", \"hour\"]}\n                  validated={\n                    errors.webAuthnPolicyCreateTimeout ? \"error\" : \"default\"\n                  }\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"webAuthnPolicyAvoidSameAuthenticatorRegister\")}\n            fieldId=\"webAuthnPolicyAvoidSameAuthenticatorRegister\"\n            labelIcon={\n              <HelpItem\n                helpText=\"authentication-help:webAuthnPolicyAvoidSameAuthenticatorRegister\"\n                fieldLabelId=\"authentication:webAuthnPolicyAvoidSameAuthenticatorRegister\"\n              />\n            }\n          >\n            <Controller\n              name={`${namePrefix}AvoidSameAuthenticatorRegister`}\n              defaultValue={false}\n              control={control}\n              render={({ field }) => (\n                <Switch\n                  id=\"webAuthnPolicyAvoidSameAuthenticatorRegister\"\n                  label={t(\"common:on\")}\n                  labelOff={t(\"common:off\")}\n                  isChecked={field.value}\n                  onChange={field.onChange}\n                  aria-label={t(\"webAuthnPolicyAvoidSameAuthenticatorRegister\")}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"webAuthnPolicyAcceptableAaguids\")}\n            fieldId=\"webAuthnPolicyAcceptableAaguids\"\n            labelIcon={\n              <HelpItem\n                helpText=\"authentication-help:webAuthnPolicyAcceptableAaguids\"\n                fieldLabelId=\"authentication:webAuthnPolicyAcceptableAaguids\"\n              />\n            }\n          >\n            <MultiLineInput\n              name={`${namePrefix}AcceptableAaguids`}\n              aria-label={t(\"webAuthnPolicyAcceptableAaguids\")}\n              addButtonLabel=\"authentication:addAaguids\"\n            />\n          </FormGroup>\n        </FormProvider>\n\n        <ActionGroup>\n          <Button\n            data-testid=\"save\"\n            variant=\"primary\"\n            type=\"submit\"\n            isDisabled={!isDirty}\n          >\n            {t(\"common:save\")}\n          </Button>\n          <Button\n            data-testid=\"reload\"\n            variant={ButtonVariant.link}\n            onClick={() => setupForm(realm)}\n          >\n            {t(\"common:reload\")}\n          </Button>\n        </ActionGroup>\n      </FormAccess>\n    </PageSection>\n  );\n};\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Tab, Tabs, TabTitleText } from \"@patternfly/react-core\";\n\nimport type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { PasswordPolicy } from \"./PasswordPolicy\";\nimport { OtpPolicy } from \"./OtpPolicy\";\nimport { WebauthnPolicy } from \"./WebauthnPolicy\";\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\n\nexport const Policies = () => {\n  const { t } = useTranslation(\"authentication\");\n  const [subTab, setSubTab] = useState(1);\n  const { adminClient } = useAdminClient();\n  const { realm: realmName } = useRealm();\n  const [realm, setRealm] = useState<RealmRepresentation>();\n\n  useFetch(\n    async () => {\n      const realm = await adminClient.realms.findOne({ realm: realmName });\n      if (!realm) {\n        throw new Error(t(\"common:notFound\"));\n      }\n      return realm;\n    },\n    (realm) => {\n      setRealm(realm);\n    },\n    []\n  );\n\n  if (!realm) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <Tabs\n      activeKey={subTab}\n      onSelect={(_, key) => setSubTab(key as number)}\n      mountOnEnter\n      unmountOnExit\n    >\n      <Tab\n        id=\"passwordPolicy\"\n        eventKey={1}\n        title={<TabTitleText>{t(\"passwordPolicy\")}</TabTitleText>}\n      >\n        <PasswordPolicy realm={realm} realmUpdated={setRealm} />\n      </Tab>\n      <Tab\n        id=\"otpPolicy\"\n        eventKey={2}\n        title={<TabTitleText>{t(\"otpPolicy\")}</TabTitleText>}\n      >\n        <OtpPolicy realm={realm} realmUpdated={setRealm} />\n      </Tab>\n      <Tab\n        id=\"webauthnPolicy\"\n        eventKey={3}\n        title={<TabTitleText>{t(\"webauthnPolicy\")}</TabTitleText>}\n      >\n        <WebauthnPolicy realm={realm} realmUpdated={setRealm} />\n      </Tab>\n      <Tab\n        id=\"webauthnPasswordlessPolicy\"\n        eventKey={4}\n        title={<TabTitleText>{t(\"webauthnPasswordlessPolicy\")}</TabTitleText>}\n      >\n        <WebauthnPolicy realm={realm} realmUpdated={setRealm} isPasswordLess />\n      </Tab>\n    </Tabs>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Form,\n  FormGroup,\n  Modal,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport useToggle from \"../utils/useToggle\";\nimport { REALM_FLOWS } from \"./AuthenticationSection\";\n\ntype BindingForm = {\n  bindingType: keyof RealmRepresentation;\n};\n\ntype BindFlowDialogProps = {\n  flowAlias: string;\n  onClose: () => void;\n};\n\nexport const BindFlowDialog = ({ flowAlias, onClose }: BindFlowDialogProps) => {\n  const { t } = useTranslation(\"authentication\");\n  const { control, handleSubmit } = useForm<BindingForm>();\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n  const [open, toggleOpen] = useToggle();\n\n  const onSubmit = async ({ bindingType }: BindingForm) => {\n    const realmRep = await adminClient.realms.findOne({ realm });\n\n    try {\n      await adminClient.realms.update(\n        { realm },\n        { ...realmRep, [bindingType]: flowAlias }\n      );\n      addAlert(t(\"updateFlowSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"authentication:updateFlowError\", error);\n    }\n\n    onClose();\n  };\n\n  return (\n    <Modal\n      title={t(\"bindFlow\")}\n      variant=\"small\"\n      onClose={onClose}\n      actions={[\n        <Button key=\"confirm\" data-testid=\"save\" type=\"submit\" form=\"bind-form\">\n          {t(\"common:save\")}\n        </Button>,\n        <Button\n          data-testid=\"cancel\"\n          key=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={onClose}\n        >\n          {t(\"common:cancel\")}\n        </Button>,\n      ]}\n      isOpen\n    >\n      <Form id=\"bind-form\" isHorizontal onSubmit={handleSubmit(onSubmit)}>\n        <FormGroup label={t(\"chooseBindingType\")} fieldId=\"chooseBindingType\">\n          <Controller\n            name=\"bindingType\"\n            defaultValue=\"browserFlow\"\n            control={control}\n            render={({ field }) => (\n              <Select\n                toggleId=\"chooseBindingType\"\n                onToggle={toggleOpen}\n                onSelect={(_, value) => {\n                  field.onChange(value.toString());\n                  toggleOpen();\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n                isOpen={open}\n                menuAppendTo=\"parent\"\n              >\n                {[...REALM_FLOWS.keys()]\n                  .filter((f) => f !== \"dockerAuthenticationFlow\")\n                  .map((key) => {\n                    const value = REALM_FLOWS.get(key);\n                    return (\n                      <SelectOption\n                        selected={key === REALM_FLOWS.get(key)}\n                        key={key}\n                        value={key}\n                      >\n                        {t(`flow.${value}`)}\n                      </SelectOption>\n                    );\n                  })}\n              </Select>\n            )}\n          />\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport {\n  Button,\n  Modal,\n  ModalVariant,\n  Popover,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { CheckCircleIcon } from \"@patternfly/react-icons\";\n\nimport { AuthenticationType, REALM_FLOWS } from \"../AuthenticationSection\";\nimport { KeycloakDataTable } from \"../../components/table-toolbar/KeycloakDataTable\";\nimport useToggle from \"../../utils/useToggle\";\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\nimport { fetchUsedBy } from \"../../components/role-mapping/resource\";\n\nimport \"./used-by.css\";\n\ntype UsedByProps = {\n  authType: AuthenticationType;\n};\n\nconst Label = ({ label }: { label: string }) => (\n  <>\n    <CheckCircleIcon className=\"keycloak_authentication-section__usedby\" />{\" \"}\n    {label}\n  </>\n);\n\ntype UsedByModalProps = {\n  id: string;\n  onClose: () => void;\n  isSpecificClient: boolean;\n};\n\nconst UsedByModal = ({ id, isSpecificClient, onClose }: UsedByModalProps) => {\n  const { t } = useTranslation(\"authentication\");\n  const { adminClient } = useAdminClient();\n\n  const loader = async (\n    first?: number,\n    max?: number,\n    search?: string\n  ): Promise<{ name: string }[]> => {\n    const result = await fetchUsedBy({\n      adminClient,\n      id,\n      type: isSpecificClient ? \"clients\" : \"idp\",\n      first: first || 0,\n      max: max || 10,\n      search,\n    });\n    return result.map((p) => ({ name: p }));\n  };\n\n  return (\n    <Modal\n      header={\n        <TextContent>\n          <Text component={TextVariants.h1}>{t(\"flowUsedBy\")}</Text>\n          <Text>\n            {t(\"flowUsedByDescription\", {\n              value: isSpecificClient ? t(\"clients\") : t(\"identiyProviders\"),\n            })}\n          </Text>\n        </TextContent>\n      }\n      variant={ModalVariant.medium}\n      isOpen\n      onClose={onClose}\n      actions={[\n        <Button\n          data-testid=\"cancel\"\n          id=\"modal-cancel\"\n          key=\"cancel\"\n          onClick={onClose}\n        >\n          {t(\"common:close\")}\n        </Button>,\n      ]}\n    >\n      <KeycloakDataTable\n        loader={loader}\n        isPaginated\n        ariaLabelKey=\"authentication:usedBy\"\n        searchPlaceholderKey=\"common:search\"\n        columns={[\n          {\n            name: \"name\",\n          },\n        ]}\n      />\n    </Modal>\n  );\n};\n\nexport const UsedBy = ({ authType: { id, usedBy } }: UsedByProps) => {\n  const { t } = useTranslation(\"authentication\");\n  const [open, toggle] = useToggle();\n\n  return (\n    <>\n      {open && (\n        <UsedByModal\n          id={id!}\n          onClose={toggle}\n          isSpecificClient={usedBy?.type === \"SPECIFIC_CLIENTS\"}\n        />\n      )}\n      {(usedBy?.type === \"SPECIFIC_PROVIDERS\" ||\n        usedBy?.type === \"SPECIFIC_CLIENTS\") &&\n        (usedBy.values.length <= 8 ? (\n          <Popover\n            key={id}\n            aria-label={t(\"usedBy\")}\n            bodyContent={\n              <div key={`usedBy-${id}-${usedBy.values}`}>\n                {t(\n                  \"appliedBy\" +\n                    (usedBy.type === \"SPECIFIC_CLIENTS\"\n                      ? \"Clients\"\n                      : \"Providers\")\n                )}{\" \"}\n                {usedBy.values.map((used, index) => (\n                  <>\n                    <strong>{used}</strong>\n                    {index < usedBy.values.length - 1 ? \", \" : \"\"}\n                  </>\n                ))}\n              </div>\n            }\n          >\n            <Button\n              variant=\"link\"\n              className=\"keycloak__used-by__popover-button\"\n            >\n              <Label label={t(`used.${usedBy.type}`)} />\n            </Button>\n          </Popover>\n        ) : (\n          <Button\n            variant=\"link\"\n            className=\"keycloak__used-by__popover-button\"\n            onClick={toggle}\n          >\n            <Label label={t(`used.${usedBy.type}`)} />\n          </Button>\n        ))}\n      {usedBy?.type === \"DEFAULT\" && (\n        <Label\n          label={t(\n            [...REALM_FLOWS.values()].includes(usedBy.values[0])\n              ? `flow.${usedBy.values[0]}`\n              : usedBy.values[0]\n          )}\n        />\n      )}\n      {!usedBy?.type && t(\"used.notInUse\")}\n    </>\n  );\n};\n","import { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { sortBy } from \"lodash-es\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Label,\n  PageSection,\n  Tab,\n  TabTitleText,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\n\nimport type AuthenticationFlowRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/authenticationFlowRepresentation\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport { KeycloakDataTable } from \"../components/table-toolbar/KeycloakDataTable\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport useToggle from \"../utils/useToggle\";\nimport { DuplicateFlowModal } from \"./DuplicateFlowModal\";\nimport { toCreateFlow } from \"./routes/CreateFlow\";\nimport { toFlow } from \"./routes/Flow\";\nimport { RequiredActions } from \"./RequiredActions\";\nimport { Policies } from \"./policies/Policies\";\nimport helpUrls from \"../help-urls\";\nimport { BindFlowDialog } from \"./BindFlowDialog\";\nimport { UsedBy } from \"./components/UsedBy\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../components/routable-tabs/RoutableTabs\";\nimport { AuthenticationTab, toAuthentication } from \"./routes/Authentication\";\nimport { addTrailingSlash } from \"../util\";\nimport { getAuthorizationHeaders } from \"../utils/getAuthorizationHeaders\";\nimport useLocaleSort, { mapByKey } from \"../utils/useLocaleSort\";\n\nimport \"./authentication-section.css\";\n\ntype UsedBy = \"SPECIFIC_CLIENTS\" | \"SPECIFIC_PROVIDERS\" | \"DEFAULT\";\n\nexport type AuthenticationType = AuthenticationFlowRepresentation & {\n  usedBy?: { type?: UsedBy; values: string[] };\n};\n\nexport const REALM_FLOWS = new Map<string, string>([\n  [\"browserFlow\", \"browser\"],\n  [\"registrationFlow\", \"registration\"],\n  [\"directGrantFlow\", \"direct grant\"],\n  [\"resetCredentialsFlow\", \"reset credentials\"],\n  [\"clientAuthenticationFlow\", \"clients\"],\n  [\"dockerAuthenticationFlow\", \"docker auth\"],\n]);\n\nexport default function AuthenticationSection() {\n  const { t } = useTranslation(\"authentication\");\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n  const { addAlert, addError } = useAlerts();\n  const localeSort = useLocaleSort();\n  const [selectedFlow, setSelectedFlow] = useState<AuthenticationType>();\n  const [open, toggleOpen] = useToggle();\n  const [bindFlowOpen, toggleBindFlow] = useToggle();\n\n  const loader = async () => {\n    const flowsRequest = await fetch(\n      `${addTrailingSlash(\n        adminClient.baseUrl\n      )}admin/realms/${realm}/ui-ext/authentication-management/flows`,\n      {\n        method: \"GET\",\n        headers: getAuthorizationHeaders(await adminClient.getAccessToken()),\n      }\n    );\n    const flows = await flowsRequest.json();\n\n    if (!flows) {\n      return [];\n    }\n\n    return sortBy(\n      localeSort<AuthenticationType>(flows, mapByKey(\"alias\")),\n      (flow) => flow.usedBy?.type\n    );\n  };\n\n  const useTab = (tab: AuthenticationTab) =>\n    useRoutableTab(toAuthentication({ realm, tab }));\n\n  const flowsTab = useTab(\"flows\");\n  const requiredActionsTab = useTab(\"required-actions\");\n  const policiesTab = useTab(\"policies\");\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"authentication:deleteConfirmFlow\",\n    children: (\n      <Trans i18nKey=\"authentication:deleteConfirmFlowMessage\">\n        {\" \"}\n        <strong>{{ flow: selectedFlow ? selectedFlow.alias : \"\" }}</strong>.\n      </Trans>\n    ),\n    continueButtonLabel: \"common:delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.authenticationManagement.deleteFlow({\n          flowId: selectedFlow!.id!,\n        });\n        refresh();\n        addAlert(t(\"deleteFlowSuccess\"), AlertVariant.success);\n      } catch (error) {\n        addError(\"authentication:deleteFlowError\", error);\n      }\n    },\n  });\n\n  const UsedByRenderer = (authType: AuthenticationType) => (\n    <UsedBy authType={authType} />\n  );\n\n  const AliasRenderer = ({\n    id,\n    alias,\n    usedBy,\n    builtIn,\n  }: AuthenticationType) => (\n    <>\n      <Link\n        to={toFlow({\n          realm,\n          id: id!,\n          usedBy: usedBy?.type || \"notInUse\",\n          builtIn: builtIn ? \"builtIn\" : undefined,\n        })}\n        key={`link-${id}`}\n      >\n        {alias}\n      </Link>{\" \"}\n      {builtIn && <Label key={`label-${id}`}>{t(\"buildIn\")}</Label>}\n    </>\n  );\n\n  return (\n    <>\n      <DeleteConfirm />\n      {open && (\n        <DuplicateFlowModal\n          name={selectedFlow ? selectedFlow.alias! : \"\"}\n          description={selectedFlow?.description!}\n          toggleDialog={toggleOpen}\n          onComplete={() => {\n            refresh();\n            toggleOpen();\n          }}\n        />\n      )}\n      {bindFlowOpen && (\n        <BindFlowDialog\n          onClose={() => {\n            toggleBindFlow();\n            refresh();\n          }}\n          flowAlias={selectedFlow?.alias!}\n        />\n      )}\n      <ViewHeader\n        titleKey=\"authentication:title\"\n        subKey=\"authentication:authenticationExplain\"\n        helpUrl={helpUrls.authenticationUrl}\n        divider={false}\n      />\n      <PageSection variant=\"light\" className=\"pf-u-p-0\">\n        <RoutableTabs\n          isBox\n          defaultLocation={toAuthentication({ realm, tab: \"flows\" })}\n        >\n          <Tab\n            data-testid=\"flows\"\n            title={<TabTitleText>{t(\"flows\")}</TabTitleText>}\n            {...flowsTab}\n          >\n            <KeycloakDataTable\n              key={key}\n              loader={loader}\n              ariaLabelKey=\"authentication:title\"\n              searchPlaceholderKey=\"authentication:searchForFlow\"\n              toolbarItem={\n                <ToolbarItem>\n                  <Button\n                    component={(props) => (\n                      <Link {...props} to={toCreateFlow({ realm })} />\n                    )}\n                  >\n                    {t(\"createFlow\")}\n                  </Button>\n                </ToolbarItem>\n              }\n              actionResolver={({ data }) => [\n                {\n                  title: t(\"duplicate\"),\n                  onClick: () => {\n                    toggleOpen();\n                    setSelectedFlow(data);\n                  },\n                },\n                ...(data.usedBy?.type !== \"DEFAULT\"\n                  ? [\n                      {\n                        title: t(\"bindFlow\"),\n                        onClick: () => {\n                          toggleBindFlow();\n                          setSelectedFlow(data);\n                        },\n                      },\n                    ]\n                  : []),\n                ...(!data.builtIn && !data.usedBy\n                  ? [\n                      {\n                        title: t(\"common:delete\"),\n                        onClick: () => {\n                          setSelectedFlow(data);\n                          toggleDeleteDialog();\n                        },\n                      },\n                    ]\n                  : []),\n              ]}\n              columns={[\n                {\n                  name: \"alias\",\n                  displayKey: \"authentication:flowName\",\n                  cellRenderer: AliasRenderer,\n                },\n                {\n                  name: \"usedBy\",\n                  displayKey: \"authentication:usedBy\",\n                  cellRenderer: UsedByRenderer,\n                },\n                {\n                  name: \"description\",\n                  displayKey: \"common:description\",\n                },\n              ]}\n              emptyState={\n                <ListEmptyState\n                  message={t(\"emptyEvents\")}\n                  instructions={t(\"emptyEventsInstructions\")}\n                />\n              }\n            />\n          </Tab>\n          <Tab\n            data-testid=\"requiredActions\"\n            title={<TabTitleText>{t(\"requiredActions\")}</TabTitleText>}\n            {...requiredActionsTab}\n          >\n            <RequiredActions />\n          </Tab>\n          <Tab\n            data-testid=\"policies\"\n            title={<TabTitleText>{t(\"policies\")}</TabTitleText>}\n            {...policiesTab}\n          >\n            <Policies />\n          </Tab>\n        </RoutableTabs>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["EmptyStatePrimary","_a","children","className","props","__rest","_jsx","Object","assign","css","styles","emptyStatePrimary","displayName","DuplicateFlowModal","name","description","toggleDialog","onComplete","t","useTranslation","form","useForm","mode","setValue","getValues","handleSubmit","adminClient","useAdminClient","addAlert","addError","useAlerts","navigate","useNavigate","realm","useRealm","useEffect","onSubmit","authenticationManagement","copyFlow","flow","newName","alias","newFlow","getFlows","find","updateFlow","flowId","id","AlertVariant","success","toFlow","usedBy","builtIn","undefined","error","Modal","ModalVariant","small","Button","ButtonVariant","link","FormProvider","Form","NameDescription","RequiredActions","actions","setActions","useState","key","setKey","refresh","useFetch","requiredActions","unregisteredRequiredActions","Promise","all","getRequiredActions","getUnregisteredRequiredActions","map","a","enabled","defaultAction","data","isUnregisteredAction","updateAction","action","field","updateRequiredAction","registerRequiredAction","providerId","executeMove","times","index","Math","abs","lowerRequiredActionPriority","raiseRequiredActionPriority","DraggableTable","nameDragged","items","keys","e","newIndex","indexOf","oldIndex","dragged","displayKey","cellRenderer","row","Switch","toKey","KeycloakSpinner","PolicyRow","policy","configType","defaultValue","onRemove","control","register","formState","errors","useFormContext","FormGroup","ValidatedOptions","default","HelpItem","Split","_jsxs","SplitItem","KeycloakTextInput","required","Controller","Number","parseInt","newValue","onChange","max","MIN_VALUE","value","NumberInput","event","currentTarget","isNaN","MinusCircleIcon","POLICY_SEPARATOR","serializePolicy","policies","submitted","parsePolicy","parsePolicyToken","result","matchingPolicy","token","valueStart","valueEnd","PolicySelect","onSelect","selectedPolicies","passwordPolicies","useServerInfo","open","setOpen","useMemo","filter","p","o","Select","_","selection","length","SelectOption","PasswordPolicy","realmUpdated","realmName","rows","setRows","shouldDirty","defaultValues","reset","isDirty","setupForm","values","passwordPolicy","forEach","v","save","updatedRealm","realms","update","PageSection","_Fragment","Toolbar","ToolbarContent","ToolbarItem","Divider","FormAccess","r","ActionGroup","EmptyState","EmptyStateIcon","PlusCircleIcon","Title","EmptyStateBody","POLICY_TYPES","OTP_HASH_ALGORITHMS","NUMBER_OF_DIGITS","OtpPolicy","isValid","localeSort","useLocaleSort","toggle","useToggle","otpType","useWatch","formValues","supportedApplications","labels","otpSupportedApplications","label","findOne","type","Radio","toString","SelectVariant","single","otpPolicyPeriod","min","TimeSelector","otpPolicyInitialCounter","ChipGroup","Chip","SIGNATURE_ALGORITHMS","ATTESTATION_PREFERENCE","AUTHENTICATOR_ATTACHMENT","RESIDENT_KEY_OPTIONS","USER_VERIFY","WebauthnSelect","options","labelPrefix","isMultiSelect","selectedValue","changedValue","item","typeaheadMulti","option","WebauthnPolicy","isPasswordLess","useHelp","namePrefix","convertToFormValues","submittedRealm","convertFormValuesToObject","Popover","TextContent","Text","QuestionCircleIcon","webAuthnPolicyRpEntityName","webAuthnPolicyCreateTimeout","MultiLineInput","Policies","subTab","setSubTab","setRealm","Error","Tabs","Tab","TabTitleText","BindFlowDialog","flowAlias","onClose","toggleOpen","bindingType","realmRep","REALM_FLOWS","f","get","Label","CheckCircleIcon","UsedByModal","isSpecificClient","loader","first","search","fetchUsedBy","TextVariants","h1","medium","KeycloakDataTable","UsedBy","authType","used","includes","Map","AuthenticationSection","selectedFlow","setSelectedFlow","bindFlowOpen","toggleBindFlow","flows","fetch","addTrailingSlash","baseUrl","method","headers","getAuthorizationHeaders","getAccessToken","json","sortBy","mapByKey","useTab","tab","useRoutableTab","toAuthentication","flowsTab","requiredActionsTab","policiesTab","toggleDeleteDialog","DeleteConfirm","useConfirmDialog","titleKey","Trans","continueButtonLabel","continueButtonVariant","danger","onConfirm","deleteFlow","UsedByRenderer","AliasRenderer","Link","ViewHeader","helpUrls","authenticationUrl","RoutableTabs","toCreateFlow","title","onClick","ListEmptyState"],"mappings":"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"}