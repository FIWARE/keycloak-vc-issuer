{"version":3,"file":"NewAttributeSettings.8be8ee4c.js","sources":["../../src/realm-settings/user-profile/attribute/AttributeAnnotations.tsx","../../src/realm-settings/user-profile/attribute/AttributeGeneralSettings.tsx","../../src/realm-settings/user-profile/attribute/AttributePermission.tsx","../../src/realm-settings/user-profile/attribute/AddValidatorRoleDialog.tsx","../../src/realm-settings/user-profile/attribute/AddValidatorDialog.tsx","../../src/realm-settings/user-profile/attribute/AttributeValidations.tsx","../../src/realm-settings/NewAttributeSettings.tsx"],"sourcesContent":["import { useTranslation } from \"react-i18next\";\nimport { FormGroup, Grid, GridItem } from \"@patternfly/react-core\";\n\nimport { FormAccess } from \"../../../components/form-access/FormAccess\";\nimport { KeyValueInput } from \"../../../components/key-value-form/KeyValueInput\";\n\nimport \"../../realm-settings-section.css\";\n\nexport const AttributeAnnotations = () => {\n  const { t } = useTranslation(\"realm-settings\");\n\n  return (\n    <FormAccess role=\"manage-realm\" isHorizontal>\n      <FormGroup\n        hasNoPaddingTop\n        label={t(\"annotations\")}\n        fieldId=\"kc-annotations\"\n        className=\"kc-annotations-label\"\n      >\n        <Grid className=\"kc-annotations\">\n          <GridItem>\n            <KeyValueInput name=\"annotations\" />\n          </GridItem>\n        </Grid>\n      </FormGroup>\n    </FormAccess>\n  );\n};\n","import type ClientScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientScopeRepresentation\";\nimport type UserProfileConfig from \"@keycloak/keycloak-admin-client/lib/defs/userProfileConfig\";\nimport {\n  Divider,\n  FormGroup,\n  Radio,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { isEqual } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../../components/form-access/FormAccess\";\nimport { HelpItem } from \"../../../components/help-enabler/HelpItem\";\nimport { KeycloakSpinner } from \"../../../components/keycloak-spinner/KeycloakSpinner\";\nimport { KeycloakTextInput } from \"../../../components/keycloak-text-input/KeycloakTextInput\";\nimport { useAdminClient, useFetch } from \"../../../context/auth/AdminClient\";\nimport { useParams } from \"../../../utils/useParams\";\nimport { USERNAME_EMAIL } from \"../../NewAttributeSettings\";\nimport type { AttributeParams } from \"../../routes/Attribute\";\n\nimport \"../../realm-settings-section.css\";\n\nconst REQUIRED_FOR = [\n  { label: \"requiredForLabel.both\", value: [\"admin\", \"user\"] },\n  { label: \"requiredForLabel.users\", value: [\"user\"] },\n  { label: \"requiredForLabel.admins\", value: [\"admin\"] },\n] as const;\n\nexport const AttributeGeneralSettings = () => {\n  const { t } = useTranslation(\"realm-settings\");\n  const { adminClient } = useAdminClient();\n  const form = useFormContext();\n  const [clientScopes, setClientScopes] =\n    useState<ClientScopeRepresentation[]>();\n  const [config, setConfig] = useState<UserProfileConfig>();\n  const [selectEnabledWhenOpen, setSelectEnabledWhenOpen] = useState(false);\n  const [selectRequiredForOpen, setSelectRequiredForOpen] = useState(false);\n  const [isAttributeGroupDropdownOpen, setIsAttributeGroupDropdownOpen] =\n    useState(false);\n  const { attributeName } = useParams<AttributeParams>();\n  const editMode = attributeName ? true : false;\n\n  const selectedScopes = useWatch({\n    control: form.control,\n    name: \"selector.scopes\",\n    defaultValue: [],\n  });\n\n  const requiredScopes = useWatch({\n    control: form.control,\n    name: \"required.scopes\",\n    defaultValue: [],\n  });\n\n  const required = useWatch({\n    control: form.control,\n    name: \"isRequired\",\n    defaultValue: false,\n  });\n\n  useFetch(() => adminClient.clientScopes.find(), setClientScopes, []);\n  useFetch(() => adminClient.users.getProfile(), setConfig, []);\n\n  if (!clientScopes) {\n    return <KeycloakSpinner />;\n  }\n  return (\n    <FormAccess role=\"manage-realm\" isHorizontal>\n      <FormGroup\n        label={t(\"attributeName\")}\n        labelIcon={\n          <HelpItem\n            helpText=\"realm-settings-help:attributeNameHelp\"\n            fieldLabelId=\"realm-settings:attributeName\"\n          />\n        }\n        fieldId=\"kc-attribute-name\"\n        isRequired\n        validated={form.formState.errors.name ? \"error\" : \"default\"}\n        helperTextInvalid={form.formState.errors.name?.message}\n      >\n        <KeycloakTextInput\n          isRequired\n          id=\"kc-attribute-name\"\n          defaultValue=\"\"\n          data-testid=\"attribute-name\"\n          isDisabled={editMode}\n          validated={form.formState.errors.name ? \"error\" : \"default\"}\n          {...form.register(\"name\", {\n            required: {\n              value: true,\n              message: t(\"validateName\"),\n            },\n          })}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"attributeDisplayName\")}\n        labelIcon={\n          <HelpItem\n            helpText=\"realm-settings-help:attributeDisplayNameHelp\"\n            fieldLabelId=\"realm-settings:attributeDisplayName\"\n          />\n        }\n        fieldId=\"kc-attribute-display-name\"\n      >\n        <KeycloakTextInput\n          id=\"kc-attribute-display-name\"\n          defaultValue=\"\"\n          data-testid=\"attribute-display-name\"\n          {...form.register(\"displayName\")}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"attributeGroup\")}\n        labelIcon={\n          <HelpItem\n            helpText=\"realm-setting-help:attributeGroupHelp\"\n            fieldLabelId=\"realm-setting:attributeGroup\"\n          />\n        }\n        fieldId=\"kc-attribute-group\"\n      >\n        <Controller\n          name=\"group\"\n          defaultValue=\"\"\n          control={form.control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"kc-attributeGroup\"\n              onToggle={() =>\n                setIsAttributeGroupDropdownOpen(!isAttributeGroupDropdownOpen)\n              }\n              isOpen={isAttributeGroupDropdownOpen}\n              onSelect={(_, value) => {\n                field.onChange(value.toString());\n                setIsAttributeGroupDropdownOpen(false);\n              }}\n              selections={[field.value || t(\"common:none\")]}\n              variant={SelectVariant.single}\n            >\n              {[\n                <SelectOption key=\"empty\" value=\"\">\n                  {t(\"common:none\")}\n                </SelectOption>,\n                ...(config?.groups?.map((group) => (\n                  <SelectOption key={group.name} value={group.name}>\n                    {group.name}\n                  </SelectOption>\n                )) || []),\n              ]}\n            </Select>\n          )}\n        ></Controller>\n      </FormGroup>\n      {!USERNAME_EMAIL.includes(attributeName) && (\n        <>\n          <Divider />\n          <FormGroup\n            label={t(\"enabledWhen\")}\n            fieldId=\"enabledWhen\"\n            hasNoPaddingTop\n          >\n            <Radio\n              id=\"always\"\n              data-testid=\"always\"\n              isChecked={selectedScopes.length === clientScopes.length}\n              name=\"enabledWhen\"\n              label={t(\"always\")}\n              onChange={(value) => {\n                if (value) {\n                  form.setValue(\n                    \"selector.scopes\",\n                    clientScopes.map((s) => s.name)\n                  );\n                } else {\n                  form.setValue(\"selector.scopes\", []);\n                }\n              }}\n              className=\"pf-u-mb-md\"\n            />\n            <Radio\n              id=\"scopesAsRequested\"\n              data-testid=\"scopesAsRequested\"\n              isChecked={selectedScopes.length !== clientScopes.length}\n              name=\"enabledWhen\"\n              label={t(\"scopesAsRequested\")}\n              onChange={(value) => {\n                if (value) {\n                  form.setValue(\"selector.scopes\", []);\n                } else {\n                  form.setValue(\n                    \"selector.scopes\",\n                    clientScopes.map((s) => s.name)\n                  );\n                }\n              }}\n              className=\"pf-u-mb-md\"\n            />\n          </FormGroup>\n          <FormGroup fieldId=\"kc-scope-enabled-when\">\n            <Controller\n              name=\"selector.scopes\"\n              control={form.control}\n              defaultValue={clientScopes.map((s) => s.name)}\n              render={({ field }) => (\n                <Select\n                  name=\"scopes\"\n                  data-testid=\"enabled-when-scope-field\"\n                  variant={SelectVariant.typeaheadMulti}\n                  typeAheadAriaLabel=\"Select\"\n                  chipGroupProps={{\n                    numChips: 3,\n                    expandedText: t(\"common:hide\"),\n                    collapsedText: t(\"common:showRemaining\"),\n                  }}\n                  onToggle={(isOpen) => setSelectEnabledWhenOpen(isOpen)}\n                  selections={field.value}\n                  onSelect={(_, selectedValue) => {\n                    const option = selectedValue.toString();\n                    let changedValue = [\"\"];\n                    if (field.value) {\n                      changedValue = field.value.includes(option)\n                        ? field.value.filter((item: string) => item !== option)\n                        : [...field.value, option];\n                    } else {\n                      changedValue = [option];\n                    }\n\n                    field.onChange(changedValue);\n                  }}\n                  onClear={(selectedValues) => {\n                    selectedValues.stopPropagation();\n                    field.onChange([]);\n                  }}\n                  isOpen={selectEnabledWhenOpen}\n                  isDisabled={selectedScopes.length === clientScopes.length}\n                  aria-labelledby={\"scope\"}\n                >\n                  {clientScopes.map((option) => (\n                    <SelectOption key={option.name} value={option.name} />\n                  ))}\n                </Select>\n              )}\n            />\n          </FormGroup>\n\n          <Divider />\n          <FormGroup\n            label={t(\"required\")}\n            labelIcon={\n              <HelpItem\n                helpText=\"realm-settings-help:requiredHelp\"\n                fieldLabelId=\"realm-settings:required\"\n              />\n            }\n            fieldId=\"kc-required\"\n            hasNoPaddingTop\n          >\n            <Controller\n              name=\"isRequired\"\n              data-testid=\"required\"\n              defaultValue={false}\n              control={form.control}\n              render={({ field }) => (\n                <Switch\n                  id={\"kc-required\"}\n                  onChange={field.onChange}\n                  isChecked={field.value}\n                  label={t(\"common:on\")}\n                  labelOff={t(\"common:off\")}\n                  aria-label={t(\"required\")}\n                />\n              )}\n            />\n          </FormGroup>\n          {required && (\n            <>\n              <FormGroup\n                label={t(\"requiredFor\")}\n                fieldId=\"requiredFor\"\n                hasNoPaddingTop\n              >\n                <Controller\n                  name=\"required.roles\"\n                  data-testid=\"requiredFor\"\n                  defaultValue={REQUIRED_FOR[0].value}\n                  control={form.control}\n                  render={({ field }) => (\n                    <div className=\"kc-requiredFor\">\n                      {REQUIRED_FOR.map((option) => (\n                        <Radio\n                          id={option.label}\n                          key={option.label}\n                          data-testid={option.label}\n                          isChecked={isEqual(field.value, option.value)}\n                          name=\"roles\"\n                          onChange={() => {\n                            field.onChange(option.value);\n                          }}\n                          label={t(option.label)}\n                          className=\"kc-requiredFor-option\"\n                        />\n                      ))}\n                    </div>\n                  )}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"requiredWhen\")}\n                fieldId=\"requiredWhen\"\n                hasNoPaddingTop\n              >\n                <Radio\n                  id=\"requiredAlways\"\n                  data-testid=\"requiredAlways\"\n                  isChecked={requiredScopes.length === clientScopes.length}\n                  name=\"requiredWhen\"\n                  label={t(\"always\")}\n                  onChange={(value) => {\n                    if (value) {\n                      form.setValue(\n                        \"required.scopes\",\n                        clientScopes.map((s) => s.name)\n                      );\n                    } else {\n                      form.setValue(\"required.scopes\", []);\n                    }\n                  }}\n                  className=\"pf-u-mb-md\"\n                />\n                <Radio\n                  id=\"requiredScopesAsRequested\"\n                  data-testid=\"requiredScopesAsRequested\"\n                  isChecked={requiredScopes.length !== clientScopes.length}\n                  name=\"requiredWhen\"\n                  label={t(\"scopesAsRequested\")}\n                  onChange={(value) => {\n                    if (value) {\n                      form.setValue(\"required.scopes\", []);\n                    } else {\n                      form.setValue(\n                        \"required.scopes\",\n                        clientScopes.map((s) => s.name)\n                      );\n                    }\n                  }}\n                  className=\"pf-u-mb-md\"\n                />\n              </FormGroup>\n              <FormGroup fieldId=\"kc-scope-required-when\">\n                <Controller\n                  name=\"required.scopes\"\n                  control={form.control}\n                  defaultValue={[]}\n                  render={({ field }) => (\n                    <Select\n                      name=\"scopeRequired\"\n                      data-testid=\"required-when-scope-field\"\n                      variant={SelectVariant.typeaheadMulti}\n                      typeAheadAriaLabel=\"Select\"\n                      chipGroupProps={{\n                        numChips: 3,\n                        expandedText: t(\"common:hide\"),\n                        collapsedText: t(\"common:showRemaining\"),\n                      }}\n                      onToggle={(isOpen) => setSelectRequiredForOpen(isOpen)}\n                      selections={field.value}\n                      onSelect={(_, selectedValue) => {\n                        const option = selectedValue.toString();\n                        let changedValue = [\"\"];\n                        if (field.value) {\n                          changedValue = field.value.includes(option)\n                            ? field.value.filter(\n                                (item: string) => item !== option\n                              )\n                            : [...field.value, option];\n                        } else {\n                          changedValue = [option];\n                        }\n                        field.onChange(changedValue);\n                      }}\n                      onClear={(selectedValues) => {\n                        selectedValues.stopPropagation();\n                        field.onChange([]);\n                      }}\n                      isOpen={selectRequiredForOpen}\n                      isDisabled={requiredScopes.length === clientScopes.length}\n                      aria-labelledby={\"scope\"}\n                    >\n                      {clientScopes.map((option) => (\n                        <SelectOption key={option.name} value={option.name} />\n                      ))}\n                    </Select>\n                  )}\n                />\n              </FormGroup>\n            </>\n          )}\n        </>\n      )}\n    </FormAccess>\n  );\n};\n","import { Checkbox, FormGroup, Grid, GridItem } from \"@patternfly/react-core\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../../components/form-access/FormAccess\";\nimport { HelpItem } from \"../../../components/help-enabler/HelpItem\";\n\nimport \"../../realm-settings-section.css\";\n\nconst Permissions = ({ name }: { name: string }) => {\n  const { t } = useTranslation(\"realm-settings\");\n  const { control } = useFormContext();\n\n  return (\n    <Grid>\n      <Controller\n        name={`permissions.${name}`}\n        control={control}\n        defaultValue={[]}\n        render={({ field }) => (\n          <>\n            <GridItem lg={4} sm={6}>\n              <Checkbox\n                id={`user-${name}`}\n                label={t(\"user\")}\n                value=\"user\"\n                data-testid={`user-${name}`}\n                isChecked={field.value.includes(\"user\")}\n                onChange={() => {\n                  const option = \"user\";\n                  const changedValue = field.value.includes(option)\n                    ? field.value.filter((item: string) => item !== option)\n                    : [...field.value, option];\n\n                  field.onChange(changedValue);\n                }}\n              />\n            </GridItem>\n            <GridItem lg={8} sm={6}>\n              <Checkbox\n                id={`admin-${name}`}\n                label={t(\"admin\")}\n                value=\"admin\"\n                data-testid={`admin-${name}`}\n                isChecked={field.value.includes(\"admin\")}\n                onChange={() => {\n                  const option = \"admin\";\n                  const changedValue = field.value.includes(option)\n                    ? field.value.filter((item: string) => item !== option)\n                    : [...field.value, option];\n\n                  field.onChange(changedValue);\n                }}\n              />\n            </GridItem>\n          </>\n        )}\n      />\n    </Grid>\n  );\n};\n\nexport const AttributePermission = () => {\n  const { t } = useTranslation(\"realm-settings\");\n\n  return (\n    <FormAccess role=\"manage-realm\" isHorizontal>\n      <FormGroup\n        hasNoPaddingTop\n        label={t(\"whoCanEdit\")}\n        labelIcon={\n          <HelpItem\n            helpText=\"realm-settings-help:whoCanEditHelp\"\n            fieldLabelId=\"realm-settings:whoCanEdit\"\n          />\n        }\n        fieldId=\"kc-who-can-edit\"\n      >\n        <Permissions name=\"edit\" />\n      </FormGroup>\n      <FormGroup\n        hasNoPaddingTop\n        label={t(\"whoCanView\")}\n        labelIcon={\n          <HelpItem\n            helpText=\"realm-settings-help:whoCanViewHelp\"\n            fieldLabelId=\"realm-settings:whoCanView\"\n          />\n        }\n        fieldId=\"kc-who-can-view\"\n      >\n        <Permissions name=\"view\" />\n      </FormGroup>\n    </FormAccess>\n  );\n};\n","import ComponentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentRepresentation\";\nimport type ComponentTypeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentTypeRepresentation\";\nimport { Button, Form, Modal, ModalVariant } from \"@patternfly/react-core\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { DynamicComponents } from \"../../../components/dynamic/DynamicComponents\";\n\nexport type AddValidatorRoleDialogProps = {\n  open: boolean;\n  toggleDialog: () => void;\n  onConfirm: (newValidator: ComponentRepresentation) => void;\n  selected: ComponentTypeRepresentation;\n};\n\nexport const AddValidatorRoleDialog = ({\n  open,\n  toggleDialog,\n  onConfirm,\n  selected,\n}: AddValidatorRoleDialogProps) => {\n  const { t } = useTranslation(\"realm-settings\");\n  const form = useForm<ComponentTypeRepresentation>();\n  const { handleSubmit } = form;\n  const selectedRoleValidator = selected;\n\n  const save = (newValidator: ComponentTypeRepresentation) => {\n    onConfirm({ ...newValidator, id: selected.id });\n    toggleDialog();\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title={t(\"addValidatorRole\", {\n        validatorName: selectedRoleValidator.id,\n      })}\n      description={selectedRoleValidator.helpText}\n      isOpen={open}\n      onClose={toggleDialog}\n      actions={[\n        <Button\n          key=\"save\"\n          data-testid=\"save-validator-role-button\"\n          variant=\"primary\"\n          onClick={() => handleSubmit(save)()}\n        >\n          {t(\"common:save\")}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          data-testid=\"cancel-validator-role-button\"\n          variant=\"link\"\n          onClick={toggleDialog}\n        >\n          {t(\"common:cancel\")}\n        </Button>,\n      ]}\n    >\n      <Form>\n        <FormProvider {...form}>\n          <DynamicComponents properties={selectedRoleValidator.properties} />\n        </FormProvider>\n      </Form>\n    </Modal>\n  );\n};\n","import ComponentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentRepresentation\";\nimport ComponentTypeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentTypeRepresentation\";\nimport {\n  Modal,\n  ModalVariant,\n  Text,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport {\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useServerInfo } from \"../../../context/server-info/ServerInfoProvider\";\nimport useToggle from \"../../../utils/useToggle\";\nimport type { IndexedValidations } from \"../../NewAttributeSettings\";\nimport { AddValidatorRoleDialog } from \"./AddValidatorRoleDialog\";\n\nexport type AddValidatorDialogProps = {\n  selectedValidators: IndexedValidations[];\n  toggleDialog: () => void;\n  onConfirm: (newValidator: ComponentRepresentation) => void;\n};\n\nexport const AddValidatorDialog = ({\n  selectedValidators,\n  toggleDialog,\n  onConfirm,\n}: AddValidatorDialogProps) => {\n  const { t } = useTranslation(\"realm-settings\");\n  const [selectedValidator, setSelectedValidator] =\n    useState<ComponentTypeRepresentation>();\n  const allValidator: ComponentTypeRepresentation[] =\n    useServerInfo().componentTypes?.[\"org.keycloak.validate.Validator\"] || [];\n  const [validators, setValidators] = useState(\n    allValidator.filter(\n      ({ id }) => !selectedValidators.map(({ key }) => key).includes(id)\n    )\n  );\n  const [addValidatorRoleModalOpen, toggleModal] = useToggle();\n\n  return (\n    <>\n      {addValidatorRoleModalOpen && (\n        <AddValidatorRoleDialog\n          onConfirm={(newValidator) => {\n            onConfirm(newValidator);\n            setValidators(\n              validators.filter(({ id }) => id !== newValidator.id)\n            );\n          }}\n          open={addValidatorRoleModalOpen}\n          toggleDialog={toggleModal}\n          selected={selectedValidator!}\n        />\n      )}\n      <Modal\n        variant={ModalVariant.small}\n        title={t(\"addValidator\")}\n        isOpen\n        onClose={toggleDialog}\n      >\n        {validators.length !== 0 ? (\n          <TableComposable>\n            <Thead>\n              <Tr>\n                <Th>{t(\"validatorDialogColNames.colName\")}</Th>\n                <Th>{t(\"validatorDialogColNames.colDescription\")}</Th>\n              </Tr>\n            </Thead>\n            <Tbody>\n              {validators.map((validator) => (\n                <Tr\n                  key={validator.id}\n                  onRowClick={() => {\n                    setSelectedValidator(validator);\n                    toggleModal();\n                  }}\n                  isHoverable\n                >\n                  <Td dataLabel={t(\"validatorDialogColNames.colName\")}>\n                    {validator.id}\n                  </Td>\n                  <Td dataLabel={t(\"validatorDialogColNames.colDescription\")}>\n                    {validator.helpText}\n                  </Td>\n                </Tr>\n              ))}\n            </Tbody>\n          </TableComposable>\n        ) : (\n          <Text className=\"kc-emptyValidators\" component={TextVariants.h6}>\n            {t(\"realm-settings:emptyValidators\")}\n          </Text>\n        )}\n      </Modal>\n    </>\n  );\n};\n","import {\n  Button,\n  ButtonVariant,\n  Divider,\n  Text,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { PlusCircleIcon } from \"@patternfly/react-icons\";\nimport {\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport { useEffect, useState } from \"react\";\nimport { useFormContext, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useConfirmDialog } from \"../../../components/confirm-dialog/ConfirmDialog\";\nimport useToggle from \"../../../utils/useToggle\";\nimport type { IndexedValidations } from \"../../NewAttributeSettings\";\nimport { AddValidatorDialog } from \"../attribute/AddValidatorDialog\";\n\nimport \"../../realm-settings-section.css\";\n\nexport const AttributeValidations = () => {\n  const { t } = useTranslation(\"realm-settings\");\n  const [addValidatorModalOpen, toggleModal] = useToggle();\n  const [validatorToDelete, setValidatorToDelete] = useState<string>();\n  const { setValue, control, register } = useFormContext();\n\n  const validators: IndexedValidations[] = useWatch({\n    name: \"validations\",\n    control,\n    defaultValue: [],\n  });\n\n  useEffect(() => {\n    register(\"validations\");\n  }, []);\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: t(\"deleteValidatorConfirmTitle\"),\n    messageKey: t(\"deleteValidatorConfirmMsg\", {\n      validatorName: validatorToDelete,\n    }),\n    continueButtonLabel: \"common:delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      const updatedValidators = validators.filter(\n        (validator) => validator.key !== validatorToDelete\n      );\n\n      setValue(\"validations\", [...updatedValidators]);\n    },\n  });\n\n  return (\n    <>\n      {addValidatorModalOpen && (\n        <AddValidatorDialog\n          selectedValidators={validators}\n          onConfirm={(newValidator) => {\n            setValue(\"validations\", [\n              ...validators,\n              { key: newValidator.id, value: newValidator.config },\n            ]);\n          }}\n          toggleDialog={toggleModal}\n        />\n      )}\n      <DeleteConfirm />\n      <div className=\"kc-attributes-validations\">\n        <Button\n          id=\"addValidator\"\n          onClick={() => toggleModal()}\n          variant=\"link\"\n          data-testid=\"addValidator\"\n          className=\"kc--attributes-validations--add-validation-button\"\n          icon={<PlusCircleIcon />}\n        >\n          {t(\"realm-settings:addValidator\")}\n        </Button>\n        <Divider />\n        {validators.length !== 0 ? (\n          <TableComposable>\n            <Thead>\n              <Tr>\n                <Th>{t(\"validatorColNames.colName\")}</Th>\n                <Th>{t(\"validatorColNames.colConfig\")}</Th>\n                <Th />\n              </Tr>\n            </Thead>\n            <Tbody>\n              {validators.map((validator) => (\n                <Tr key={validator.key}>\n                  <Td dataLabel={t(\"validatorColNames.colName\")}>\n                    {validator.key}\n                  </Td>\n                  <Td dataLabel={t(\"validatorColNames.colConfig\")}>\n                    {JSON.stringify(validator.value)}\n                  </Td>\n                  <Td className=\"kc--attributes-validations--action-cell\">\n                    <Button\n                      key=\"validator\"\n                      variant=\"link\"\n                      data-testid=\"deleteValidator\"\n                      onClick={() => {\n                        toggleDeleteDialog();\n                        setValidatorToDelete(validator.key);\n                      }}\n                    >\n                      {t(\"common:delete\")}\n                    </Button>\n                  </Td>\n                </Tr>\n              ))}\n            </Tbody>\n          </TableComposable>\n        ) : (\n          <Text className=\"kc-emptyValidators\" component={TextVariants.h6}>\n            {t(\"realm-settings:emptyValidators\")}\n          </Text>\n        )}\n      </div>\n    </>\n  );\n};\n","import type UserProfileConfig from \"@keycloak/keycloak-admin-client/lib/defs/userProfileConfig\";\nimport type { UserProfileAttribute } from \"@keycloak/keycloak-admin-client/lib/defs/userProfileConfig\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  Form,\n  PageSection,\n} from \"@patternfly/react-core\";\nimport { flatten } from \"flat\";\nimport { useState } from \"react\";\nimport { FormProvider, useForm, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\n\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { ScrollForm } from \"../components/scroll-form/ScrollForm\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useAdminClient, useFetch } from \"../context/auth/AdminClient\";\nimport { convertToFormValues } from \"../util\";\nimport { useParams } from \"../utils/useParams\";\nimport type { AttributeParams } from \"./routes/Attribute\";\nimport { toUserProfile } from \"./routes/UserProfile\";\nimport { AttributeAnnotations } from \"./user-profile/attribute/AttributeAnnotations\";\nimport { AttributeGeneralSettings } from \"./user-profile/attribute/AttributeGeneralSettings\";\nimport { AttributePermission } from \"./user-profile/attribute/AttributePermission\";\nimport { AttributeValidations } from \"./user-profile/attribute/AttributeValidations\";\nimport { UserProfileProvider } from \"./user-profile/UserProfileContext\";\n\nimport \"./realm-settings-section.css\";\n\ntype IndexedAnnotations = {\n  key: string;\n  value?: Record<string, unknown>;\n};\n\nexport type IndexedValidations = {\n  key: string;\n  value?: Record<string, unknown>;\n};\n\ntype UserProfileAttributeType = Omit<\n  UserProfileAttribute,\n  \"validations\" | \"annotations\"\n> &\n  Attribute &\n  Permission & {\n    validations: IndexedValidations[];\n    annotations: IndexedAnnotations[];\n  };\n\ntype Attribute = {\n  roles: string[];\n  scopes: string[];\n  isRequired: boolean;\n};\n\ntype Permission = {\n  view: PermissionView[];\n  edit: PermissionEdit[];\n};\n\ntype PermissionView = [\n  {\n    adminView: boolean;\n    userView: boolean;\n  }\n];\n\ntype PermissionEdit = [\n  {\n    adminEdit: boolean;\n    userEdit: boolean;\n  }\n];\n\nexport const USERNAME_EMAIL = [\"username\", \"email\"];\n\nconst CreateAttributeFormContent = ({\n  save,\n}: {\n  save: (profileConfig: UserProfileConfig) => void;\n}) => {\n  const { t } = useTranslation(\"realm-settings\");\n  const form = useFormContext();\n  const { realm, attributeName } = useParams<AttributeParams>();\n  const editMode = attributeName ? true : false;\n\n  return (\n    <UserProfileProvider>\n      <ScrollForm\n        sections={[\n          { title: t(\"generalSettings\"), panel: <AttributeGeneralSettings /> },\n          { title: t(\"permission\"), panel: <AttributePermission /> },\n          { title: t(\"validations\"), panel: <AttributeValidations /> },\n          { title: t(\"annotations\"), panel: <AttributeAnnotations /> },\n        ]}\n      />\n      <Form onSubmit={form.handleSubmit(save)}>\n        <ActionGroup className=\"keycloak__form_actions\">\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            data-testid=\"attribute-create\"\n          >\n            {editMode ? t(\"common:save\") : t(\"common:create\")}\n          </Button>\n          <Link\n            to={toUserProfile({ realm, tab: \"attributes\" })}\n            data-testid=\"attribute-cancel\"\n            className=\"kc-attributeCancel\"\n          >\n            {t(\"common:cancel\")}\n          </Link>\n        </ActionGroup>\n      </Form>\n    </UserProfileProvider>\n  );\n};\n\nexport default function NewAttributeSettings() {\n  const { realm, attributeName } = useParams<AttributeParams>();\n  const { adminClient } = useAdminClient();\n  const form = useForm<UserProfileAttributeType>();\n  const { t } = useTranslation(\"realm-settings\");\n  const navigate = useNavigate();\n  const { addAlert, addError } = useAlerts();\n  const [config, setConfig] = useState<UserProfileConfig | null>(null);\n  const editMode = attributeName ? true : false;\n\n  useFetch(\n    () => adminClient.users.getProfile(),\n    (config) => {\n      setConfig(config);\n      const {\n        annotations,\n        validations,\n        permissions,\n        selector,\n        required,\n        ...values\n      } =\n        config.attributes!.find(\n          (attribute) => attribute.name === attributeName\n        ) || {};\n      convertToFormValues(values, form.setValue);\n      Object.entries(\n        flatten<any, any>({ permissions, selector, required }, { safe: true })\n      ).map(([key, value]) => form.setValue(key as any, value));\n      form.setValue(\n        \"annotations\",\n        Object.entries(annotations || {}).map(([key, value]) => ({\n          key,\n          value,\n        }))\n      );\n      form.setValue(\n        \"validations\",\n        Object.entries(validations || {}).map(([key, value]) => ({\n          key,\n          value,\n        }))\n      );\n      form.setValue(\"isRequired\", required !== undefined);\n    },\n    []\n  );\n\n  const save = async (profileConfig: UserProfileAttributeType) => {\n    const validations = profileConfig.validations.reduce(\n      (prevValidations, currentValidations) => {\n        prevValidations[currentValidations.key] =\n          currentValidations.value?.length === 0\n            ? {}\n            : currentValidations.value;\n        return prevValidations;\n      },\n      {} as Record<string, unknown>\n    );\n\n    const annotations = profileConfig.annotations.reduce(\n      (obj, item) => Object.assign(obj, { [item.key]: item.value }),\n      {}\n    );\n\n    const patchAttributes = () =>\n      config?.attributes!.map((attribute) => {\n        if (attribute.name !== attributeName) {\n          return attribute;\n        }\n\n        delete attribute.required;\n        return Object.assign(\n          {\n            ...attribute,\n            name: attributeName,\n            displayName: profileConfig.displayName!,\n            selector: profileConfig.selector,\n            permissions: profileConfig.permissions!,\n            annotations,\n            validations,\n          },\n          profileConfig.isRequired\n            ? { required: profileConfig.required }\n            : undefined,\n          profileConfig.group ? { group: profileConfig.group } : { group: null }\n        );\n      });\n\n    const addAttribute = () =>\n      config?.attributes!.concat([\n        Object.assign(\n          {\n            name: profileConfig.name,\n            displayName: profileConfig.displayName!,\n            required: profileConfig.isRequired ? profileConfig.required : {},\n            selector: profileConfig.selector,\n            permissions: profileConfig.permissions!,\n            annotations,\n          },\n          profileConfig.isRequired\n            ? { required: profileConfig.required }\n            : undefined,\n          profileConfig.group ? { group: profileConfig.group } : undefined\n        ),\n      ] as UserProfileAttribute);\n\n    const updatedAttributes = editMode ? patchAttributes() : addAttribute();\n\n    try {\n      await adminClient.users.updateProfile({\n        ...config,\n        attributes: updatedAttributes as UserProfileAttribute[],\n        realm,\n      });\n\n      navigate(toUserProfile({ realm, tab: \"attributes\" }));\n\n      addAlert(\n        t(\"realm-settings:createAttributeSuccess\"),\n        AlertVariant.success\n      );\n    } catch (error) {\n      addError(\"realm-settings:createAttributeError\", error);\n    }\n  };\n\n  return (\n    <FormProvider {...form}>\n      <ViewHeader\n        titleKey={editMode ? attributeName : t(\"createAttribute\")}\n        subKey={editMode ? \"\" : t(\"createAttributeSubTitle\")}\n      />\n      <PageSection variant=\"light\">\n        <CreateAttributeFormContent save={() => form.handleSubmit(save)()} />\n      </PageSection>\n    </FormProvider>\n  );\n}\n"],"names":["AttributeAnnotations","t","useTranslation","FormAccess","FormGroup","Grid","GridItem","KeyValueInput","REQUIRED_FOR","label","value","AttributeGeneralSettings","adminClient","useAdminClient","form","useFormContext","clientScopes","setClientScopes","useState","config","setConfig","selectEnabledWhenOpen","setSelectEnabledWhenOpen","selectRequiredForOpen","setSelectRequiredForOpen","isAttributeGroupDropdownOpen","setIsAttributeGroupDropdownOpen","attributeName","useParams","editMode","selectedScopes","useWatch","control","name","defaultValue","requiredScopes","required","useFetch","find","users","getProfile","_jsx","HelpItem","formState","errors","message","KeycloakTextInput","register","Controller","field","Select","_","onChange","toString","SelectVariant","single","SelectOption","groups","map","group","USERNAME_EMAIL","includes","_Fragment","Divider","Radio","length","setValue","s","typeaheadMulti","numChips","expandedText","collapsedText","isOpen","selectedValue","option","changedValue","filter","item","selectedValues","stopPropagation","Switch","_jsxs","isEqual","KeycloakSpinner","Permissions","Checkbox","AttributePermission","AddValidatorRoleDialog","open","toggleDialog","onConfirm","selected","useForm","handleSubmit","selectedRoleValidator","save","newValidator","id","Modal","ModalVariant","small","validatorName","helpText","Button","Form","FormProvider","DynamicComponents","properties","AddValidatorDialog","selectedValidators","selectedValidator","setSelectedValidator","allValidator","useServerInfo","componentTypes","validators","setValidators","key","addValidatorRoleModalOpen","toggleModal","useToggle","TableComposable","Thead","Tr","Th","Tbody","validator","Td","Text","TextVariants","h6","AttributeValidations","addValidatorModalOpen","validatorToDelete","setValidatorToDelete","useEffect","toggleDeleteDialog","DeleteConfirm","useConfirmDialog","titleKey","messageKey","continueButtonLabel","continueButtonVariant","ButtonVariant","danger","updatedValidators","PlusCircleIcon","JSON","stringify","CreateAttributeFormContent","realm","UserProfileProvider","ScrollForm","title","panel","ActionGroup","Link","toUserProfile","tab","NewAttributeSettings","navigate","useNavigate","addAlert","addError","useAlerts","annotations","validations","permissions","selector","values","attributes","attribute","Object","entries","flatten","safe","undefined","profileConfig","reduce","prevValidations","currentValidations","obj","assign","updatedAttributes","displayName","isRequired","concat","updateProfile","AlertVariant","success","error","ViewHeader","PageSection"],"mappings":"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"}