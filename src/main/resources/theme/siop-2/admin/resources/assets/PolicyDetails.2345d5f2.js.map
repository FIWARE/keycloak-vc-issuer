{"version":3,"file":"PolicyDetails.2345d5f2.js","sources":["../../../../node_modules/@patternfly/react-core/dist/esm/components/TimePicker/TimePickerUtils.js","../../../../node_modules/@patternfly/react-core/dist/esm/components/TimePicker/TimePicker.js","../../../../node_modules/lodash-es/_trimmedEndIndex.js","../../../../node_modules/lodash-es/_baseTrim.js","../../../../node_modules/lodash-es/toNumber.js","../../../../node_modules/lodash-es/now.js","../../../../node_modules/lodash-es/debounce.js","../../../../node_modules/@patternfly/react-icons/dist/esm/icons/caret-up-icon.js","../../src/components/users/UserSelect.tsx","../../src/clients/authorization/DecisionStrategySelect.tsx","../../src/clients/authorization/policy/Aggregate.tsx","../../src/clients/authorization/policy/Client.tsx","../../src/clients/scopes/AddScopeDialog.tsx","../../src/clients/authorization/policy/ClientScope.tsx","../../src/clients/authorization/policy/Group.tsx","../../src/clients/authorization/policy/JavaScript.tsx","../../src/clients/authorization/policy/LogicSelector.tsx","../../src/clients/authorization/policy/NameDescription.tsx","../../src/clients/authorization/policy/Regex.tsx","../../src/clients/authorization/policy/Role.tsx","../../src/clients/authorization/policy/Time.tsx","../../src/clients/authorization/policy/User.tsx","../../src/clients/authorization/policy/PolicyDetails.tsx"],"sourcesContent":["export const amSuffix = ' AM';\nexport const pmSuffix = ' PM';\nexport const makeTimeOptions = (stepMinutes, hour12, delimiter, minTime, maxTime, includeSeconds) => {\n    const res = [];\n    const iter = new Date(new Date().setHours(0, 0, 0, 0));\n    const iterDay = iter.getDay();\n    while (iter.getDay() === iterDay) {\n        let hour = iter.getHours();\n        let suffix = amSuffix;\n        if (hour12) {\n            if (hour === 0) {\n                hour = 12; // 12am\n            }\n            else if (hour >= 12) {\n                suffix = pmSuffix;\n            }\n            if (hour > 12) {\n                hour %= 12;\n            }\n        }\n        hour = hour12 ? hour.toString() : hour.toString().padStart(2, '0');\n        const minutes = iter\n            .getMinutes()\n            .toString()\n            .padStart(2, '0');\n        const timeOption = `${hour}${delimiter}${minutes}${hour12 ? suffix : ''}`;\n        // time option is valid if within min/max constraints\n        if (isWithinMinMax(minTime, maxTime, timeOption, delimiter, includeSeconds)) {\n            res.push(timeOption);\n        }\n        iter.setMinutes(iter.getMinutes() + stepMinutes);\n    }\n    return res;\n};\nexport const parseTime = (time, timeRegex, delimiter, is12Hour, includeSeconds) => {\n    const date = new Date(time);\n    // if default time is a ISO 8601 formatted date string, we parse it to hh:mm(am/pm) format\n    if (!isNaN(date.getDate()) && (time instanceof Date || time.includes('T'))) {\n        const hours = is12Hour\n            ? `${date.getHours() > 12 ? date.getHours() - 12 : date.getHours()}`\n            : `${date.getHours()}`.padStart(2, '0');\n        const minutes = `${date.getMinutes()}`.padStart(2, '0');\n        const seconds = includeSeconds ? `${date.getSeconds()}`.padStart(2, '0') : '';\n        const secondsWithDelimiter = seconds ? `${delimiter}${seconds}` : '';\n        let ampm = '';\n        if (is12Hour && date.getHours() > 11) {\n            ampm = pmSuffix;\n        }\n        else if (is12Hour) {\n            ampm = amSuffix;\n        }\n        return `${hours}${delimiter}${minutes}${secondsWithDelimiter}${ampm}`;\n    }\n    else if (typeof time === 'string') {\n        time = time.trim();\n        if (time !== '' && validateTime(time, timeRegex, delimiter, is12Hour)) {\n            const [, hours, minutes, seconds, suffix = ''] = timeRegex.exec(time);\n            const secondsWithDelimiter = includeSeconds ? `${delimiter}${seconds !== null && seconds !== void 0 ? seconds : '00'}` : '';\n            let ampm = '';\n            // Format AM/PM according to design\n            if (is12Hour) {\n                const uppercaseSuffix = suffix.toUpperCase();\n                if (uppercaseSuffix === amSuffix.toUpperCase().trim()) {\n                    ampm = amSuffix;\n                }\n                else if (uppercaseSuffix === pmSuffix.toUpperCase().trim()) {\n                    ampm = pmSuffix;\n                }\n                else {\n                    // if this 12 hour time is missing am/pm but otherwise valid,\n                    // append am/pm depending on time of day\n                    ampm = new Date().getHours() > 11 ? pmSuffix : amSuffix;\n                }\n            }\n            return `${hours}${delimiter}${minutes}${secondsWithDelimiter}${ampm}`;\n        }\n    }\n    return time.toString();\n};\nexport const validateTime = (time, timeRegex, delimiter, is12Hour) => {\n    // ISO 8601 format is valid\n    const date = new Date(time);\n    if (!isNaN(date.getDate()) && time.includes('T')) {\n        return true;\n    }\n    // hours only valid if they are [0-23] or [1-12]\n    const hours = parseInt(time.split(delimiter)[0]);\n    const validHours = hours >= (is12Hour ? 1 : 0) && hours <= (is12Hour ? 12 : 23);\n    // minutes verified by timeRegex\n    // empty string is valid\n    return time === '' || (timeRegex.test(time) && validHours);\n};\nexport const getHours = (time, timeRegex) => {\n    const parts = time.match(timeRegex);\n    if (parts && parts.length) {\n        if (/pm/i.test(parts[4])) {\n            return parseInt(parts[1]) === 12 ? parseInt(parts[1]) : parseInt(parts[1]) + 12;\n        }\n        if (/am/i.test(parts[4])) {\n            return parseInt(parts[1]) === 12 ? 0 : parseInt(parts[1]);\n        }\n        return parseInt(parts[1]);\n    }\n    return null;\n};\nexport const getMinutes = (time, timeRegex) => {\n    const parts = time.match(timeRegex);\n    return parts && parts.length ? parseInt(parts[2]) : null;\n};\nexport const getSeconds = (time, timeRegex) => {\n    var _a;\n    const seconds = (_a = time.match(timeRegex)) === null || _a === void 0 ? void 0 : _a[3];\n    return seconds ? parseInt(seconds) : null;\n};\nexport const isWithinMinMax = (minTime, maxTime, time, delimiter, includeSeconds) => {\n    // do not throw error if empty string\n    if (time.trim() === '') {\n        return true;\n    }\n    // correctly format as 24hr times (12:30AM => 00:30, 1:15 => 01:15)\n    const min24HourTime = convertTo24Hour(minTime, delimiter, includeSeconds);\n    const selected24HourTime = convertTo24Hour(time, delimiter, includeSeconds);\n    const max24HourTime = convertTo24Hour(maxTime, delimiter, includeSeconds);\n    // simple string comparison for 24hr times\n    return min24HourTime <= selected24HourTime && selected24HourTime <= max24HourTime;\n};\nconst convertTo24Hour = (time, delimiter, includeSeconds) => {\n    const timeReg = new RegExp(`^\\\\s*(\\\\d\\\\d?)${delimiter}([0-5]\\\\d)${delimiter}?([0-5]\\\\d)?\\\\s*([AaPp][Mm])?\\\\s*$`);\n    const regMatches = timeReg.exec(time);\n    if (!regMatches || !regMatches.length) {\n        return;\n    }\n    let hours = regMatches[1].padStart(2, '0');\n    const minutes = regMatches[2];\n    let seconds = regMatches[3] ? `${delimiter}${regMatches[3]}` : '';\n    // When seconds is empty and 'includeSeconds' is enabled, append 0 seconds.\n    if (!seconds && includeSeconds) {\n        seconds = `${delimiter}00`;\n    }\n    const suffix = regMatches[4] || '';\n    if (suffix.toUpperCase() === 'PM' && hours !== '12') {\n        hours = `${parseInt(hours) + 12}`;\n    }\n    else if (suffix.toUpperCase() === 'AM' && hours === '12') {\n        hours = '00';\n    }\n    return `${hours}${delimiter}${minutes}${seconds}`;\n};\n//# sourceMappingURL=TimePickerUtils.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport datePickerStyles from '@patternfly/react-styles/css/components/DatePicker/date-picker';\nimport formStyles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport menuStyles from '@patternfly/react-styles/css/components/Menu/menu';\nimport { getUniqueId } from '../../helpers';\nimport { Popper } from '../../helpers/Popper/Popper';\nimport { Menu, MenuContent, MenuList, MenuItem } from '../Menu';\nimport { InputGroup } from '../InputGroup';\nimport { TextInput } from '../TextInput';\nimport { KeyTypes } from '../../helpers/constants';\nimport { parseTime, validateTime, makeTimeOptions, amSuffix, pmSuffix, getHours, getMinutes, isWithinMinMax, getSeconds } from './TimePickerUtils';\nexport class TimePicker extends React.Component {\n    constructor(props) {\n        super(props);\n        this.baseComponentRef = React.createRef();\n        this.toggleRef = React.createRef();\n        this.inputRef = React.createRef();\n        this.menuRef = React.createRef();\n        this.onDocClick = (event) => {\n            var _a, _b, _c, _d;\n            const clickedOnToggle = (_b = (_a = this.toggleRef) === null || _a === void 0 ? void 0 : _a.current) === null || _b === void 0 ? void 0 : _b.contains(event.target);\n            const clickedWithinMenu = (_d = (_c = this.menuRef) === null || _c === void 0 ? void 0 : _c.current) === null || _d === void 0 ? void 0 : _d.contains(event.target);\n            if (this.state.isTimeOptionsOpen && !(clickedOnToggle || clickedWithinMenu)) {\n                this.onToggle(false);\n            }\n        };\n        this.handleGlobalKeys = (event) => {\n            var _a, _b, _c, _d;\n            const { isTimeOptionsOpen, focusedIndex, scrollIndex } = this.state;\n            // keyboard pressed while focus on toggle\n            if ((_b = (_a = this.inputRef) === null || _a === void 0 ? void 0 : _a.current) === null || _b === void 0 ? void 0 : _b.contains(event.target)) {\n                if (!isTimeOptionsOpen && event.key !== KeyTypes.Tab && event.key !== KeyTypes.Escape) {\n                    this.onToggle(true);\n                }\n                else if (isTimeOptionsOpen) {\n                    if (event.key === KeyTypes.Escape || event.key === KeyTypes.Tab) {\n                        this.onToggle(false);\n                    }\n                    else if (event.key === KeyTypes.Enter) {\n                        if (focusedIndex !== null) {\n                            this.focusSelection(focusedIndex);\n                            event.stopPropagation();\n                        }\n                        else {\n                            this.onToggle(false);\n                        }\n                    }\n                    else if (event.key === KeyTypes.ArrowDown || event.key === KeyTypes.ArrowUp) {\n                        this.focusSelection(scrollIndex);\n                        this.updateFocusedIndex(0);\n                        event.preventDefault();\n                    }\n                }\n                // keyboard pressed while focus on menu item\n            }\n            else if ((_d = (_c = this.menuRef) === null || _c === void 0 ? void 0 : _c.current) === null || _d === void 0 ? void 0 : _d.contains(event.target)) {\n                if (event.key === KeyTypes.ArrowDown) {\n                    this.updateFocusedIndex(1);\n                    event.preventDefault();\n                }\n                else if (event.key === KeyTypes.ArrowUp) {\n                    this.updateFocusedIndex(-1);\n                    event.preventDefault();\n                }\n                else if (event.key === KeyTypes.Escape || event.key === KeyTypes.Tab) {\n                    this.inputRef.current.focus();\n                    this.onToggle(false);\n                }\n            }\n        };\n        this.updateFocusedIndex = (increment) => {\n            this.setState(prevState => {\n                const maxIndex = this.getOptions().length - 1;\n                let nextIndex = prevState.focusedIndex !== null ? prevState.focusedIndex + increment : prevState.scrollIndex + increment;\n                if (nextIndex < 0) {\n                    nextIndex = maxIndex;\n                }\n                else if (nextIndex > maxIndex) {\n                    nextIndex = 0;\n                }\n                this.scrollToIndex(nextIndex);\n                return {\n                    focusedIndex: nextIndex\n                };\n            });\n        };\n        // fixes issue where menutAppendTo=\"inline\" results in the menu item that should be scrolled to being out of view; this will select the menu item that comes before the intended one, causing that before-item to be placed out of view instead\n        this.getIndexToScroll = (index) => {\n            if (this.props.menuAppendTo === 'inline') {\n                return index > 0 ? index - 1 : 0;\n            }\n            return index;\n        };\n        this.scrollToIndex = (index) => {\n            this.getOptions()[index].closest(`.${menuStyles.menuContent}`).scrollTop = this.getOptions()[this.getIndexToScroll(index)].offsetTop;\n        };\n        this.focusSelection = (index) => {\n            var _a;\n            const indexToFocus = index !== -1 ? index : 0;\n            if ((_a = this.menuRef) === null || _a === void 0 ? void 0 : _a.current) {\n                this.getOptions()[indexToFocus].querySelector(`.${menuStyles.menuItem}`).focus();\n            }\n        };\n        this.scrollToSelection = (time) => {\n            const { delimiter, is24Hour } = this.props;\n            let splitTime = time.split(this.props.delimiter);\n            let focusedIndex = null;\n            // build out the rest of the time assuming hh:00 if it's a partial time\n            if (splitTime.length < 2) {\n                time = `${time}${delimiter}00`;\n                splitTime = time.split(delimiter);\n                // due to only the input including seconds when includeSeconds=true, we need to build a temporary time here without those seconds so that an exact or close match can be scrolled to within the menu (which does not include seconds in any of the options)\n            }\n            else if (splitTime.length > 2) {\n                time = parseTime(time, this.state.timeRegex, delimiter, !is24Hour, false);\n                splitTime = time.split(delimiter);\n            }\n            // for 12hr variant, autoscroll to pm if it's currently the afternoon, otherwise autoscroll to am\n            if (!is24Hour && splitTime.length > 1 && splitTime[1].length < 2) {\n                const minutes = splitTime[1].length === 0 ? '00' : splitTime[1] + '0';\n                time = `${splitTime[0]}${delimiter}${minutes}${new Date().getHours() > 11 ? pmSuffix : amSuffix}`;\n            }\n            else if (!is24Hour &&\n                splitTime.length > 1 &&\n                splitTime[1].length === 2 &&\n                !time.toUpperCase().includes(amSuffix.toUpperCase().trim()) &&\n                !time.toUpperCase().includes(pmSuffix.toUpperCase().trim())) {\n                time = `${time}${new Date().getHours() > 11 ? pmSuffix : amSuffix}`;\n            }\n            let scrollIndex = this.getOptions().findIndex(option => option.textContent === time);\n            // if we found an exact match, scroll to match and return index of match for focus\n            if (scrollIndex !== -1) {\n                this.scrollToIndex(scrollIndex);\n                focusedIndex = scrollIndex;\n            }\n            else if (splitTime.length === 2) {\n                // no exact match, scroll to closest hour but don't return index for focus\n                let amPm = '';\n                if (!is24Hour) {\n                    if (splitTime[1].toUpperCase().includes('P')) {\n                        amPm = pmSuffix;\n                    }\n                    else if (splitTime[1].toUpperCase().includes('A')) {\n                        amPm = amSuffix;\n                    }\n                }\n                time = `${splitTime[0]}${delimiter}00${amPm}`;\n                scrollIndex = this.getOptions().findIndex(option => option.textContent === time);\n                if (scrollIndex !== -1) {\n                    this.scrollToIndex(scrollIndex);\n                }\n            }\n            this.setState({\n                focusedIndex,\n                scrollIndex\n            });\n        };\n        this.getRegExp = (includeSeconds = true) => {\n            const { is24Hour, delimiter } = this.props;\n            let baseRegex = `\\\\s*(\\\\d\\\\d?)${delimiter}([0-5]\\\\d)`;\n            if (includeSeconds) {\n                baseRegex += `${delimiter}?([0-5]\\\\d)?`;\n            }\n            return new RegExp(`^${baseRegex}${is24Hour ? '' : '\\\\s*([AaPp][Mm])?'}\\\\s*$`);\n        };\n        this.getOptions = () => {\n            var _a;\n            return (((_a = this.menuRef) === null || _a === void 0 ? void 0 : _a.current)\n                ? Array.from(this.menuRef.current.querySelectorAll(`.${menuStyles.menuListItem}`))\n                : []);\n        };\n        this.isValidFormat = (time) => {\n            if (this.props.validateTime) {\n                return this.props.validateTime(time);\n            }\n            const { delimiter, is24Hour, includeSeconds } = this.props;\n            return validateTime(time, this.getRegExp(includeSeconds), delimiter, !is24Hour);\n        };\n        this.isValidTime = (time) => {\n            const { delimiter, includeSeconds } = this.props;\n            const { minTimeState, maxTimeState } = this.state;\n            return isWithinMinMax(minTimeState, maxTimeState, time, delimiter, includeSeconds);\n        };\n        this.isValid = (time) => this.isValidFormat(time) && this.isValidTime(time);\n        this.onToggle = (isOpen) => {\n            // on close, parse and validate input\n            this.setState(prevState => {\n                const { timeRegex, isInvalid } = prevState;\n                const { delimiter, is24Hour, includeSeconds } = this.props;\n                const time = parseTime(prevState.timeState, timeRegex, delimiter, !is24Hour, includeSeconds);\n                return {\n                    isTimeOptionsOpen: isOpen,\n                    timeState: time,\n                    isInvalid: isOpen ? isInvalid : !this.isValid(time)\n                };\n            });\n            this.props.setIsOpen(isOpen);\n            if (!isOpen) {\n                this.inputRef.current.focus();\n            }\n        };\n        this.onSelect = (e) => {\n            const { timeRegex, timeState } = this.state;\n            const { delimiter, is24Hour, includeSeconds, setIsOpen } = this.props;\n            const time = parseTime(e.target.textContent, timeRegex, delimiter, !is24Hour, includeSeconds);\n            if (time !== timeState) {\n                this.onInputChange(time, e);\n            }\n            this.inputRef.current.focus();\n            this.setState({\n                isTimeOptionsOpen: false,\n                isInvalid: false\n            });\n            setIsOpen(false);\n        };\n        this.onInputClick = (e) => {\n            if (!this.state.isTimeOptionsOpen) {\n                this.onToggle(true);\n            }\n            e.stopPropagation();\n        };\n        this.onInputChange = (newTime, event) => {\n            const { onChange } = this.props;\n            const { timeRegex } = this.state;\n            if (onChange) {\n                onChange(event, newTime, getHours(newTime, timeRegex), getMinutes(newTime, timeRegex), getSeconds(newTime, timeRegex), this.isValid(newTime));\n            }\n            this.scrollToSelection(newTime);\n            this.setState({\n                timeState: newTime\n            });\n        };\n        const { is24Hour, delimiter, time, includeSeconds, isOpen } = this.props;\n        let { minTime, maxTime } = this.props;\n        if (minTime === '') {\n            const minSeconds = includeSeconds ? `${delimiter}00` : '';\n            minTime = is24Hour ? `00${delimiter}00${minSeconds}` : `12${delimiter}00${minSeconds} AM`;\n        }\n        if (maxTime === '') {\n            const maxSeconds = includeSeconds ? `${delimiter}59` : '';\n            maxTime = is24Hour ? `23${delimiter}59${maxSeconds}` : `11${delimiter}59${maxSeconds} PM`;\n        }\n        const timeRegex = this.getRegExp();\n        this.state = {\n            isInvalid: false,\n            isTimeOptionsOpen: isOpen,\n            timeState: parseTime(time, timeRegex, delimiter, !is24Hour, includeSeconds),\n            focusedIndex: null,\n            scrollIndex: 0,\n            timeRegex,\n            minTimeState: parseTime(minTime, timeRegex, delimiter, !is24Hour, includeSeconds),\n            maxTimeState: parseTime(maxTime, timeRegex, delimiter, !is24Hour, includeSeconds)\n        };\n    }\n    componentDidMount() {\n        document.addEventListener('mousedown', this.onDocClick);\n        document.addEventListener('touchstart', this.onDocClick);\n        document.addEventListener('keydown', this.handleGlobalKeys);\n        this.setState({ isInvalid: !this.isValid(this.state.timeState) });\n    }\n    componentWillUnmount() {\n        document.removeEventListener('mousedown', this.onDocClick);\n        document.removeEventListener('touchstart', this.onDocClick);\n        document.removeEventListener('keydown', this.handleGlobalKeys);\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { timeState, isTimeOptionsOpen, isInvalid, timeRegex } = this.state;\n        const { time, is24Hour, delimiter, includeSeconds, isOpen, minTime, maxTime } = this.props;\n        if (prevProps.isOpen !== isOpen) {\n            this.onToggle(isOpen);\n        }\n        if (isTimeOptionsOpen && !prevState.isTimeOptionsOpen && timeState && !isInvalid) {\n            this.scrollToSelection(timeState);\n        }\n        if (delimiter !== prevProps.delimiter) {\n            this.setState({\n                timeRegex: this.getRegExp()\n            });\n        }\n        if (time !== '' && time !== prevProps.time) {\n            const parsedTime = parseTime(time, timeRegex, delimiter, !is24Hour, includeSeconds);\n            this.setState({\n                timeState: parsedTime,\n                isInvalid: !this.isValid(parsedTime)\n            });\n        }\n        if (minTime !== '' && minTime !== prevProps.minTime) {\n            this.setState({\n                minTimeState: parseTime(minTime, timeRegex, delimiter, !is24Hour, includeSeconds)\n            });\n        }\n        if (maxTime !== '' && maxTime !== prevProps.maxTime) {\n            this.setState({\n                maxTimeState: parseTime(maxTime, timeRegex, delimiter, !is24Hour, includeSeconds)\n            });\n        }\n    }\n    render() {\n        const _a = this.props, { 'aria-label': ariaLabel, isDisabled, className, placeholder, id, menuAppendTo, is24Hour, invalidFormatErrorMessage, invalidMinMaxErrorMessage, stepMinutes, width, delimiter, inputProps, \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        onChange, \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        setIsOpen, \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        isOpen, time, validateTime, minTime, maxTime, includeSeconds, \n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        removeFindDomNode, zIndex } = _a, props = __rest(_a, ['aria-label', \"isDisabled\", \"className\", \"placeholder\", \"id\", \"menuAppendTo\", \"is24Hour\", \"invalidFormatErrorMessage\", \"invalidMinMaxErrorMessage\", \"stepMinutes\", \"width\", \"delimiter\", \"inputProps\", \"onChange\", \"setIsOpen\", \"isOpen\", \"time\", \"validateTime\", \"minTime\", \"maxTime\", \"includeSeconds\", \"removeFindDomNode\", \"zIndex\"]);\n        const { timeState, isTimeOptionsOpen, isInvalid, minTimeState, maxTimeState } = this.state;\n        const style = { '--pf-c-date-picker__input--c-form-control--Width': width };\n        const options = makeTimeOptions(stepMinutes, !is24Hour, delimiter, minTimeState, maxTimeState, includeSeconds);\n        const isValidFormat = this.isValidFormat(timeState);\n        const randomId = id || getUniqueId('time-picker');\n        const getParentElement = () => {\n            if (this.baseComponentRef && this.baseComponentRef.current) {\n                return this.baseComponentRef.current.parentElement;\n            }\n            return null;\n        };\n        const menuContainer = (React.createElement(Menu, { ref: this.menuRef, isScrollable: true },\n            React.createElement(MenuContent, { maxMenuHeight: \"200px\" },\n                React.createElement(MenuList, { \"aria-label\": ariaLabel }, options.map((option, index) => (React.createElement(MenuItem, { onClick: this.onSelect, key: option, id: `${randomId}-option-${index}` }, option)))))));\n        const textInput = (React.createElement(TextInput, Object.assign({ \"aria-haspopup\": \"menu\", className: css(formStyles.formControl), id: `${randomId}-input`, \"aria-label\": ariaLabel, validated: isInvalid ? 'error' : 'default', placeholder: placeholder, value: timeState || '', type: \"text\", iconVariant: \"clock\", onClick: this.onInputClick, onChange: this.onInputChange, autoComplete: \"off\", isDisabled: isDisabled, ref: this.inputRef }, inputProps)));\n        let calculatedAppendTo;\n        switch (menuAppendTo) {\n            case 'inline':\n                calculatedAppendTo = () => this.toggleRef.current;\n                break;\n            case 'parent':\n                calculatedAppendTo = getParentElement;\n                break;\n            default:\n                calculatedAppendTo = menuAppendTo;\n        }\n        return (React.createElement(\"div\", { ref: this.baseComponentRef, className: css(datePickerStyles.datePicker, className) },\n            React.createElement(\"div\", Object.assign({ className: css(datePickerStyles.datePickerInput), style: style }, props),\n                React.createElement(InputGroup, null,\n                    React.createElement(\"div\", { id: randomId },\n                        React.createElement(\"div\", { ref: this.toggleRef, style: { paddingLeft: '0' } },\n                            React.createElement(Popper, { appendTo: calculatedAppendTo, trigger: textInput, popper: menuContainer, isVisible: isTimeOptionsOpen, removeFindDomNode: removeFindDomNode, zIndex: zIndex })))),\n                isInvalid && (React.createElement(\"div\", { className: css(datePickerStyles.datePickerHelperText, datePickerStyles.modifiers.error) }, !isValidFormat ? invalidFormatErrorMessage : invalidMinMaxErrorMessage)))));\n    }\n}\nTimePicker.displayName = 'TimePicker';\nTimePicker.defaultProps = {\n    className: '',\n    isDisabled: false,\n    time: '',\n    is24Hour: false,\n    invalidFormatErrorMessage: 'Invalid time format',\n    invalidMinMaxErrorMessage: 'Invalid time entered',\n    placeholder: 'hh:mm',\n    delimiter: ':',\n    'aria-label': 'Time picker',\n    width: '150px',\n    menuAppendTo: 'inline',\n    stepMinutes: 30,\n    inputProps: {},\n    minTime: '',\n    maxTime: '',\n    isOpen: false,\n    setIsOpen: () => { },\n    removeFindDomNode: false,\n    zIndex: 9999\n};\n//# sourceMappingURL=TimePicker.js.map","/** Used to match a single whitespace character. */\nvar reWhitespace = /\\s/;\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */\nfunction trimmedEndIndex(string) {\n  var index = string.length;\n\n  while (index-- && reWhitespace.test(string.charAt(index))) {}\n  return index;\n}\n\nexport default trimmedEndIndex;\n","import trimmedEndIndex from './_trimmedEndIndex.js';\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\nfunction baseTrim(string) {\n  return string\n    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n    : string;\n}\n\nexport default baseTrim;\n","import baseTrim from './_baseTrim.js';\nimport isObject from './isObject.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nexport default toNumber;\n","import root from './_root.js';\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nexport default now;\n","import isObject from './isObject.js';\nimport now from './now.js';\nimport toNumber from './toNumber.js';\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        clearTimeout(timerId);\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nexport default debounce;\n","import { createIcon } from '../createIcon';\n\nexport const CaretUpIconConfig = {\n  name: 'CaretUpIcon',\n  height: 512,\n  width: 320,\n  svgPath: 'M288.662 352H31.338c-17.818 0-26.741-21.543-14.142-34.142l128.662-128.662c7.81-7.81 20.474-7.81 28.284 0l128.662 128.662c12.6 12.599 3.676 34.142-14.142 34.142z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const CaretUpIcon = createIcon(CaretUpIconConfig);\n\nexport default CaretUpIcon;","import { useCallback, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport {\n  SelectOption,\n  FormGroup,\n  Select,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { debounce } from \"lodash-es\";\n\nimport type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport type { UserQuery } from \"@keycloak/keycloak-admin-client/lib/resources/users\";\nimport type { ComponentProps } from \"../dynamic/components\";\n\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { HelpItem } from \"../help-enabler/HelpItem\";\nimport useToggle from \"../../utils/useToggle\";\n\ntype UserSelectProps = ComponentProps & {\n  variant?: SelectVariant;\n  isRequired?: boolean;\n};\n\nexport const UserSelect = ({\n  name,\n  label,\n  helpText,\n  defaultValue,\n  isRequired,\n  variant = SelectVariant.typeaheadMulti,\n}: UserSelectProps) => {\n  const { t } = useTranslation(\"clients\");\n  const {\n    control,\n    getValues,\n    formState: { errors },\n  } = useFormContext();\n  const values: string[] | undefined = getValues(name!);\n\n  const [open, toggleOpen] = useToggle();\n  const [users, setUsers] = useState<(UserRepresentation | undefined)[]>([]);\n  const [search, setSearch] = useState(\"\");\n\n  const { adminClient } = useAdminClient();\n  const debounceFn = useCallback(debounce(setSearch, 1000), []);\n\n  useFetch(\n    () => {\n      const params: UserQuery = {\n        max: 20,\n      };\n      if (search) {\n        params.username = search;\n      }\n\n      if (values?.length && !search) {\n        return Promise.all(\n          values.map((id: string) => adminClient.users.findOne({ id }))\n        );\n      }\n      return adminClient.users.find(params);\n    },\n    setUsers,\n    [search]\n  );\n\n  const convert = (clients: (UserRepresentation | undefined)[]) =>\n    clients\n      .filter((c) => c !== undefined)\n      .map((option) => (\n        <SelectOption\n          key={option!.id}\n          value={option!.id}\n          selected={values?.includes(option!.id!)}\n        >\n          {option!.username}\n        </SelectOption>\n      ));\n\n  return (\n    <FormGroup\n      label={t(label!)}\n      isRequired={isRequired}\n      labelIcon={\n        <HelpItem helpText={helpText!} fieldLabelId={`clients:${label}`} />\n      }\n      fieldId={name!}\n      validated={errors[name!] ? \"error\" : \"default\"}\n      helperTextInvalid={t(\"common:required\")}\n    >\n      <Controller\n        name={name!}\n        defaultValue={defaultValue}\n        control={control}\n        rules={\n          isRequired && variant === SelectVariant.typeaheadMulti\n            ? { validate: (value) => value.length > 0 }\n            : isRequired\n            ? { required: true }\n            : {}\n        }\n        render={({ field }) => (\n          <Select\n            toggleId={name!}\n            variant={variant}\n            placeholderText={t(\"selectAUser\")}\n            onToggle={toggleOpen}\n            isOpen={open}\n            selections={field.value}\n            onFilter={(_, value) => {\n              debounceFn(value);\n              return convert(users);\n            }}\n            onSelect={(_, v) => {\n              const option = v.toString();\n              if (variant !== SelectVariant.typeaheadMulti) {\n                field.onChange([option]);\n              } else if (field.value.includes(option)) {\n                field.onChange(\n                  field.value.filter((item: string) => item !== option)\n                );\n              } else {\n                field.onChange([...field.value, option]);\n              }\n              toggleOpen();\n            }}\n            aria-label={t(name!)}\n          >\n            {convert(users)}\n          </Select>\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import { FormGroup, Radio } from \"@patternfly/react-core\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\n\nconst DECISION_STRATEGY = [\"UNANIMOUS\", \"AFFIRMATIVE\", \"CONSENSUS\"] as const;\n\ntype DecisionStrategySelectProps = {\n  helpLabel?: string;\n  isLimited?: boolean;\n};\n\nexport const DecisionStrategySelect = ({\n  helpLabel,\n  isLimited = false,\n}: DecisionStrategySelectProps) => {\n  const { t } = useTranslation(\"clients\");\n  const { control } = useFormContext();\n\n  return (\n    <FormGroup\n      label={t(\"decisionStrategy\")}\n      labelIcon={\n        <HelpItem\n          helpText={`clients-help:${helpLabel || \"decisionStrategy\"}`}\n          fieldLabelId=\"clients:decisionStrategy\"\n        />\n      }\n      fieldId=\"decisionStrategy\"\n      hasNoPaddingTop\n    >\n      <Controller\n        name=\"decisionStrategy\"\n        data-testid=\"decisionStrategy\"\n        defaultValue={DECISION_STRATEGY[0]}\n        control={control}\n        render={({ field }) => (\n          <>\n            {(isLimited\n              ? DECISION_STRATEGY.slice(0, 2)\n              : DECISION_STRATEGY\n            ).map((strategy) => (\n              <Radio\n                id={strategy}\n                key={strategy}\n                data-testid={strategy}\n                isChecked={field.value === strategy}\n                name=\"decisionStrategy\"\n                onChange={() => field.onChange(strategy)}\n                label={t(`decisionStrategies.${strategy}`)}\n                className=\"pf-u-mb-md\"\n              />\n            ))}\n          </>\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import { FormGroup } from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"../../../components/help-enabler/HelpItem\";\nimport { useParams } from \"../../../utils/useParams\";\nimport type { PolicyDetailsParams } from \"../../routes/PolicyDetails\";\nimport { DecisionStrategySelect } from \"../DecisionStrategySelect\";\nimport { ResourcesPolicySelect } from \"../ResourcesPolicySelect\";\n\nexport const Aggregate = () => {\n  const { t } = useTranslation(\"clients\");\n  const { id } = useParams<PolicyDetailsParams>();\n\n  return (\n    <>\n      <FormGroup\n        label={t(\"applyPolicy\")}\n        fieldId=\"policies\"\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:applyPolicy\"\n            fieldLabelId=\"clients:policies\"\n          />\n        }\n      >\n        <ResourcesPolicySelect name=\"policies\" clientId={id} />\n      </FormGroup>\n      <DecisionStrategySelect helpLabel=\"policyDecisionStagey\" />\n    </>\n  );\n};\n","import { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport {\n  SelectOption,\n  FormGroup,\n  Select,\n  SelectVariant,\n} from \"@patternfly/react-core\";\n\nimport type { ClientQuery } from \"@keycloak/keycloak-admin-client/lib/resources/clients\";\nimport type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport { HelpItem } from \"../../../components/help-enabler/HelpItem\";\nimport { useAdminClient, useFetch } from \"../../../context/auth/AdminClient\";\nimport { useTranslation } from \"react-i18next\";\n\nexport const Client = () => {\n  const { t } = useTranslation(\"clients\");\n  const {\n    control,\n    getValues,\n    formState: { errors },\n  } = useFormContext();\n  const values: string[] | undefined = getValues(\"clients\");\n\n  const [open, setOpen] = useState(false);\n  const [clients, setClients] = useState<ClientRepresentation[]>([]);\n  const [search, setSearch] = useState(\"\");\n\n  const { adminClient } = useAdminClient();\n\n  useFetch(\n    async () => {\n      const params: ClientQuery = {\n        max: 20,\n      };\n      if (search) {\n        params.clientId = search;\n        params.search = true;\n      }\n\n      if (values?.length && !search) {\n        return await Promise.all(\n          values.map(\n            (id: string) =>\n              adminClient.clients.findOne({ id }) as ClientRepresentation\n          )\n        );\n      }\n      return await adminClient.clients.find(params);\n    },\n    setClients,\n    [search]\n  );\n\n  const convert = (clients: ClientRepresentation[]) =>\n    clients.map((option) => (\n      <SelectOption\n        key={option.id!}\n        value={option.id}\n        selected={values?.includes(option.id!)}\n      >\n        {option.clientId}\n      </SelectOption>\n    ));\n\n  return (\n    <FormGroup\n      label={t(\"clients\")}\n      labelIcon={\n        <HelpItem\n          helpText=\"clients-help:policyClient\"\n          fieldLabelId=\"clients:client\"\n        />\n      }\n      fieldId=\"clients\"\n      helperTextInvalid={t(\"requiredClient\")}\n      validated={errors.clients ? \"error\" : \"default\"}\n      isRequired\n    >\n      <Controller\n        name=\"clients\"\n        defaultValue={[]}\n        control={control}\n        rules={{\n          validate: (value) => value.length > 0,\n        }}\n        render={({ field }) => (\n          <Select\n            toggleId=\"clients\"\n            variant={SelectVariant.typeaheadMulti}\n            onToggle={(open) => setOpen(open)}\n            isOpen={open}\n            selections={field.value}\n            onFilter={(_, value) => {\n              setSearch(value);\n              return convert(clients);\n            }}\n            onSelect={(_, v) => {\n              const option = v.toString();\n              if (field.value.includes(option)) {\n                field.onChange(\n                  field.value.filter((item: string) => item !== option)\n                );\n              } else {\n                field.onChange([...field.value, option]);\n              }\n              setOpen(false);\n            }}\n            aria-label={t(\"clients\")}\n          >\n            {convert(clients)}\n          </Select>\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import { useMemo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Button,\n  ButtonVariant,\n  Dropdown,\n  DropdownToggle,\n  Modal,\n  ModalVariant,\n  DropdownDirection,\n  DropdownItem,\n  Select,\n  SelectOption,\n  SelectVariant,\n  SelectDirection,\n} from \"@patternfly/react-core\";\nimport {\n  CaretDownIcon,\n  CaretUpIcon,\n  FilterIcon,\n} from \"@patternfly/react-icons\";\nimport type ClientScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientScopeRepresentation\";\n\nimport {\n  ClientScopeType,\n  clientScopeTypesDropdown,\n} from \"../../components/client-scope/ClientScopeTypes\";\nimport { KeycloakDataTable } from \"../../components/table-toolbar/KeycloakDataTable\";\nimport { ListEmptyState } from \"../../components/list-empty-state/ListEmptyState\";\nimport { getProtocolName } from \"../utils\";\nimport useToggle from \"../../utils/useToggle\";\n\nimport \"./client-scopes.css\";\n\nexport type AddScopeDialogProps = {\n  clientScopes: ClientScopeRepresentation[];\n  clientName?: string;\n  open: boolean;\n  toggleDialog: () => void;\n  onAdd: (\n    scopes: { scope: ClientScopeRepresentation; type?: ClientScopeType }[]\n  ) => void;\n  isClientScopesConditionType?: boolean;\n};\n\nenum FilterType {\n  Name = \"Name\",\n  Protocol = \"Protocol\",\n}\n\nenum ProtocolType {\n  All = \"All\",\n  SAML = \"SAML\",\n  OpenIDConnect = \"OpenID Connect\",\n}\n\nexport const AddScopeDialog = ({\n  clientScopes: scopes,\n  clientName,\n  open,\n  toggleDialog,\n  onAdd,\n  isClientScopesConditionType,\n}: AddScopeDialogProps) => {\n  const { t } = useTranslation(\"clients\");\n  const [addToggle, setAddToggle] = useState(false);\n  const [rows, setRows] = useState<ClientScopeRepresentation[]>([]);\n  const [filterType, setFilterType] = useState(FilterType.Name);\n  const [protocolType, setProtocolType] = useState(ProtocolType.All);\n\n  const [isFilterTypeDropdownOpen, toggleIsFilterTypeDropdownOpen] =\n    useToggle();\n\n  const [isProtocolTypeDropdownOpen, toggleIsProtocolTypeDropdownOpen] =\n    useToggle(false);\n\n  const clientScopes = useMemo(() => {\n    if (protocolType === ProtocolType.OpenIDConnect) {\n      return scopes.filter((item) => item.protocol === \"openid-connect\");\n    } else if (protocolType === ProtocolType.SAML) {\n      return scopes.filter((item) => item.protocol === \"saml\");\n    }\n    return scopes;\n  }, [scopes, filterType, protocolType]);\n\n  const action = (scope: ClientScopeType) => {\n    const scopes = rows.map((row) => {\n      return { scope: row, type: scope };\n    });\n    onAdd(scopes);\n    setAddToggle(false);\n    toggleDialog();\n  };\n\n  const onFilterTypeDropdownSelect = (filterType: string) => {\n    if (filterType === FilterType.Name) {\n      setFilterType(FilterType.Protocol);\n    } else if (filterType === FilterType.Protocol) {\n      setFilterType(FilterType.Name);\n      setProtocolType(ProtocolType.All);\n    }\n\n    toggleIsFilterTypeDropdownOpen();\n  };\n\n  const onProtocolTypeDropdownSelect = (protocolType: string) => {\n    if (protocolType === ProtocolType.SAML) {\n      setProtocolType(ProtocolType.SAML);\n    } else if (protocolType === ProtocolType.OpenIDConnect) {\n      setProtocolType(ProtocolType.OpenIDConnect);\n    } else if (protocolType === ProtocolType.All) {\n      setProtocolType(ProtocolType.All);\n    }\n\n    toggleIsProtocolTypeDropdownOpen();\n  };\n\n  const protocolTypeOptions = [\n    <SelectOption key={1} value={ProtocolType.SAML}>\n      {t(\"protocolTypes.saml\")}\n    </SelectOption>,\n    <SelectOption key={2} value={ProtocolType.OpenIDConnect}>\n      {t(\"protocolTypes.openIdConnect\")}\n    </SelectOption>,\n    <SelectOption key={3} value={ProtocolType.All} isPlaceholder>\n      {t(\"protocolTypes.all\")}\n    </SelectOption>,\n  ];\n\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      title={\n        isClientScopesConditionType\n          ? t(\"addClientScope\")\n          : t(\"addClientScopesTo\", { clientName })\n      }\n      isOpen={open}\n      onClose={toggleDialog}\n      actions={\n        isClientScopesConditionType\n          ? [\n              <Button\n                id=\"modal-add\"\n                data-testid=\"confirm\"\n                key=\"add\"\n                variant={ButtonVariant.primary}\n                onClick={() => {\n                  const scopes = rows.map((scope) => ({ scope }));\n                  onAdd(scopes);\n                  toggleDialog();\n                }}\n                isDisabled={rows.length === 0}\n              >\n                {t(\"common:add\")}\n              </Button>,\n              <Button\n                id=\"modal-cancel\"\n                data-testid=\"cancel\"\n                key=\"cancel\"\n                variant={ButtonVariant.link}\n                onClick={() => {\n                  setRows([]);\n                  toggleDialog();\n                }}\n              >\n                {t(\"common:cancel\")}\n              </Button>,\n            ]\n          : [\n              <Dropdown\n                className=\"keycloak__client-scopes-add__add-dropdown\"\n                id=\"add-dropdown\"\n                key=\"add-dropdown\"\n                direction={DropdownDirection.up}\n                isOpen={addToggle}\n                toggle={\n                  <DropdownToggle\n                    isDisabled={rows.length === 0}\n                    onToggle={() => setAddToggle(!addToggle)}\n                    isPrimary\n                    toggleIndicator={CaretUpIcon}\n                    id=\"add-scope-toggle\"\n                  >\n                    {t(\"common:add\")}\n                  </DropdownToggle>\n                }\n                dropdownItems={clientScopeTypesDropdown(t, action)}\n              />,\n              <Button\n                id=\"modal-cancel\"\n                key=\"cancel\"\n                variant={ButtonVariant.link}\n                onClick={() => {\n                  setRows([]);\n                  toggleDialog();\n                }}\n              >\n                {t(\"common:cancel\")}\n              </Button>,\n            ]\n      }\n    >\n      <KeycloakDataTable\n        loader={clientScopes}\n        ariaLabelKey=\"client-scopes:chooseAMapperType\"\n        searchPlaceholderKey={\n          filterType === FilterType.Name ? \"client-scopes:searchFor\" : undefined\n        }\n        isSearching={filterType !== FilterType.Name}\n        searchTypeComponent={\n          <Dropdown\n            onSelect={() => {\n              onFilterTypeDropdownSelect(filterType);\n            }}\n            data-testid=\"filter-type-dropdown\"\n            toggle={\n              <DropdownToggle\n                id=\"toggle-id-9\"\n                onToggle={toggleIsFilterTypeDropdownOpen}\n                toggleIndicator={CaretDownIcon}\n                icon={<FilterIcon />}\n              >\n                {filterType}\n              </DropdownToggle>\n            }\n            isOpen={isFilterTypeDropdownOpen}\n            dropdownItems={[\n              <DropdownItem\n                data-testid=\"filter-type-dropdown-item\"\n                key=\"filter-type\"\n              >\n                {filterType === FilterType.Name\n                  ? t(\"protocol\")\n                  : t(\"common:name\")}\n              </DropdownItem>,\n            ]}\n          />\n        }\n        toolbarItem={\n          filterType === FilterType.Protocol && (\n            <>\n              <Dropdown\n                onSelect={() => {\n                  onFilterTypeDropdownSelect(filterType);\n                }}\n                data-testid=\"filter-type-dropdown\"\n                toggle={\n                  <DropdownToggle\n                    id=\"toggle-id-9\"\n                    onToggle={toggleIsFilterTypeDropdownOpen}\n                    toggleIndicator={CaretDownIcon}\n                    icon={<FilterIcon />}\n                  >\n                    {filterType}\n                  </DropdownToggle>\n                }\n                isOpen={isFilterTypeDropdownOpen}\n                dropdownItems={[\n                  <DropdownItem\n                    data-testid=\"filter-type-dropdown-item\"\n                    key=\"filter-type\"\n                  >\n                    {t(\"common:name\")}\n                  </DropdownItem>,\n                ]}\n              />\n              <Select\n                variant={SelectVariant.single}\n                className=\"kc-protocolType-select\"\n                aria-label=\"Select Input\"\n                onToggle={toggleIsProtocolTypeDropdownOpen}\n                onSelect={(_, value) =>\n                  onProtocolTypeDropdownSelect(value.toString())\n                }\n                selections={protocolType}\n                isOpen={isProtocolTypeDropdownOpen}\n                direction={SelectDirection.down}\n              >\n                {protocolTypeOptions}\n              </Select>\n            </>\n          )\n        }\n        canSelectAll\n        onSelect={(rows) => setRows(rows)}\n        columns={[\n          {\n            name: \"name\",\n          },\n          {\n            name: \"protocol\",\n            displayKey: \"clients:protocol\",\n            cellRenderer: (client) =>\n              getProtocolName(t, client.protocol ?? \"openid-connect\"),\n          },\n          {\n            name: \"description\",\n          },\n        ]}\n        emptyState={\n          <ListEmptyState\n            message={t(\"emptyAddClientScopes\")}\n            instructions={t(\"emptyAddClientScopesInstructions\")}\n          />\n        }\n      />\n    </Modal>\n  );\n};\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useFormContext, Controller } from \"react-hook-form\";\nimport { FormGroup, Button, Checkbox } from \"@patternfly/react-core\";\nimport { MinusCircleIcon } from \"@patternfly/react-icons\";\nimport {\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\n\nimport type ClientScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientScopeRepresentation\";\nimport { useAdminClient, useFetch } from \"../../../context/auth/AdminClient\";\nimport { HelpItem } from \"../../../components/help-enabler/HelpItem\";\nimport { AddScopeDialog } from \"../../scopes/AddScopeDialog\";\nimport useLocaleSort, { mapByKey } from \"../../../utils/useLocaleSort\";\n\nexport type RequiredIdValue = {\n  id: string;\n  required: boolean;\n};\n\nexport const ClientScope = () => {\n  const { t } = useTranslation(\"clients\");\n  const {\n    control,\n    getValues,\n    setValue,\n    formState: { errors },\n  } = useFormContext<{\n    clientScopes: RequiredIdValue[];\n  }>();\n\n  const [open, setOpen] = useState(false);\n  const [scopes, setScopes] = useState<ClientScopeRepresentation[]>([]);\n  const [selectedScopes, setSelectedScopes] = useState<\n    ClientScopeRepresentation[]\n  >([]);\n\n  const { adminClient } = useAdminClient();\n  const localeSort = useLocaleSort();\n\n  useFetch(\n    () => adminClient.clientScopes.find(),\n    (scopes) => {\n      setSelectedScopes(\n        getValues(\"clientScopes\").map((s) => scopes.find((c) => c.id === s.id)!)\n      );\n      setScopes(localeSort(scopes, mapByKey(\"name\")));\n    },\n    []\n  );\n\n  return (\n    <FormGroup\n      label={t(\"clientScopes\")}\n      labelIcon={\n        <HelpItem\n          helpText=\"clients-help:clientScopes\"\n          fieldLabelId=\"clients:clientScopes\"\n        />\n      }\n      fieldId=\"clientScopes\"\n      helperTextInvalid={t(\"requiredClientScope\")}\n      validated={errors.clientScopes ? \"error\" : \"default\"}\n      isRequired\n    >\n      <Controller\n        name=\"clientScopes\"\n        control={control}\n        defaultValue={[]}\n        rules={{\n          validate: (value: RequiredIdValue[]) =>\n            value.filter((c) => c.id).length > 0,\n        }}\n        render={({ field }) => (\n          <>\n            {open && (\n              <AddScopeDialog\n                clientScopes={scopes.filter(\n                  (scope) =>\n                    !field.value\n                      .map((c: RequiredIdValue) => c.id)\n                      .includes(scope.id!)\n                )}\n                isClientScopesConditionType\n                open={open}\n                toggleDialog={() => setOpen(!open)}\n                onAdd={(scopes) => {\n                  setSelectedScopes([\n                    ...selectedScopes,\n                    ...scopes.map((s) => s.scope),\n                  ]);\n                  field.onChange([\n                    ...field.value,\n                    ...scopes\n                      .map((scope) => scope.scope)\n                      .map((item) => ({ id: item.id!, required: false })),\n                  ]);\n                }}\n              />\n            )}\n            <Button\n              data-testid=\"select-scope-button\"\n              variant=\"secondary\"\n              onClick={() => {\n                setOpen(true);\n              }}\n            >\n              {t(\"addClientScopes\")}\n            </Button>\n          </>\n        )}\n      />\n      {selectedScopes.length > 0 && (\n        <TableComposable variant=\"compact\">\n          <Thead>\n            <Tr>\n              <Th>{t(\"clientScope\")}</Th>\n              <Th>{t(\"required\")}</Th>\n              <Th />\n            </Tr>\n          </Thead>\n          <Tbody>\n            {selectedScopes.map((scope, index) => (\n              <Tr key={scope.id}>\n                <Td>{scope.name}</Td>\n                <Td>\n                  <Controller\n                    name={`clientScopes.${index}.required`}\n                    defaultValue={false}\n                    control={control}\n                    render={({ field }) => (\n                      <Checkbox\n                        id=\"required\"\n                        data-testid=\"standard\"\n                        name=\"required\"\n                        isChecked={field.value}\n                        onChange={field.onChange}\n                      />\n                    )}\n                  />\n                </Td>\n                <Td>\n                  <Button\n                    variant=\"link\"\n                    className=\"keycloak__client-authorization__policy-row-remove\"\n                    icon={<MinusCircleIcon />}\n                    onClick={() => {\n                      setValue(\"clientScopes\", [\n                        ...getValues(\"clientScopes\").filter(\n                          (s) => s.id !== scope.id\n                        ),\n                      ]);\n                      setSelectedScopes([\n                        ...selectedScopes.filter((s) => s.id !== scope.id),\n                      ]);\n                    }}\n                  />\n                </Td>\n              </Tr>\n            ))}\n          </Tbody>\n        </TableComposable>\n      )}\n    </FormGroup>\n  );\n};\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useFormContext, Controller } from \"react-hook-form\";\nimport { MinusCircleIcon } from \"@patternfly/react-icons\";\nimport { FormGroup, Button, Checkbox } from \"@patternfly/react-core\";\nimport {\n  TableComposable,\n  Thead,\n  Tr,\n  Th,\n  Tbody,\n  Td,\n} from \"@patternfly/react-table\";\n\nimport type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport { HelpItem } from \"../../../components/help-enabler/HelpItem\";\nimport { useAdminClient, useFetch } from \"../../../context/auth/AdminClient\";\nimport { GroupPickerDialog } from \"../../../components/group/GroupPickerDialog\";\nimport { KeycloakTextInput } from \"../../../components/keycloak-text-input/KeycloakTextInput\";\n\ntype GroupForm = {\n  groups?: GroupValue[];\n  groupsClaim: string;\n};\n\nexport type GroupValue = {\n  id: string;\n  extendChildren: boolean;\n};\n\nexport const Group = () => {\n  const { t } = useTranslation(\"clients\");\n  const {\n    control,\n    register,\n    getValues,\n    setValue,\n    formState: { errors },\n  } = useFormContext<GroupForm>();\n  const values = getValues(\"groups\");\n\n  const [open, setOpen] = useState(false);\n  const [selectedGroups, setSelectedGroups] = useState<GroupRepresentation[]>(\n    []\n  );\n\n  const { adminClient } = useAdminClient();\n\n  useFetch(\n    () => {\n      if (values && values.length > 0)\n        return Promise.all(\n          values.map((g) => adminClient.groups.findOne({ id: g.id }))\n        );\n      return Promise.resolve([]);\n    },\n    (groups) => {\n      const filteredGroup = groups.filter((g) => g) as GroupRepresentation[];\n      setSelectedGroups(filteredGroup);\n    },\n    []\n  );\n\n  return (\n    <>\n      <FormGroup\n        label={t(\"groupsClaim\")}\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:groupsClaim\"\n            fieldLabelId=\"clients:groupsClaim\"\n          />\n        }\n        fieldId=\"groups\"\n      >\n        <KeycloakTextInput\n          type=\"text\"\n          id=\"groupsClaim\"\n          data-testid=\"groupsClaim\"\n          {...register(\"groupsClaim\")}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"groups\")}\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:policyGroups\"\n            fieldLabelId=\"clients:groups\"\n          />\n        }\n        fieldId=\"groups\"\n        helperTextInvalid={t(\"requiredGroups\")}\n        validated={errors.groups ? \"error\" : \"default\"}\n        isRequired\n      >\n        <Controller\n          name=\"groups\"\n          control={control}\n          defaultValue={[]}\n          rules={{\n            validate: (value?: GroupValue[]) =>\n              value && value.filter(({ id }) => id).length > 0,\n          }}\n          render={({ field }) => (\n            <>\n              {open && (\n                <GroupPickerDialog\n                  type=\"selectMany\"\n                  text={{\n                    title: \"clients:addGroupsToGroupPolicy\",\n                    ok: \"common:add\",\n                  }}\n                  onConfirm={(groups) => {\n                    field.onChange([\n                      ...(field.value || []),\n                      ...(groups || []).map(({ id }) => ({ id })),\n                    ]);\n                    setSelectedGroups([...selectedGroups, ...(groups || [])]);\n                    setOpen(false);\n                  }}\n                  onClose={() => {\n                    setOpen(false);\n                  }}\n                  filterGroups={selectedGroups}\n                />\n              )}\n              <Button\n                data-testid=\"select-group-button\"\n                variant=\"secondary\"\n                onClick={() => {\n                  setOpen(true);\n                }}\n              >\n                {t(\"addGroups\")}\n              </Button>\n            </>\n          )}\n        />\n        {selectedGroups.length > 0 && (\n          <TableComposable variant=\"compact\">\n            <Thead>\n              <Tr>\n                <Th>{t(\"groups\")}</Th>\n                <Th>{t(\"extendToChildren\")}</Th>\n                <Th />\n              </Tr>\n            </Thead>\n            <Tbody>\n              {selectedGroups.map((group, index) => (\n                <Tr key={group.id}>\n                  <Td>{group.path}</Td>\n                  <Td>\n                    <Controller\n                      name={`groups.${index}.extendChildren`}\n                      defaultValue={false}\n                      control={control}\n                      render={({ field }) => (\n                        <Checkbox\n                          id=\"extendChildren\"\n                          data-testid=\"standard\"\n                          name=\"extendChildren\"\n                          isChecked={field.value}\n                          onChange={field.onChange}\n                          isDisabled={group.subGroups?.length === 0}\n                        />\n                      )}\n                    />\n                  </Td>\n                  <Td>\n                    <Button\n                      variant=\"link\"\n                      className=\"keycloak__client-authorization__policy-row-remove\"\n                      icon={<MinusCircleIcon />}\n                      onClick={() => {\n                        setValue(\"groups\", [\n                          ...(values || []).filter(({ id }) => id !== group.id),\n                        ]);\n                        setSelectedGroups([\n                          ...selectedGroups.filter(({ id }) => id !== group.id),\n                        ]);\n                      }}\n                    />\n                  </Td>\n                </Tr>\n              ))}\n            </Tbody>\n          </TableComposable>\n        )}\n      </FormGroup>\n    </>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { FormGroup } from \"@patternfly/react-core\";\nimport { CodeEditor, Language } from \"@patternfly/react-code-editor\";\n\nimport { HelpItem } from \"../../../components/help-enabler/HelpItem\";\n\nexport const JavaScript = () => {\n  const { t } = useTranslation(\"clients\");\n  const { control } = useFormContext();\n\n  return (\n    <FormGroup\n      label={t(\"code\")}\n      labelIcon={\n        <HelpItem\n          helpText=\"clients-help:policyCode\"\n          fieldLabelId=\"clients:code\"\n        />\n      }\n      fieldId=\"code\"\n      isRequired\n    >\n      <Controller\n        name=\"code\"\n        defaultValue=\"\"\n        control={control}\n        render={({ field }) => (\n          <CodeEditor\n            id=\"code\"\n            data-testid=\"code\"\n            onChange={field.onChange}\n            code={field.value}\n            height=\"600px\"\n            language={Language.javascript}\n          />\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { FormGroup, Radio } from \"@patternfly/react-core\";\n\nimport { HelpItem } from \"../../../components/help-enabler/HelpItem\";\n\nconst LOGIC_TYPES = [\"POSITIVE\", \"NEGATIVE\"] as const;\n\nexport const LogicSelector = () => {\n  const { t } = useTranslation(\"clients\");\n  const { control } = useFormContext();\n\n  return (\n    <FormGroup\n      label={t(\"logic\")}\n      labelIcon={\n        <HelpItem helpText=\"clients-help:logic\" fieldLabelId=\"clients:logic\" />\n      }\n      fieldId=\"logic\"\n      hasNoPaddingTop\n    >\n      <Controller\n        name=\"logic\"\n        data-testid=\"logic\"\n        defaultValue={LOGIC_TYPES[0]}\n        control={control}\n        render={({ field }) => (\n          <>\n            {LOGIC_TYPES.map((type) => (\n              <Radio\n                id={type}\n                key={type}\n                data-testid={type}\n                isChecked={field.value === type}\n                name=\"logic\"\n                onChange={() => field.onChange(type)}\n                label={t(`logicType.${type.toLowerCase()}`)}\n                className=\"pf-u-mb-md\"\n              />\n            ))}\n          </>\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { useFormContext } from \"react-hook-form\";\nimport { FormGroup, ValidatedOptions } from \"@patternfly/react-core\";\n\nimport { HelpItem } from \"../../../components/help-enabler/HelpItem\";\nimport { KeycloakTextInput } from \"../../../components/keycloak-text-input/KeycloakTextInput\";\nimport { KeycloakTextArea } from \"../../../components/keycloak-text-area/KeycloakTextArea\";\n\ntype NameDescriptionProps = {\n  prefix: string;\n};\n\nexport const NameDescription = ({ prefix }: NameDescriptionProps) => {\n  const { t } = useTranslation(\"clients\");\n  const {\n    register,\n    formState: { errors },\n  } = useFormContext();\n\n  return (\n    <>\n      <FormGroup\n        label={t(\"common:name\")}\n        fieldId=\"kc-name\"\n        helperTextInvalid={t(\"common:required\")}\n        validated={\n          errors.name ? ValidatedOptions.error : ValidatedOptions.default\n        }\n        isRequired\n        labelIcon={\n          <HelpItem\n            helpText={`clients-help:${prefix}-name`}\n            fieldLabelId=\"name\"\n          />\n        }\n      >\n        <KeycloakTextInput\n          id=\"kc-name\"\n          data-testid=\"name\"\n          validated={\n            errors.name ? ValidatedOptions.error : ValidatedOptions.default\n          }\n          {...register(\"name\", { required: true })}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"common:description\")}\n        fieldId=\"kc-description\"\n        labelIcon={\n          <HelpItem\n            helpText={`clients-help:${prefix}-description`}\n            fieldLabelId=\"description\"\n          />\n        }\n        validated={\n          errors.description ? ValidatedOptions.error : ValidatedOptions.default\n        }\n        helperTextInvalid={errors.description?.message}\n      >\n        <KeycloakTextArea\n          id=\"kc-description\"\n          data-testid=\"description\"\n          validated={\n            errors.description\n              ? ValidatedOptions.error\n              : ValidatedOptions.default\n          }\n          {...register(\"description\", {\n            maxLength: {\n              value: 255,\n              message: t(\"common:maxLength\", { length: 255 }),\n            },\n          })}\n        />\n      </FormGroup>\n    </>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { useFormContext } from \"react-hook-form\";\nimport { FormGroup } from \"@patternfly/react-core\";\n\nimport { HelpItem } from \"../../../components/help-enabler/HelpItem\";\nimport { KeycloakTextInput } from \"../../../components/keycloak-text-input/KeycloakTextInput\";\n\nexport const Regex = () => {\n  const { t } = useTranslation(\"clients\");\n  const {\n    register,\n    formState: { errors },\n  } = useFormContext();\n\n  return (\n    <>\n      <FormGroup\n        label={t(\"targetClaim\")}\n        fieldId=\"targetClaim\"\n        helperTextInvalid={t(\"common:required\")}\n        validated={errors.targetClaim ? \"error\" : \"default\"}\n        isRequired\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:targetClaim\"\n            fieldLabelId=\"clients:targetClaim\"\n          />\n        }\n      >\n        <KeycloakTextInput\n          id=\"targetClaim\"\n          data-testid=\"targetClaim\"\n          validated={errors.targetClaim ? \"error\" : \"default\"}\n          {...register(\"targetClaim\", { required: true })}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"regexPattern\")}\n        fieldId=\"pattern\"\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:regexPattern\"\n            fieldLabelId=\"clients:regexPattern\"\n          />\n        }\n        isRequired\n        validated={errors.pattern ? \"error\" : \"default\"}\n        helperTextInvalid={t(\"common:required\")}\n      >\n        <KeycloakTextInput\n          id=\"pattern\"\n          data-testid=\"regexPattern\"\n          validated={errors.pattern ? \"error\" : \"default\"}\n          {...register(\"pattern\", { required: true })}\n        />\n      </FormGroup>\n    </>\n  );\n};\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useFormContext, Controller } from \"react-hook-form\";\nimport { FormGroup, Button, Checkbox } from \"@patternfly/react-core\";\nimport { MinusCircleIcon } from \"@patternfly/react-icons\";\nimport {\n  TableComposable,\n  Thead,\n  Tr,\n  Th,\n  Tbody,\n  Td,\n} from \"@patternfly/react-table\";\n\nimport { Row, ServiceRole } from \"../../../components/role-mapping/RoleMapping\";\nimport type { RequiredIdValue } from \"./ClientScope\";\nimport { HelpItem } from \"../../../components/help-enabler/HelpItem\";\nimport { useAdminClient, useFetch } from \"../../../context/auth/AdminClient\";\nimport { AddRoleMappingModal } from \"../../../components/role-mapping/AddRoleMappingModal\";\n\nexport const Role = () => {\n  const { t } = useTranslation(\"clients\");\n  const {\n    control,\n    getValues,\n    setValue,\n    formState: { errors },\n  } = useFormContext<{\n    roles?: RequiredIdValue[];\n  }>();\n  const values = getValues(\"roles\");\n\n  const [open, setOpen] = useState(false);\n  const [selectedRoles, setSelectedRoles] = useState<Row[]>([]);\n\n  const { adminClient } = useAdminClient();\n\n  useFetch(\n    async () => {\n      if (values && values.length > 0) {\n        const roles = await Promise.all(\n          values.map((r) => adminClient.roles.findOneById({ id: r.id }))\n        );\n        return Promise.all(\n          roles.map(async (role) => ({\n            role: role!,\n            client: role!.clientRole\n              ? await adminClient.clients.findOne({\n                  id: role?.containerId!,\n                })\n              : undefined,\n          }))\n        );\n      }\n      return Promise.resolve([]);\n    },\n    setSelectedRoles,\n    []\n  );\n\n  return (\n    <FormGroup\n      label={t(\"roles\")}\n      labelIcon={\n        <HelpItem\n          helpText=\"clients-help:policyRoles\"\n          fieldLabelId=\"clients:roles\"\n        />\n      }\n      fieldId=\"roles\"\n      helperTextInvalid={t(\"requiredRoles\")}\n      validated={errors.roles ? \"error\" : \"default\"}\n      isRequired\n    >\n      <Controller\n        name=\"roles\"\n        control={control}\n        defaultValue={[]}\n        rules={{\n          validate: (value?: RequiredIdValue[]) =>\n            value && value.filter((c) => c.id).length > 0,\n        }}\n        render={({ field }) => (\n          <>\n            {open && (\n              <AddRoleMappingModal\n                id=\"role\"\n                type=\"roles\"\n                onAssign={(rows) => {\n                  field.onChange([\n                    ...(field.value || []),\n                    ...rows.map((row) => ({ id: row.role.id })),\n                  ]);\n                  setSelectedRoles([...selectedRoles, ...rows]);\n                  setOpen(false);\n                }}\n                onClose={() => {\n                  setOpen(false);\n                }}\n                isLDAPmapper\n              />\n            )}\n            <Button\n              data-testid=\"select-role-button\"\n              variant=\"secondary\"\n              onClick={() => {\n                setOpen(true);\n              }}\n            >\n              {t(\"addRoles\")}\n            </Button>\n          </>\n        )}\n      />\n      {selectedRoles.length > 0 && (\n        <TableComposable variant=\"compact\">\n          <Thead>\n            <Tr>\n              <Th>{t(\"roles\")}</Th>\n              <Th>{t(\"required\")}</Th>\n              <Th />\n            </Tr>\n          </Thead>\n          <Tbody>\n            {selectedRoles.map((row, index) => (\n              <Tr key={row.role.id}>\n                <Td>\n                  <ServiceRole role={row.role} client={row.client} />\n                </Td>\n                <Td>\n                  <Controller\n                    name={`roles.${index}.required`}\n                    defaultValue={false}\n                    control={control}\n                    render={({ field }) => (\n                      <Checkbox\n                        id=\"required\"\n                        data-testid=\"standard\"\n                        name=\"required\"\n                        isChecked={field.value}\n                        onChange={field.onChange}\n                      />\n                    )}\n                  />\n                </Td>\n                <Td>\n                  <Button\n                    variant=\"link\"\n                    className=\"keycloak__client-authorization__policy-row-remove\"\n                    icon={<MinusCircleIcon />}\n                    onClick={() => {\n                      setValue(\"roles\", [\n                        ...(values || []).filter((s) => s.id !== row.role.id),\n                      ]);\n                      setSelectedRoles([\n                        ...selectedRoles.filter(\n                          (s) => s.role.id !== row.role.id\n                        ),\n                      ]);\n                    }}\n                  />\n                </Td>\n              </Tr>\n            ))}\n          </Tbody>\n        </TableComposable>\n      )}\n    </FormGroup>\n  );\n};\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport {\n  DatePicker,\n  Flex,\n  FlexItem,\n  FormGroup,\n  NumberInput,\n  Radio,\n  Split,\n  SplitItem,\n  TimePicker,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\n\nimport { HelpItem } from \"../../../components/help-enabler/HelpItem\";\n\nconst DATE_TIME_FORMAT = /(\\d\\d\\d\\d-\\d\\d-\\d\\d)? (\\d\\d?):(\\d\\d?)/;\nconst padDateSegment = (value: number) => value.toString().padStart(2, \"0\");\n\nconst DateTime = ({ name }: { name: string }) => {\n  const { control } = useFormContext();\n\n  const parseDate = (value: string, date?: Date): string => {\n    if (!date) {\n      return value;\n    }\n\n    const parts = value.match(DATE_TIME_FORMAT);\n    const parsedDate = [\n      date.getFullYear(),\n      padDateSegment(date.getMonth() + 1),\n      padDateSegment(date.getDate()),\n    ].join(\"-\");\n\n    return `${parsedDate} ${parts ? parts[2] : \"00\"}:${\n      parts ? parts[3] : \"00\"\n    }:00`;\n  };\n\n  const parseTime = (\n    value: string,\n    hour?: number | null,\n    minute?: number | null\n  ): string => {\n    const parts = value.match(DATE_TIME_FORMAT);\n    if (minute !== undefined && minute !== null) {\n      return `${parts ? parts[1] : \"\"} ${hour}:${\n        minute < 10 ? `0${minute}` : minute\n      }:00`;\n    }\n    return value;\n  };\n\n  return (\n    <Controller\n      name={name}\n      defaultValue=\"\"\n      control={control}\n      rules={{ required: true }}\n      render={({ field }) => {\n        const dateTime = field.value.match(DATE_TIME_FORMAT) || [\n          \"\",\n          \"\",\n          \"0\",\n          \"00\",\n        ];\n        return (\n          <Split hasGutter id={name}>\n            <SplitItem>\n              <DatePicker\n                value={dateTime[1]}\n                onChange={(event, value, date) => {\n                  field.onChange(parseDate(field.value, date));\n                }}\n              />\n            </SplitItem>\n            <SplitItem>\n              <TimePicker\n                time={`${dateTime[2]}:${dateTime[3]}`}\n                onChange={(event, time, hour, minute) =>\n                  field.onChange(parseTime(field.value, hour, minute))\n                }\n                is24Hour\n              />\n            </SplitItem>\n          </Split>\n        );\n      }}\n    />\n  );\n};\n\ntype NumberControlProps = {\n  name: string;\n  min: number;\n  max: number;\n};\n\nconst NumberControl = ({ name, min, max }: NumberControlProps) => {\n  const { control } = useFormContext();\n  const setValue = (newValue: number) => Math.min(newValue, max);\n\n  return (\n    <Controller\n      name={name}\n      defaultValue=\"\"\n      control={control}\n      render={({ field }) => (\n        <NumberInput\n          id={name}\n          value={field.value}\n          min={min}\n          max={max}\n          onPlus={() => field.onChange(Number(field.value) + 1)}\n          onMinus={() => field.onChange(Number(field.value) - 1)}\n          onChange={(event) => {\n            const newValue = Number(event.currentTarget.value);\n            field.onChange(setValue(!isNaN(newValue) ? newValue : 0));\n          }}\n        />\n      )}\n    />\n  );\n};\n\nconst FromTo = ({ name, ...rest }: NumberControlProps) => {\n  const { t } = useTranslation(\"clients\");\n\n  return (\n    <FormGroup\n      label={t(name)}\n      fieldId={name}\n      labelIcon={\n        <HelpItem\n          helpText={`clients-help:${name}`}\n          fieldLabelId={`clients:${name}`}\n        />\n      }\n    >\n      <Split hasGutter>\n        <SplitItem>\n          <NumberControl name={name} {...rest} />\n        </SplitItem>\n        <SplitItem>{t(\"common:to\")}</SplitItem>\n        <SplitItem>\n          <NumberControl name={`${name}End`} {...rest} />\n        </SplitItem>\n      </Split>\n    </FormGroup>\n  );\n};\n\nexport const Time = () => {\n  const { t } = useTranslation(\"clients\");\n  const {\n    getValues,\n    formState: { errors },\n  } = useFormContext();\n  const [repeat, setRepeat] = useState(getValues(\"month\"));\n  return (\n    <>\n      <FormGroup\n        label={t(\"repeat\")}\n        fieldId=\"repeat\"\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:repeat\"\n            fieldLabelId=\"clients:repeat\"\n          />\n        }\n      >\n        <Flex>\n          <FlexItem>\n            <Radio\n              id=\"notRepeat\"\n              data-testid=\"notRepeat\"\n              isChecked={!repeat}\n              name=\"repeat\"\n              onChange={() => setRepeat(false)}\n              label={t(\"notRepeat\")}\n              className=\"pf-u-mb-md\"\n            />\n          </FlexItem>\n          <FlexItem>\n            <Radio\n              id=\"repeat\"\n              data-testid=\"repeat\"\n              isChecked={repeat}\n              name=\"repeat\"\n              onChange={() => setRepeat(true)}\n              label={t(\"repeat\")}\n              className=\"pf-u-mb-md\"\n            />\n          </FlexItem>\n        </Flex>\n      </FormGroup>\n      {repeat && (\n        <>\n          <FromTo name=\"month\" min={1} max={12} />\n          <FromTo name=\"dayMonth\" min={1} max={31} />\n          <FromTo name=\"hour\" min={0} max={23} />\n          <FromTo name=\"minute\" min={0} max={59} />\n        </>\n      )}\n      <FormGroup\n        label={t(\"startTime\")}\n        fieldId=\"notBefore\"\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:startTime\"\n            fieldLabelId=\"clients:startTime\"\n          />\n        }\n        isRequired\n        helperTextInvalid={t(\"common:required\")}\n        validated={\n          errors.notBefore ? ValidatedOptions.error : ValidatedOptions.default\n        }\n      >\n        <DateTime name=\"notBefore\" />\n      </FormGroup>\n      <FormGroup\n        label={t(\"expireTime\")}\n        fieldId=\"notOnOrAfter\"\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:expireTime\"\n            fieldLabelId=\"clients:expireTime\"\n          />\n        }\n        isRequired\n        helperTextInvalid={t(\"common:required\")}\n        validated={\n          errors.notOnOrAfter\n            ? ValidatedOptions.error\n            : ValidatedOptions.default\n        }\n      >\n        <DateTime name=\"notOnOrAfter\" />\n      </FormGroup>\n    </>\n  );\n};\n","import { UserSelect } from \"../../../components/users/UserSelect\";\n\nexport const User = () => (\n  <UserSelect\n    name=\"users\"\n    label=\"users\"\n    helpText=\"clients-help:policyUsers\"\n    defaultValue={[]}\n    isRequired\n  />\n);\n","import type PolicyRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  DropdownItem,\n  PageSection,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\n\nimport { useAlerts } from \"../../../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../../../components/confirm-dialog/ConfirmDialog\";\nimport { FormAccess } from \"../../../components/form-access/FormAccess\";\nimport { KeycloakSpinner } from \"../../../components/keycloak-spinner/KeycloakSpinner\";\nimport { ViewHeader } from \"../../../components/view-header/ViewHeader\";\nimport { useAdminClient, useFetch } from \"../../../context/auth/AdminClient\";\nimport { useParams } from \"../../../utils/useParams\";\nimport { toAuthorizationTab } from \"../../routes/AuthenticationTab\";\nimport {\n  PolicyDetailsParams,\n  toPolicyDetails,\n} from \"../../routes/PolicyDetails\";\nimport { Aggregate } from \"./Aggregate\";\nimport { Client } from \"./Client\";\nimport { ClientScope, RequiredIdValue } from \"./ClientScope\";\nimport { Group, GroupValue } from \"./Group\";\nimport { JavaScript } from \"./JavaScript\";\nimport { LogicSelector } from \"./LogicSelector\";\nimport { NameDescription } from \"./NameDescription\";\nimport { Regex } from \"./Regex\";\nimport { Role } from \"./Role\";\nimport { Time } from \"./Time\";\nimport { User } from \"./User\";\n\nimport \"./policy-details.css\";\n\ntype Policy = Omit<PolicyRepresentation, \"roles\"> & {\n  groups?: GroupValue[];\n  clientScopes?: RequiredIdValue[];\n  roles?: RequiredIdValue[];\n};\n\nconst COMPONENTS: {\n  [index: string]: () => JSX.Element;\n} = {\n  aggregate: Aggregate,\n  client: Client,\n  user: User,\n  \"client-scope\": ClientScope,\n  group: Group,\n  regex: Regex,\n  role: Role,\n  time: Time,\n  js: JavaScript,\n} as const;\n\nexport const isValidComponentType = (value: string) => value in COMPONENTS;\n\nexport default function PolicyDetails() {\n  const { t } = useTranslation(\"clients\");\n  const { id, realm, policyId, policyType } = useParams<PolicyDetailsParams>();\n  const navigate = useNavigate();\n  const form = useForm();\n  const { reset, handleSubmit } = form;\n\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  const [policy, setPolicy] = useState<PolicyRepresentation>();\n\n  useFetch(\n    async () => {\n      if (policyId) {\n        const result = await Promise.all([\n          adminClient.clients.findOnePolicy({\n            id,\n            type: policyType,\n            policyId,\n          }) as PolicyRepresentation | undefined,\n          adminClient.clients.getAssociatedPolicies({\n            id,\n            permissionId: policyId,\n          }),\n        ]);\n\n        if (!result[0]) {\n          throw new Error(t(\"common:notFound\"));\n        }\n\n        return {\n          policy: result[0],\n          policies: result[1].map((p) => p.id),\n        };\n      }\n      return {};\n    },\n    ({ policy, policies }) => {\n      reset({ ...policy, policies });\n      setPolicy(policy);\n    },\n    []\n  );\n\n  const onSubmit = async (policy: Policy) => {\n    // remove entries that only have the boolean set and no id\n    policy.groups = policy.groups?.filter((g) => g.id);\n    policy.clientScopes = policy.clientScopes?.filter((c) => c.id);\n    policy.roles = policy.roles\n      ?.filter((r) => r.id)\n      .map((r) => ({ ...r, required: r.required || false }));\n\n    try {\n      if (policyId) {\n        await adminClient.clients.updatePolicy(\n          { id, type: policyType, policyId },\n          policy\n        );\n      } else {\n        const result = await adminClient.clients.createPolicy(\n          { id, type: policyType },\n          policy\n        );\n        navigate(\n          toPolicyDetails({\n            realm,\n            id,\n            policyType,\n            policyId: result.id!,\n          })\n        );\n      }\n      addAlert(\n        t((policyId ? \"update\" : \"create\") + \"PolicySuccess\"),\n        AlertVariant.success\n      );\n    } catch (error) {\n      addError(\"clients:policySaveError\", error);\n    }\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"clients:deletePolicy\",\n    messageKey: \"clients:deletePolicyConfirm\",\n    continueButtonLabel: \"clients:confirm\",\n    onConfirm: async () => {\n      try {\n        await adminClient.clients.delPolicy({\n          id,\n          policyId,\n        });\n        addAlert(t(\"policyDeletedSuccess\"), AlertVariant.success);\n        navigate(toAuthorizationTab({ realm, clientId: id, tab: \"policies\" }));\n      } catch (error) {\n        addError(\"clients:policyDeletedError\", error);\n      }\n    },\n  });\n\n  if (policyId && !policy) {\n    return <KeycloakSpinner />;\n  }\n\n  const ComponentType = isValidComponentType(policyType)\n    ? COMPONENTS[policyType]\n    : COMPONENTS[\"js\"];\n\n  return (\n    <>\n      <DeleteConfirm />\n      <ViewHeader\n        titleKey={\n          policyId\n            ? policy?.name!\n            : t(\"clients:createPolicyOfType\", { policyType })\n        }\n        dropdownItems={\n          policyId\n            ? [\n                <DropdownItem\n                  key=\"delete\"\n                  data-testid=\"delete-policy\"\n                  onClick={() => toggleDeleteDialog()}\n                >\n                  {t(\"common:delete\")}\n                </DropdownItem>,\n              ]\n            : undefined\n        }\n      />\n      <PageSection variant=\"light\">\n        <FormAccess\n          isHorizontal\n          onSubmit={handleSubmit(onSubmit)}\n          role=\"view-clients\"\n        >\n          <FormProvider {...form}>\n            <NameDescription prefix=\"policy\" />\n            <ComponentType />\n            <LogicSelector />\n          </FormProvider>\n          <ActionGroup>\n            <div className=\"pf-u-mt-md\">\n              <Button\n                variant={ButtonVariant.primary}\n                className=\"pf-u-mr-md\"\n                type=\"submit\"\n                data-testid=\"save\"\n              >\n                {t(\"common:save\")}\n              </Button>\n\n              <Button\n                variant=\"link\"\n                data-testid=\"cancel\"\n                component={(props) => (\n                  <Link\n                    {...props}\n                    to={toAuthorizationTab({\n                      realm,\n                      clientId: id,\n                      tab: \"policies\",\n                    })}\n                  />\n                )}\n              >\n                {t(\"common:cancel\")}\n              </Button>\n            </div>\n          </ActionGroup>\n        </FormAccess>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["amSuffix","pmSuffix","makeTimeOptions","stepMinutes","hour12","delimiter","minTime","maxTime","includeSeconds","res","iter","iterDay","hour","suffix","minutes","timeOption","isWithinMinMax","parseTime","time","timeRegex","is12Hour","date","hours","seconds","secondsWithDelimiter","ampm","validateTime","uppercaseSuffix","validHours","getHours","parts","getMinutes","getSeconds","_a","min24HourTime","convertTo24Hour","selected24HourTime","max24HourTime","regMatches","TimePicker","React","constructor","props","baseComponentRef","toggleRef","inputRef","menuRef","onDocClick","event","_b","_c","_d","clickedOnToggle","current","contains","target","clickedWithinMenu","state","isTimeOptionsOpen","onToggle","handleGlobalKeys","focusedIndex","scrollIndex","key","KeyTypes","Tab","Escape","Enter","focusSelection","stopPropagation","ArrowDown","ArrowUp","updateFocusedIndex","preventDefault","focus","increment","setState","prevState","maxIndex","getOptions","length","nextIndex","scrollToIndex","getIndexToScroll","index","menuAppendTo","closest","menuStyles","menuContent","scrollTop","offsetTop","indexToFocus","querySelector","menuItem","scrollToSelection","is24Hour","splitTime","split","Date","toUpperCase","includes","trim","findIndex","option","textContent","amPm","getRegExp","baseRegex","RegExp","Array","from","querySelectorAll","menuListItem","isValidFormat","isValidTime","minTimeState","maxTimeState","isValid","isOpen","isInvalid","timeState","setIsOpen","onSelect","e","onInputChange","onInputClick","newTime","onChange","minSeconds","maxSeconds","componentDidMount","document","addEventListener","componentWillUnmount","removeEventListener","componentDidUpdate","prevProps","parsedTime","render","ariaLabel","isDisabled","className","placeholder","id","invalidFormatErrorMessage","invalidMinMaxErrorMessage","width","inputProps","removeFindDomNode","zIndex","__rest","style","options","randomId","getUniqueId","getParentElement","parentElement","menuContainer","_jsx","Menu","MenuContent","MenuList","map","MenuItem","textInput","TextInput","Object","assign","css","formStyles","formControl","validated","value","type","iconVariant","onClick","autoComplete","ref","calculatedAppendTo","datePickerStyles","datePicker","_jsxs","datePickerInput","InputGroup","paddingLeft","Popper","datePickerHelperText","modifiers","error","displayName","defaultProps","reWhitespace","trimmedEndIndex","string","reTrimStart","baseTrim","NAN","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","toNumber","isSymbol","isObject","other","isBinary","now","root","now$1","FUNC_ERROR_TEXT","nativeMax","nativeMin","debounce","func","wait","lastArgs","lastThis","maxWait","result","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","invokeFunc","args","thisArg","leadingEdge","timerExpired","remainingWait","timeSinceLastCall","timeSinceLastInvoke","timeWaiting","shouldInvoke","trailingEdge","cancel","flush","debounced","isInvoking","CaretUpIconConfig","CaretUpIcon","createIcon","UserSelect","name","label","helpText","defaultValue","isRequired","variant","SelectVariant","typeaheadMulti","t","useTranslation","control","getValues","formState","errors","useFormContext","values","open","toggleOpen","useToggle","users","setUsers","useState","search","setSearch","adminClient","useAdminClient","debounceFn","useCallback","useFetch","params","max","username","Promise","all","findOne","find","convert","clients","filter","c","undefined","SelectOption","FormGroup","HelpItem","Controller","validate","required","field","Select","_","v","toString","item","DECISION_STRATEGY","DecisionStrategySelect","helpLabel","isLimited","_Fragment","slice","strategy","Radio","Aggregate","useParams","ResourcesPolicySelect","Client","setOpen","setClients","clientId","AddScopeDialog","clientScopes","scopes","clientName","toggleDialog","onAdd","isClientScopesConditionType","addToggle","setAddToggle","rows","setRows","filterType","setFilterType","FilterType","protocolType","setProtocolType","ProtocolType","isFilterTypeDropdownOpen","toggleIsFilterTypeDropdownOpen","isProtocolTypeDropdownOpen","toggleIsProtocolTypeDropdownOpen","useMemo","protocol","action","scope","row","onFilterTypeDropdownSelect","onProtocolTypeDropdownSelect","protocolTypeOptions","Modal","ModalVariant","medium","Button","ButtonVariant","primary","link","Dropdown","DropdownDirection","up","DropdownToggle","clientScopeTypesDropdown","KeycloakDataTable","CaretDownIcon","FilterIcon","DropdownItem","single","SelectDirection","down","displayKey","cellRenderer","getProtocolName","client","ListEmptyState","ClientScope","setValue","setScopes","selectedScopes","setSelectedScopes","localeSort","useLocaleSort","s","mapByKey","TableComposable","Thead","Tr","Th","Tbody","Td","Checkbox","MinusCircleIcon","Group","register","selectedGroups","setSelectedGroups","groups","g","resolve","filteredGroup","KeycloakTextInput","GroupPickerDialog","title","ok","group","path","subGroups","JavaScript","CodeEditor","Language","javascript","LOGIC_TYPES","LogicSelector","toLowerCase","NameDescription","prefix","ValidatedOptions","default","description","message","KeycloakTextArea","maxLength","Regex","targetClaim","pattern","Role","selectedRoles","setSelectedRoles","roles","r","findOneById","role","clientRole","containerId","AddRoleMappingModal","ServiceRole","DATE_TIME_FORMAT","padDateSegment","padStart","DateTime","parseDate","match","getFullYear","getMonth","getDate","join","minute","dateTime","Split","SplitItem","DatePicker","NumberControl","min","newValue","Math","NumberInput","Number","currentTarget","isNaN","FromTo","rest","Time","repeat","setRepeat","Flex","FlexItem","notBefore","notOnOrAfter","User","COMPONENTS","aggregate","user","regex","js","isValidComponentType","PolicyDetails","realm","policyId","policyType","navigate","useNavigate","form","useForm","reset","handleSubmit","addAlert","addError","useAlerts","policy","setPolicy","findOnePolicy","getAssociatedPolicies","permissionId","Error","policies","p","onSubmit","updatePolicy","createPolicy","toPolicyDetails","AlertVariant","success","toggleDeleteDialog","DeleteConfirm","useConfirmDialog","titleKey","messageKey","continueButtonLabel","onConfirm","delPolicy","toAuthorizationTab","tab","KeycloakSpinner","ComponentType","ViewHeader","PageSection","FormAccess","FormProvider","ActionGroup","Link"],"mappings":"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"}