{"version":3,"file":"Dashboard.ec21cbc5.js","sources":["../../../../node_modules/lodash-es/_baseFilter.js","../../../../node_modules/lodash-es/filter.js","../../../../node_modules/lodash-es/union.js","../../src/dashboard/ProviderInfo.tsx","../../src/dashboard/Dashboard.tsx"],"sourcesContent":["import baseEach from './_baseEach.js';\n\n/**\n * The base implementation of `_.filter` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction baseFilter(collection, predicate) {\n  var result = [];\n  baseEach(collection, function(value, index, collection) {\n    if (predicate(value, index, collection)) {\n      result.push(value);\n    }\n  });\n  return result;\n}\n\nexport default baseFilter;\n","import arrayFilter from './_arrayFilter.js';\nimport baseFilter from './_baseFilter.js';\nimport baseIteratee from './_baseIteratee.js';\nimport isArray from './isArray.js';\n\n/**\n * Iterates over elements of `collection`, returning an array of all elements\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * **Note:** Unlike `_.remove`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n * @see _.reject\n * @example\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': true },\n *   { 'user': 'fred',   'age': 40, 'active': false }\n * ];\n *\n * _.filter(users, function(o) { return !o.active; });\n * // => objects for ['fred']\n *\n * // The `_.matches` iteratee shorthand.\n * _.filter(users, { 'age': 36, 'active': true });\n * // => objects for ['barney']\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.filter(users, ['active', false]);\n * // => objects for ['fred']\n *\n * // The `_.property` iteratee shorthand.\n * _.filter(users, 'active');\n * // => objects for ['barney']\n *\n * // Combining several predicates using `_.overEvery` or `_.overSome`.\n * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));\n * // => objects for ['fred', 'barney']\n */\nfunction filter(collection, predicate) {\n  var func = isArray(collection) ? arrayFilter : baseFilter;\n  return func(collection, baseIteratee(predicate, 3));\n}\n\nexport default filter;\n","import baseFlatten from './_baseFlatten.js';\nimport baseRest from './_baseRest.js';\nimport baseUniq from './_baseUniq.js';\nimport isArrayLikeObject from './isArrayLikeObject.js';\n\n/**\n * Creates an array of unique values, in order, from all given arrays using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @returns {Array} Returns the new array of combined values.\n * @example\n *\n * _.union([2], [1, 2]);\n * // => [2, 1]\n */\nvar union = baseRest(function(arrays) {\n  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));\n});\n\nexport default union;\n","import { useMemo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { ExpandableSection, PageSection } from \"@patternfly/react-core\";\nimport {\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\n\nimport { useServerInfo } from \"../context/server-info/ServerInfoProvider\";\nimport { TableToolbar } from \"../components/table-toolbar/TableToolbar\";\nimport { isDefined } from \"../utils/isDefined\";\n\nexport const ProviderInfo = () => {\n  const { t } = useTranslation(\"dashboard\");\n  const serverInfo = useServerInfo();\n  const [filter, setFilter] = useState(\"\");\n  const [open, setOpen] = useState<string[]>([]);\n\n  const providerInfo = useMemo(\n    () =>\n      Object.entries(serverInfo.providers || []).filter(([key]) =>\n        key.includes(filter)\n      ),\n    [filter]\n  );\n\n  const toggleOpen = (option: string) => {\n    if (open.includes(option)) {\n      setOpen(open.filter((item: string) => item !== option));\n    } else {\n      setOpen([...open, option]);\n    }\n  };\n\n  return (\n    <PageSection variant=\"light\">\n      <TableToolbar\n        inputGroupName=\"search\"\n        inputGroupPlaceholder={t(\"common:search\")}\n        inputGroupOnEnter={setFilter}\n      >\n        <TableComposable variant=\"compact\">\n          <Thead>\n            <Tr>\n              <Th width={20}>{t(\"spi\")}</Th>\n              <Th>{t(\"providers\")}</Th>\n            </Tr>\n          </Thead>\n          <Tbody>\n            {providerInfo.map(([name, { providers }]) => (\n              <Tr key={name}>\n                <Td>{name}</Td>\n                <Td>\n                  <ul>\n                    {Object.entries(providers).map(([key]) => (\n                      <li key={key}>{key}</li>\n                    ))}\n                  </ul>\n                  {Object.entries(providers)\n                    .map(([key, { operationalInfo }]) =>\n                      operationalInfo ? (\n                        <ExpandableSection\n                          key={key}\n                          isExpanded={open.includes(key)}\n                          onToggle={() => toggleOpen(key)}\n                          toggleText={\n                            open.includes(key) ? t(\"showLess\") : t(\"showMore\")\n                          }\n                        >\n                          <TableComposable borders={false}>\n                            <Tbody>\n                              {Object.entries(operationalInfo).map(\n                                ([key, value]) => (\n                                  <Tr key={key}>\n                                    <Td>{key}</Td>\n                                    <Td>{value}</Td>\n                                  </Tr>\n                                )\n                              )}\n                            </Tbody>\n                          </TableComposable>\n                        </ExpandableSection>\n                      ) : null\n                    )\n                    .filter(isDefined)}\n                </Td>\n              </Tr>\n            ))}\n          </Tbody>\n        </TableComposable>\n      </TableToolbar>\n    </PageSection>\n  );\n};\n","import { useMemo } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { union, filter } from \"lodash-es\";\nimport {\n  Brand,\n  Card,\n  CardBody,\n  CardTitle,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  EmptyState,\n  EmptyStateBody,\n  Grid,\n  GridItem,\n  Label,\n  List,\n  ListItem,\n  ListVariant,\n  PageSection,\n  Tab,\n  TabTitleText,\n  Text,\n  TextContent,\n  Title,\n} from \"@patternfly/react-core\";\n\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../context/server-info/ServerInfoProvider\";\nimport { toUpperCase } from \"../util\";\nimport { HelpItem } from \"../components/help-enabler/HelpItem\";\nimport environment from \"../environment\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport useLocaleSort from \"../utils/useLocaleSort\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../components/routable-tabs/RoutableTabs\";\nimport { DashboardTab, toDashboard } from \"./routes/Dashboard\";\nimport { ProviderInfo } from \"./ProviderInfo\";\n\nimport \"./dashboard.css\";\n\nconst EmptyDashboard = () => {\n  const { t } = useTranslation(\"dashboard\");\n  const { realm } = useRealm();\n  return (\n    <PageSection variant=\"light\">\n      <EmptyState variant=\"large\">\n        <Brand\n          src={environment.resourceUrl + \"/icon.svg\"}\n          alt=\"Keycloak icon\"\n          className=\"keycloak__dashboard_icon\"\n        />\n        <Title headingLevel=\"h4\" size=\"3xl\">\n          {t(\"welcome\")}\n        </Title>\n        <Title headingLevel=\"h4\" size=\"4xl\">\n          {realm}\n        </Title>\n        <EmptyStateBody>{t(\"introduction\")}</EmptyStateBody>\n      </EmptyState>\n    </PageSection>\n  );\n};\n\nconst Dashboard = () => {\n  const { t } = useTranslation(\"dashboard\");\n  const { realm } = useRealm();\n  const serverInfo = useServerInfo();\n  const localeSort = useLocaleSort();\n\n  const isDeprecatedFeature = (feature: string) =>\n    disabledFeatures.includes(feature);\n\n  const isExperimentalFeature = (feature: string) =>\n    serverInfo.profileInfo?.experimentalFeatures?.includes(feature);\n\n  const isPreviewFeature = (feature: string) =>\n    serverInfo.profileInfo?.previewFeatures?.includes(feature);\n\n  const isSupportedFeature = (feature: string) =>\n    !isExperimentalFeature(feature) && !isPreviewFeature(feature);\n\n  const disabledFeatures = useMemo(\n    () =>\n      localeSort(\n        serverInfo.profileInfo?.disabledFeatures ?? [],\n        (item) => item\n      ),\n    [serverInfo.profileInfo]\n  );\n\n  const enabledFeatures = useMemo(\n    () =>\n      localeSort(\n        filter(\n          union(\n            serverInfo.profileInfo?.experimentalFeatures,\n            serverInfo.profileInfo?.previewFeatures\n          ),\n          (feature) => {\n            return !isDeprecatedFeature(feature);\n          }\n        ),\n        (item) => item\n      ),\n    [serverInfo.profileInfo]\n  );\n\n  const useTab = (tab: DashboardTab) =>\n    useRoutableTab(\n      toDashboard({\n        realm,\n        tab,\n      })\n    );\n\n  const infoTab = useTab(\"info\");\n  const providersTab = useTab(\"providers\");\n\n  if (Object.keys(serverInfo).length === 0) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <>\n      <PageSection variant=\"light\">\n        <TextContent className=\"pf-u-mr-sm\">\n          <Text component=\"h1\">{t(\"realmName\", { name: realm })}</Text>\n          <Text>\n            <Trans t={t} i18nKey=\"adminUiVersion\">\n              <strong>Admin UI version</strong>\n              {{ version: environment.commitHash }}\n            </Trans>\n          </Text>\n        </TextContent>\n      </PageSection>\n      <PageSection variant=\"light\" className=\"pf-u-p-0\">\n        <RoutableTabs\n          data-testid=\"dashboard-tabs\"\n          defaultLocation={toDashboard({\n            realm,\n            tab: \"info\",\n          })}\n          isBox\n          mountOnEnter\n        >\n          <Tab\n            id=\"info\"\n            data-testid=\"infoTab\"\n            title={<TabTitleText>{t(\"serverInfo\")}</TabTitleText>}\n            {...infoTab}\n          >\n            <PageSection variant=\"light\">\n              <Grid hasGutter>\n                <GridItem lg={2} sm={12}>\n                  <Card className=\"keycloak__dashboard_card\">\n                    <CardTitle>{t(\"serverInfo\")}</CardTitle>\n                    <CardBody>\n                      <DescriptionList>\n                        <DescriptionListGroup>\n                          <DescriptionListTerm>\n                            {t(\"version\")}\n                          </DescriptionListTerm>\n                          <DescriptionListDescription>\n                            {serverInfo.systemInfo?.version}\n                          </DescriptionListDescription>\n                          <DescriptionListTerm>\n                            {t(\"product\")}\n                          </DescriptionListTerm>\n                          <DescriptionListDescription>\n                            {toUpperCase(serverInfo.profileInfo?.name!)}\n                          </DescriptionListDescription>\n                        </DescriptionListGroup>\n                      </DescriptionList>\n                    </CardBody>\n                    <CardTitle>{t(\"memory\")}</CardTitle>\n                    <CardBody>\n                      <DescriptionList>\n                        <DescriptionListGroup>\n                          <DescriptionListTerm>\n                            {t(\"totalMemory\")}\n                          </DescriptionListTerm>\n                          <DescriptionListDescription>\n                            {serverInfo.memoryInfo?.totalFormated}\n                          </DescriptionListDescription>\n                          <DescriptionListTerm>\n                            {t(\"freeMemory\")}\n                          </DescriptionListTerm>\n                          <DescriptionListDescription>\n                            {serverInfo.memoryInfo?.freeFormated}\n                          </DescriptionListDescription>\n                          <DescriptionListTerm>\n                            {t(\"usedMemory\")}\n                          </DescriptionListTerm>\n                          <DescriptionListDescription>\n                            {serverInfo.memoryInfo?.usedFormated}\n                          </DescriptionListDescription>\n                        </DescriptionListGroup>\n                      </DescriptionList>\n                    </CardBody>\n                  </Card>\n                </GridItem>\n                <GridItem lg={10} sm={12}>\n                  <Card className=\"keycloak__dashboard_card\">\n                    <CardTitle>{t(\"profile\")}</CardTitle>\n                    <CardBody>\n                      <DescriptionList>\n                        <DescriptionListGroup>\n                          <DescriptionListTerm>\n                            {t(\"enabledFeatures\")}{\" \"}\n                            <HelpItem\n                              fieldLabelId=\"dashboard:enabledFeatures\"\n                              helpText=\"dashboard:infoEnabledFeatures\"\n                            />\n                          </DescriptionListTerm>\n                          <DescriptionListDescription>\n                            <List variant={ListVariant.inline}>\n                              {enabledFeatures.map((feature) => (\n                                <ListItem key={feature} className=\"pf-u-mb-sm\">\n                                  {feature}{\" \"}\n                                  {isExperimentalFeature(feature) ? (\n                                    <Label color=\"orange\">\n                                      {t(\"experimental\")}\n                                    </Label>\n                                  ) : null}\n                                  {isPreviewFeature(feature) ? (\n                                    <Label color=\"blue\">{t(\"preview\")}</Label>\n                                  ) : null}\n                                </ListItem>\n                              ))}\n                            </List>\n                          </DescriptionListDescription>\n                        </DescriptionListGroup>\n                        <DescriptionListGroup>\n                          <DescriptionListTerm>\n                            {t(\"disabledFeatures\")}{\" \"}\n                            <HelpItem\n                              fieldLabelId=\"dashboard:disabledFeatures\"\n                              helpText=\"dashboard:infoDisabledFeatures\"\n                            />\n                          </DescriptionListTerm>\n                          <DescriptionListDescription>\n                            <List variant={ListVariant.inline}>\n                              {disabledFeatures.map((feature) => (\n                                <ListItem key={feature} className=\"pf-u-mb-sm\">\n                                  {feature}{\" \"}\n                                  {isExperimentalFeature(feature) ? (\n                                    <Label color=\"orange\">\n                                      {t(\"experimental\")}\n                                    </Label>\n                                  ) : null}\n                                  {isPreviewFeature(feature) ? (\n                                    <Label color=\"blue\">{t(\"preview\")}</Label>\n                                  ) : null}\n                                  {isSupportedFeature(feature) ? (\n                                    <Label color=\"green\">\n                                      {t(\"supported\")}\n                                    </Label>\n                                  ) : null}\n                                </ListItem>\n                              ))}\n                            </List>\n                          </DescriptionListDescription>\n                        </DescriptionListGroup>\n                      </DescriptionList>\n                    </CardBody>\n                  </Card>\n                </GridItem>\n              </Grid>\n            </PageSection>\n          </Tab>\n          <Tab\n            id=\"providers\"\n            data-testid=\"providersTab\"\n            title={<TabTitleText>{t(\"providerInfo\")}</TabTitleText>}\n            {...providersTab}\n          >\n            <ProviderInfo />\n          </Tab>\n        </RoutableTabs>\n      </PageSection>\n    </>\n  );\n};\n\nexport default function DashboardSection() {\n  const { realm } = useRealm();\n  const isMasterRealm = realm === \"master\";\n  return (\n    <>\n      {!isMasterRealm && <EmptyDashboard />}\n      {isMasterRealm && <Dashboard />}\n    </>\n  );\n}\n"],"names":["baseFilter","collection","predicate","result","baseEach","value","index","filter","func","isArray","arrayFilter","baseIteratee","union","baseRest","arrays","baseUniq","baseFlatten","isArrayLikeObject","union$1","ProviderInfo","t","useTranslation","serverInfo","useServerInfo","setFilter","useState","open","setOpen","providerInfo","useMemo","Object","entries","providers","key","includes","toggleOpen","option","item","PageSection","TableToolbar","TableComposable","_jsx","Thead","Tr","Th","Tbody","map","name","_jsxs","Td","operationalInfo","ExpandableSection","isDefined","EmptyDashboard","realm","useRealm","EmptyState","Brand","environment","resourceUrl","Title","EmptyStateBody","Dashboard","localeSort","useLocaleSort","isDeprecatedFeature","feature","disabledFeatures","isExperimentalFeature","profileInfo","experimentalFeatures","isPreviewFeature","previewFeatures","isSupportedFeature","enabledFeatures","useTab","tab","useRoutableTab","toDashboard","infoTab","providersTab","keys","length","KeycloakSpinner","_Fragment","TextContent","Text","Trans","version","commitHash","RoutableTabs","Tab","TabTitleText","Grid","GridItem","Card","CardTitle","CardBody","DescriptionList","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","systemInfo","toUpperCase","memoryInfo","totalFormated","freeFormated","usedFormated","HelpItem","List","ListVariant","inline","ListItem","Label","DashboardSection","isMasterRealm"],"mappings":"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"}