{"version":3,"file":"MapperList.edc4ba6e.js","sources":["../../src/client-scopes/add/MapperDialog.tsx","../../src/client-scopes/details/MapperList.tsx"],"sourcesContent":["import { useMemo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Button,\n  ButtonVariant,\n  DataList,\n  DataListCell,\n  DataListItem,\n  DataListItemCells,\n  DataListItemRow,\n  Modal,\n  ModalVariant,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\n\nimport type ProtocolMapperRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/protocolMapperRepresentation\";\nimport type { ProtocolMapperTypeRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/serverInfoRepesentation\";\n\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { ListEmptyState } from \"../../components/list-empty-state/ListEmptyState\";\nimport { KeycloakDataTable } from \"../../components/table-toolbar/KeycloakDataTable\";\nimport useLocaleSort, { mapByKey } from \"../../utils/useLocaleSort\";\n\ntype Row = {\n  name: string;\n  description: string;\n  item: ProtocolMapperRepresentation;\n};\n\nexport type AddMapperDialogModalProps = {\n  protocol: string;\n  filter?: ProtocolMapperRepresentation[];\n  onConfirm: (\n    value: ProtocolMapperTypeRepresentation | ProtocolMapperRepresentation[]\n  ) => void;\n};\n\nexport type AddMapperDialogProps = AddMapperDialogModalProps & {\n  open: boolean;\n  toggleDialog: () => void;\n};\n\nexport const AddMapperDialog = (props: AddMapperDialogProps) => {\n  const { t } = useTranslation(\"client-scopes\");\n\n  const serverInfo = useServerInfo();\n  const protocol = props.protocol;\n  const protocolMappers = serverInfo.protocolMapperTypes![protocol];\n  const builtInMappers = serverInfo.builtinProtocolMappers![protocol];\n  const [filter, setFilter] = useState<ProtocolMapperRepresentation[]>([]);\n  const [selectedRows, setSelectedRows] = useState<Row[]>([]);\n  const localeSort = useLocaleSort();\n\n  const allRows = useMemo(\n    () =>\n      localeSort(builtInMappers, mapByKey(\"name\")).map((mapper) => {\n        const mapperType = protocolMappers.filter(\n          (type) => type.id === mapper.protocolMapper\n        )[0];\n        return {\n          item: mapper,\n          name: mapper.name!,\n          description: mapperType.helpText,\n        };\n      }),\n    [builtInMappers, protocolMappers]\n  );\n  const [rows, setRows] = useState(allRows);\n\n  if (props.filter && props.filter.length !== filter.length) {\n    setFilter(props.filter);\n    const nameFilter = props.filter.map((f) => f.name);\n    setRows([...allRows.filter((row) => !nameFilter.includes(row.item.name))]);\n  }\n\n  const sortedProtocolMappers = useMemo(\n    () => localeSort(protocolMappers, mapByKey(\"name\")),\n    [protocolMappers]\n  );\n\n  const isBuiltIn = !!props.filter;\n\n  const header = [t(\"common:name\"), t(\"common:description\")];\n\n  return (\n    <Modal\n      aria-label={\n        isBuiltIn ? t(\"addPredefinedMappers\") : t(\"emptySecondaryAction\")\n      }\n      variant={ModalVariant.medium}\n      header={\n        <TextContent\n          role=\"dialog\"\n          aria-label={\n            isBuiltIn ? t(\"addPredefinedMappers\") : t(\"emptySecondaryAction\")\n          }\n        >\n          <Text component={TextVariants.h1}>\n            {isBuiltIn ? t(\"addPredefinedMappers\") : t(\"emptySecondaryAction\")}\n          </Text>\n          <Text>\n            {isBuiltIn\n              ? t(\"predefinedMappingDescription\")\n              : t(\"configureMappingDescription\")}\n          </Text>\n        </TextContent>\n      }\n      isOpen={props.open}\n      onClose={props.toggleDialog}\n      actions={\n        isBuiltIn\n          ? [\n              <Button\n                id=\"modal-confirm\"\n                data-testid=\"confirm\"\n                key=\"confirm\"\n                isDisabled={rows.length === 0 || selectedRows.length === 0}\n                onClick={() => {\n                  props.onConfirm(selectedRows.map(({ item }) => item));\n                  props.toggleDialog();\n                }}\n              >\n                {t(\"common:add\")}\n              </Button>,\n              <Button\n                id=\"modal-cancel\"\n                data-testid=\"cancel\"\n                key=\"cancel\"\n                variant={ButtonVariant.link}\n                onClick={() => {\n                  props.toggleDialog();\n                }}\n              >\n                {t(\"common:cancel\")}\n              </Button>,\n            ]\n          : []\n      }\n    >\n      {!isBuiltIn && (\n        <DataList\n          onSelectDataListItem={(id) => {\n            const mapper = protocolMappers.find((mapper) => mapper.id === id);\n            props.onConfirm(mapper!);\n            props.toggleDialog();\n          }}\n          aria-label={t(\"addPredefinedMappers\")}\n          isCompact\n        >\n          <DataListItem aria-label={t(\"headerName\")} id=\"header\">\n            <DataListItemRow>\n              <DataListItemCells\n                dataListCells={header.map((name) => (\n                  <DataListCell style={{ fontWeight: 700 }} key={name}>\n                    {name}\n                  </DataListCell>\n                ))}\n              />\n            </DataListItemRow>\n          </DataListItem>\n          {sortedProtocolMappers.map((mapper) => (\n            <DataListItem\n              aria-label={mapper.name}\n              key={mapper.id}\n              id={mapper.id}\n            >\n              <DataListItemRow>\n                <DataListItemCells\n                  dataListCells={[\n                    <DataListCell key={`name-${mapper.id}`}>\n                      {mapper.name}\n                    </DataListCell>,\n                    <DataListCell key={`helpText-${mapper.id}`}>\n                      {mapper.helpText}\n                    </DataListCell>,\n                  ]}\n                />\n              </DataListItemRow>\n            </DataListItem>\n          ))}\n        </DataList>\n      )}\n      {isBuiltIn && (\n        <KeycloakDataTable\n          loader={rows}\n          onSelect={setSelectedRows}\n          canSelectAll\n          ariaLabelKey=\"client-scopes:addPredefinedMappers\"\n          searchPlaceholderKey=\"common:searchForMapper\"\n          columns={[\n            {\n              name: \"name\",\n              displayKey: \"common:name\",\n            },\n            {\n              name: \"description\",\n              displayKey: \"common:description\",\n            },\n          ]}\n          emptyState={\n            <ListEmptyState\n              message={t(\"common:emptyMappers\")}\n              instructions={t(\"client-scopes:emptyBuiltInMappersInstructions\")}\n            />\n          }\n        />\n      )}\n    </Modal>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport type { Path } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nimport { Dropdown, DropdownItem, DropdownToggle } from \"@patternfly/react-core\";\nimport { CaretDownIcon } from \"@patternfly/react-icons\";\n\nimport type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport type ClientScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientScopeRepresentation\";\nimport type ProtocolMapperRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/protocolMapperRepresentation\";\nimport type { ProtocolMapperTypeRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/serverInfoRepesentation\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\n\nimport { ListEmptyState } from \"../../components/list-empty-state/ListEmptyState\";\nimport { AddMapperDialog } from \"../add/MapperDialog\";\nimport { KeycloakDataTable } from \"../../components/table-toolbar/KeycloakDataTable\";\n\ntype MapperListProps = {\n  model: ClientScopeRepresentation | ClientRepresentation;\n  onAdd: (\n    mappers: ProtocolMapperTypeRepresentation | ProtocolMapperRepresentation[]\n  ) => void;\n  onDelete: (mapper: ProtocolMapperRepresentation) => void;\n  detailLink: (id: string) => Partial<Path>;\n};\n\ntype Row = ProtocolMapperRepresentation & {\n  category: string;\n  type: string;\n  priority: number;\n};\n\nexport const MapperList = ({\n  model,\n  onAdd,\n  onDelete,\n  detailLink,\n}: MapperListProps) => {\n  const { t } = useTranslation(\"client-scopes\");\n\n  const [mapperAction, setMapperAction] = useState(false);\n  const mapperList = model.protocolMappers;\n  const mapperTypes = useServerInfo().protocolMapperTypes![model.protocol!];\n\n  const [key, setKey] = useState(0);\n  useEffect(() => setKey(key + 1), [mapperList]);\n\n  const [addMapperDialogOpen, setAddMapperDialogOpen] = useState(false);\n  const [filter, setFilter] = useState(model.protocolMappers);\n  const toggleAddMapperDialog = (buildIn: boolean) => {\n    if (buildIn) {\n      setFilter(mapperList || []);\n    } else {\n      setFilter(undefined);\n    }\n    setAddMapperDialogOpen(!addMapperDialogOpen);\n  };\n\n  const loader = async () => {\n    if (!mapperList) {\n      return [];\n    }\n\n    const list = mapperList.reduce<Row[]>((rows, mapper) => {\n      const mapperType = mapperTypes.find(\n        ({ id }) => id === mapper.protocolMapper\n      );\n\n      if (!mapperType) {\n        return rows;\n      }\n\n      return rows.concat({\n        ...mapper,\n        category: mapperType.category,\n        type: mapperType.name,\n        priority: mapperType.priority,\n      });\n    }, []);\n\n    return list.sort((a, b) => a.priority - b.priority);\n  };\n\n  const MapperLink = ({ id, name }: Row) => (\n    <Link to={detailLink(id!)}>{name}</Link>\n  );\n\n  return (\n    <>\n      <AddMapperDialog\n        protocol={model.protocol!}\n        filter={filter}\n        onConfirm={onAdd}\n        open={addMapperDialogOpen}\n        toggleDialog={() => setAddMapperDialogOpen(!addMapperDialogOpen)}\n      />\n\n      <KeycloakDataTable\n        key={key}\n        loader={loader}\n        ariaLabelKey=\"client-scopes:clientScopeList\"\n        searchPlaceholderKey=\"common:searchForMapper\"\n        toolbarItem={\n          <Dropdown\n            onSelect={() => setMapperAction(false)}\n            toggle={\n              <DropdownToggle\n                isPrimary\n                id=\"mapperAction\"\n                onToggle={() => setMapperAction(!mapperAction)}\n                toggleIndicator={CaretDownIcon}\n              >\n                {t(\"common:addMapper\")}\n              </DropdownToggle>\n            }\n            isOpen={mapperAction}\n            dropdownItems={[\n              <DropdownItem\n                key=\"predefined\"\n                onClick={() => toggleAddMapperDialog(true)}\n              >\n                {t(\"fromPredefinedMapper\")}\n              </DropdownItem>,\n              <DropdownItem\n                key=\"byConfiguration\"\n                onClick={() => toggleAddMapperDialog(false)}\n              >\n                {t(\"byConfiguration\")}\n              </DropdownItem>,\n            ]}\n          />\n        }\n        actions={[\n          {\n            title: t(\"common:delete\"),\n            onRowClick: onDelete,\n          },\n        ]}\n        columns={[\n          {\n            name: \"name\",\n            cellRenderer: MapperLink,\n          },\n          { name: \"category\" },\n          {\n            name: \"type\",\n          },\n          {\n            name: \"priority\",\n          },\n        ]}\n        emptyState={\n          <ListEmptyState\n            message={t(\"common:emptyMappers\")}\n            instructions={t(\"common:emptyMappersInstructions\")}\n            secondaryActions={[\n              {\n                text: t(\"common:emptyPrimaryAction\"),\n                onClick: () => toggleAddMapperDialog(true),\n              },\n              {\n                text: t(\"emptySecondaryAction\"),\n                onClick: () => toggleAddMapperDialog(false),\n              },\n            ]}\n          />\n        }\n      />\n    </>\n  );\n};\n"],"names":["AddMapperDialog","props","t","useTranslation","serverInfo","useServerInfo","protocol","protocolMappers","protocolMapperTypes","builtInMappers","builtinProtocolMappers","filter","setFilter","useState","selectedRows","setSelectedRows","localeSort","useLocaleSort","allRows","useMemo","mapByKey","map","mapper","mapperType","type","id","protocolMapper","item","name","description","helpText","rows","setRows","length","nameFilter","f","row","includes","sortedProtocolMappers","isBuiltIn","header","Modal","ModalVariant","medium","TextContent","_jsx","Text","TextVariants","h1","open","toggleDialog","Button","onConfirm","ButtonVariant","link","DataList","find","DataListItem","DataListItemRow","DataListItemCells","DataListCell","fontWeight","KeycloakDataTable","displayKey","ListEmptyState","MapperList","model","onAdd","onDelete","detailLink","mapperAction","setMapperAction","mapperList","mapperTypes","key","setKey","useEffect","addMapperDialogOpen","setAddMapperDialogOpen","toggleAddMapperDialog","buildIn","undefined","loader","reduce","concat","category","priority","sort","a","b","MapperLink","Link","_Fragment","Dropdown","DropdownToggle","CaretDownIcon","DropdownItem","title","onRowClick","cellRenderer","text","onClick"],"mappings":"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"}