{"version":3,"file":"UsersSection.4240c0b3.js","sources":["../../src/user/UsersSection.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Dropdown,\n  DropdownItem,\n  EmptyState,\n  InputGroup,\n  KebabToggle,\n  Label,\n  PageSection,\n  Tab,\n  TabTitleText,\n  Text,\n  TextContent,\n  TextInput,\n  Toolbar,\n  ToolbarContent,\n  ToolbarItem,\n  Tooltip,\n} from \"@patternfly/react-core\";\nimport {\n  ExclamationCircleIcon,\n  InfoCircleIcon,\n  SearchIcon,\n  WarningTriangleIcon,\n} from \"@patternfly/react-icons\";\nimport type { IRowData } from \"@patternfly/react-table\";\n\nimport type ComponentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentRepresentation\";\nimport type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport { useServerInfo } from \"../context/server-info/ServerInfoProvider\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport { KeycloakDataTable } from \"../components/table-toolbar/KeycloakDataTable\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useAdminClient, useFetch } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { emptyFormatter } from \"../util\";\nimport { toUser } from \"./routes/User\";\nimport { toAddUser } from \"./routes/AddUser\";\nimport helpUrls from \"../help-urls\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport { PermissionsTab } from \"../components/permission-tab/PermissionTab\";\nimport { toUsers, UserTab } from \"./routes/Users\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../components/routable-tabs/RoutableTabs\";\nimport { useAccess } from \"../context/access/Access\";\nimport { BruteUser, findUsers } from \"../components/role-mapping/resource\";\n\nimport \"./user-section.css\";\n\nexport default function UsersSection() {\n  const { t } = useTranslation(\"users\");\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const { realm: realmName } = useRealm();\n  const navigate = useNavigate();\n  const [userStorage, setUserStorage] = useState<ComponentRepresentation[]>();\n  const [searchUser, setSearchUser] = useState<string>();\n  const [realm, setRealm] = useState<RealmRepresentation | undefined>();\n  const [kebabOpen, setKebabOpen] = useState(false);\n  const [selectedRows, setSelectedRows] = useState<UserRepresentation[]>([]);\n  const { profileInfo } = useServerInfo();\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const { hasAccess } = useAccess();\n\n  // Only needs query-users access to attempt add/delete of users.\n  // This is because the user could have fine-grained access to users\n  // of a group.  There is no way to know this without searching the\n  // permissions of every group.\n  const isManager = hasAccess(\"query-users\");\n\n  useFetch(\n    async () => {\n      const testParams = {\n        type: \"org.keycloak.storage.UserStorageProvider\",\n      };\n\n      try {\n        return await Promise.all([\n          adminClient.components.find(testParams),\n          adminClient.realms.findOne({ realm: realmName }),\n        ]);\n      } catch {\n        return [[], {}] as [\n          ComponentRepresentation[],\n          RealmRepresentation | undefined\n        ];\n      }\n    },\n    ([storageProviders, realm]) => {\n      setUserStorage(storageProviders);\n      setRealm(realm);\n    },\n    []\n  );\n\n  const useTab = (tab: UserTab) =>\n    useRoutableTab(\n      toUsers({\n        realm: realmName,\n        tab,\n      })\n    );\n\n  const listTab = useTab(\"list\");\n  const permissionsTab = useTab(\"permissions\");\n\n  const UserDetailLink = (user: UserRepresentation) => (\n    <Link\n      key={user.username}\n      to={toUser({ realm: realmName, id: user.id!, tab: \"settings\" })}\n    >\n      {user.username}\n    </Link>\n  );\n\n  const loader = async (first?: number, max?: number, search?: string) => {\n    const params: { [name: string]: string | number } = {\n      first: first!,\n      max: max!,\n    };\n\n    const searchParam = search || searchUser || \"\";\n    if (searchParam) {\n      params.search = searchParam;\n    }\n\n    if (!listUsers && !searchParam) {\n      return [];\n    }\n\n    try {\n      return await findUsers({\n        adminClient,\n        briefRepresentation: true,\n        ...params,\n      });\n    } catch (error) {\n      if (userStorage?.length) {\n        addError(\"users:noUsersFoundErrorStorage\", error);\n      } else {\n        addError(\"users:noUsersFoundError\", error);\n      }\n      return [];\n    }\n  };\n\n  const [toggleUnlockUsersDialog, UnlockUsersConfirm] = useConfirmDialog({\n    titleKey: \"users:unlockAllUsers\",\n    messageKey: \"users:unlockUsersConfirm\",\n    continueButtonLabel: \"users:unlock\",\n    onConfirm: async () => {\n      try {\n        await adminClient.attackDetection.delAll();\n        refresh();\n        addAlert(t(\"unlockUsersSuccess\"), AlertVariant.success);\n      } catch (error) {\n        addError(\"users:unlockUsersError\", error);\n      }\n    },\n  });\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"users:deleteConfirm\",\n    messageKey: t(\"deleteConfirmDialog\", { count: selectedRows.length }),\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        for (const user of selectedRows) {\n          await adminClient.users.del({ id: user.id! });\n        }\n        setSelectedRows([]);\n        refresh();\n        addAlert(t(\"userDeletedSuccess\"), AlertVariant.success);\n      } catch (error) {\n        addError(\"users:userDeletedError\", error);\n      }\n    },\n  });\n\n  const StatusRow = (user: BruteUser) => {\n    return (\n      <>\n        {!user.enabled && (\n          <Label key={user.id} color=\"red\" icon={<InfoCircleIcon />}>\n            {t(\"disabled\")}\n          </Label>\n        )}\n        {user.bruteForceStatus?.disabled && (\n          <Label key={user.id} color=\"orange\" icon={<WarningTriangleIcon />}>\n            {t(\"temporaryLocked\")}\n          </Label>\n        )}\n        {user.enabled && !user.bruteForceStatus?.disabled && \"â€”\"}\n      </>\n    );\n  };\n\n  const ValidatedEmail = (user: UserRepresentation) => {\n    return (\n      <>\n        {!user.emailVerified && (\n          <Tooltip\n            key={`email-verified-${user.id}`}\n            content={<>{t(\"notVerified\")}</>}\n          >\n            <ExclamationCircleIcon className=\"keycloak__user-section__email-verified\" />\n          </Tooltip>\n        )}{\" \"}\n        {emptyFormatter()(user.email)}\n      </>\n    );\n  };\n\n  const goToCreate = () => navigate(toAddUser({ realm: realmName }));\n\n  if (!userStorage || !realm) {\n    return <KeycloakSpinner />;\n  }\n\n  //should *only* list users when no user federation is configured\n  const listUsers = !(userStorage.length > 0);\n\n  const toolbar = (\n    <>\n      <ToolbarItem>\n        <Button data-testid=\"add-user\" onClick={goToCreate}>\n          {t(\"addUser\")}\n        </Button>\n      </ToolbarItem>\n      {!realm.bruteForceProtected ? (\n        <ToolbarItem>\n          <Button\n            variant={ButtonVariant.link}\n            onClick={toggleDeleteDialog}\n            data-testid=\"delete-user-btn\"\n            isDisabled={selectedRows.length === 0}\n          >\n            {t(\"deleteUser\")}\n          </Button>\n        </ToolbarItem>\n      ) : (\n        <ToolbarItem>\n          <Dropdown\n            toggle={<KebabToggle onToggle={(open) => setKebabOpen(open)} />}\n            isOpen={kebabOpen}\n            isPlain\n            dropdownItems={[\n              <DropdownItem\n                key=\"deleteUser\"\n                component=\"button\"\n                isDisabled={selectedRows.length === 0}\n                onClick={() => {\n                  toggleDeleteDialog();\n                  setKebabOpen(false);\n                }}\n              >\n                {t(\"deleteUser\")}\n              </DropdownItem>,\n\n              <DropdownItem\n                key=\"unlock\"\n                component=\"button\"\n                onClick={() => {\n                  toggleUnlockUsersDialog();\n                  setKebabOpen(false);\n                }}\n              >\n                {t(\"unlockAllUsers\")}\n              </DropdownItem>,\n            ]}\n          />\n        </ToolbarItem>\n      )}\n    </>\n  );\n\n  return (\n    <>\n      <DeleteConfirm />\n      <UnlockUsersConfirm />\n      <ViewHeader\n        titleKey=\"users:title\"\n        subKey=\"users:usersExplain\"\n        helpUrl={helpUrls.usersUrl}\n        divider={false}\n      />\n      <PageSection\n        data-testid=\"users-page\"\n        variant=\"light\"\n        className=\"pf-u-p-0\"\n      >\n        <RoutableTabs\n          data-testid=\"user-tabs\"\n          defaultLocation={toUsers({\n            realm: realmName,\n            tab: \"list\",\n          })}\n          isBox\n          mountOnEnter\n        >\n          <Tab\n            id=\"list\"\n            data-testid=\"listTab\"\n            title={<TabTitleText>{t(\"userList\")}</TabTitleText>}\n            {...listTab}\n          >\n            <KeycloakDataTable\n              key={key}\n              loader={loader}\n              isPaginated\n              ariaLabelKey=\"users:title\"\n              searchPlaceholderKey=\"users:searchForUser\"\n              canSelectAll\n              onSelect={(rows) => setSelectedRows([...rows])}\n              emptyState={\n                !listUsers ? (\n                  <>\n                    <Toolbar>\n                      <ToolbarContent>\n                        <ToolbarItem>\n                          <InputGroup>\n                            <TextInput\n                              name=\"search-input\"\n                              type=\"search\"\n                              aria-label={t(\"search\")}\n                              placeholder={t(\"users:searchForUser\")}\n                              onChange={(value) => {\n                                setSearchUser(value);\n                              }}\n                              onKeyDown={(e) => {\n                                if (e.key === \"Enter\") {\n                                  refresh();\n                                }\n                              }}\n                            />\n                            <Button\n                              variant={ButtonVariant.control}\n                              aria-label={t(\"common:search\")}\n                              onClick={refresh}\n                            >\n                              <SearchIcon />\n                            </Button>\n                          </InputGroup>\n                        </ToolbarItem>\n                        {toolbar}\n                      </ToolbarContent>\n                    </Toolbar>\n                    <EmptyState data-testid=\"empty-state\" variant=\"large\">\n                      <TextContent className=\"kc-search-users-text\">\n                        <Text>{t(\"searchForUserDescription\")}</Text>\n                      </TextContent>\n                    </EmptyState>\n                  </>\n                ) : (\n                  <ListEmptyState\n                    message={t(\"noUsersFound\")}\n                    instructions={t(\"emptyInstructions\")}\n                    primaryActionText={t(\"createNewUser\")}\n                    onPrimaryAction={goToCreate}\n                  />\n                )\n              }\n              toolbarItem={isManager ? toolbar : undefined}\n              actionResolver={(rowData: IRowData) => {\n                const user: UserRepresentation = rowData.data;\n                if (!user.access?.manage) return [];\n\n                return [\n                  {\n                    title: t(\"common:delete\"),\n                    onClick: () => {\n                      setSelectedRows([user]);\n                      toggleDeleteDialog();\n                    },\n                  },\n                ];\n              }}\n              columns={[\n                {\n                  name: \"username\",\n                  displayKey: \"users:username\",\n                  cellRenderer: UserDetailLink,\n                },\n                {\n                  name: \"email\",\n                  displayKey: \"users:email\",\n                  cellRenderer: ValidatedEmail,\n                },\n                {\n                  name: \"lastName\",\n                  displayKey: \"users:lastName\",\n                  cellFormatters: [emptyFormatter()],\n                },\n                {\n                  name: \"firstName\",\n                  displayKey: \"users:firstName\",\n                  cellFormatters: [emptyFormatter()],\n                },\n                {\n                  name: \"status\",\n                  displayKey: \"users:status\",\n                  cellRenderer: StatusRow,\n                },\n              ]}\n            />\n          </Tab>\n          {!profileInfo?.disabledFeatures?.includes(\n            \"ADMIN_FINE_GRAINED_AUTHZ\"\n          ) && (\n            <Tab\n              id=\"permissions\"\n              data-testid=\"permissionsTab\"\n              title={<TabTitleText>{t(\"common:permissions\")}</TabTitleText>}\n              {...permissionsTab}\n            >\n              <PermissionsTab type=\"users\" />\n            </Tab>\n          )}\n        </RoutableTabs>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["UsersSection","t","useTranslation","adminClient","useAdminClient","addAlert","addError","useAlerts","realm","realmName","useRealm","navigate","useNavigate","userStorage","setUserStorage","useState","searchUser","setSearchUser","setRealm","kebabOpen","setKebabOpen","selectedRows","setSelectedRows","profileInfo","useServerInfo","key","setKey","refresh","hasAccess","useAccess","isManager","useFetch","testParams","type","Promise","all","components","find","realms","findOne","storageProviders","useTab","tab","useRoutableTab","toUsers","listTab","permissionsTab","UserDetailLink","user","_jsx","Link","toUser","id","username","loader","first","max","search","params","searchParam","listUsers","findUsers","briefRepresentation","error","length","toggleUnlockUsersDialog","UnlockUsersConfirm","useConfirmDialog","titleKey","messageKey","continueButtonLabel","onConfirm","attackDetection","delAll","AlertVariant","success","toggleDeleteDialog","DeleteConfirm","count","continueButtonVariant","ButtonVariant","danger","users","del","StatusRow","_Fragment","enabled","Label","InfoCircleIcon","bruteForceStatus","disabled","WarningTriangleIcon","ValidatedEmail","emailVerified","Tooltip","ExclamationCircleIcon","emptyFormatter","email","goToCreate","toAddUser","KeycloakSpinner","toolbar","ToolbarItem","Button","bruteForceProtected","Dropdown","KebabToggle","open","DropdownItem","link","ViewHeader","helpUrls","usersUrl","PageSection","RoutableTabs","Tab","TabTitleText","KeycloakDataTable","rows","ListEmptyState","_jsxs","Toolbar","ToolbarContent","InputGroup","TextInput","value","e","control","SearchIcon","EmptyState","TextContent","Text","undefined","rowData","data","access","manage","title","onClick","name","displayKey","cellRenderer","cellFormatters","disabledFeatures","includes","PermissionsTab"],"mappings":"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"}