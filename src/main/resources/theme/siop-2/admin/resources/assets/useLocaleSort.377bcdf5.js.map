{"version":3,"file":"useLocaleSort.377bcdf5.js","sources":["../../src/utils/useLocaleSort.ts"],"sourcesContent":["import { useWhoAmI } from \"../context/whoami/WhoAmI\";\n\nexport type ValueMapperFn<T> = (item: T) => string | undefined;\n\nexport default function useLocaleSort() {\n  const { whoAmI } = useWhoAmI();\n\n  return function localeSort<T>(items: T[], mapperFn: ValueMapperFn<T>): T[] {\n    const locale = whoAmI.getLocale();\n\n    return [...items].sort((a, b) => {\n      const valA = mapperFn(a);\n      const valB = mapperFn(b);\n\n      if (valA === undefined || valB === undefined) {\n        return 0;\n      }\n\n      return valA.localeCompare(valB, locale);\n    });\n  };\n}\n\n// TODO: This might be built into TypeScript into future.\n// See: https://github.com/microsoft/TypeScript/issues/48992\ntype KeysMatching<T, V> = {\n  [K in keyof T]: T[K] extends V ? K : never;\n}[keyof T];\n\nexport const mapByKey =\n  <\n    T extends { [_ in K]?: string },\n    K extends KeysMatching<T, string | undefined>\n  >(\n    key: K\n  ) =>\n  (item: T) =>\n    item[key];\n"],"names":["useLocaleSort","whoAmI","useWhoAmI","items","mapperFn","locale","a","b","valA","valB","mapByKey","key","item"],"mappings":"wCAIA,SAAwBA,GAAgB,CAChC,KAAA,CAAE,OAAAC,GAAWC,IAEZ,OAAA,SAAuBC,EAAYC,EAAiC,CACnE,MAAAC,EAASJ,EAAO,YAEtB,MAAO,CAAC,GAAGE,CAAK,EAAE,KAAK,CAACG,EAAGC,IAAM,CACzB,MAAAC,EAAOJ,EAASE,CAAC,EACjBG,EAAOL,EAASG,CAAC,EAEnB,OAAAC,IAAS,QAAaC,IAAS,OAC1B,EAGFD,EAAK,cAAcC,EAAMJ,CAAM,CAAA,CACvC,CAAA,CAEL,CAQO,MAAMK,EAKTC,GAEDC,GACCA,EAAKD"}