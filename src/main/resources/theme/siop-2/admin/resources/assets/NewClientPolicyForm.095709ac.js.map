{"version":3,"file":"NewClientPolicyForm.095709ac.js","sources":["../../src/realm-settings/AddClientProfileModal.tsx","../../src/realm-settings/NewClientPolicyForm.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport { Button, Label, Modal, ModalVariant } from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { useFetch, useAdminClient } from \"../context/auth/AdminClient\";\nimport type RoleRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport { KeycloakDataTable } from \"../components/table-toolbar/KeycloakDataTable\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport type ClientProfileRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientProfileRepresentation\";\n\ntype ClientProfile = ClientProfileRepresentation & {\n  global: boolean;\n};\n\nexport type AddClientProfileModalProps = {\n  open: boolean;\n  toggleDialog: () => void;\n  onConfirm: (newReps: RoleRepresentation[]) => void;\n  allProfiles: string[];\n};\n\nexport const AddClientProfileModal = (props: AddClientProfileModalProps) => {\n  const { t } = useTranslation(\"roles\");\n  const { adminClient } = useAdminClient();\n  const [selectedRows, setSelectedRows] = useState<RoleRepresentation[]>([]);\n\n  const [tableProfiles, setTableProfiles] = useState<ClientProfile[]>();\n\n  useFetch(\n    () =>\n      adminClient.clientPolicies.listProfiles({\n        includeGlobalProfiles: true,\n      }),\n    (allProfiles) => {\n      const globalProfiles = allProfiles.globalProfiles?.map(\n        (globalProfiles) => ({\n          ...globalProfiles,\n          global: true,\n        })\n      );\n\n      const profiles = allProfiles.profiles?.map((profiles) => ({\n        ...profiles,\n        global: false,\n      }));\n\n      setTableProfiles([...(globalProfiles ?? []), ...(profiles ?? [])]);\n    },\n    []\n  );\n\n  const loader = async () =>\n    tableProfiles?.filter((item) => !props.allProfiles.includes(item.name!)) ??\n    [];\n\n  if (!tableProfiles) {\n    return <KeycloakSpinner />;\n  }\n\n  const AliasRenderer = ({ name, global }: ClientProfile) => (\n    <>\n      {name}{\" \"}\n      {global && <Label color=\"blue\">{t(\"realm-settings:global\")}</Label>}\n    </>\n  );\n\n  return (\n    <Modal\n      data-testid=\"addClientProfile\"\n      title={t(\"realm-settings:addClientProfile\")}\n      isOpen={props.open}\n      onClose={props.toggleDialog}\n      variant={ModalVariant.large}\n      actions={[\n        <Button\n          key=\"add\"\n          data-testid=\"add-client-profile-button\"\n          variant=\"primary\"\n          isDisabled={!selectedRows.length}\n          onClick={() => {\n            props.toggleDialog();\n            props.onConfirm(selectedRows);\n          }}\n        >\n          {t(\"common:add\")}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={() => {\n            props.toggleDialog();\n          }}\n        >\n          {t(\"common:cancel\")}\n        </Button>,\n      ]}\n    >\n      <KeycloakDataTable\n        loader={loader}\n        ariaLabelKey=\"realm-settings:profilesList\"\n        searchPlaceholderKey=\"realm-settings:searchProfile\"\n        canSelectAll\n        onSelect={(rows) => {\n          setSelectedRows([...rows]);\n        }}\n        columns={[\n          {\n            name: \"name\",\n            displayKey: \"realm-settings:clientProfileName\",\n            cellRenderer: AliasRenderer,\n          },\n          {\n            name: \"description\",\n            displayKey: \"common:description\",\n          },\n        ]}\n        emptyState={\n          <ListEmptyState\n            hasIcon\n            message={t(\"noRoles\")}\n            instructions={t(\"noRolesInstructions\")}\n            primaryActionText={t(\"createRole\")}\n          />\n        }\n      />\n    </Modal>\n  );\n};\n","import type ClientPolicyRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientPolicyRepresentation\";\nimport type ClientProfileRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientProfileRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  DataList,\n  DataListCell,\n  DataListItem,\n  DataListItemCells,\n  DataListItemRow,\n  Divider,\n  DropdownItem,\n  Flex,\n  FlexItem,\n  FormGroup,\n  PageSection,\n  Text,\n  TextVariants,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { PlusCircleIcon, TrashIcon } from \"@patternfly/react-icons\";\nimport { useState } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\n\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { FormAccess } from \"../components/form-access/FormAccess\";\nimport { HelpItem } from \"../components/help-enabler/HelpItem\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport { KeycloakTextArea } from \"../components/keycloak-text-area/KeycloakTextArea\";\nimport { KeycloakTextInput } from \"../components/keycloak-text-input/KeycloakTextInput\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useAdminClient, useFetch } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../context/server-info/ServerInfoProvider\";\nimport { useParams } from \"../utils/useParams\";\nimport { AddClientProfileModal } from \"./AddClientProfileModal\";\nimport { toNewClientPolicyCondition } from \"./routes/AddCondition\";\nimport { toClientPolicies } from \"./routes/ClientPolicies\";\nimport { toClientProfile } from \"./routes/ClientProfile\";\nimport {\n  EditClientPolicyParams,\n  toEditClientPolicy,\n} from \"./routes/EditClientPolicy\";\nimport { toEditClientPolicyCondition } from \"./routes/EditCondition\";\n\nimport \"./realm-settings-section.css\";\n\ntype NewClientPolicyForm = Required<ClientPolicyRepresentation>;\n\nconst defaultValues: NewClientPolicyForm = {\n  name: \"\",\n  description: \"\",\n  conditions: [],\n  enabled: true,\n  profiles: [],\n};\n\ntype PolicyDetailAttributes = {\n  idx: number;\n  name: string;\n};\n\nexport default function NewClientPolicyForm() {\n  const { t } = useTranslation(\"realm-settings\");\n  const { realm } = useRealm();\n  const { addAlert, addError } = useAlerts();\n  const { adminClient } = useAdminClient();\n  const [policies, setPolicies] = useState<ClientPolicyRepresentation[]>();\n  const [clientProfiles, setClientProfiles] = useState<\n    ClientProfileRepresentation[]\n  >([]);\n\n  const [currentPolicy, setCurrentPolicy] =\n    useState<ClientPolicyRepresentation>();\n  const [\n    showAddConditionsAndProfilesForm,\n    setShowAddConditionsAndProfilesForm,\n  ] = useState(false);\n\n  const [conditionToDelete, setConditionToDelete] =\n    useState<PolicyDetailAttributes>();\n\n  const [profilesModalOpen, setProfilesModalOpen] = useState(false);\n\n  const [profileToDelete, setProfileToDelete] =\n    useState<PolicyDetailAttributes>();\n\n  const { policyName } = useParams<EditClientPolicyParams>();\n\n  const navigate = useNavigate();\n  const form = useForm<NewClientPolicyForm>({\n    mode: \"onChange\",\n    defaultValues,\n  });\n  const { handleSubmit } = form;\n\n  const formValues = form.getValues();\n\n  type ClientPoliciesHeaderProps = {\n    onChange: (value: boolean) => void;\n    value: boolean;\n    save: () => void;\n    realmName: string;\n  };\n\n  const ClientPoliciesHeader = ({\n    save,\n    onChange,\n    value,\n  }: ClientPoliciesHeaderProps) => {\n    const { t } = useTranslation(\"realm-settings\");\n\n    const [toggleDisableDialog, DisableConfirm] = useConfirmDialog({\n      titleKey: \"realm-settings:disablePolicyConfirmTitle\",\n      messageKey: \"realm-settings:disablePolicyConfirm\",\n      continueButtonLabel: \"common:disable\",\n      onConfirm: () => {\n        onChange(!value);\n        save();\n      },\n    });\n\n    if (!policies) {\n      return <KeycloakSpinner />;\n    }\n\n    return (\n      <>\n        <DisableConfirm />\n        <DeleteConfirm />\n        <ViewHeader\n          titleKey={\n            showAddConditionsAndProfilesForm || policyName\n              ? policyName\n              : \"realm-settings:createPolicy\"\n          }\n          divider\n          dropdownItems={\n            showAddConditionsAndProfilesForm || policyName\n              ? [\n                  <DropdownItem\n                    key=\"delete\"\n                    value=\"delete\"\n                    onClick={() => {\n                      toggleDeleteDialog();\n                    }}\n                    data-testid=\"deleteClientPolicyDropdown\"\n                  >\n                    {t(\"deleteClientPolicy\")}\n                  </DropdownItem>,\n                ]\n              : undefined\n          }\n          isEnabled={value}\n          onToggle={(value) => {\n            if (!value) {\n              toggleDisableDialog();\n            } else {\n              onChange(value);\n              save();\n            }\n          }}\n        />\n      </>\n    );\n  };\n\n  useFetch(\n    async () => {\n      const [policies, profiles] = await Promise.all([\n        adminClient.clientPolicies.listPolicies(),\n        adminClient.clientPolicies.listProfiles({\n          includeGlobalProfiles: true,\n        }),\n      ]);\n\n      return { policies, profiles };\n    },\n    ({ policies, profiles }) => {\n      const currentPolicy = policies.policies?.find(\n        (item) => item.name === policyName\n      );\n\n      const allClientProfiles = [\n        ...(profiles.globalProfiles ?? []),\n        ...(profiles.profiles ?? []),\n      ];\n\n      setPolicies(policies.policies ?? []);\n      if (currentPolicy) {\n        setupForm(currentPolicy);\n        setClientProfiles(allClientProfiles);\n        setCurrentPolicy(currentPolicy);\n        setShowAddConditionsAndProfilesForm(true);\n      }\n    },\n    []\n  );\n\n  const setupForm = (policy: ClientPolicyRepresentation) => {\n    form.reset(policy);\n  };\n\n  const policy = (policies || []).filter(\n    (policy) => policy.name === policyName\n  );\n  const policyConditions = policy[0]?.conditions || [];\n  const policyProfiles = policy[0]?.profiles || [];\n\n  const serverInfo = useServerInfo();\n\n  const conditionTypes =\n    serverInfo.componentTypes?.[\n      \"org.keycloak.services.clientpolicy.condition.ClientPolicyConditionProvider\"\n    ];\n\n  const save = async () => {\n    const createdForm = form.getValues();\n    const createdPolicy = {\n      ...createdForm,\n      profiles: [],\n      conditions: [],\n    };\n\n    const getAllPolicies = () => {\n      const policyNameExists = policies?.some(\n        (policy) => policy.name === createdPolicy.name\n      );\n\n      if (policyNameExists) {\n        return policies?.map((policy) =>\n          policy.name === createdPolicy.name ? createdPolicy : policy\n        );\n      } else if (createdForm.name !== policyName) {\n        return policies\n          ?.filter((item) => item.name !== policyName)\n          .concat(createdForm);\n      }\n      return policies?.concat(createdForm);\n    };\n\n    try {\n      await adminClient.clientPolicies.updatePolicy({\n        policies: getAllPolicies(),\n      });\n      addAlert(\n        policyName\n          ? t(\"realm-settings:updateClientPolicySuccess\")\n          : t(\"realm-settings:createClientPolicySuccess\"),\n        AlertVariant.success\n      );\n      navigate(toEditClientPolicy({ realm, policyName: createdForm.name! }));\n      setShowAddConditionsAndProfilesForm(true);\n    } catch (error) {\n      addError(\"realm-settings:createClientPolicyError\", error);\n    }\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: t(\"deleteClientPolicyConfirmTitle\"),\n    messageKey: t(\"deleteClientPolicyConfirm\", {\n      policyName: policyName,\n    }),\n    continueButtonLabel: t(\"delete\"),\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      const updatedPolicies = policies?.filter(\n        (policy) => policy.name !== policyName\n      );\n\n      try {\n        await adminClient.clientPolicies.updatePolicy({\n          policies: updatedPolicies,\n        });\n        addAlert(t(\"deleteClientPolicySuccess\"), AlertVariant.success);\n        navigate(\n          toClientPolicies({\n            realm,\n            tab: \"policies\",\n          })\n        );\n      } catch (error) {\n        addError(t(\"deleteClientPolicyError\"), error);\n      }\n    },\n  });\n\n  const [toggleDeleteConditionDialog, DeleteConditionConfirm] =\n    useConfirmDialog({\n      titleKey: t(\"deleteClientPolicyConditionConfirmTitle\"),\n      messageKey: t(\"deleteClientPolicyConditionConfirm\", {\n        condition: conditionToDelete?.name,\n      }),\n      continueButtonLabel: t(\"delete\"),\n      continueButtonVariant: ButtonVariant.danger,\n      onConfirm: async () => {\n        if (conditionToDelete?.name) {\n          currentPolicy?.conditions?.splice(conditionToDelete.idx!, 1);\n          try {\n            await adminClient.clientPolicies.updatePolicy({\n              policies: policies,\n            });\n            addAlert(t(\"deleteConditionSuccess\"), AlertVariant.success);\n            navigate(\n              toEditClientPolicy({ realm, policyName: formValues.name! })\n            );\n          } catch (error) {\n            addError(t(\"deleteConditionError\"), error);\n          }\n        } else {\n          const updatedPolicies = policies?.filter(\n            (policy) => policy.name !== policyName\n          );\n\n          try {\n            await adminClient.clientPolicies.updatePolicy({\n              policies: updatedPolicies,\n            });\n            addAlert(t(\"deleteClientSuccess\"), AlertVariant.success);\n            navigate(\n              toClientPolicies({\n                realm,\n                tab: \"policies\",\n              })\n            );\n          } catch (error) {\n            addError(t(\"deleteClientError\"), error);\n          }\n        }\n      },\n    });\n\n  const [toggleDeleteProfileDialog, DeleteProfileConfirm] = useConfirmDialog({\n    titleKey: t(\"deleteClientPolicyProfileConfirmTitle\"),\n    messageKey: t(\"deleteClientPolicyProfileConfirm\", {\n      profileName: profileToDelete?.name,\n      policyName,\n    }),\n    continueButtonLabel: t(\"delete\"),\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      if (profileToDelete?.name) {\n        currentPolicy?.profiles?.splice(profileToDelete.idx!, 1);\n        try {\n          await adminClient.clientPolicies.updatePolicy({\n            policies: policies,\n          });\n          addAlert(t(\"deleteClientPolicyProfileSuccess\"), AlertVariant.success);\n          navigate(toEditClientPolicy({ realm, policyName: formValues.name! }));\n        } catch (error) {\n          addError(t(\"deleteClientPolicyProfileError\"), error);\n        }\n      } else {\n        const updatedPolicies = policies?.filter(\n          (policy) => policy.name !== policyName\n        );\n\n        try {\n          await adminClient.clientPolicies.updatePolicy({\n            policies: updatedPolicies,\n          });\n          addAlert(t(\"deleteClientSuccess\"), AlertVariant.success);\n          navigate(\n            toClientPolicies({\n              realm,\n              tab: \"policies\",\n            })\n          );\n        } catch (error) {\n          addError(t(\"deleteClientError\"), error);\n        }\n      }\n    },\n  });\n\n  const reset = () => {\n    if (currentPolicy?.name !== undefined) {\n      form.setValue(\"name\", currentPolicy.name);\n    }\n\n    if (currentPolicy?.description !== undefined) {\n      form.setValue(\"description\", currentPolicy.description);\n    }\n  };\n\n  const toggleModal = () => {\n    setProfilesModalOpen(!profilesModalOpen);\n  };\n\n  const addProfiles = async (profiles: string[]) => {\n    const createdPolicy = {\n      ...currentPolicy,\n      profiles: policyProfiles.concat(profiles),\n      conditions: currentPolicy?.conditions,\n    };\n\n    const index = policies?.findIndex(\n      (policy) => createdPolicy.name === policy.name\n    );\n\n    if (index === undefined || index === -1) {\n      return;\n    }\n\n    const newPolicies = [\n      ...(policies || []).slice(0, index),\n      createdPolicy,\n      ...(policies || []).slice(index + 1),\n    ];\n\n    try {\n      await adminClient.clientPolicies.updatePolicy({\n        policies: newPolicies,\n      });\n      setPolicies(newPolicies);\n      navigate(toEditClientPolicy({ realm, policyName: formValues.name! }));\n      addAlert(\n        t(\"realm-settings:addClientProfileSuccess\"),\n        AlertVariant.success\n      );\n    } catch (error) {\n      addError(\"realm-settings:addClientProfileError\", error);\n    }\n  };\n\n  return (\n    <>\n      <DeleteConditionConfirm />\n      <DeleteProfileConfirm />\n      <AddClientProfileModal\n        onConfirm={(profiles: ClientProfileRepresentation[]) => {\n          addProfiles(profiles.map((item) => item.name!));\n        }}\n        allProfiles={policyProfiles}\n        open={profilesModalOpen}\n        toggleDialog={toggleModal}\n      />\n      <Controller\n        name=\"enabled\"\n        defaultValue={true}\n        control={form.control}\n        render={({ field }) => (\n          <ClientPoliciesHeader\n            value={field.value}\n            onChange={field.onChange}\n            realmName={realm}\n            save={save}\n          />\n        )}\n      />\n      <PageSection variant=\"light\">\n        <FormAccess\n          onSubmit={handleSubmit(save)}\n          isHorizontal\n          role=\"view-realm\"\n          className=\"pf-u-mt-lg\"\n        >\n          <FormGroup\n            label={t(\"common:name\")}\n            fieldId=\"kc-client-profile-name\"\n            isRequired\n            helperTextInvalid={form.formState.errors.name?.message}\n            validated={\n              form.formState.errors.name\n                ? ValidatedOptions.error\n                : ValidatedOptions.default\n            }\n          >\n            <KeycloakTextInput\n              id=\"kc-client-profile-name\"\n              data-testid=\"client-policy-name\"\n              validated={\n                form.formState.errors.name\n                  ? ValidatedOptions.error\n                  : ValidatedOptions.default\n              }\n              {...form.register(\"name\", {\n                required: { value: true, message: t(\"common:required\") },\n                validate: (value) =>\n                  policies?.some((policy) => policy.name === value)\n                    ? t(\"createClientProfileNameHelperText\").toString()\n                    : true,\n              })}\n            />\n          </FormGroup>\n          <FormGroup label={t(\"common:description\")} fieldId=\"kc-description\">\n            <KeycloakTextArea\n              aria-label={t(\"description\")}\n              id=\"kc-client-policy-description\"\n              data-testid=\"client-policy-description\"\n              {...form.register(\"description\")}\n            />\n          </FormGroup>\n          <ActionGroup>\n            <Button\n              variant=\"primary\"\n              type=\"submit\"\n              data-testid=\"saveCreatePolicy\"\n              isDisabled={!form.formState.isValid}\n            >\n              {t(\"common:save\")}\n            </Button>\n            <Button\n              id=\"cancelCreatePolicy\"\n              variant=\"link\"\n              onClick={() =>\n                showAddConditionsAndProfilesForm || policyName\n                  ? reset()\n                  : navigate(\n                      toClientPolicies({\n                        realm,\n                        tab: \"policies\",\n                      })\n                    )\n              }\n              data-testid=\"cancelCreatePolicy\"\n            >\n              {showAddConditionsAndProfilesForm\n                ? t(\"common:reload\")\n                : t(\"common:cancel\")}\n            </Button>\n          </ActionGroup>\n          {(showAddConditionsAndProfilesForm || form.formState.isSubmitted) && (\n            <>\n              <Flex>\n                <FlexItem>\n                  <Text className=\"kc-conditions\" component={TextVariants.h1}>\n                    {t(\"conditions\")}\n                    <HelpItem\n                      helpText=\"realm-settings-help:conditions\"\n                      fieldLabelId=\"realm-settings:conditions\"\n                    />\n                  </Text>\n                </FlexItem>\n                <FlexItem align={{ default: \"alignRight\" }}>\n                  <Button\n                    id=\"addCondition\"\n                    component={(props) => (\n                      <Link\n                        {...props}\n                        to={toNewClientPolicyCondition({\n                          realm,\n                          policyName: policyName!,\n                        })}\n                      ></Link>\n                    )}\n                    variant=\"link\"\n                    className=\"kc-addCondition\"\n                    data-testid=\"addCondition\"\n                    icon={<PlusCircleIcon />}\n                  >\n                    {t(\"realm-settings:addCondition\")}\n                  </Button>\n                </FlexItem>\n              </Flex>\n              {policyConditions.length > 0 ? (\n                <DataList aria-label={t(\"conditions\")} isCompact>\n                  {policyConditions.map((condition, idx) => (\n                    <DataListItem\n                      aria-labelledby=\"conditions-list-item\"\n                      key={`list-item-${idx}`}\n                      id={condition.condition}\n                      data-testid=\"conditions-list-item\"\n                    >\n                      <DataListItemRow data-testid=\"conditions-list-row\">\n                        <DataListItemCells\n                          dataListCells={[\n                            <DataListCell\n                              key={`name-${idx}`}\n                              data-testid=\"condition-type\"\n                            >\n                              {Object.keys(condition.configuration!).length !==\n                              0 ? (\n                                <Link\n                                  key={condition.condition}\n                                  data-testid={`${condition.condition}-condition-link`}\n                                  to={toEditClientPolicyCondition({\n                                    realm,\n                                    conditionName: condition.condition!,\n                                    policyName: policyName,\n                                  })}\n                                  className=\"kc-condition-link\"\n                                >\n                                  {condition.condition}\n                                </Link>\n                              ) : (\n                                condition.condition\n                              )}\n                              {conditionTypes?.map(\n                                (type) =>\n                                  type.id === condition.condition && (\n                                    <>\n                                      <HelpItem\n                                        helpText={type.helpText}\n                                        fieldLabelId={condition.condition}\n                                      />\n                                      <Button\n                                        variant=\"link\"\n                                        isInline\n                                        icon={\n                                          <TrashIcon\n                                            className=\"kc-conditionType-trash-icon\"\n                                            data-testid={`delete-${condition.condition}-condition`}\n                                            onClick={() => {\n                                              toggleDeleteConditionDialog();\n                                              setConditionToDelete({\n                                                idx: idx,\n                                                name: type.id!,\n                                              });\n                                            }}\n                                          />\n                                        }\n                                      ></Button>\n                                    </>\n                                  )\n                              )}\n                            </DataListCell>,\n                          ]}\n                        />\n                      </DataListItemRow>\n                    </DataListItem>\n                  ))}\n                </DataList>\n              ) : (\n                <>\n                  <Divider />\n                  <Text\n                    className=\"kc-emptyConditions\"\n                    component={TextVariants.h6}\n                  >\n                    {t(\"realm-settings:emptyConditions\")}\n                  </Text>\n                </>\n              )}\n            </>\n          )}\n          {(showAddConditionsAndProfilesForm || form.formState.isSubmitted) && (\n            <>\n              <Flex>\n                <FlexItem>\n                  <Text\n                    className=\"kc-client-profiles\"\n                    component={TextVariants.h1}\n                  >\n                    {t(\"clientProfiles\")}\n                    <HelpItem\n                      helpText=\"realm-settings-help:clientProfiles\"\n                      fieldLabelId=\"realm-settings:clientProfiles\"\n                    />\n                  </Text>\n                </FlexItem>\n                <FlexItem align={{ default: \"alignRight\" }}>\n                  <Button\n                    id=\"addClientProfile\"\n                    variant=\"link\"\n                    className=\"kc-addClientProfile\"\n                    data-testid=\"addClientProfile\"\n                    icon={<PlusCircleIcon />}\n                    onClick={toggleModal}\n                  >\n                    {t(\"realm-settings:addClientProfile\")}\n                  </Button>\n                </FlexItem>\n              </Flex>\n              {policyProfiles.length > 0 ? (\n                <DataList aria-label={t(\"profiles\")} isCompact>\n                  {policyProfiles.map((profile, idx) => (\n                    <DataListItem\n                      aria-labelledby={`${profile}-profile-list-item`}\n                      key={profile}\n                      id={`${profile}-profile-list-item`}\n                      data-testid={\"profile-list-item\"}\n                    >\n                      <DataListItemRow data-testid=\"profile-list-row\">\n                        <DataListItemCells\n                          dataListCells={[\n                            <DataListCell key=\"name\" data-testid=\"profile-name\">\n                              {profile && (\n                                <Link\n                                  key={profile}\n                                  data-testid=\"profile-name-link\"\n                                  to={toClientProfile({\n                                    realm,\n                                    profileName: profile,\n                                  })}\n                                  className=\"kc-profile-link\"\n                                >\n                                  {profile}\n                                </Link>\n                              )}\n                              {policyProfiles\n                                .filter((type) => type === profile)\n                                .map((type) => (\n                                  <>\n                                    <HelpItem\n                                      helpText={\n                                        clientProfiles.find(\n                                          (profile) => type === profile.name\n                                        )?.description\n                                      }\n                                      fieldLabelId={profile}\n                                    />\n                                    <Button\n                                      variant=\"link\"\n                                      isInline\n                                      icon={\n                                        <TrashIcon\n                                          className=\"kc-conditionType-trash-icon\"\n                                          data-testid=\"deleteClientProfileDropdown\"\n                                          onClick={() => {\n                                            toggleDeleteProfileDialog();\n                                            setProfileToDelete({\n                                              idx: idx,\n                                              name: type!,\n                                            });\n                                          }}\n                                        />\n                                      }\n                                    ></Button>\n                                  </>\n                                ))}\n                            </DataListCell>,\n                          ]}\n                        />\n                      </DataListItemRow>\n                    </DataListItem>\n                  ))}\n                </DataList>\n              ) : (\n                <>\n                  <Divider />\n                  <Text\n                    className=\"kc-emptyClientProfiles\"\n                    component={TextVariants.h6}\n                  >\n                    {t(\"realm-settings:emptyProfiles\")}\n                  </Text>\n                </>\n              )}\n            </>\n          )}\n        </FormAccess>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["AddClientProfileModal","props","t","useTranslation","adminClient","useAdminClient","selectedRows","setSelectedRows","useState","tableProfiles","setTableProfiles","useFetch","clientPolicies","listProfiles","includeGlobalProfiles","allProfiles","globalProfiles","map","global","profiles","loader","filter","item","includes","name","_jsx","KeycloakSpinner","AliasRenderer","_Fragment","Label","Modal","open","toggleDialog","ModalVariant","large","Button","length","onConfirm","KeycloakDataTable","rows","displayKey","cellRenderer","ListEmptyState","defaultValues","description","conditions","enabled","NewClientPolicyForm","realm","useRealm","addAlert","addError","useAlerts","policies","setPolicies","clientProfiles","setClientProfiles","currentPolicy","setCurrentPolicy","showAddConditionsAndProfilesForm","setShowAddConditionsAndProfilesForm","conditionToDelete","setConditionToDelete","profilesModalOpen","setProfilesModalOpen","profileToDelete","setProfileToDelete","policyName","useParams","navigate","useNavigate","form","useForm","mode","handleSubmit","formValues","getValues","ClientPoliciesHeader","save","onChange","value","toggleDisableDialog","DisableConfirm","useConfirmDialog","titleKey","messageKey","continueButtonLabel","DeleteConfirm","ViewHeader","DropdownItem","toggleDeleteDialog","undefined","Promise","all","listPolicies","find","allClientProfiles","setupForm","policy","reset","policyConditions","policyProfiles","conditionTypes","useServerInfo","componentTypes","createdForm","createdPolicy","getAllPolicies","some","concat","updatePolicy","AlertVariant","success","toEditClientPolicy","error","continueButtonVariant","ButtonVariant","danger","updatedPolicies","toClientPolicies","tab","toggleDeleteConditionDialog","DeleteConditionConfirm","condition","splice","idx","toggleDeleteProfileDialog","DeleteProfileConfirm","profileName","setValue","toggleModal","addProfiles","index","findIndex","newPolicies","slice","Controller","control","field","PageSection","FormAccess","FormGroup","formState","errors","message","ValidatedOptions","default","KeycloakTextInput","register","required","validate","toString","KeycloakTextArea","_jsxs","ActionGroup","isValid","isSubmitted","Flex","FlexItem","Text","TextVariants","h1","HelpItem","Link","toNewClientPolicyCondition","PlusCircleIcon","DataList","DataListItem","DataListItemRow","DataListItemCells","DataListCell","Object","keys","configuration","toEditClientPolicyCondition","conditionName","type","id","helpText","TrashIcon","Divider","h6","profile","toClientProfile"],"mappings":"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"}