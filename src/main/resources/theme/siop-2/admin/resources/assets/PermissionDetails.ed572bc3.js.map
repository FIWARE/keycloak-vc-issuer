{"version":3,"file":"PermissionDetails.ed572bc3.js","sources":["../../src/clients/authorization/ScopeSelect.tsx","../../src/clients/authorization/PermissionDetails.tsx"],"sourcesContent":["import { useRef, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { Select, SelectOption, SelectVariant } from \"@patternfly/react-core\";\n\nimport type ScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/scopeRepresentation\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\n\ntype ScopeSelectProps = {\n  clientId: string;\n  resourceId?: string;\n  preSelected?: string;\n};\n\nexport const ScopeSelect = ({\n  clientId,\n  resourceId,\n  preSelected,\n}: ScopeSelectProps) => {\n  const { t } = useTranslation(\"clients\");\n  const { adminClient } = useAdminClient();\n\n  const {\n    control,\n    getValues,\n    setValue,\n    formState: { errors },\n  } = useFormContext();\n\n  const [scopes, setScopes] = useState<ScopeRepresentation[]>([]);\n  const [selectedScopes, setSelectedScopes] = useState<ScopeRepresentation[]>(\n    []\n  );\n  const [search, setSearch] = useState(\"\");\n  const [open, setOpen] = useState(false);\n  const firstUpdate = useRef(true);\n\n  const values: string[] | undefined = getValues(\"scopes\");\n\n  const toSelectOptions = (scopes: ScopeRepresentation[]) =>\n    scopes.map((scope) => (\n      <SelectOption key={scope.id} value={scope}>\n        {scope.name}\n      </SelectOption>\n    ));\n\n  useFetch(\n    async (): Promise<ScopeRepresentation[]> => {\n      if (!resourceId) {\n        return adminClient.clients.listAllScopes(\n          Object.assign(\n            { id: clientId, deep: false },\n            search === \"\" ? null : { name: search }\n          )\n        );\n      }\n\n      if (resourceId && !firstUpdate.current) {\n        setValue(\"scopes\", []);\n      }\n\n      firstUpdate.current = false;\n      return adminClient.clients.listScopesByResource({\n        id: clientId,\n        resourceName: resourceId,\n      });\n    },\n    (scopes) => {\n      setScopes(scopes);\n      if (!search)\n        setSelectedScopes(\n          scopes.filter((s: ScopeRepresentation) => values?.includes(s.id!))\n        );\n    },\n    [resourceId, search]\n  );\n\n  return (\n    <Controller\n      name=\"scopes\"\n      defaultValue={preSelected ? [preSelected] : []}\n      control={control}\n      rules={{ validate: (value) => value.length > 0 }}\n      render={({ field }) => (\n        <Select\n          toggleId=\"scopes\"\n          variant={SelectVariant.typeaheadMulti}\n          onToggle={setOpen}\n          onFilter={(_, filter) => {\n            setSearch(filter);\n            return toSelectOptions(scopes);\n          }}\n          onClear={() => {\n            field.onChange([]);\n            setSearch(\"\");\n          }}\n          selections={selectedScopes.map((s) => s.name)}\n          onSelect={(_, selectedValue) => {\n            const option =\n              typeof selectedValue === \"string\"\n                ? selectedScopes.find((s) => s.name === selectedValue)!\n                : (selectedValue as ScopeRepresentation);\n            const changedValue = selectedScopes.find((p) => p.id === option.id)\n              ? selectedScopes.filter((p) => p.id !== option.id)\n              : [...selectedScopes, option];\n\n            field.onChange(changedValue.map((s) => s.id));\n            setSelectedScopes(changedValue);\n            setSearch(\"\");\n          }}\n          isOpen={open}\n          aria-labelledby={t(\"scopes\")}\n          validated={errors.scopes ? \"error\" : \"default\"}\n          isDisabled={!!preSelected}\n          typeAheadAriaLabel={t(\"scopes\")}\n        >\n          {toSelectOptions(scopes)}\n        </Select>\n      )}\n    />\n  );\n};\n","import type PolicyRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyRepresentation\";\nimport { DecisionStrategy } from \"@keycloak/keycloak-admin-client/lib/defs/policyRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  DropdownItem,\n  FormGroup,\n  PageSection,\n  Radio,\n  SelectVariant,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, FormProvider, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\n\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport { KeycloakTextArea } from \"../../components/keycloak-text-area/KeycloakTextArea\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { ViewHeader } from \"../../components/view-header/ViewHeader\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { toUpperCase } from \"../../util\";\nimport { useParams } from \"../../utils/useParams\";\nimport { toAuthorizationTab } from \"../routes/AuthenticationTab\";\nimport type { NewPermissionParams } from \"../routes/NewPermission\";\nimport {\n  PermissionDetailsParams,\n  toPermissionDetails,\n} from \"../routes/PermissionDetails\";\nimport { ResourcesPolicySelect } from \"./ResourcesPolicySelect\";\nimport { ScopeSelect } from \"./ScopeSelect\";\n\ntype FormFields = PolicyRepresentation & {\n  resourceType: string;\n};\n\nexport default function PermissionDetails() {\n  const { t } = useTranslation(\"clients\");\n\n  const form = useForm<FormFields>({\n    mode: \"onChange\",\n  });\n  const {\n    register,\n    control,\n    reset,\n    formState: { errors },\n    handleSubmit,\n  } = form;\n\n  const navigate = useNavigate();\n  const { id, realm, permissionType, permissionId, selectedId } = useParams<\n    NewPermissionParams & PermissionDetailsParams\n  >();\n\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const [permission, setPermission] = useState<PolicyRepresentation>();\n  const [applyToResourceTypeFlag, setApplyToResourceTypeFlag] = useState(false);\n\n  useFetch(\n    async () => {\n      if (!permissionId) {\n        return {};\n      }\n      const [permission, resources, policies, scopes] = await Promise.all([\n        adminClient.clients.findOnePermission({\n          id,\n          type: permissionType,\n          permissionId,\n        }),\n        adminClient.clients.getAssociatedResources({\n          id,\n          permissionId,\n        }),\n        adminClient.clients.getAssociatedPolicies({\n          id,\n          permissionId,\n        }),\n        adminClient.clients.getAssociatedScopes({\n          id,\n          permissionId,\n        }),\n      ]);\n\n      if (!permission) {\n        throw new Error(t(\"common:notFound\"));\n      }\n\n      return {\n        permission,\n        resources: resources.map((r) => r._id),\n        policies: policies.map((p) => p.id!),\n        scopes: scopes.map((s) => s.id!),\n      };\n    },\n    ({ permission, resources, policies, scopes }) => {\n      reset({ ...permission, resources, policies, scopes });\n      if (permission && \"resourceType\" in permission) {\n        setApplyToResourceTypeFlag(\n          !!(permission as { resourceType: string }).resourceType\n        );\n      }\n      setPermission({ ...permission, resources, policies });\n    },\n    []\n  );\n\n  const save = async (permission: PolicyRepresentation) => {\n    try {\n      if (permissionId) {\n        await adminClient.clients.updatePermission(\n          { id, type: permissionType, permissionId },\n          permission\n        );\n      } else {\n        const result = await adminClient.clients.createPermission(\n          { id, type: permissionType },\n          permission\n        );\n        navigate(\n          toPermissionDetails({\n            realm,\n            id,\n            permissionType,\n            permissionId: result.id!,\n          })\n        );\n      }\n      addAlert(\n        t((permissionId ? \"update\" : \"create\") + \"PermissionSuccess\"),\n        AlertVariant.success\n      );\n    } catch (error) {\n      addError(\"clients:permissionSaveError\", error);\n    }\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"clients:deletePermission\",\n    messageKey: t(\"deletePermissionConfirm\", {\n      permission: permission?.name,\n    }),\n    continueButtonVariant: ButtonVariant.danger,\n    continueButtonLabel: \"clients:confirm\",\n    onConfirm: async () => {\n      try {\n        await adminClient.clients.delPermission({\n          id,\n          type: permissionType,\n          permissionId: permissionId,\n        });\n        addAlert(t(\"permissionDeletedSuccess\"), AlertVariant.success);\n        navigate(\n          toAuthorizationTab({ realm, clientId: id, tab: \"permissions\" })\n        );\n      } catch (error) {\n        addError(\"clients:permissionDeletedError\", error);\n      }\n    },\n  });\n\n  const resourcesIds = useWatch({\n    control,\n    name: \"resources\",\n    defaultValue: [],\n  });\n\n  if (!permission) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <>\n      <DeleteConfirm />\n      <ViewHeader\n        titleKey={\n          permissionId\n            ? permission.name!\n            : `clients:create${toUpperCase(permissionType)}BasedPermission`\n        }\n        dropdownItems={\n          permissionId\n            ? [\n                <DropdownItem\n                  key=\"delete\"\n                  data-testid=\"delete-resource\"\n                  onClick={() => toggleDeleteDialog()}\n                >\n                  {t(\"common:delete\")}\n                </DropdownItem>,\n              ]\n            : undefined\n        }\n      />\n      <PageSection variant=\"light\">\n        <FormAccess\n          isHorizontal\n          role=\"view-clients\"\n          onSubmit={handleSubmit(save)}\n        >\n          <FormProvider {...form}>\n            <FormGroup\n              label={t(\"common:name\")}\n              isRequired\n              helperTextInvalid={t(\"common:required\")}\n              validated={errors.name ? \"error\" : \"default\"}\n              fieldId=\"name\"\n              labelIcon={\n                <HelpItem\n                  helpText=\"clients-help:permissionName\"\n                  fieldLabelId=\"name\"\n                />\n              }\n            >\n              <KeycloakTextInput\n                id=\"name\"\n                validated={errors.name ? \"error\" : \"default\"}\n                {...register(\"name\", { required: true })}\n              />\n            </FormGroup>\n            <FormGroup\n              label={t(\"common:description\")}\n              fieldId=\"description\"\n              labelIcon={\n                <HelpItem\n                  helpText=\"clients-help:permissionDescription\"\n                  fieldLabelId=\"description\"\n                />\n              }\n              validated={errors.description ? \"error\" : \"default\"}\n              helperTextInvalid={errors.description?.message}\n            >\n              <KeycloakTextArea\n                id=\"description\"\n                validated={errors.description ? \"error\" : \"default\"}\n                {...register(\"description\", {\n                  maxLength: {\n                    value: 255,\n                    message: t(\"common:maxLength\", { length: 255 }),\n                  },\n                })}\n              />\n            </FormGroup>\n            <FormGroup\n              label={t(\"applyToResourceTypeFlag\")}\n              fieldId=\"applyToResourceTypeFlag\"\n              labelIcon={\n                <HelpItem\n                  helpText=\"clients-help:applyToResourceTypeFlag\"\n                  fieldLabelId=\"clients:applyToResourceTypeFlag\"\n                />\n              }\n            >\n              <Switch\n                id=\"applyToResourceTypeFlag\"\n                name=\"applyToResourceTypeFlag\"\n                label={t(\"common:on\")}\n                labelOff={t(\"common:off\")}\n                isChecked={applyToResourceTypeFlag}\n                onChange={setApplyToResourceTypeFlag}\n                aria-label={t(\"applyToResourceTypeFlag\")}\n              />\n            </FormGroup>\n            {applyToResourceTypeFlag ? (\n              <FormGroup\n                label={t(\"resourceType\")}\n                fieldId=\"name\"\n                labelIcon={\n                  <HelpItem\n                    helpText=\"clients-help:resourceType\"\n                    fieldLabelId=\"resourceType\"\n                  />\n                }\n                isRequired={permissionType === \"scope\"}\n              >\n                <KeycloakTextInput\n                  id=\"resourceType\"\n                  {...register(\"resourceType\", {\n                    required: permissionType === \"scope\",\n                  })}\n                />\n              </FormGroup>\n            ) : (\n              <FormGroup\n                label={t(\"resources\")}\n                fieldId=\"resources\"\n                labelIcon={\n                  <HelpItem\n                    helpText=\"clients-help:permissionResources\"\n                    fieldLabelId=\"clients:resources\"\n                  />\n                }\n                helperTextInvalid={t(\"common:required\")}\n                validated={errors.resources ? \"error\" : \"default\"}\n                isRequired={permissionType !== \"scope\"}\n              >\n                <ResourcesPolicySelect\n                  name=\"resources\"\n                  clientId={id}\n                  permissionId={permissionId}\n                  preSelected={\n                    permissionType === \"scope\" ? undefined : selectedId\n                  }\n                  variant={\n                    permissionType === \"scope\"\n                      ? SelectVariant.typeahead\n                      : SelectVariant.typeaheadMulti\n                  }\n                  isRequired={permissionType !== \"scope\"}\n                />\n              </FormGroup>\n            )}\n            {permissionType === \"scope\" && (\n              <FormGroup\n                label={t(\"authorizationScopes\")}\n                fieldId=\"scopes\"\n                labelIcon={\n                  <HelpItem\n                    helpText=\"clients-help:permissionScopes\"\n                    fieldLabelId=\"clients:scopesSelect\"\n                  />\n                }\n                helperTextInvalid={t(\"common:required\")}\n                validated={errors.scopes ? \"error\" : \"default\"}\n                isRequired\n              >\n                <ScopeSelect\n                  clientId={id}\n                  resourceId={resourcesIds?.[0]}\n                  preSelected={selectedId}\n                />\n              </FormGroup>\n            )}\n            <FormGroup\n              label={t(\"policies\")}\n              fieldId=\"policies\"\n              labelIcon={\n                <HelpItem\n                  helpText=\"clients-help:permissionPolicies\"\n                  fieldLabelId=\"clients:policies\"\n                />\n              }\n            >\n              <ResourcesPolicySelect\n                name=\"policies\"\n                clientId={id}\n                permissionId={permissionId}\n              />\n            </FormGroup>\n            <FormGroup\n              label={t(\"decisionStrategy\")}\n              labelIcon={\n                <HelpItem\n                  helpText=\"clients-help:permissionDecisionStrategy\"\n                  fieldLabelId=\"clients:decisionStrategy\"\n                />\n              }\n              fieldId=\"policyEnforcementMode\"\n              hasNoPaddingTop\n            >\n              <Controller\n                name=\"decisionStrategy\"\n                data-testid=\"decisionStrategy\"\n                defaultValue={DecisionStrategy.UNANIMOUS}\n                control={control}\n                render={({ field }) => (\n                  <>\n                    {Object.values(DecisionStrategy).map((strategy) => (\n                      <Radio\n                        id={strategy}\n                        key={strategy}\n                        data-testid={strategy}\n                        isChecked={field.value === strategy}\n                        name=\"decisionStrategies\"\n                        onChange={() => field.onChange(strategy)}\n                        label={t(`decisionStrategies.${strategy}`)}\n                        className=\"pf-u-mb-md\"\n                      />\n                    ))}\n                  </>\n                )}\n              />\n            </FormGroup>\n            <ActionGroup>\n              <div className=\"pf-u-mt-md\">\n                <Button\n                  variant={ButtonVariant.primary}\n                  type=\"submit\"\n                  data-testid=\"save\"\n                >\n                  {t(\"common:save\")}\n                </Button>\n\n                <Button\n                  variant=\"link\"\n                  data-testid=\"cancel\"\n                  component={(props) => (\n                    <Link\n                      {...props}\n                      to={toAuthorizationTab({\n                        realm,\n                        clientId: id,\n                        tab: \"permissions\",\n                      })}\n                    ></Link>\n                  )}\n                >\n                  {t(\"common:cancel\")}\n                </Button>\n              </div>\n            </ActionGroup>\n          </FormProvider>\n        </FormAccess>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["ScopeSelect","clientId","resourceId","preSelected","t","useTranslation","adminClient","useAdminClient","control","getValues","setValue","formState","errors","useFormContext","scopes","setScopes","useState","selectedScopes","setSelectedScopes","search","setSearch","open","setOpen","firstUpdate","useRef","values","toSelectOptions","map","scope","SelectOption","name","id","useFetch","current","clients","listScopesByResource","resourceName","listAllScopes","Object","assign","deep","filter","s","includes","Controller","validate","value","length","field","Select","SelectVariant","typeaheadMulti","_","onChange","selectedValue","option","find","changedValue","p","PermissionDetails","form","useForm","mode","register","reset","handleSubmit","navigate","useNavigate","realm","permissionType","permissionId","selectedId","useParams","addAlert","addError","useAlerts","permission","setPermission","applyToResourceTypeFlag","setApplyToResourceTypeFlag","resources","policies","Promise","all","findOnePermission","type","getAssociatedResources","getAssociatedPolicies","getAssociatedScopes","Error","r","_id","resourceType","save","updatePermission","result","createPermission","toPermissionDetails","AlertVariant","success","error","toggleDeleteDialog","DeleteConfirm","useConfirmDialog","titleKey","messageKey","continueButtonVariant","ButtonVariant","danger","continueButtonLabel","onConfirm","delPermission","toAuthorizationTab","tab","resourcesIds","useWatch","defaultValue","_Fragment","_jsx","ViewHeader","toUpperCase","DropdownItem","undefined","PageSection","FormAccess","FormProvider","FormGroup","HelpItem","KeycloakTextInput","required","description","message","KeycloakTextArea","maxLength","Switch","ResourcesPolicySelect","typeahead","DecisionStrategy","UNANIMOUS","strategy","Radio","ActionGroup","Button","primary","props","Link","KeycloakSpinner"],"mappings":"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"}