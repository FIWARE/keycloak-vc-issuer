{"version":3,"file":"SearchFilter.111b5570.js","sources":["../../src/client-scopes/ChangeTypeDropdown.tsx","../../src/client-scopes/details/SearchFilter.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { AlertVariant, Select } from \"@patternfly/react-core\";\n\nimport {\n  allClientScopeTypes,\n  changeClientScope,\n  changeScope,\n  ClientScope,\n  clientScopeTypesSelectOptions,\n} from \"../components/client-scope/ClientScopeTypes\";\nimport type { Row } from \"../clients/scopes/ClientScopes\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport { useAlerts } from \"../components/alert/Alerts\";\n\ntype ChangeTypeDropdownProps = {\n  clientId?: string;\n  selectedRows: Row[];\n  refresh: () => void;\n};\n\nexport const ChangeTypeDropdown = ({\n  clientId,\n  selectedRows,\n  refresh,\n}: ChangeTypeDropdownProps) => {\n  const { t } = useTranslation(\"client-scopes\");\n  const [open, setOpen] = useState(false);\n\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  return (\n    <Select\n      toggleId=\"change-type-dropdown\"\n      isOpen={open}\n      selections={[]}\n      isDisabled={selectedRows.length === 0}\n      placeholderText={t(\"changeTypeTo\")}\n      onToggle={setOpen}\n      onSelect={async (_, value) => {\n        try {\n          await Promise.all(\n            selectedRows.map((row) => {\n              return clientId\n                ? changeClientScope(\n                    adminClient,\n                    clientId,\n                    row,\n                    row.type,\n                    value as ClientScope\n                  )\n                : changeScope(adminClient, row, value as ClientScope);\n            })\n          );\n          setOpen(false);\n          refresh();\n          addAlert(t(\"clientScopeSuccess\"), AlertVariant.success);\n        } catch (error) {\n          addError(\"clients:clientScopeError\", error);\n        }\n      }}\n    >\n      {clientScopeTypesSelectOptions(\n        t,\n        !clientId ? allClientScopeTypes : undefined\n      )}\n    </Select>\n  );\n};\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Dropdown,\n  DropdownItem,\n  DropdownToggle,\n  Select,\n  SelectOption,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { FilterIcon } from \"@patternfly/react-icons\";\n\nimport {\n  AllClientScopes,\n  AllClientScopeType,\n  clientScopeTypesSelectOptions,\n} from \"../../components/client-scope/ClientScopeTypes\";\nimport type { Row } from \"../../clients/scopes/ClientScopes\";\n\nexport type SearchType = \"name\" | \"type\" | \"protocol\";\nexport const PROTOCOLS = [\"all\", \"saml\", \"openid-connect\"] as const;\nexport type ProtocolType = (typeof PROTOCOLS)[number];\n\nexport const nameFilter =\n  (search = \"\") =>\n  (scope: Row) =>\n    scope.name?.includes(search);\nexport const typeFilter = (type: AllClientScopeType) => (scope: Row) =>\n  type === AllClientScopes.none || scope.type === type;\n\nexport const protocolFilter = (protocol: ProtocolType) => (scope: Row) =>\n  protocol === \"all\" || scope.protocol === protocol;\n\ntype SearchToolbarProps = Omit<SearchDropdownProps, \"withProtocol\"> & {\n  type: AllClientScopeType;\n  onType: (value: AllClientScopes) => void;\n  protocol?: ProtocolType;\n  onProtocol?: (value: ProtocolType) => void;\n};\n\ntype SearchDropdownProps = {\n  searchType: SearchType;\n  onSelect: (value: SearchType) => void;\n  withProtocol?: boolean;\n};\n\nexport const SearchDropdown = ({\n  searchType,\n  withProtocol = false,\n  onSelect,\n}: SearchDropdownProps) => {\n  const { t } = useTranslation(\"clients\");\n  const [searchToggle, setSearchToggle] = useState(false);\n\n  const createDropdown = (searchType: SearchType) => (\n    <DropdownItem\n      key={searchType}\n      onClick={() => {\n        onSelect(searchType);\n        setSearchToggle(false);\n      }}\n    >\n      {t(`clientScopeSearch.${searchType}`)}\n    </DropdownItem>\n  );\n  const options = [createDropdown(\"name\"), createDropdown(\"type\")];\n  if (withProtocol) {\n    options.push(createDropdown(\"protocol\"));\n  }\n\n  return (\n    <Dropdown\n      className=\"keycloak__client-scopes__searchtype\"\n      toggle={\n        <DropdownToggle id=\"toggle-id\" onToggle={setSearchToggle}>\n          <FilterIcon /> {t(`clientScopeSearch.${searchType}`)}\n        </DropdownToggle>\n      }\n      isOpen={searchToggle}\n      dropdownItems={options}\n    />\n  );\n};\n\nexport const SearchToolbar = ({\n  searchType,\n  onSelect,\n  type,\n  onType,\n  protocol,\n  onProtocol,\n}: SearchToolbarProps) => {\n  const { t } = useTranslation(\"client-scopes\");\n  const [open, setOpen] = useState(false);\n\n  return (\n    <>\n      {searchType === \"type\" && (\n        <>\n          <ToolbarItem>\n            <SearchDropdown\n              searchType={searchType}\n              onSelect={onSelect}\n              withProtocol={!!protocol}\n            />\n          </ToolbarItem>\n          <ToolbarItem>\n            <Select\n              className=\"keycloak__client-scopes__searchtype\"\n              onToggle={setOpen}\n              isOpen={open}\n              selections={[\n                type === AllClientScopes.none\n                  ? t(\"common:allTypes\")\n                  : t(`common:clientScope.${type}`),\n              ]}\n              onSelect={(_, value) => {\n                onType(value as AllClientScopes);\n                setOpen(false);\n              }}\n            >\n              <SelectOption value={AllClientScopes.none}>\n                {t(\"common:allTypes\")}\n              </SelectOption>\n              <>{clientScopeTypesSelectOptions(t)}</>\n            </Select>\n          </ToolbarItem>\n        </>\n      )}\n      {searchType === \"protocol\" && !!protocol && (\n        <>\n          <ToolbarItem>\n            <SearchDropdown\n              searchType={searchType}\n              onSelect={onSelect}\n              withProtocol\n            />\n          </ToolbarItem>\n          <ToolbarItem>\n            <Select\n              className=\"keycloak__client-scopes__searchtype\"\n              onToggle={setOpen}\n              isOpen={open}\n              selections={[t(`protocolTypes.${protocol}`)]}\n              onSelect={(_, value) => {\n                onProtocol?.(value as ProtocolType);\n                setOpen(false);\n              }}\n            >\n              {PROTOCOLS.map((type) => (\n                <SelectOption key={type} value={type}>\n                  {t(`protocolTypes.${type}`)}\n                </SelectOption>\n              ))}\n            </Select>\n          </ToolbarItem>\n        </>\n      )}\n    </>\n  );\n};\n"],"names":["ChangeTypeDropdown","clientId","selectedRows","refresh","t","useTranslation","open","setOpen","useState","adminClient","useAdminClient","addAlert","addError","useAlerts","Select","length","_","value","Promise","all","map","row","changeClientScope","type","changeScope","AlertVariant","success","error","clientScopeTypesSelectOptions","undefined","allClientScopeTypes","PROTOCOLS","nameFilter","search","scope","name","includes","typeFilter","AllClientScopes","none","protocolFilter","protocol","SearchDropdown","searchType","withProtocol","onSelect","searchToggle","setSearchToggle","createDropdown","_jsx","DropdownItem","options","push","Dropdown","DropdownToggle","FilterIcon","SearchToolbar","onType","onProtocol","_Fragment","ToolbarItem","SelectOption"],"mappings":"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"}