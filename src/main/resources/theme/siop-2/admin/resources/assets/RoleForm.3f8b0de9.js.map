{"version":3,"file":"RoleForm.3f8b0de9.js","sources":["../../src/components/role-form/RoleForm.tsx"],"sourcesContent":["import {\n  ActionGroup,\n  Button,\n  FormGroup,\n  PageSection,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { SubmitHandler, UseFormReturn, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, To } from \"react-router-dom\";\n\nimport { FormAccess } from \"../form-access/FormAccess\";\nimport { AttributeForm } from \"../key-value-form/AttributeForm\";\nimport { KeycloakTextArea } from \"../keycloak-text-area/KeycloakTextArea\";\nimport { KeycloakTextInput } from \"../keycloak-text-input/KeycloakTextInput\";\nimport { ViewHeader } from \"../view-header/ViewHeader\";\n\nexport type RoleFormProps = {\n  form: UseFormReturn<AttributeForm>;\n  onSubmit: SubmitHandler<AttributeForm>;\n  cancelLink: To;\n  role: \"manage-realm\" | \"manage-clients\";\n  editMode: boolean;\n};\n\nexport const RoleForm = ({\n  form: {\n    register,\n    control,\n    handleSubmit,\n    formState: { errors },\n  },\n  onSubmit,\n  cancelLink,\n  role,\n  editMode,\n}: RoleFormProps) => {\n  const { t } = useTranslation(\"roles\");\n\n  const roleName = useWatch({\n    control,\n    defaultValue: undefined,\n    name: \"name\",\n  });\n\n  return (\n    <>\n      {!editMode && <ViewHeader titleKey={t(\"createRole\")} />}\n      <PageSection variant=\"light\">\n        <FormAccess\n          isHorizontal\n          onSubmit={handleSubmit(onSubmit)}\n          role={role}\n          className=\"pf-u-mt-lg\"\n        >\n          <FormGroup\n            label={t(\"roleName\")}\n            fieldId=\"kc-name\"\n            validated={\n              errors.name ? ValidatedOptions.error : ValidatedOptions.default\n            }\n            helperTextInvalid={t(\"common:required\")}\n            isRequired={!editMode}\n          >\n            <KeycloakTextInput\n              id=\"kc-name\"\n              isReadOnly={editMode}\n              {...register(\"name\", {\n                required: !editMode,\n                validate: (value) => {\n                  if (!value?.trim()) {\n                    return t(\"common:required\").toString();\n                  }\n                },\n              })}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"common:description\")}\n            fieldId=\"kc-description\"\n            validated={\n              errors.description\n                ? ValidatedOptions.error\n                : ValidatedOptions.default\n            }\n            helperTextInvalid={errors.description?.message}\n          >\n            <KeycloakTextArea\n              id=\"kc-description\"\n              validated={\n                errors.description\n                  ? ValidatedOptions.error\n                  : ValidatedOptions.default\n              }\n              isDisabled={roleName?.includes(\"default-roles\")}\n              {...register(\"description\", {\n                maxLength: {\n                  value: 255,\n                  message: t(\"common:maxLength\", { length: 255 }),\n                },\n              })}\n            />\n          </FormGroup>\n          <ActionGroup>\n            <Button data-testid=\"save\" type=\"submit\" variant=\"primary\">\n              {t(\"common:save\")}\n            </Button>\n            <Button\n              data-testid=\"cancel\"\n              variant=\"link\"\n              component={(props) => <Link {...props} to={cancelLink} />}\n            >\n              {t(\"common:cancel\")}\n            </Button>\n          </ActionGroup>\n        </FormAccess>\n      </PageSection>\n    </>\n  );\n};\n"],"names":["RoleForm","form","register","control","handleSubmit","formState","errors","onSubmit","cancelLink","role","editMode","t","useTranslation","roleName","useWatch","defaultValue","undefined","name","_Fragment","ViewHeader","_jsx","PageSection","FormAccess","FormGroup","ValidatedOptions","error","default","KeycloakTextInput","required","validate","value","trim","toString","description","message","KeycloakTextArea","includes","maxLength","length","_jsxs","ActionGroup","Button","props","Link"],"mappings":"2XAyBO,MAAMA,EAAW,CAAC,CACvBC,KAAM,CACJC,SAAAA,EACAC,QAAAA,EACAC,aAAAA,EACAC,UAAW,CAAEC,OAAAA,CAAO,CACtB,EACAC,SAAAA,EACAC,WAAAA,EACAC,KAAAA,EACAC,SAAAA,CACa,IAAM,CACb,KAAA,CAAEC,EAAAA,CAAAA,EAAMC,EAAe,OAAO,EAE9BC,EAAWC,EAAS,CACxBX,QAAAA,EACAY,aAAcC,OACdC,KAAM,MAAA,CACP,EAED,SACEC,EAAA,CAAA,SAAA,CACG,CAACR,KAAaS,EAAU,CAAC,SAAUR,EAAE,YAAY,CAAA,CAAK,EACvDS,EAACC,EAAW,CAAC,QAAQ,QAAO,WACzBC,EAAU,CACT,aAAY,GACZ,SAAUlB,EAAaG,CAAQ,EAC/B,KAAAE,EACA,UAAU,aAAY,SAAA,CAEtBW,EAACG,EAAS,CACR,MAAOZ,EAAE,UAAU,EACnB,QAAQ,UACR,UACEL,EAAOW,KAAOO,EAAiBC,MAAQD,EAAiBE,QAE1D,kBAAmBf,EAAE,iBAAiB,EACtC,WAAY,CAACD,EAAS,WAErBiB,EAAiB,CAChB,GAAG,UACH,WAAYjB,EAAS,GACjBR,EAAS,OAAQ,CACnB0B,SAAU,CAAClB,EACXmB,SAAqBC,GAAA,CACf,GAAA,CAACA,GAAOC,OACHpB,OAAAA,EAAE,iBAAiB,EAAEqB,UAEhC,CAAA,CACD,CAAA,CAAC,CAAA,CAEM,EACZZ,EAACG,EAAS,CACR,MAAOZ,EAAE,oBAAoB,EAC7B,QAAQ,iBACR,UACEL,EAAO2B,YACHT,EAAiBC,MACjBD,EAAiBE,QAEvB,kBAAmBpB,EAAO2B,aAAaC,QAAQ,WAE9CC,EAAgB,CACf,GAAG,iBACH,UACE7B,EAAO2B,YACHT,EAAiBC,MACjBD,EAAiBE,QAEvB,WAAYb,GAAUuB,SAAS,eAAe,EAAE,GAC5ClC,EAAS,cAAe,CAC1BmC,UAAW,CACTP,MAAO,IACPI,QAASvB,EAAE,mBAAoB,CAAE2B,OAAQ,GAAA,CAAK,CAChD,CAAA,CACD,CAAA,CAAC,CAAA,CAEM,EACZC,EAACC,EAAW,CAAA,SAAA,CACVpB,EAACqB,EAAM,CAAC,cAAY,OAAO,KAAK,SAAS,QAAQ,UAAS,SACvD9B,EAAE,aAAa,CAAA,CACT,EACTS,EAACqB,EAAM,CACL,cAAY,SACZ,QAAQ,OACR,UAAsBC,GAAAtB,EAACuB,EAAI,CAAA,GAAKD,EAAO,GAAIlC,CAAAA,CAAe,EAAA,SAEzDG,EAAE,eAAe,CAAA,CACX,CAAA,CAAA,CACG,CAAA,CAAA,CAAA,CAAA,CAEJ,CAAA,CAAA,CACb,CAEP"}