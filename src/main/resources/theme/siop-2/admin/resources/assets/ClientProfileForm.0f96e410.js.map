{"version":3,"file":"ClientProfileForm.0f96e410.js","sources":["../../src/realm-settings/ClientProfileForm.tsx"],"sourcesContent":["import type ClientProfileRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientProfileRepresentation\";\nimport type ClientProfilesRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientProfilesRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  DataList,\n  DataListCell,\n  DataListItem,\n  DataListItemCells,\n  DataListItemRow,\n  Divider,\n  DropdownItem,\n  Flex,\n  FlexItem,\n  FormGroup,\n  Label,\n  PageSection,\n  Text,\n  TextVariants,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { PlusCircleIcon, TrashIcon } from \"@patternfly/react-icons\";\nimport { Fragment, useMemo, useState } from \"react\";\nimport { useFieldArray, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\n\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { FormAccess } from \"../components/form-access/FormAccess\";\nimport { HelpItem } from \"../components/help-enabler/HelpItem\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport { KeycloakTextArea } from \"../components/keycloak-text-area/KeycloakTextArea\";\nimport { KeycloakTextInput } from \"../components/keycloak-text-input/KeycloakTextInput\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useAdminClient, useFetch } from \"../context/auth/AdminClient\";\nimport { useServerInfo } from \"../context/server-info/ServerInfoProvider\";\nimport { useParams } from \"../utils/useParams\";\nimport { toAddExecutor } from \"./routes/AddExecutor\";\nimport { toClientPolicies } from \"./routes/ClientPolicies\";\nimport { ClientProfileParams, toClientProfile } from \"./routes/ClientProfile\";\nimport { toExecutor } from \"./routes/Executor\";\n\nimport \"./realm-settings-section.css\";\n\ntype ClientProfileForm = Required<ClientProfileRepresentation>;\n\nconst defaultValues: ClientProfileForm = {\n  name: \"\",\n  description: \"\",\n  executors: [],\n};\n\nexport default function ClientProfileForm() {\n  const { t } = useTranslation(\"realm-settings\");\n  const navigate = useNavigate();\n  const {\n    handleSubmit,\n    setValue,\n    getValues,\n    register,\n    formState: { isDirty, errors },\n    control,\n  } = useForm<ClientProfileForm>({\n    defaultValues,\n    mode: \"onChange\",\n  });\n\n  const { fields: profileExecutors, remove } = useFieldArray({\n    name: \"executors\",\n    control,\n  });\n\n  const { addAlert, addError } = useAlerts();\n  const { adminClient } = useAdminClient();\n  const [profiles, setProfiles] = useState<ClientProfilesRepresentation>();\n  const [isGlobalProfile, setIsGlobalProfile] = useState(false);\n  const { realm, profileName } = useParams<ClientProfileParams>();\n  const serverInfo = useServerInfo();\n  const executorTypes = useMemo(\n    () =>\n      serverInfo.componentTypes?.[\n        \"org.keycloak.services.clientpolicy.executor.ClientPolicyExecutorProvider\"\n      ],\n    []\n  );\n  const [executorToDelete, setExecutorToDelete] = useState<{\n    idx: number;\n    name: string;\n  }>();\n  const editMode = profileName ? true : false;\n  const [key, setKey] = useState(0);\n  const reload = () => setKey(key + 1);\n\n  useFetch(\n    () =>\n      adminClient.clientPolicies.listProfiles({ includeGlobalProfiles: true }),\n    (profiles) => {\n      setProfiles({\n        globalProfiles: profiles.globalProfiles,\n        profiles: profiles.profiles?.filter((p) => p.name !== profileName),\n      });\n      const globalProfile = profiles.globalProfiles?.find(\n        (p) => p.name === profileName\n      );\n      const profile = profiles.profiles?.find((p) => p.name === profileName);\n      setIsGlobalProfile(globalProfile !== undefined);\n      setValue(\"name\", globalProfile?.name ?? profile?.name ?? \"\");\n      setValue(\n        \"description\",\n        globalProfile?.description ?? profile?.description ?? \"\"\n      );\n      setValue(\n        \"executors\",\n        globalProfile?.executors ?? profile?.executors ?? []\n      );\n    },\n    [key]\n  );\n\n  const save = async (form: ClientProfileForm) => {\n    const updatedProfiles = form;\n\n    try {\n      await adminClient.clientPolicies.createProfiles({\n        ...profiles,\n        profiles: [...(profiles?.profiles || []), updatedProfiles],\n      });\n\n      addAlert(\n        editMode\n          ? t(\"realm-settings:updateClientProfileSuccess\")\n          : t(\"realm-settings:createClientProfileSuccess\"),\n        AlertVariant.success\n      );\n\n      navigate(toClientProfile({ realm, profileName: form.name }));\n    } catch (error) {\n      addError(\n        editMode\n          ? \"realm-settings:updateClientProfileError\"\n          : \"realm-settings:createClientProfileError\",\n        error\n      );\n    }\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: executorToDelete?.name!\n      ? t(\"deleteExecutorProfileConfirmTitle\")\n      : t(\"deleteClientProfileConfirmTitle\"),\n    messageKey: executorToDelete?.name!\n      ? t(\"deleteExecutorProfileConfirm\", {\n          executorName: executorToDelete.name!,\n        })\n      : t(\"deleteClientProfileConfirm\", {\n          profileName,\n        }),\n    continueButtonLabel: t(\"delete\"),\n    continueButtonVariant: ButtonVariant.danger,\n\n    onConfirm: async () => {\n      if (executorToDelete?.name!) {\n        remove(executorToDelete.idx);\n        try {\n          await adminClient.clientPolicies.createProfiles({\n            ...profiles,\n            profiles: [...(profiles!.profiles || []), getValues()],\n          });\n          addAlert(t(\"deleteExecutorSuccess\"), AlertVariant.success);\n          navigate(toClientProfile({ realm, profileName }));\n        } catch (error) {\n          addError(t(\"deleteExecutorError\"), error);\n        }\n      } else {\n        try {\n          await adminClient.clientPolicies.createProfiles(profiles);\n          addAlert(t(\"deleteClientSuccess\"), AlertVariant.success);\n          navigate(toClientPolicies({ realm, tab: \"profiles\" }));\n        } catch (error) {\n          addError(t(\"deleteClientError\"), error);\n        }\n      }\n    },\n  });\n\n  if (!profiles) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <>\n      <DeleteConfirm />\n      <ViewHeader\n        titleKey={editMode ? profileName : t(\"newClientProfile\")}\n        badges={[\n          {\n            id: \"global-client-profile-badge\",\n            text: isGlobalProfile ? (\n              <Label color=\"blue\">{t(\"global\")}</Label>\n            ) : (\n              \"\"\n            ),\n          },\n        ]}\n        divider\n        dropdownItems={\n          editMode && !isGlobalProfile\n            ? [\n                <DropdownItem\n                  key=\"delete\"\n                  value=\"delete\"\n                  onClick={toggleDeleteDialog}\n                  data-testid=\"deleteClientProfileDropdown\"\n                >\n                  {t(\"deleteClientProfile\")}\n                </DropdownItem>,\n              ]\n            : undefined\n        }\n      />\n      <PageSection variant=\"light\">\n        <FormAccess isHorizontal role=\"view-realm\" className=\"pf-u-mt-lg\">\n          <FormGroup\n            label={t(\"newClientProfileName\")}\n            fieldId=\"kc-name\"\n            helperText={t(\"createClientProfileNameHelperText\")}\n            isRequired\n            helperTextInvalid={t(\"common:required\")}\n            validated={\n              errors.name ? ValidatedOptions.error : ValidatedOptions.default\n            }\n          >\n            <KeycloakTextInput\n              id=\"kc-name\"\n              data-testid=\"client-profile-name\"\n              isReadOnly={isGlobalProfile}\n              {...register(\"name\", { required: true })}\n            />\n          </FormGroup>\n          <FormGroup label={t(\"common:description\")} fieldId=\"kc-description\">\n            <KeycloakTextArea\n              id=\"kc-description\"\n              data-testid=\"client-profile-description\"\n              isReadOnly={isGlobalProfile}\n              {...register(\"description\")}\n            />\n          </FormGroup>\n          <ActionGroup>\n            {!isGlobalProfile && (\n              <Button\n                variant=\"primary\"\n                onClick={() => handleSubmit(save)()}\n                data-testid=\"saveCreateProfile\"\n                isDisabled={!isDirty}\n              >\n                {t(\"common:save\")}\n              </Button>\n            )}\n            {editMode && !isGlobalProfile && (\n              <Button\n                id={\"reloadProfile\"}\n                variant=\"link\"\n                data-testid={\"reloadProfile\"}\n                isDisabled={!isDirty}\n                onClick={reload}\n              >\n                {t(\"realm-settings:reload\")}\n              </Button>\n            )}\n            {!editMode && !isGlobalProfile && (\n              <Button\n                id={\"cancelCreateProfile\"}\n                variant=\"link\"\n                component={(props) => (\n                  <Link\n                    {...props}\n                    to={toClientPolicies({ realm, tab: \"profiles\" })}\n                  />\n                )}\n                data-testid={\"cancelCreateProfile\"}\n              >\n                {t(\"common:cancel\")}\n              </Button>\n            )}\n          </ActionGroup>\n          {editMode && (\n            <>\n              <Flex>\n                <FlexItem>\n                  <Text className=\"kc-executors\" component={TextVariants.h1}>\n                    {t(\"executors\")}\n                    <HelpItem\n                      helpText=\"realm-settings:executorsHelpText\"\n                      fieldLabelId=\"realm-settings:executors\"\n                    />\n                  </Text>\n                </FlexItem>\n                {!isGlobalProfile && (\n                  <FlexItem align={{ default: \"alignRight\" }}>\n                    <Button\n                      id=\"addExecutor\"\n                      component={(props) => (\n                        <Link\n                          {...props}\n                          to={toAddExecutor({\n                            realm,\n                            profileName,\n                          })}\n                        />\n                      )}\n                      variant=\"link\"\n                      className=\"kc-addExecutor\"\n                      data-testid=\"addExecutor\"\n                      icon={<PlusCircleIcon />}\n                    >\n                      {t(\"realm-settings:addExecutor\")}\n                    </Button>\n                  </FlexItem>\n                )}\n              </Flex>\n              {profileExecutors.length > 0 && (\n                <>\n                  <DataList aria-label={t(\"executors\")} isCompact>\n                    {profileExecutors.map((executor, idx) => (\n                      <DataListItem\n                        aria-labelledby={\"executors-list-item\"}\n                        key={executor.executor}\n                        id={executor.executor}\n                      >\n                        <DataListItemRow data-testid=\"executors-list-row\">\n                          <DataListItemCells\n                            dataListCells={[\n                              <DataListCell\n                                key=\"executor\"\n                                data-testid=\"executor-type\"\n                              >\n                                {executor.configuration ? (\n                                  <Button\n                                    component={(props) => (\n                                      <Link\n                                        {...props}\n                                        to={toExecutor({\n                                          realm,\n                                          profileName,\n                                          executorName: executor.executor!,\n                                        })}\n                                      />\n                                    )}\n                                    variant=\"link\"\n                                    data-testid=\"editExecutor\"\n                                  >\n                                    {executor.executor}\n                                  </Button>\n                                ) : (\n                                  <span className=\"kc-unclickable-executor\">\n                                    {executor.executor}\n                                  </span>\n                                )}\n                                {executorTypes\n                                  ?.filter(\n                                    (type) => type.id === executor.executor\n                                  )\n                                  .map((type) => (\n                                    <Fragment key={type.id}>\n                                      <HelpItem\n                                        key={type.id}\n                                        helpText={type.helpText}\n                                        fieldLabelId=\"realm-settings:executorTypeTextHelpText\"\n                                      />\n                                      {!isGlobalProfile && (\n                                        <Button\n                                          variant=\"link\"\n                                          isInline\n                                          icon={\n                                            <TrashIcon\n                                              key={`executorType-trash-icon-${type.id}`}\n                                              className=\"kc-executor-trash-icon\"\n                                              data-testid=\"deleteExecutor\"\n                                            />\n                                          }\n                                          onClick={() => {\n                                            toggleDeleteDialog();\n                                            setExecutorToDelete({\n                                              idx: idx,\n                                              name: type.id,\n                                            });\n                                          }}\n                                        />\n                                      )}\n                                    </Fragment>\n                                  ))}\n                              </DataListCell>,\n                            ]}\n                          />\n                        </DataListItemRow>\n                      </DataListItem>\n                    ))}\n                  </DataList>\n                  {isGlobalProfile && (\n                    <Button\n                      id=\"backToClientPolicies\"\n                      component={(props) => (\n                        <Link\n                          {...props}\n                          to={toClientPolicies({ realm, tab: \"profiles\" })}\n                        />\n                      )}\n                      variant=\"primary\"\n                      className=\"kc-backToPolicies\"\n                      data-testid=\"backToClientPolicies\"\n                    >\n                      {t(\"realm-settings:back\")}\n                    </Button>\n                  )}\n                </>\n              )}\n              {profileExecutors.length === 0 && (\n                <>\n                  <Divider />\n                  <Text\n                    className=\"kc-emptyExecutors\"\n                    component={TextVariants.h6}\n                  >\n                    {t(\"realm-settings:emptyExecutors\")}\n                  </Text>\n                </>\n              )}\n            </>\n          )}\n        </FormAccess>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["defaultValues","name","description","executors","ClientProfileForm","t","useTranslation","navigate","useNavigate","handleSubmit","setValue","getValues","register","formState","isDirty","errors","control","useForm","mode","fields","profileExecutors","remove","useFieldArray","addAlert","addError","useAlerts","adminClient","useAdminClient","profiles","setProfiles","useState","isGlobalProfile","setIsGlobalProfile","realm","profileName","useParams","serverInfo","useServerInfo","executorTypes","useMemo","componentTypes","executorToDelete","setExecutorToDelete","editMode","key","setKey","reload","useFetch","clientPolicies","listProfiles","includeGlobalProfiles","globalProfiles","filter","p","globalProfile","find","profile","undefined","save","form","updatedProfiles","createProfiles","AlertVariant","success","toClientProfile","error","toggleDeleteDialog","DeleteConfirm","useConfirmDialog","titleKey","messageKey","executorName","continueButtonLabel","continueButtonVariant","ButtonVariant","danger","onConfirm","idx","toClientPolicies","tab","_Fragment","_jsx","ViewHeader","id","text","Label","DropdownItem","PageSection","FormAccess","FormGroup","ValidatedOptions","default","KeycloakTextInput","required","KeycloakTextArea","_jsxs","ActionGroup","Button","props","Link","Flex","FlexItem","Text","TextVariants","h1","HelpItem","toAddExecutor","PlusCircleIcon","length","DataList","map","executor","DataListItem","DataListItemRow","DataListItemCells","DataListCell","configuration","toExecutor","type","Fragment","helpText","TrashIcon","Divider","h6","KeycloakSpinner"],"mappings":"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"}