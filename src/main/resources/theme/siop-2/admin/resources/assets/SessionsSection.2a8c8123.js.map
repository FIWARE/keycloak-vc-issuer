{"version":3,"file":"SessionsSection.2a8c8123.js","sources":["../../src/sessions/RevocationModal.tsx","../../src/sessions/SessionsSection.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  TextContent,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { useForm } from \"react-hook-form\";\n\nimport { emailRegexPattern } from \"../util\";\nimport type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport { useAdminClient, useFetch } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { KeycloakTextInput } from \"../components/keycloak-text-input/KeycloakTextInput\";\nimport type GlobalRequestResult from \"@keycloak/keycloak-admin-client/lib/defs/globalRequestResult\";\n\ntype RevocationModalProps = {\n  handleModalToggle: () => void;\n  save: () => void;\n};\n\nexport const RevocationModal = ({\n  handleModalToggle,\n  save,\n}: RevocationModalProps) => {\n  const { t } = useTranslation(\"sessions\");\n  const { addAlert } = useAlerts();\n\n  const { realm: realmName } = useRealm();\n  const { adminClient } = useAdminClient();\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm();\n  const [realm, setRealm] = useState<RealmRepresentation>();\n\n  const [key, setKey] = useState(0);\n\n  const refresh = () => {\n    setKey(new Date().getTime());\n  };\n\n  useFetch(\n    () => adminClient.realms.findOne({ realm: realmName }),\n    (realm) => {\n      setRealm(realm);\n    },\n    [key]\n  );\n\n  const parseResult = (result: GlobalRequestResult, prefixKey: string) => {\n    const successCount = result.successRequests?.length || 0;\n    const failedCount = result.failedRequests?.length || 0;\n\n    if (successCount === 0 && failedCount === 0) {\n      addAlert(t(\"clients:noAdminUrlSet\"), AlertVariant.warning);\n    } else if (failedCount > 0) {\n      addAlert(\n        t(\"clients:\" + prefixKey + \"Success\", {\n          successNodes: result.successRequests,\n        }),\n        AlertVariant.success\n      );\n      addAlert(\n        t(\"clients:\" + prefixKey + \"Fail\", {\n          failedNodes: result.failedRequests,\n        }),\n        AlertVariant.danger\n      );\n    } else {\n      addAlert(\n        t(\"clients:\" + prefixKey + \"Success\", {\n          successNodes: result.successRequests,\n        }),\n        AlertVariant.success\n      );\n    }\n  };\n\n  const setToNow = async () => {\n    try {\n      await adminClient.realms.update(\n        { realm: realmName },\n        {\n          realm: realmName,\n          notBefore: Date.now() / 1000,\n        }\n      );\n\n      addAlert(t(\"notBeforeSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addAlert(t(\"setToNowError\", { error }), AlertVariant.danger);\n    }\n  };\n\n  const clearNotBefore = async () => {\n    try {\n      await adminClient.realms.update(\n        { realm: realmName },\n        {\n          realm: realmName,\n          notBefore: 0,\n        }\n      );\n      addAlert(t(\"notBeforeClearedSuccess\"), AlertVariant.success);\n      refresh();\n    } catch (error) {\n      addAlert(t(\"notBeforeError\", { error }), AlertVariant.danger);\n    }\n  };\n\n  const push = async () => {\n    const result = await adminClient.realms.pushRevocation({\n      realm: realmName,\n    });\n    parseResult(result, \"notBeforePush\");\n\n    refresh();\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title={t(\"revocation\")}\n      isOpen={true}\n      onClose={handleModalToggle}\n      actions={[\n        <Button\n          data-testid=\"set-to-now-button\"\n          key=\"set-to-now\"\n          variant=\"tertiary\"\n          onClick={() => {\n            setToNow();\n            handleModalToggle();\n          }}\n          form=\"revocation-modal-form\"\n        >\n          {t(\"setToNow\")}\n        </Button>,\n        <Button\n          data-testid=\"clear-not-before-button\"\n          key=\"clear\"\n          variant=\"tertiary\"\n          onClick={() => {\n            clearNotBefore();\n            handleModalToggle();\n          }}\n          form=\"revocation-modal-form\"\n        >\n          {t(\"clear\")}\n        </Button>,\n        <Button\n          data-testid=\"modal-test-connection-button\"\n          key=\"push\"\n          variant=\"secondary\"\n          onClick={() => {\n            push();\n            handleModalToggle();\n          }}\n          form=\"revocation-modal-form\"\n        >\n          {t(\"push\")}\n        </Button>,\n        <Button\n          id=\"modal-cancel\"\n          data-testid=\"cancel\"\n          key=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={() => {\n            handleModalToggle();\n          }}\n        >\n          {t(\"common:cancel\")}\n        </Button>,\n      ]}\n    >\n      <TextContent className=\"kc-revocation-description-text\">\n        {t(\"revocationDescription\")}\n      </TextContent>\n      <Form\n        id=\"revocation-modal-form\"\n        isHorizontal\n        onSubmit={handleSubmit(save)}\n      >\n        <FormGroup\n          className=\"kc-revocation-modal-form-group\"\n          label={t(\"notBefore\")}\n          name=\"notBefore\"\n          fieldId=\"not-before\"\n          validated={\n            errors.email ? ValidatedOptions.error : ValidatedOptions.default\n          }\n        >\n          <KeycloakTextInput\n            data-testid=\"not-before-input\"\n            autoFocus\n            isReadOnly\n            value={\n              realm?.notBefore === 0\n                ? (t(\"none\") as string)\n                : new Date(realm?.notBefore! * 1000).toString()\n            }\n            type=\"text\"\n            id=\"not-before\"\n            {...register(\"notBefore\", {\n              required: true,\n              pattern: emailRegexPattern,\n            })}\n            validated={\n              errors.email ? ValidatedOptions.error : ValidatedOptions.default\n            }\n          />\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n","import { DropdownItem, PageSection } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport helpUrls from \"../help-urls\";\nimport { RevocationModal } from \"./RevocationModal\";\nimport SessionsTable from \"./SessionsTable\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\n\nimport \"./SessionsSection.css\";\n\nexport default function SessionsSection() {\n  const { t } = useTranslation(\"sessions\");\n\n  const { keycloak, adminClient } = useAdminClient();\n  const { addError } = useAlerts();\n  const { realm } = useRealm();\n\n  const [revocationModalOpen, setRevocationModalOpen] = useState(false);\n  const [noSessions, setNoSessions] = useState(false);\n\n  const handleRevocationModalToggle = () => {\n    setRevocationModalOpen(!revocationModalOpen);\n  };\n\n  const loader = async () => {\n    const activeClients = await adminClient.sessions.find();\n    const clientSessions = (\n      await Promise.all(\n        activeClients.map((client) =>\n          adminClient.clients.listSessions({ id: client.id })\n        )\n      )\n    ).flat();\n\n    setNoSessions(clientSessions.length === 0);\n\n    const userIds = Array.from(\n      new Set(clientSessions.map((session) => session.userId))\n    );\n    const userSessions = (\n      await Promise.all(\n        userIds.map((userId) => adminClient.users.listSessions({ id: userId! }))\n      )\n    ).flat();\n\n    return userSessions;\n  };\n\n  const [toggleLogoutDialog, LogoutConfirm] = useConfirmDialog({\n    titleKey: \"sessions:logoutAllSessions\",\n    messageKey: \"sessions:logoutAllDescription\",\n    continueButtonLabel: \"common:confirm\",\n    onConfirm: async () => {\n      try {\n        await adminClient.realms.logoutAll({ realm });\n        keycloak.logout({ redirectUri: \"\" });\n      } catch (error) {\n        addError(\"sessions:logoutAllSessionsError\", error);\n      }\n    },\n  });\n\n  const dropdownItems = [\n    <DropdownItem\n      key=\"toggle-modal\"\n      data-testid=\"revocation\"\n      component=\"button\"\n      onClick={() => handleRevocationModalToggle()}\n    >\n      {t(\"revocation\")}\n    </DropdownItem>,\n    <DropdownItem\n      key=\"delete-role\"\n      data-testid=\"logout-all\"\n      component=\"button\"\n      isDisabled={noSessions}\n      onClick={toggleLogoutDialog}\n    >\n      {t(\"signOutAllActiveSessions\")}\n    </DropdownItem>,\n  ];\n\n  return (\n    <>\n      <LogoutConfirm />\n      <ViewHeader\n        dropdownItems={dropdownItems}\n        titleKey=\"sessions:title\"\n        subKey=\"sessions:sessionExplain\"\n        helpUrl={helpUrls.sessionsUrl}\n      />\n      <PageSection variant=\"light\" className=\"pf-u-p-0\">\n        {revocationModalOpen && (\n          <RevocationModal\n            handleModalToggle={handleRevocationModalToggle}\n            save={() => {\n              handleRevocationModalToggle();\n            }}\n          />\n        )}\n        <SessionsTable loader={loader} />\n      </PageSection>\n    </>\n  );\n}\n"],"names":["RevocationModal","handleModalToggle","save","t","useTranslation","addAlert","useAlerts","realm","realmName","useRealm","adminClient","useAdminClient","register","handleSubmit","formState","errors","useForm","setRealm","useState","key","setKey","refresh","Date","getTime","useFetch","realms","findOne","parseResult","result","prefixKey","successCount","successRequests","length","failedCount","failedRequests","AlertVariant","warning","successNodes","success","failedNodes","danger","setToNow","update","notBefore","now","error","clearNotBefore","push","pushRevocation","Modal","ModalVariant","small","_jsx","Button","ButtonVariant","link","TextContent","Form","FormGroup","email","ValidatedOptions","default","KeycloakTextInput","toString","required","pattern","emailRegexPattern","SessionsSection","keycloak","addError","revocationModalOpen","setRevocationModalOpen","noSessions","setNoSessions","handleRevocationModalToggle","loader","activeClients","sessions","find","clientSessions","Promise","all","map","client","clients","listSessions","id","flat","userIds","Array","from","Set","session","userId","userSessions","users","toggleLogoutDialog","LogoutConfirm","useConfirmDialog","titleKey","messageKey","continueButtonLabel","onConfirm","logoutAll","logout","redirectUri","dropdownItems","DropdownItem","_Fragment","ViewHeader","helpUrls","sessionsUrl","_jsxs","PageSection","SessionsTable"],"mappings":"8/BA4BO,MAAMA,EAAkB,CAAC,CAC9BC,kBAAAA,EACAC,KAAAA,CACoB,IAAM,CACpB,KAAA,CAAEC,EAAAA,CAAAA,EAAMC,EAAe,UAAU,EACjC,CAAEC,SAAAA,GAAaC,EAAW,EAE1B,CAAEC,MAAOC,GAAcC,EAAU,EACjC,CAAEC,YAAAA,GAAgBC,EAAgB,EAClC,CACJC,SAAAA,EACAC,aAAAA,EACAC,UAAW,CAAEC,OAAAA,CAAO,GAClBC,EAAS,EACP,CAACT,EAAOU,CAAQ,EAAIC,EAA+B,QAAA,SAAA,EAEnD,CAACC,EAAKC,CAAM,EAAIF,mBAAS,CAAC,EAE1BG,EAAU,IAAM,CACpBD,EAAO,IAAIE,OAAOC,QAAS,CAAA,CAAA,EAI3BC,EAAA,IAAMd,EAAYe,OAAOC,QAAQ,CAAEnB,MAAOC,CAAAA,CAAW,EACpDD,GAAU,CACTU,EAASV,CAAK,CAAA,EAEhB,CAACY,CAAG,CAAC,EAGDQ,MAAAA,EAAc,CAACC,EAA6BC,IAAsB,CAChEC,MAAAA,EAAeF,EAAOG,iBAAiBC,QAAU,EACjDC,EAAcL,EAAOM,gBAAgBF,QAAU,EAEjDF,IAAiB,GAAKG,IAAgB,EACxC5B,EAASF,EAAE,uBAAuB,EAAGgC,EAAaC,OAAO,EAChDH,EAAc,GAErB9B,EAAAA,EAAE,WAAa0B,EAAY,UAAW,CACpCQ,aAAcT,EAAOG,eAAAA,CACtB,EACDI,EAAaG,OAAO,EAGpBnC,EAAAA,EAAE,WAAa0B,EAAY,OAAQ,CACjCU,YAAaX,EAAOM,cAAAA,CACrB,EACDC,EAAaK,MAAM,GAInBrC,EAAAA,EAAE,WAAa0B,EAAY,UAAW,CACpCQ,aAAcT,EAAOG,eAAAA,CACtB,EACDI,EAAaG,OAAO,CAExB,EAGIG,EAAW,SAAY,CACvB,GAAA,CACI/B,MAAAA,EAAYe,OAAOiB,OACvB,CAAEnC,MAAOC,CAAAA,EACT,CACED,MAAOC,EACPmC,UAAWrB,KAAKsB,IAAAA,EAAQ,GAAA,CACzB,EAGHvC,EAASF,EAAE,kBAAkB,EAAGgC,EAAaG,OAAO,QAC7CO,GACPxC,EAASF,EAAE,gBAAiB,CAAE0C,MAAAA,CAAAA,CAAO,EAAGV,EAAaK,MAAM,CAC7D,CAAA,EAGIM,EAAiB,SAAY,CAC7B,GAAA,CACIpC,MAAAA,EAAYe,OAAOiB,OACvB,CAAEnC,MAAOC,CAAAA,EACT,CACED,MAAOC,EACPmC,UAAW,CAAA,CACZ,EAEHtC,EAASF,EAAE,yBAAyB,EAAGgC,EAAaG,OAAO,EAClDjB,UACFwB,GACPxC,EAASF,EAAE,iBAAkB,CAAE0C,MAAAA,CAAAA,CAAO,EAAGV,EAAaK,MAAM,CAC9D,CAAA,EAGIO,EAAO,SAAY,CACvB,MAAMnB,EAAS,MAAMlB,EAAYe,OAAOuB,eAAe,CACrDzC,MAAOC,CAAAA,CACR,EACDmB,EAAYC,EAAQ,eAAe,EAE1BP,GAAA,EAGX,SACG4B,EAAK,CACJ,QAASC,EAAaC,MACtB,MAAOhD,EAAE,YAAY,EACrB,OAAQ,GACR,QAASF,EACT,QAAS,CACPmD,EAACC,EAAM,CACL,cAAY,oBAEZ,QAAQ,WACR,QAAS,IAAM,CACHZ,IACSxC,GACrB,EACA,KAAK,wBAAuB,SAE3BE,EAAE,UAAU,CAAA,EART,YAAY,EAUlBiD,EAACC,EAAM,CACL,cAAY,0BAEZ,QAAQ,WACR,QAAS,IAAM,CACGP,IACG7C,GACrB,EACA,KAAK,wBAAuB,SAE3BE,EAAE,OAAO,CAAA,EARN,OAAO,EAUbiD,EAACC,EAAM,CACL,cAAY,+BAEZ,QAAQ,YACR,QAAS,IAAM,CACPN,IACa9C,GACrB,EACA,KAAK,wBAAuB,SAE3BE,EAAE,MAAM,CAAA,EARL,MAAM,EAUZiD,EAACC,EAAM,CACL,GAAG,eACH,cAAY,SAEZ,QAASC,EAAcC,KACvB,QAAS,IAAM,CACMtD,GACrB,EAAE,SAEDE,EAAE,eAAe,CAAC,EANf,QAAQ,CAOL,EACT,SAAA,CAEFiD,EAACI,EAAW,CAAC,UAAU,iCAAgC,SACpDrD,EAAE,uBAAuB,CAAA,CACd,EACdiD,EAACK,EAAI,CACH,GAAG,wBACH,aAAY,GACZ,SAAU5C,EAAaX,CAAI,EAAE,WAE5BwD,EAAS,CACR,UAAU,iCACV,MAAOvD,EAAE,WAAW,EACpB,KAAK,YACL,QAAQ,aACR,UACEY,EAAO4C,MAAQC,EAAiBf,MAAQe,EAAiBC,QAC1D,WAEAC,EAAiB,CAChB,cAAY,mBACZ,UAAS,GACT,WAAU,GACV,MACEvD,GAAOoC,YAAc,EAChBxC,EAAE,MAAM,EACT,IAAImB,KAAKf,GAAOoC,UAAa,GAAI,EAAEoB,SACxC,EACD,KAAK,OACL,GAAG,aAAY,GACXnD,EAAS,YAAa,CACxBoD,SAAU,GACVC,QAASC,CAAAA,CACV,EACD,UACEnD,EAAO4C,MAAQC,EAAiBf,MAAQe,EAAiBC,OAAAA,CAC1D,CAAA,CACD,CAAA,CAEC,CAAA,CAAA,CACD,CAEZ,ECjNA,SAAwBM,IAAkB,CAClC,KAAA,CAAEhE,EAAAA,CAAAA,EAAMC,EAAe,UAAU,EAEjC,CAAEgE,SAAAA,EAAU1D,YAAAA,GAAgBC,EAAgB,EAC5C,CAAE0D,SAAAA,GAAa/D,EAAW,EAC1B,CAAEC,MAAAA,GAAUE,EAAU,EAEtB,CAAC6D,EAAqBC,CAAsB,EAAIrD,mBAAS,EAAK,EAC9D,CAACsD,EAAYC,CAAa,EAAIvD,mBAAS,EAAK,EAE5CwD,EAA8B,IAAM,CACxCH,EAAuB,CAACD,CAAmB,CAAA,EAGvCK,EAAS,SAAY,CACzB,MAAMC,EAAgB,MAAMlE,EAAYmE,SAASC,KAAM,EACjDC,GACJ,MAAMC,QAAQC,IACZL,EAAcM,IAAKC,GACjBzE,EAAY0E,QAAQC,aAAa,CAAEC,GAAIH,EAAOG,EAAAA,CAAI,CAAC,CACpD,GAEHC,OAEYR,EAAAA,EAAe/C,SAAW,CAAC,EAEnCwD,MAAAA,EAAUC,MAAMC,KACpB,IAAIC,IAAIZ,EAAeG,IAAiBU,GAAAA,EAAQC,MAAM,CAAC,CAAC,EAQnDC,OALL,MAAMd,QAAQC,IACZO,EAAQN,IAAKW,GAAWnF,EAAYqF,MAAMV,aAAa,CAAEC,GAAIO,CAAAA,CAAS,CAAC,CAAC,GAE1EN,MAEKO,EAGH,CAACE,EAAoBC,CAAa,EAAIC,EAAiB,CAC3DC,SAAU,6BACVC,WAAY,gCACZC,oBAAqB,iBACrBC,UAAW,SAAY,CACjB,GAAA,CACI5F,MAAAA,EAAYe,OAAO8E,UAAU,CAAEhG,MAAAA,CAAAA,CAAO,EAC5C6D,EAASoC,OAAO,CAAEC,YAAa,EAAA,CAAI,QAC5B5D,GACPwB,EAAS,kCAAmCxB,CAAK,CACnD,CACF,CAAA,CACD,EAEK6D,EAAgB,CACpBtD,EAACuD,EAAY,CAEX,cAAY,aACZ,UAAU,SACV,QAAS,IAAMjC,EAA8B,EAAA,SAE5CvE,EAAE,YAAY,CAAA,EALX,cAAc,EAOpBiD,EAACuD,EAAY,CAEX,cAAY,aACZ,UAAU,SACV,WAAYnC,EACZ,QAASwB,EAAmB,SAE3B7F,EAAE,0BAA0B,CAAA,EANzB,aAAa,CAOJ,EAGjB,SACEyG,EAAA,CAAA,SAAA,CACGxD,EAAA6C,EAAgB,CAAA,CAAA,IAChBY,EAAU,CACT,cAAAH,EACA,SAAS,iBACT,OAAO,0BACP,QAASI,EAASC,WAAAA,CAClB,EACFC,EAACC,EAAW,CAAC,QAAQ,QAAQ,UAAU,WAAU,SAC9C3C,CAAAA,GACClB,EAACpD,EAAe,CACd,kBAAmB0E,EACnB,KAAM,IAAM,CACmBA,GAC/B,CAAA,CAEH,EACDtB,EAAC8D,EAAa,CAAC,OAAAvC,CAAA,CAAkB,CAAA,CAAA,CACrB,CAAA,CAAA,CACb,CAEP"}