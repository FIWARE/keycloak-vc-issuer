{"version":3,"file":"DraggableTable.12d5d25c.js","sources":["../../src/authentication/components/DraggableTable.tsx"],"sourcesContent":["import {\n  DragEvent as ReactDragEvent,\n  ReactNode,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { get } from \"lodash-es\";\nimport {\n  ActionsColumn,\n  IAction,\n  TableComposable,\n  TableComposableProps,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport styles from \"@patternfly/react-styles/css/components/DataList/data-list\";\n\nexport type Field<T> = {\n  name: string;\n  displayKey?: string;\n  cellRenderer?: (row: T) => ReactNode;\n};\n\nexport type Action<T> = IAction & { isActionable?: (item: T) => boolean };\n\ntype DraggableTableProps<T> = Omit<TableComposableProps, \"data\" | \"ref\"> & {\n  keyField: string;\n  columns: Field<T>[];\n  data: T[];\n  actions?: Action<T>[];\n  onDragFinish: (dragged: string, newOrder: string[]) => void;\n};\n\nexport function DraggableTable<T>({\n  keyField,\n  columns,\n  data,\n  actions,\n  onDragFinish,\n  ...props\n}: DraggableTableProps<T>) {\n  const { t } = useTranslation(\"authentication\");\n  const bodyRef = useRef<HTMLTableSectionElement>(null);\n\n  const [state, setState] = useState({\n    draggedItemId: \"\",\n    draggingToItemIndex: -1,\n    dragging: false,\n    tempItemOrder: [\"\"],\n  });\n\n  const itemOrder: string[] = useMemo(\n    () => data.map((d) => get(d, keyField)),\n    [data]\n  );\n\n  const onDragStart = (evt: ReactDragEvent) => {\n    evt.dataTransfer.effectAllowed = \"move\";\n    evt.dataTransfer.setData(\"text/plain\", evt.currentTarget.id);\n    const draggedItemId = evt.currentTarget.id;\n\n    evt.currentTarget.classList.add(styles.modifiers.ghostRow);\n    evt.currentTarget.setAttribute(\"aria-pressed\", \"true\");\n    setState({ ...state, draggedItemId, dragging: true });\n  };\n\n  const moveItem = (arr: string[], i1: string, toIndex: number) => {\n    const fromIndex = arr.indexOf(i1);\n    if (fromIndex === toIndex) {\n      return arr;\n    }\n    const temp = arr.splice(fromIndex, 1);\n    arr.splice(toIndex, 0, temp[0]);\n\n    return arr;\n  };\n\n  const move = (itemOrder: string[]) => {\n    if (!bodyRef.current) return;\n    const ulNode = bodyRef.current;\n    const nodes = Array.from(ulNode.children);\n    if (nodes.map((node) => node.id).every((id, i) => id === itemOrder[i])) {\n      return;\n    }\n    while (ulNode.firstChild) {\n      ulNode.removeChild(ulNode.lastChild!);\n    }\n\n    itemOrder.forEach((id) => {\n      ulNode.appendChild(nodes.find((n) => n.id === id)!);\n    });\n  };\n\n  const onDragCancel = () => {\n    Array.from(bodyRef.current?.children || []).forEach((el) => {\n      el.classList.remove(styles.modifiers.ghostRow);\n      el.setAttribute(\"aria-pressed\", \"false\");\n    });\n    setState({\n      ...state,\n      draggedItemId: \"\",\n      draggingToItemIndex: -1,\n      dragging: false,\n    });\n  };\n\n  const onDragLeave = (evt: ReactDragEvent) => {\n    if (!isValidDrop(evt)) {\n      move(itemOrder);\n      setState({ ...state, draggingToItemIndex: -1 });\n    }\n  };\n\n  const isValidDrop = (evt: ReactDragEvent) => {\n    const ulRect = bodyRef.current!.getBoundingClientRect();\n    return (\n      evt.clientX > ulRect.x &&\n      evt.clientX < ulRect.x + ulRect.width &&\n      evt.clientY > ulRect.y &&\n      evt.clientY < ulRect.y + ulRect.height\n    );\n  };\n\n  const onDrop = (evt: ReactDragEvent) => {\n    if (isValidDrop(evt)) {\n      onDragFinish(state.draggedItemId, state.tempItemOrder);\n    } else {\n      onDragCancel();\n    }\n  };\n\n  const onDragOver = (evt: ReactDragEvent) => {\n    evt.preventDefault();\n\n    const td = evt.target as HTMLTableCellElement;\n    const curListItem = td.closest(\"tr\");\n    if (\n      !curListItem ||\n      (bodyRef.current && !bodyRef.current.contains(curListItem)) ||\n      curListItem.id === state.draggedItemId\n    ) {\n      return null;\n    } else {\n      const dragId = curListItem.id;\n      const draggingToItemIndex = Array.from(\n        bodyRef.current?.children || []\n      ).findIndex((item) => item.id === dragId);\n      if (draggingToItemIndex !== state.draggingToItemIndex) {\n        const tempItemOrder = moveItem(\n          itemOrder,\n          state.draggedItemId,\n          draggingToItemIndex\n        );\n        move(tempItemOrder);\n\n        setState({\n          ...state,\n          draggingToItemIndex,\n          tempItemOrder,\n        });\n      }\n    }\n  };\n\n  const onDragEnd = (evt: ReactDragEvent) => {\n    const tr = evt.target as HTMLTableRowElement;\n    tr.classList.remove(styles.modifiers.ghostRow);\n    tr.setAttribute(\"aria-pressed\", \"false\");\n    setState({\n      ...state,\n      draggedItemId: \"\",\n      draggingToItemIndex: -1,\n      dragging: false,\n    });\n  };\n\n  return (\n    <TableComposable\n      aria-label=\"Draggable table\"\n      className={state.dragging ? styles.modifiers.dragOver : \"\"}\n      {...props}\n    >\n      <Thead>\n        <Tr>\n          <Th />\n          {columns.map((column) => (\n            <Th key={column.name}>{t(column.displayKey || column.name)}</Th>\n          ))}\n        </Tr>\n      </Thead>\n      <Tbody\n        ref={bodyRef}\n        onDragOver={onDragOver}\n        onDrop={onDragOver}\n        onDragLeave={onDragLeave}\n      >\n        {data.map((row) => (\n          <Tr\n            key={get(row, keyField)}\n            id={get(row, keyField)}\n            draggable\n            onDrop={onDrop}\n            onDragEnd={onDragEnd}\n            onDragStart={onDragStart}\n          >\n            <Td\n              draggableRow={{\n                id: `draggable-row-${get(row, \"id\")}`,\n              }}\n            />\n            {columns.map((column) => (\n              <Td\n                key={`${get(row, \"id\")}_${column.name}`}\n                dataLabel={column.name}\n              >\n                {column.cellRenderer\n                  ? column.cellRenderer(row)\n                  : get(row, column.name)}\n              </Td>\n            ))}\n            {actions && (\n              <Td isActionCell>\n                <ActionsColumn\n                  items={actions.map(({ isActionable, ...action }) =>\n                    isActionable\n                      ? { ...action, isDisabled: !isActionable(row) }\n                      : action\n                  )}\n                  rowData={row!}\n                />\n              </Td>\n            )}\n          </Tr>\n        ))}\n      </Tbody>\n    </TableComposable>\n  );\n}\n"],"names":["DraggableTable","keyField","columns","data","actions","onDragFinish","props","t","useTranslation","bodyRef","useRef","state","setState","useState","draggedItemId","draggingToItemIndex","dragging","tempItemOrder","itemOrder","useMemo","map","d","get","onDragStart","evt","dataTransfer","effectAllowed","setData","currentTarget","id","classList","add","styles","modifiers","ghostRow","setAttribute","moveItem","arr","i1","toIndex","fromIndex","indexOf","temp","splice","move","current","ulNode","nodes","Array","from","children","node","every","i","firstChild","removeChild","lastChild","forEach","appendChild","find","n","onDragCancel","el","remove","onDragLeave","isValidDrop","ulRect","getBoundingClientRect","clientX","x","width","clientY","y","height","onDrop","onDragOver","preventDefault","curListItem","target","closest","contains","dragId","findIndex","item","onDragEnd","tr","TableComposable","dragOver","_jsx","Thead","Tr","Th","column","displayKey","name","Tbody","row","Td","cellRenderer","ActionsColumn","isActionable","action","isDisabled"],"mappings":"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"}