{"version":3,"file":"UserFederationLdapSettings.02bedac8.js","sources":["../../src/user-federation/ldap/mappers/LdapMapperList.tsx","../../src/user-federation/UserFederationLdapSettings.tsx"],"sourcesContent":["import type ComponentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentRepresentation\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, To, useNavigate, useParams } from \"react-router-dom\";\n\nimport { useAlerts } from \"../../../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../../../components/confirm-dialog/ConfirmDialog\";\nimport { ListEmptyState } from \"../../../components/list-empty-state/ListEmptyState\";\nimport { KeycloakDataTable } from \"../../../components/table-toolbar/KeycloakDataTable\";\nimport { useAdminClient, useFetch } from \"../../../context/auth/AdminClient\";\nimport useLocaleSort, { mapByKey } from \"../../../utils/useLocaleSort\";\n\nexport type LdapMapperListProps = {\n  toCreate: To;\n  toDetail: (mapperId: string) => To;\n};\n\nexport const LdapMapperList = ({ toCreate, toDetail }: LdapMapperListProps) => {\n  const navigate = useNavigate();\n  const { t } = useTranslation(\"user-federation\");\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const [mappers, setMappers] = useState<ComponentRepresentation[]>([]);\n  const localeSort = useLocaleSort();\n\n  const { id } = useParams<{ id: string }>();\n\n  const [selectedMapper, setSelectedMapper] =\n    useState<ComponentRepresentation>();\n\n  useFetch(\n    () =>\n      adminClient.components.find({\n        parent: id,\n        type: \"org.keycloak.storage.ldap.mappers.LDAPStorageMapper\",\n      }),\n    (mapper) => {\n      setMappers(\n        localeSort(\n          mapper.map((mapper) => ({\n            ...mapper,\n            name: mapper.name,\n            type: mapper.providerId,\n          })),\n          mapByKey(\"name\")\n        )\n      );\n    },\n    [key]\n  );\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: t(\"common:deleteMappingTitle\", { mapperId: selectedMapper?.id }),\n    messageKey: \"common:deleteMappingConfirm\",\n    continueButtonLabel: \"common:delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.components.del({\n          id: selectedMapper!.id!,\n        });\n        refresh();\n        addAlert(t(\"common:mappingDeletedSuccess\"), AlertVariant.success);\n        setSelectedMapper(undefined);\n      } catch (error) {\n        addError(\"common:mappingDeletedError\", error);\n      }\n    },\n  });\n\n  const MapperLink = (mapper: ComponentRepresentation) => (\n    <Link to={toDetail(mapper.id!)}>{mapper.name}</Link>\n  );\n\n  return (\n    <>\n      <DeleteConfirm />\n      <KeycloakDataTable\n        key={key}\n        loader={mappers}\n        ariaLabelKey=\"ldapMappersList\"\n        searchPlaceholderKey=\"common:searchForMapper\"\n        toolbarItem={\n          <ToolbarItem>\n            <Button\n              data-testid=\"add-mapper-btn\"\n              variant=\"primary\"\n              component={(props) => <Link {...props} to={toCreate} />}\n            >\n              {t(\"common:addMapper\")}\n            </Button>\n          </ToolbarItem>\n        }\n        actions={[\n          {\n            title: t(\"common:delete\"),\n            onRowClick: (mapper) => {\n              setSelectedMapper(mapper);\n              toggleDeleteDialog();\n            },\n          },\n        ]}\n        columns={[\n          {\n            name: \"name\",\n            cellRenderer: MapperLink,\n          },\n          {\n            name: \"type\",\n          },\n        ]}\n        emptyState={\n          <ListEmptyState\n            message={t(\"common:emptyMappers\")}\n            instructions={t(\"common:emptyMappersInstructions\")}\n            primaryActionText={t(\"common:emptyPrimaryAction\")}\n            onPrimaryAction={() => navigate(toCreate)}\n          />\n        }\n      />\n    </>\n  );\n};\n","import type ComponentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentRepresentation\";\nimport {\n  AlertVariant,\n  PageSection,\n  Tab,\n  TabTitleText,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useParams } from \"react-router-dom\";\n\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../components/routable-tabs/RoutableTabs\";\nimport { useAdminClient, useFetch } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { LdapMapperList } from \"./ldap/mappers/LdapMapperList\";\nimport {\n  toUserFederationLdap,\n  UserFederationLdapParams,\n  UserFederationLdapTab,\n} from \"./routes/UserFederationLdap\";\nimport { toUserFederationLdapMapper } from \"./routes/UserFederationLdapMapper\";\nimport { ExtendedHeader } from \"./shared/ExtendedHeader\";\nimport {\n  LdapComponentRepresentation,\n  serializeFormData,\n  UserFederationLdapForm,\n} from \"./UserFederationLdapForm\";\n\nexport default function UserFederationLdapSettings() {\n  const { t } = useTranslation(\"user-federation\");\n  const form = useForm<LdapComponentRepresentation>({ mode: \"onChange\" });\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n  const { id } = useParams<UserFederationLdapParams>();\n  const { addAlert, addError } = useAlerts();\n  const [component, setComponent] = useState<ComponentRepresentation>();\n  const [refreshCount, setRefreshCount] = useState(0);\n\n  const refresh = () => setRefreshCount((count) => count + 1);\n\n  useFetch(\n    () => adminClient.components.findOne({ id: id! }),\n    (component) => {\n      if (!component) {\n        throw new Error(t(\"common:notFound\"));\n      }\n\n      setComponent(component);\n      setupForm(component);\n    },\n    [id, refreshCount]\n  );\n\n  const useTab = (tab: UserFederationLdapTab) =>\n    useRoutableTab(toUserFederationLdap({ realm, id: id!, tab }));\n\n  const settingsTab = useTab(\"settings\");\n  const mappersTab = useTab(\"mappers\");\n\n  const setupForm = (component: ComponentRepresentation) => {\n    form.reset(component);\n    form.setValue(\n      \"config.periodicChangedUsersSync\",\n      component.config?.[\"changedSyncPeriod\"]?.[0] !== \"-1\"\n    );\n\n    form.setValue(\n      \"config.periodicFullSync\",\n      component.config?.[\"fullSyncPeriod\"]?.[0] !== \"-1\"\n    );\n  };\n\n  const onSubmit = async (formData: LdapComponentRepresentation) => {\n    try {\n      await adminClient.components.update(\n        { id: id! },\n        serializeFormData(formData)\n      );\n      addAlert(t(\"saveSuccess\"), AlertVariant.success);\n      refresh();\n    } catch (error) {\n      addError(\"user-federation:saveError\", error);\n    }\n  };\n\n  if (!component) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <FormProvider {...form}>\n      <ExtendedHeader\n        provider=\"LDAP\"\n        noDivider\n        editMode={component.config?.editMode}\n        save={() => form.handleSubmit(onSubmit)()}\n      />\n      <PageSection variant=\"light\" className=\"pf-u-p-0\">\n        <RoutableTabs\n          defaultLocation={toUserFederationLdap({\n            realm,\n            id: id!,\n            tab: \"settings\",\n          })}\n          isBox\n        >\n          <Tab\n            id=\"settings\"\n            title={<TabTitleText>{t(\"common:settings\")}</TabTitleText>}\n            {...settingsTab}\n          >\n            <PageSection variant=\"light\">\n              <UserFederationLdapForm id={id} onSubmit={onSubmit} />\n            </PageSection>\n          </Tab>\n          <Tab\n            id=\"mappers\"\n            title={<TabTitleText>{t(\"common:mappers\")}</TabTitleText>}\n            data-testid=\"ldap-mappers-tab\"\n            {...mappersTab}\n          >\n            <LdapMapperList\n              toCreate={toUserFederationLdapMapper({\n                realm,\n                id: id!,\n                mapperId: \"new\",\n              })}\n              toDetail={(mapperId) =>\n                toUserFederationLdapMapper({\n                  realm,\n                  id: id!,\n                  mapperId,\n                })\n              }\n            />\n          </Tab>\n        </RoutableTabs>\n      </PageSection>\n    </FormProvider>\n  );\n}\n"],"names":["LdapMapperList","toCreate","toDetail","navigate","useNavigate","t","useTranslation","adminClient","useAdminClient","addAlert","addError","useAlerts","key","setKey","useState","refresh","mappers","setMappers","localeSort","useLocaleSort","id","useParams","selectedMapper","setSelectedMapper","useFetch","components","find","parent","type","mapper","map","name","providerId","mapByKey","toggleDeleteDialog","DeleteConfirm","useConfirmDialog","titleKey","mapperId","messageKey","continueButtonLabel","continueButtonVariant","ButtonVariant","danger","onConfirm","del","AlertVariant","success","undefined","error","MapperLink","_jsx","Link","_Fragment","KeycloakDataTable","ToolbarItem","Button","props","title","onRowClick","cellRenderer","ListEmptyState","UserFederationLdapSettings","form","useForm","mode","realm","useRealm","component","setComponent","refreshCount","setRefreshCount","count","findOne","Error","setupForm","useTab","tab","useRoutableTab","toUserFederationLdap","settingsTab","mappersTab","reset","setValue","config","onSubmit","formData","update","serializeFormData","FormProvider","ExtendedHeader","editMode","handleSubmit","PageSection","RoutableTabs","Tab","TabTitleText","UserFederationLdapForm","toUserFederationLdapMapper","KeycloakSpinner"],"mappings":"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"}