{"version":3,"file":"MappingDetails.4861da71.js","sources":["../../src/client-scopes/details/MappingDetails.tsx"],"sourcesContent":["import type ProtocolMapperRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/protocolMapperRepresentation\";\nimport type { ProtocolMapperTypeRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/serverInfoRepesentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  DropdownItem,\n  FormGroup,\n  PageSection,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useMatch, useNavigate } from \"react-router-dom\";\n\nimport { toClient } from \"../../clients/routes/Client\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { DynamicComponents } from \"../../components/dynamic/DynamicComponents\";\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { ViewHeader } from \"../../components/view-header/ViewHeader\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { convertFormValuesToObject, convertToFormValues } from \"../../util\";\nimport { useParams } from \"../../utils/useParams\";\nimport { toClientScope } from \"../routes/ClientScope\";\nimport { MapperParams, MapperRoute } from \"../routes/Mapper\";\n\nimport \"./mapping-details.css\";\n\nexport default function MappingDetails() {\n  const { t } = useTranslation(\"client-scopes\");\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  const { id, mapperId } = useParams<MapperParams>();\n  const form = useForm();\n  const {\n    register,\n    setValue,\n    formState: { errors },\n    handleSubmit,\n  } = form;\n  const [mapping, setMapping] = useState<ProtocolMapperTypeRepresentation>();\n  const [config, setConfig] = useState<{\n    protocol?: string;\n    protocolMapper?: string;\n  }>();\n\n  const navigate = useNavigate();\n  const { realm } = useRealm();\n  const serverInfo = useServerInfo();\n  const isGuid = /^[{]?[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}[}]?$/;\n  const isUpdating = !!mapperId.match(isGuid);\n\n  const isOnClientScope = !!useMatch(MapperRoute.path);\n  const toDetails = () =>\n    isOnClientScope\n      ? toClientScope({ realm, id, tab: \"mappers\" })\n      : toClient({ realm, clientId: id, tab: \"mappers\" });\n\n  useFetch(\n    async () => {\n      let data: ProtocolMapperRepresentation | undefined;\n      if (isUpdating) {\n        if (isOnClientScope) {\n          data = await adminClient.clientScopes.findProtocolMapper({\n            id,\n            mapperId,\n          });\n        } else {\n          data = await adminClient.clients.findProtocolMapperById({\n            id,\n            mapperId,\n          });\n        }\n        if (!data) {\n          throw new Error(t(\"common:notFound\"));\n        }\n\n        const mapperTypes = serverInfo.protocolMapperTypes![data!.protocol!];\n        const mapping = mapperTypes.find(\n          (type) => type.id === data!.protocolMapper\n        );\n\n        return {\n          config: {\n            protocol: data.protocol,\n            protocolMapper: data.protocolMapper,\n          },\n          mapping,\n          data,\n        };\n      } else {\n        const model = isOnClientScope\n          ? await adminClient.clientScopes.findOne({ id })\n          : await adminClient.clients.findOne({ id });\n        if (!model) {\n          throw new Error(t(\"common:notFound\"));\n        }\n        const protocolMappers =\n          serverInfo.protocolMapperTypes![model.protocol!];\n        const mapping = protocolMappers.find(\n          (mapper) => mapper.id === mapperId\n        );\n        if (!mapping) {\n          throw new Error(t(\"common:notFound\"));\n        }\n        return {\n          mapping,\n          config: {\n            protocol: model.protocol,\n            protocolMapper: mapperId,\n          },\n        };\n      }\n    },\n    ({ config, mapping, data }) => {\n      setConfig(config);\n      setMapping(mapping);\n      if (data) {\n        convertToFormValues(data, setValue);\n      }\n    },\n    []\n  );\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"common:deleteMappingTitle\",\n    messageKey: \"common:deleteMappingConfirm\",\n    continueButtonLabel: \"common:delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        if (isOnClientScope) {\n          await adminClient.clientScopes.delProtocolMapper({\n            id,\n            mapperId,\n          });\n        } else {\n          await adminClient.clients.delProtocolMapper({\n            id,\n            mapperId,\n          });\n        }\n        addAlert(t(\"common:mappingDeletedSuccess\"), AlertVariant.success);\n        navigate(toDetails());\n      } catch (error) {\n        addError(\"common:mappingDeletedError\", error);\n      }\n    },\n  });\n\n  const save = async (formMapping: ProtocolMapperRepresentation) => {\n    const key = isUpdating ? \"Updated\" : \"Created\";\n    try {\n      const mapping = { ...config, ...convertFormValuesToObject(formMapping) };\n      if (isUpdating) {\n        isOnClientScope\n          ? await adminClient.clientScopes.updateProtocolMapper(\n              { id, mapperId },\n              { id: mapperId, ...mapping }\n            )\n          : await adminClient.clients.updateProtocolMapper(\n              { id, mapperId },\n              { id: mapperId, ...mapping }\n            );\n      } else {\n        isOnClientScope\n          ? await adminClient.clientScopes.addProtocolMapper({ id }, mapping)\n          : await adminClient.clients.addProtocolMapper({ id }, mapping);\n      }\n      addAlert(t(`common:mapping${key}Success`), AlertVariant.success);\n    } catch (error) {\n      addError(`common:mapping${key}Error`, error);\n    }\n  };\n\n  return (\n    <>\n      <DeleteConfirm />\n      <ViewHeader\n        titleKey={isUpdating ? mapping?.name! : t(\"common:addMapper\")}\n        subKey={isUpdating ? mapperId : \"client-scopes:addMapperExplain\"}\n        dropdownItems={\n          isUpdating\n            ? [\n                <DropdownItem\n                  key=\"delete\"\n                  value=\"delete\"\n                  onClick={toggleDeleteDialog}\n                >\n                  {t(\"common:delete\")}\n                </DropdownItem>,\n              ]\n            : undefined\n        }\n      />\n      <PageSection variant=\"light\">\n        <FormAccess\n          isHorizontal\n          onSubmit={handleSubmit(save)}\n          role=\"manage-clients\"\n          className=\"keycloak__client-scope-mapping-details__form\"\n        >\n          <FormGroup label={t(\"common:mapperType\")} fieldId=\"mapperType\">\n            <KeycloakTextInput\n              type=\"text\"\n              id=\"mapperType\"\n              name=\"mapperType\"\n              isReadOnly\n              value={mapping?.name}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"common:name\")}\n            labelIcon={\n              <HelpItem\n                helpText=\"client-scopes-help:mapperName\"\n                fieldLabelId=\"name\"\n              />\n            }\n            fieldId=\"name\"\n            isRequired\n            validated={\n              errors.name ? ValidatedOptions.error : ValidatedOptions.default\n            }\n            helperTextInvalid={t(\"common:required\")}\n          >\n            <KeycloakTextInput\n              id=\"name\"\n              isReadOnly={isUpdating}\n              validated={\n                errors.name ? ValidatedOptions.error : ValidatedOptions.default\n              }\n              {...register(\"name\", { required: true })}\n            />\n          </FormGroup>\n          <FormProvider {...form}>\n            <DynamicComponents properties={mapping?.properties || []} />\n          </FormProvider>\n          <ActionGroup>\n            <Button variant=\"primary\" type=\"submit\">\n              {t(\"common:save\")}\n            </Button>\n            <Button\n              variant=\"link\"\n              component={(props) => <Link {...props} to={toDetails()} />}\n            >\n              {t(\"common:cancel\")}\n            </Button>\n          </ActionGroup>\n        </FormAccess>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["MappingDetails","t","useTranslation","adminClient","useAdminClient","addAlert","addError","useAlerts","id","mapperId","useParams","form","useForm","register","setValue","formState","errors","handleSubmit","mapping","setMapping","useState","config","setConfig","navigate","useNavigate","realm","useRealm","serverInfo","useServerInfo","isGuid","isUpdating","match","isOnClientScope","useMatch","MapperRoute","path","toDetails","toClientScope","tab","toClient","clientId","useFetch","data","clientScopes","findProtocolMapper","clients","findProtocolMapperById","Error","protocolMapperTypes","protocol","find","type","protocolMapper","model","findOne","mapper","convertToFormValues","toggleDeleteDialog","DeleteConfirm","useConfirmDialog","titleKey","messageKey","continueButtonLabel","continueButtonVariant","ButtonVariant","danger","onConfirm","delProtocolMapper","AlertVariant","success","error","save","formMapping","key","convertFormValuesToObject","updateProtocolMapper","addProtocolMapper","_Fragment","_jsx","ViewHeader","name","DropdownItem","undefined","PageSection","FormAccess","FormGroup","KeycloakTextInput","HelpItem","ValidatedOptions","default","required","FormProvider","DynamicComponents","properties","_jsxs","ActionGroup","Button","props","Link"],"mappings":"4yDAmCA,SAAwBA,IAAiB,CACjC,KAAA,CAAEC,CAAAA,EAAMC,EAAe,eAAe,EACtC,CAAEC,YAAAA,GAAgBC,EAAgB,EAClC,CAAEC,SAAAA,EAAUC,SAAAA,GAAaC,EAAW,EAEpC,CAAEC,GAAAA,EAAIC,SAAAA,GAAaC,GAAyB,EAC5CC,EAAOC,KACP,CACJC,SAAAA,EACAC,SAAAA,EACAC,UAAW,CAAEC,OAAAA,CAAO,EACpBC,aAAAA,CACEN,EAAAA,EACE,CAACO,EAASC,CAAU,EAAIC,EAA4C,QAAA,SAAA,EACpE,CAACC,EAAQC,CAAS,EAAIF,EAGxB,QAAA,SAAA,EAEEG,EAAWC,IACX,CAAEC,MAAAA,GAAUC,EAAU,EACtBC,EAAaC,IACbC,EAAS,+DACTC,EAAa,CAAC,CAACrB,EAASsB,MAAMF,CAAM,EAEpCG,EAAkB,CAAC,CAACC,EAASC,EAAYC,IAAI,EAC7CC,EAAY,IAChBJ,EACIK,EAAc,CAAEZ,MAAAA,EAAOjB,GAAAA,EAAI8B,IAAK,SAAW,CAAA,EAC3CC,EAAS,CAAEd,MAAAA,EAAOe,SAAUhC,EAAI8B,IAAK,SAAA,CAAW,EAEtDG,EACE,SAAY,CACNC,IAAAA,EACJ,GAAIZ,EAAY,CAYd,GAXIE,EACKU,EAAA,MAAMvC,EAAYwC,aAAaC,mBAAmB,CACvDpC,GAAAA,EACAC,SAAAA,CAAAA,CACD,EAEMiC,EAAA,MAAMvC,EAAY0C,QAAQC,uBAAuB,CACtDtC,GAAAA,EACAC,SAAAA,CAAAA,CACD,EAEC,CAACiC,EACH,MAAM,IAAIK,MAAM9C,EAAE,iBAAiB,CAAC,EAItC,MAAMiB,EADcS,EAAWqB,oBAAqBN,EAAMO,UAC9BC,QAChBC,EAAK3C,KAAOkC,EAAMU,cAAc,EAGrC,MAAA,CACL/B,OAAQ,CACN4B,SAAUP,EAAKO,SACfG,eAAgBV,EAAKU,cACvB,EACAlC,QAAAA,EACAwB,KAAAA,CAAAA,CACF,KACK,CACL,MAAMW,EAAQrB,EACV,MAAM7B,EAAYwC,aAAaW,QAAQ,CAAE9C,GAAAA,CAAI,CAAA,EAC7C,MAAML,EAAY0C,QAAQS,QAAQ,CAAE9C,GAAAA,CAAAA,CAAI,EAC5C,GAAI,CAAC6C,EACH,MAAM,IAAIN,MAAM9C,EAAE,iBAAiB,CAAC,EAItC,MAAMiB,EADJS,EAAWqB,oBAAqBK,EAAMJ,UACRC,KAClBK,GAAAA,EAAO/C,KAAOC,CAAQ,EAEpC,GAAI,CAACS,EACH,MAAM,IAAI6B,MAAM9C,EAAE,iBAAiB,CAAC,EAE/B,MAAA,CACLiB,QAAAA,EACAG,OAAQ,CACN4B,SAAUI,EAAMJ,SAChBG,eAAgB3C,CAClB,CAAA,CAEJ,CAAA,EAEF,CAAC,CAAEY,OAAAA,EAAQH,QAAAA,EAASwB,KAAAA,CAAAA,IAAW,CAC7BpB,EAAUD,CAAM,EAChBF,EAAWD,CAAO,EACdwB,GACFc,GAAoBd,EAAM5B,CAAQ,CAEtC,EACA,CAAE,CAAA,EAGJ,KAAM,CAAC2C,EAAoBC,CAAa,EAAIC,GAAiB,CAC3DC,SAAU,4BACVC,WAAY,8BACZC,oBAAqB,gBACrBC,sBAAuBC,EAAcC,OACrCC,UAAW,SAAY,CACjB,GAAA,CACElC,EACI7B,MAAAA,EAAYwC,aAAawB,kBAAkB,CAC/C3D,GAAAA,EACAC,SAAAA,CAAAA,CACD,EAEKN,MAAAA,EAAY0C,QAAQsB,kBAAkB,CAC1C3D,GAAAA,EACAC,SAAAA,CAAAA,CACD,EAEHJ,EAASJ,EAAE,8BAA8B,EAAGmE,EAAaC,OAAO,EAChE9C,EAASa,GAAW,QACbkC,GACPhE,EAAS,6BAA8BgE,CAAK,CAC9C,CACF,CAAA,CACD,EAEKC,EAAO,MAAOC,GAA8C,CAC1DC,MAAAA,EAAM3C,EAAa,UAAY,UACjC,GAAA,CACF,MAAMZ,EAAU,CAAE,GAAGG,EAAQ,GAAGqD,GAA0BF,CAAW,CAAA,EACjE1C,EAEEE,EAAA,MAAM7B,EAAYwC,aAAagC,qBAC7B,CAAEnE,GAAAA,EAAIC,SAAAA,CAAAA,EACN,CAAED,GAAIC,EAAU,GAAGS,CAAS,CAAA,EAE9B,MAAMf,EAAY0C,QAAQ8B,qBACxB,CAAEnE,GAAAA,EAAIC,SAAAA,CAAAA,EACN,CAAED,GAAIC,EAAU,GAAGS,CAAAA,CAAS,EAI9Bc,EAAA,MAAM7B,EAAYwC,aAAaiC,kBAAkB,CAAEpE,GAAAA,GAAMU,CAAO,EAChE,MAAMf,EAAY0C,QAAQ+B,kBAAkB,CAAEpE,GAAAA,GAAMU,CAAO,EAEjEb,EAASJ,EAAG,iBAAgBwE,UAAY,EAAGL,EAAaC,OAAO,QACxDC,GACGhE,EAAA,iBAAgBmE,SAAYH,CAAK,CAC7C,CAAA,EAGF,SACEO,EAAA,CAAA,SAAA,CACGC,EAAApB,EAAgB,CAAA,CAAA,IAChBqB,GAAU,CACT,SAAUjD,EAAaZ,GAAS8D,KAAQ/E,EAAE,kBAAkB,EAC5D,OAAQ6B,EAAarB,EAAW,iCAChC,cACEqB,EACI,CACEgD,EAACG,EAAY,CAEX,MAAM,SACN,QAASxB,EAAmB,SAE3BxD,EAAE,eAAe,CAAA,EAJd,QAAQ,CAKC,EAEjBiF,MAAAA,CAEN,EACFJ,EAACK,EAAW,CAAC,QAAQ,QAAO,WACzBC,GAAU,CACT,aAAY,GACZ,SAAUnE,EAAasD,CAAI,EAC3B,KAAK,iBACL,UAAU,+CAA8C,SAAA,CAExDO,EAACO,EAAS,CAAC,MAAOpF,EAAE,mBAAmB,EAAG,QAAQ,aAAY,WAC3DqF,EAAiB,CAChB,KAAK,OACL,GAAG,aACH,KAAK,aACL,WAAU,GACV,MAAOpE,GAAS8D,IAAAA,CAAK,CAAA,CAEb,EACZF,EAACO,EAAS,CACR,MAAOpF,EAAE,aAAa,EACtB,YACGsF,GAAQ,CACP,SAAS,gCACT,aAAa,MAAA,CAEhB,EACD,QAAQ,OACR,WAAU,GACV,UACEvE,EAAOgE,KAAOQ,EAAiBlB,MAAQkB,EAAiBC,QAE1D,kBAAmBxF,EAAE,iBAAiB,EAAE,WAEvCqF,EAAiB,CAChB,GAAG,OACH,WAAYxD,EACZ,UACEd,EAAOgE,KAAOQ,EAAiBlB,MAAQkB,EAAiBC,QACzD,GACG5E,EAAS,OAAQ,CAAE6E,SAAU,EAAA,CAAM,CAAA,CAAC,CAAA,CAEhC,EACZZ,EAACa,GAAY,CAAA,GAAKhF,EAAI,WACnBiF,GAAiB,CAAC,WAAY1E,GAAS2E,YAAc,CAAA,CAAA,CAAG,CAAA,CAC5C,EACfC,EAACC,GAAW,CAAA,SAAA,CACVjB,EAACkB,EAAM,CAAC,QAAQ,UAAU,KAAK,SAAQ,SACpC/F,EAAE,aAAa,CAAA,CACT,EACT6E,EAACkB,EAAM,CACL,QAAQ,OACR,UAAsBC,GAAAnB,EAACoB,EAAI,CAAA,GAAKD,EAAO,GAAI7D,EAAS,CAAA,CAAO,EAAA,SAE1DnC,EAAE,eAAe,CAAA,CACX,CAAA,CAAA,CACG,CAAA,CAAA,CAAA,CAAA,CAEJ,CAAA,CAAA,CACb,CAEP"}