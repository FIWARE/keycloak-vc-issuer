{"version":3,"file":"EventsSection.174facb8.js","sources":["../../../../node_modules/lodash-es/pickBy.js","../../src/events/ResourceLinks.tsx","../../src/events/AdminEvents.tsx","../../src/events/EventsSection.tsx"],"sourcesContent":["import arrayMap from './_arrayMap.js';\nimport baseIteratee from './_baseIteratee.js';\nimport basePickBy from './_basePickBy.js';\nimport getAllKeysIn from './_getAllKeysIn.js';\n\n/**\n * Creates an object composed of the `object` properties `predicate` returns\n * truthy for. The predicate is invoked with two arguments: (value, key).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The source object.\n * @param {Function} [predicate=_.identity] The function invoked per property.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.pickBy(object, _.isNumber);\n * // => { 'a': 1, 'c': 3 }\n */\nfunction pickBy(object, predicate) {\n  if (object == null) {\n    return {};\n  }\n  var props = arrayMap(getAllKeysIn(object), function(prop) {\n    return [prop];\n  });\n  predicate = baseIteratee(predicate);\n  return basePickBy(object, props, function(value, path) {\n    return predicate(value, path[0]);\n  });\n}\n\nexport default pickBy;\n","import { ReactElement } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Tooltip } from \"@patternfly/react-core\";\n\nimport type AdminEventRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/adminEventRepresentation\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { toClient } from \"../clients/routes/Client\";\nimport { toGroups } from \"../groups/routes/Groups\";\nimport { toClientScope } from \"../client-scopes/routes/ClientScope\";\nimport { toUser } from \"../user/routes/User\";\nimport { toRealmRole } from \"../realm-roles/routes/RealmRole\";\nimport { toFlow } from \"../authentication/routes/Flow\";\n\ntype ResourceLinkProps = {\n  event: AdminEventRepresentation;\n};\n\nconst MAX_TEXT_LENGTH = 38;\nconst Truncate = ({\n  text,\n  children,\n}: {\n  text?: string;\n  children: (text: string) => ReactElement;\n}) => {\n  const definedText = text || \"\";\n  const needsTruncation = definedText.length > MAX_TEXT_LENGTH;\n  const truncatedText = definedText.substring(0, MAX_TEXT_LENGTH);\n  return needsTruncation ? (\n    <Tooltip content={text}>{children(truncatedText + \"â€¦\")}</Tooltip>\n  ) : (\n    children(definedText)\n  );\n};\n\nconst isLinkable = (event: AdminEventRepresentation) => {\n  if (event.operationType === \"DELETE\") {\n    return false;\n  }\n  return (\n    event.resourceType === \"USER\" ||\n    event.resourceType === \"GROUP_MEMBERSHIP\" ||\n    event.resourceType === \"GROUP\" ||\n    event.resourceType === \"CLIENT\" ||\n    event.resourceType?.startsWith(\"AUTHORIZATION_RESOURCE\") ||\n    event.resourceType === \"CLIENT_SCOPE\" ||\n    event.resourceType === \"AUTH_FLOW\" ||\n    event.resourcePath?.startsWith(\"roles-by-id\")\n  );\n};\n\nconst idRegex = new RegExp(\n  /([0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12})/\n);\n\nconst createLink = (realm: string, event: AdminEventRepresentation) => {\n  const part = idRegex.exec(event.resourcePath!);\n  if (!part) {\n    console.warn(\"event didn't contain a valid link\", event);\n    return \"\";\n  }\n  const id = part[1];\n\n  if (\n    event.resourceType === \"CLIENT\" ||\n    event.resourceType?.startsWith(\"AUTHORIZATION_RESOURCE\")\n  ) {\n    return toClient({\n      realm,\n      clientId: id,\n      tab: event.resourceType === \"CLIENT\" ? \"settings\" : \"authorization\",\n    });\n  }\n\n  if (event.resourceType === \"GROUP\") {\n    return toGroups({ realm, id });\n  }\n\n  if (event.resourceType === \"CLIENT_SCOPE\") {\n    return toClientScope({ realm, id, tab: \"settings\" });\n  }\n\n  if (\n    event.resourceType === \"USER\" ||\n    event.resourceType === \"GROUP_MEMBERSHIP\"\n  ) {\n    return toUser({ realm, id, tab: \"settings\" });\n  }\n\n  if (event.resourceType === \"AUTH_FLOW\") {\n    return toFlow({ realm, id, usedBy: \"-\" });\n  }\n\n  if (event.resourcePath?.startsWith(\"roles-by-id\")) {\n    return toRealmRole({ realm, id, tab: \"details\" });\n  }\n\n  return \"\";\n};\n\nexport const ResourceLink = ({ event }: ResourceLinkProps) => {\n  const { realm } = useRealm();\n  return (\n    <Truncate text={event.resourcePath}>\n      {(text) =>\n        isLinkable(event) ? (\n          <Link to={createLink(realm, event)}>{text}</Link>\n        ) : (\n          <span>{text}</span>\n        )\n      }\n    </Truncate>\n  );\n};\n\nexport const CellResourceLinkRenderer = (\n  adminEvent: AdminEventRepresentation\n) => <ResourceLink event={adminEvent} />;\n","import type AdminEventRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/adminEventRepresentation\";\nimport { CodeEditor, Language } from \"@patternfly/react-code-editor\";\nimport {\n  ActionGroup,\n  Button,\n  Chip,\n  ChipGroup,\n  DatePicker,\n  Dropdown,\n  DropdownToggle,\n  Flex,\n  FlexItem,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport {\n  cellWidth,\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n} from \"@patternfly/react-table\";\nimport { pickBy } from \"lodash-es\";\nimport { PropsWithChildren, useMemo, useState } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { KeycloakTextInput } from \"../components/keycloak-text-input/KeycloakTextInput\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport { KeycloakDataTable } from \"../components/table-toolbar/KeycloakDataTable\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../context/server-info/ServerInfoProvider\";\nimport { prettyPrintJSON } from \"../util\";\nimport useFormatDate, { FORMAT_DATE_AND_TIME } from \"../utils/useFormatDate\";\nimport { CellResourceLinkRenderer } from \"./ResourceLinks\";\n\nimport \"./events.css\";\n\ntype DisplayDialogProps = {\n  titleKey: string;\n  onClose: () => void;\n};\n\ntype AdminEventSearchForm = {\n  resourceTypes: string[];\n  operationTypes: string[];\n  resourcePath: string;\n  dateFrom: string;\n  dateTo: string;\n  authClient: string;\n  authUser: string;\n  authRealm: string;\n  authIpAddress: string;\n};\n\nconst defaultValues: AdminEventSearchForm = {\n  resourceTypes: [],\n  operationTypes: [],\n  resourcePath: \"\",\n  dateFrom: \"\",\n  dateTo: \"\",\n  authClient: \"\",\n  authUser: \"\",\n  authRealm: \"\",\n  authIpAddress: \"\",\n};\n\nconst DisplayDialog = ({\n  titleKey,\n  onClose,\n  children,\n}: PropsWithChildren<DisplayDialogProps>) => {\n  const { t } = useTranslation(\"events\");\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      title={t(titleKey)}\n      isOpen={true}\n      onClose={onClose}\n    >\n      {children}\n    </Modal>\n  );\n};\n\nexport const AdminEvents = () => {\n  const { t } = useTranslation(\"events\");\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n  const serverInfo = useServerInfo();\n  const formatDate = useFormatDate();\n  const resourceTypes = serverInfo.enums?.[\"resourceType\"];\n  const operationTypes = serverInfo.enums?.[\"operationType\"];\n\n  const [key, setKey] = useState(0);\n  const [searchDropdownOpen, setSearchDropdownOpen] = useState(false);\n  const [selectResourceTypesOpen, setSelectResourceTypesOpen] = useState(false);\n  const [selectOperationTypesOpen, setSelectOperationTypesOpen] =\n    useState(false);\n  const [activeFilters, setActiveFilters] = useState<\n    Partial<AdminEventSearchForm>\n  >({});\n\n  const [authEvent, setAuthEvent] = useState<AdminEventRepresentation>();\n  const [representationEvent, setRepresentationEvent] =\n    useState<AdminEventRepresentation>();\n\n  const filterLabels: Record<keyof AdminEventSearchForm, string> = {\n    resourceTypes: t(\"resourceTypes\"),\n    operationTypes: t(\"operationTypes\"),\n    resourcePath: t(\"resourcePath\"),\n    dateFrom: t(\"dateFrom\"),\n    dateTo: t(\"dateTo\"),\n    authClient: t(\"client\"),\n    authUser: t(\"userId\"),\n    authRealm: t(\"realm\"),\n    authIpAddress: t(\"ipAddress\"),\n  };\n\n  const {\n    getValues,\n    register,\n    reset,\n    formState: { isDirty },\n    control,\n  } = useForm<AdminEventSearchForm>({\n    mode: \"onChange\",\n    defaultValues,\n  });\n\n  function loader(first?: number, max?: number) {\n    return adminClient.realms.findAdminEvents({\n      // The admin client wants 'dateFrom' and 'dateTo' to be Date objects, however it cannot actually handle them so we need to cast to any.\n      ...(activeFilters as any),\n      realm,\n      first,\n      max,\n    });\n  }\n\n  function submitSearch() {\n    setSearchDropdownOpen(false);\n    commitFilters();\n  }\n\n  function resetSearch() {\n    reset();\n    commitFilters();\n  }\n\n  function removeFilter(key: keyof AdminEventSearchForm) {\n    const formValues: AdminEventSearchForm = { ...getValues() };\n    delete formValues[key];\n\n    reset({ ...defaultValues, ...formValues });\n    commitFilters();\n  }\n\n  function removeFilterValue(\n    key: keyof AdminEventSearchForm,\n    valueToRemove: string\n  ) {\n    const formValues = getValues();\n    const fieldValue = formValues[key];\n    const newFieldValue = Array.isArray(fieldValue)\n      ? fieldValue.filter((val) => val !== valueToRemove)\n      : fieldValue;\n\n    reset({ ...formValues, [key]: newFieldValue });\n    commitFilters();\n  }\n\n  function commitFilters() {\n    const newFilters: Partial<AdminEventSearchForm> = pickBy(\n      getValues(),\n      (value) => value !== \"\" || (Array.isArray(value) && value.length > 0)\n    );\n\n    setActiveFilters(newFilters);\n    setKey(key + 1);\n  }\n\n  function refresh() {\n    commitFilters();\n  }\n\n  const adminEventSearchFormDisplay = () => {\n    return (\n      <Flex\n        direction={{ default: \"column\" }}\n        spaceItems={{ default: \"spaceItemsNone\" }}\n      >\n        <FlexItem>\n          <Dropdown\n            id=\"admin-events-search-select\"\n            data-testid=\"AdminEventsSearchSelector\"\n            className=\"pf-u-ml-md\"\n            toggle={\n              <DropdownToggle\n                data-testid=\"adminEventsSearchSelectorToggle\"\n                onToggle={(isOpen) => setSearchDropdownOpen(isOpen)}\n                className=\"keycloak__events_search_selector_dropdown__toggle\"\n              >\n                {t(\"searchForAdminEvent\")}\n              </DropdownToggle>\n            }\n            isOpen={searchDropdownOpen}\n          >\n            <Form\n              isHorizontal\n              className=\"keycloak__events_search__form\"\n              data-testid=\"searchForm\"\n            >\n              <FormGroup\n                label={t(\"resourceTypes\")}\n                fieldId=\"kc-resourceTypes\"\n                className=\"keycloak__events_search__form_label\"\n              >\n                <Controller\n                  name=\"resourceTypes\"\n                  control={control}\n                  render={({ field }) => (\n                    <Select\n                      className=\"keycloak__events_search__type_select\"\n                      name=\"resourceTypes\"\n                      data-testid=\"resource-types-searchField\"\n                      chipGroupProps={{\n                        numChips: 1,\n                        expandedText: t(\"common:hide\"),\n                        collapsedText: t(\"common:showRemaining\"),\n                      }}\n                      variant={SelectVariant.typeaheadMulti}\n                      typeAheadAriaLabel=\"Select\"\n                      onToggle={(isOpen) => setSelectResourceTypesOpen(isOpen)}\n                      selections={field.value}\n                      onSelect={(_, selectedValue) => {\n                        const option = selectedValue.toString();\n                        const changedValue = field.value.includes(option)\n                          ? field.value.filter((item) => item !== option)\n                          : [...field.value, option];\n\n                        field.onChange(changedValue);\n                      }}\n                      onClear={(resource) => {\n                        resource.stopPropagation();\n                        field.onChange([]);\n                      }}\n                      isOpen={selectResourceTypesOpen}\n                      aria-labelledby={\"resourceTypes\"}\n                      chipGroupComponent={\n                        <ChipGroup>\n                          {field.value.map((chip) => (\n                            <Chip\n                              key={chip}\n                              onClick={(resource) => {\n                                resource.stopPropagation();\n                                field.onChange(\n                                  field.value.filter((val) => val !== chip)\n                                );\n                              }}\n                            >\n                              {chip}\n                            </Chip>\n                          ))}\n                        </ChipGroup>\n                      }\n                    >\n                      {resourceTypes?.map((option) => (\n                        <SelectOption key={option} value={option} />\n                      ))}\n                    </Select>\n                  )}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"operationTypes\")}\n                fieldId=\"kc-operationTypes\"\n                className=\"keycloak__events_search__form_label\"\n              >\n                <Controller\n                  name=\"operationTypes\"\n                  control={control}\n                  render={({ field }) => (\n                    <Select\n                      className=\"keycloak__events_search__type_select\"\n                      name=\"operationTypes\"\n                      data-testid=\"operation-types-searchField\"\n                      chipGroupProps={{\n                        numChips: 1,\n                        expandedText: t(\"common:hide\"),\n                        collapsedText: t(\"common:showRemaining\"),\n                      }}\n                      variant={SelectVariant.typeaheadMulti}\n                      typeAheadAriaLabel=\"Select\"\n                      onToggle={(isOpen) => setSelectOperationTypesOpen(isOpen)}\n                      selections={field.value}\n                      onSelect={(_, selectedValue) => {\n                        const option = selectedValue.toString();\n                        const changedValue = field.value.includes(option)\n                          ? field.value.filter((item) => item !== option)\n                          : [...field.value, option];\n\n                        field.onChange(changedValue);\n                      }}\n                      onClear={(operation) => {\n                        operation.stopPropagation();\n                        field.onChange([]);\n                      }}\n                      isOpen={selectOperationTypesOpen}\n                      aria-labelledby={\"operationTypes\"}\n                      chipGroupComponent={\n                        <ChipGroup>\n                          {field.value.map((chip) => (\n                            <Chip\n                              key={chip}\n                              onClick={(operation) => {\n                                operation.stopPropagation();\n                                field.onChange(\n                                  field.value.filter((val) => val !== chip)\n                                );\n                              }}\n                            >\n                              {chip}\n                            </Chip>\n                          ))}\n                        </ChipGroup>\n                      }\n                    >\n                      {operationTypes?.map((option) => (\n                        <SelectOption key={option} value={option} />\n                      ))}\n                    </Select>\n                  )}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"resourcePath\")}\n                fieldId=\"kc-resourcePath\"\n                className=\"keycloak__events_search__form_label\"\n              >\n                <KeycloakTextInput\n                  id=\"kc-resourcePath\"\n                  data-testid=\"resourcePath-searchField\"\n                  {...register(\"resourcePath\")}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"realm\")}\n                fieldId=\"kc-realm\"\n                className=\"keycloak__events_search__form_label\"\n              >\n                <KeycloakTextInput\n                  id=\"kc-realm\"\n                  data-testid=\"realm-searchField\"\n                  {...register(\"authRealm\")}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"client\")}\n                fieldId=\"kc-client\"\n                className=\"keycloak__events_search__form_label\"\n              >\n                <KeycloakTextInput\n                  id=\"kc-client\"\n                  data-testid=\"client-searchField\"\n                  {...register(\"authClient\")}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"user\")}\n                fieldId=\"kc-user\"\n                className=\"keycloak__events_search__form_label\"\n              >\n                <KeycloakTextInput\n                  id=\"kc-user\"\n                  data-testid=\"user-searchField\"\n                  {...register(\"authUser\")}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"ipAddress\")}\n                fieldId=\"kc-ipAddress\"\n                className=\"keycloak__events_search__form_label\"\n              >\n                <KeycloakTextInput\n                  id=\"kc-ipAddress\"\n                  data-testid=\"ipAddress-searchField\"\n                  {...register(\"authIpAddress\")}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"dateFrom\")}\n                fieldId=\"kc-dateFrom\"\n                className=\"keycloak__events_search__form_label\"\n              >\n                <Controller\n                  name=\"dateFrom\"\n                  control={control}\n                  render={({ field }) => (\n                    <DatePicker\n                      className=\"pf-u-w-100\"\n                      value={field.value}\n                      onChange={(_, value) => field.onChange(value)}\n                      inputProps={{ id: \"kc-dateFrom\" }}\n                    />\n                  )}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"dateTo\")}\n                fieldId=\"kc-dateTo\"\n                className=\"keycloak__events_search__form_label\"\n              >\n                <Controller\n                  name=\"dateTo\"\n                  control={control}\n                  render={({ field }) => (\n                    <DatePicker\n                      className=\"pf-u-w-100\"\n                      value={field.value}\n                      onChange={(_, value) => field.onChange(value)}\n                      inputProps={{ id: \"kc-dateTo\" }}\n                    />\n                  )}\n                />\n              </FormGroup>\n              <ActionGroup>\n                <Button\n                  variant={\"primary\"}\n                  onClick={submitSearch}\n                  data-testid=\"search-events-btn\"\n                  isDisabled={!isDirty}\n                >\n                  {t(\"searchAdminEventsBtn\")}\n                </Button>\n                <Button\n                  variant=\"secondary\"\n                  onClick={resetSearch}\n                  isDisabled={!isDirty}\n                >\n                  {t(\"resetBtn\")}\n                </Button>\n              </ActionGroup>\n            </Form>\n          </Dropdown>\n          <Button\n            className=\"pf-u-ml-md\"\n            onClick={refresh}\n            data-testid=\"refresh-btn\"\n          >\n            {t(\"refresh\")}\n          </Button>\n        </FlexItem>\n        <FlexItem>\n          {Object.entries(activeFilters).length > 0 && (\n            <div className=\"keycloak__searchChips pf-u-ml-md\">\n              {Object.entries(activeFilters).map((filter) => {\n                const [key, value] = filter as [\n                  keyof AdminEventSearchForm,\n                  string | string[]\n                ];\n\n                return (\n                  <ChipGroup\n                    className=\"pf-u-mt-md pf-u-mr-md\"\n                    key={key}\n                    categoryName={filterLabels[key]}\n                    isClosable\n                    onClick={() => removeFilter(key)}\n                  >\n                    {typeof value === \"string\" ? (\n                      <Chip isReadOnly>{value}</Chip>\n                    ) : (\n                      value.map((entry) => (\n                        <Chip\n                          key={entry}\n                          onClick={() => removeFilterValue(key, entry)}\n                        >\n                          {entry}\n                        </Chip>\n                      ))\n                    )}\n                  </ChipGroup>\n                );\n              })}\n            </div>\n          )}\n        </FlexItem>\n      </Flex>\n    );\n  };\n\n  const rows = [\n    [t(\"realm\"), authEvent?.authDetails?.realmId],\n    [t(\"client\"), authEvent?.authDetails?.clientId],\n    [t(\"user\"), authEvent?.authDetails?.userId],\n    [t(\"ipAddress\"), authEvent?.authDetails?.ipAddress],\n  ];\n\n  const code = useMemo(\n    () =>\n      representationEvent?.representation\n        ? prettyPrintJSON(JSON.parse(representationEvent.representation))\n        : \"\",\n    [representationEvent?.representation]\n  );\n\n  return (\n    <>\n      {authEvent && (\n        <DisplayDialog titleKey=\"auth\" onClose={() => setAuthEvent(undefined)}>\n          <Table\n            aria-label=\"authData\"\n            data-testid=\"auth-dialog\"\n            variant={TableVariant.compact}\n            cells={[t(\"attribute\"), t(\"value\")]}\n            rows={rows}\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n        </DisplayDialog>\n      )}\n      {representationEvent && (\n        <DisplayDialog\n          titleKey=\"representation\"\n          data-testid=\"representation-dialog\"\n          onClose={() => setRepresentationEvent(undefined)}\n        >\n          <CodeEditor\n            isLineNumbersVisible\n            isReadOnly\n            code={code}\n            language={Language.json}\n            height=\"8rem\"\n          />\n        </DisplayDialog>\n      )}\n      <KeycloakDataTable\n        key={key}\n        loader={loader}\n        isPaginated\n        ariaLabelKey=\"events:adminEvents\"\n        toolbarItem={adminEventSearchFormDisplay()}\n        actions={[\n          {\n            title: t(\"auth\"),\n            onRowClick: (event) => setAuthEvent(event),\n          },\n          {\n            title: t(\"representation\"),\n            onRowClick: (event) => setRepresentationEvent(event),\n          },\n        ]}\n        columns={[\n          {\n            name: \"time\",\n            displayKey: \"events:time\",\n            cellRenderer: (row) =>\n              formatDate(new Date(row.time!), FORMAT_DATE_AND_TIME),\n          },\n          {\n            name: \"resourcePath\",\n            displayKey: \"events:resourcePath\",\n            cellRenderer: CellResourceLinkRenderer,\n          },\n          {\n            name: \"resourceType\",\n            displayKey: \"events:resourceType\",\n          },\n          {\n            name: \"operationType\",\n            displayKey: \"events:operationType\",\n            transforms: [cellWidth(10)],\n          },\n          {\n            name: \"\",\n            displayKey: \"events:user\",\n            cellRenderer: (event) => event.authDetails?.userId,\n          },\n        ]}\n        emptyState={\n          <ListEmptyState\n            message={t(\"emptyEvents\")}\n            instructions={t(\"emptyEventsInstructions\")}\n          />\n        }\n        isSearching={Object.keys(activeFilters).length > 0}\n      />\n    </>\n  );\n};\n","import type EventRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/eventRepresentation\";\nimport type EventType from \"@keycloak/keycloak-admin-client/lib/defs/eventTypes\";\nimport type { RealmEventsConfigRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/realmEventsConfigRepresentation\";\nimport {\n  ActionGroup,\n  Button,\n  Chip,\n  ChipGroup,\n  DatePicker,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Dropdown,\n  DropdownToggle,\n  Flex,\n  FlexItem,\n  Form,\n  FormGroup,\n  PageSection,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Tab,\n  TabTitleText,\n  Tooltip,\n} from \"@patternfly/react-core\";\nimport { CheckCircleIcon, WarningTriangleIcon } from \"@patternfly/react-icons\";\nimport { cellWidth, expandable } from \"@patternfly/react-table\";\nimport { pickBy } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\n\nimport { KeycloakTextInput } from \"../components/keycloak-text-input/KeycloakTextInput\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../components/routable-tabs/RoutableTabs\";\nimport { KeycloakDataTable } from \"../components/table-toolbar/KeycloakDataTable\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useAdminClient, useFetch } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport helpUrls from \"../help-urls\";\nimport { toRealmSettings } from \"../realm-settings/routes/RealmSettings\";\nimport { toUser } from \"../user/routes/User\";\nimport useFormatDate, { FORMAT_DATE_AND_TIME } from \"../utils/useFormatDate\";\nimport { AdminEvents } from \"./AdminEvents\";\nimport { EventsTab, toEvents } from \"./routes/Events\";\n\nimport \"./events.css\";\n\ntype UserEventSearchForm = {\n  client: string;\n  dateFrom: string;\n  dateTo: string;\n  user: string;\n  type: EventType[];\n};\n\nconst defaultValues: UserEventSearchForm = {\n  client: \"\",\n  dateFrom: \"\",\n  dateTo: \"\",\n  user: \"\",\n  type: [],\n};\n\nconst StatusRow = (event: EventRepresentation) =>\n  !event.error ? (\n    <span>\n      <CheckCircleIcon color=\"green\" /> {event.type}\n    </span>\n  ) : (\n    <Tooltip content={event.error}>\n      <span>\n        <WarningTriangleIcon color=\"orange\" /> {event.type}\n      </span>\n    </Tooltip>\n  );\n\nconst DetailCell = (event: EventRepresentation) => (\n  <DescriptionList isHorizontal className=\"keycloak_eventsection_details\">\n    {event.details &&\n      Object.entries(event.details).map(([key, value]) => (\n        <DescriptionListGroup key={key}>\n          <DescriptionListTerm>{key}</DescriptionListTerm>\n          <DescriptionListDescription>{value}</DescriptionListDescription>\n        </DescriptionListGroup>\n      ))}\n  </DescriptionList>\n);\n\nexport default function EventsSection() {\n  const { t } = useTranslation(\"events\");\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n  const formatDate = useFormatDate();\n  const [key, setKey] = useState(0);\n  const [searchDropdownOpen, setSearchDropdownOpen] = useState(false);\n  const [selectOpen, setSelectOpen] = useState(false);\n  const [events, setEvents] = useState<RealmEventsConfigRepresentation>();\n  const [activeFilters, setActiveFilters] = useState<\n    Partial<UserEventSearchForm>\n  >({});\n\n  const filterLabels: Record<keyof UserEventSearchForm, string> = {\n    client: t(\"client\"),\n    dateFrom: t(\"dateFrom\"),\n    dateTo: t(\"dateTo\"),\n    user: t(\"userId\"),\n    type: t(\"eventType\"),\n  };\n\n  const {\n    getValues,\n    register,\n    reset,\n    formState: { isDirty },\n    control,\n    handleSubmit,\n  } = useForm<UserEventSearchForm>({\n    mode: \"onChange\",\n    defaultValues,\n  });\n\n  useFetch(\n    () => adminClient.realms.getConfigEvents({ realm }),\n    (events) => setEvents(events),\n    []\n  );\n\n  function loader(first?: number, max?: number) {\n    return adminClient.realms.findEvents({\n      // The admin client wants 'dateFrom' and 'dateTo' to be Date objects, however it cannot actually handle them so we need to cast to any.\n      ...(activeFilters as any),\n      realm,\n      first,\n      max,\n    });\n  }\n\n  const useTab = (tab: EventsTab) => useRoutableTab(toEvents({ realm, tab }));\n\n  const userEventsTab = useTab(\"user-events\");\n  const adminEventsTab = useTab(\"admin-events\");\n\n  function onSubmit() {\n    setSearchDropdownOpen(false);\n    commitFilters();\n  }\n\n  function resetSearch() {\n    reset();\n    commitFilters();\n  }\n\n  function removeFilter(key: keyof UserEventSearchForm) {\n    const formValues: UserEventSearchForm = { ...getValues() };\n    delete formValues[key];\n\n    reset({ ...defaultValues, ...formValues });\n    commitFilters();\n  }\n\n  function removeFilterValue(\n    key: keyof UserEventSearchForm,\n    valueToRemove: EventType\n  ) {\n    const formValues = getValues();\n    const fieldValue = formValues[key];\n    const newFieldValue = Array.isArray(fieldValue)\n      ? fieldValue.filter((val) => val !== valueToRemove)\n      : fieldValue;\n\n    reset({ ...formValues, [key]: newFieldValue });\n    commitFilters();\n  }\n\n  function commitFilters() {\n    const newFilters: Partial<UserEventSearchForm> = pickBy(\n      getValues(),\n      (value) => value !== \"\" || (Array.isArray(value) && value.length > 0)\n    );\n\n    setActiveFilters(newFilters);\n    setKey(key + 1);\n  }\n\n  function refresh() {\n    commitFilters();\n  }\n\n  const UserDetailLink = (event: EventRepresentation) => (\n    <>\n      {event.userId && (\n        <Link\n          key={`link-${event.time}-${event.type}`}\n          to={toUser({\n            realm,\n            id: event.userId,\n            tab: \"settings\",\n          })}\n        >\n          {event.userId}\n        </Link>\n      )}\n      {!event.userId && t(\"noUserDetails\")}\n    </>\n  );\n\n  const userEventSearchFormDisplay = () => {\n    return (\n      <Flex\n        direction={{ default: \"column\" }}\n        spaceItems={{ default: \"spaceItemsNone\" }}\n      >\n        <FlexItem>\n          <Dropdown\n            id=\"user-events-search-select\"\n            data-testid=\"UserEventsSearchSelector\"\n            className=\"pf-u-ml-md\"\n            toggle={\n              <DropdownToggle\n                data-testid=\"userEventsSearchSelectorToggle\"\n                onToggle={(isOpen) => setSearchDropdownOpen(isOpen)}\n                className=\"keycloak__events_search_selector_dropdown__toggle\"\n              >\n                {t(\"searchForUserEvent\")}\n              </DropdownToggle>\n            }\n            isOpen={searchDropdownOpen}\n          >\n            <Form\n              data-testid=\"searchForm\"\n              className=\"keycloak__events_search__form\"\n              onSubmit={handleSubmit(onSubmit)}\n              isHorizontal\n            >\n              <FormGroup\n                label={t(\"userId\")}\n                fieldId=\"kc-userId\"\n                className=\"keycloak__events_search__form_label\"\n              >\n                <KeycloakTextInput\n                  id=\"kc-userId\"\n                  data-testid=\"userId-searchField\"\n                  {...register(\"user\")}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"eventType\")}\n                fieldId=\"kc-eventType\"\n                className=\"keycloak__events_search__form_label\"\n              >\n                <Controller\n                  name=\"type\"\n                  control={control}\n                  render={({ field }) => (\n                    <Select\n                      className=\"keycloak__events_search__type_select\"\n                      name=\"eventType\"\n                      data-testid=\"event-type-searchField\"\n                      chipGroupProps={{\n                        numChips: 1,\n                        expandedText: t(\"common:hide\"),\n                        collapsedText: t(\"common:showRemaining\"),\n                      }}\n                      variant={SelectVariant.typeaheadMulti}\n                      typeAheadAriaLabel=\"Select\"\n                      onToggle={(isOpen) => setSelectOpen(isOpen)}\n                      selections={field.value}\n                      onSelect={(_, selectedValue) => {\n                        const option = selectedValue.toString() as EventType;\n                        const changedValue = field.value.includes(option)\n                          ? field.value.filter((item) => item !== option)\n                          : [...field.value, option];\n\n                        field.onChange(changedValue);\n                      }}\n                      onClear={(event) => {\n                        event.stopPropagation();\n                        field.onChange([]);\n                      }}\n                      isOpen={selectOpen}\n                      aria-labelledby={\"eventType\"}\n                      chipGroupComponent={\n                        <ChipGroup>\n                          {field.value.map((chip) => (\n                            <Chip\n                              key={chip}\n                              onClick={(event) => {\n                                event.stopPropagation();\n                                field.onChange(\n                                  field.value.filter((val) => val !== chip)\n                                );\n                              }}\n                            >\n                              {chip}\n                            </Chip>\n                          ))}\n                        </ChipGroup>\n                      }\n                    >\n                      {events?.enabledEventTypes?.map((option) => (\n                        <SelectOption key={option} value={option} />\n                      ))}\n                    </Select>\n                  )}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"client\")}\n                fieldId=\"kc-client\"\n                className=\"keycloak__events_search__form_label\"\n              >\n                <KeycloakTextInput\n                  id=\"kc-client\"\n                  data-testid=\"client-searchField\"\n                  {...register(\"client\")}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"dateFrom\")}\n                fieldId=\"kc-dateFrom\"\n                className=\"keycloak__events_search__form_label\"\n              >\n                <Controller\n                  name=\"dateFrom\"\n                  control={control}\n                  render={({ field }) => (\n                    <DatePicker\n                      className=\"pf-u-w-100\"\n                      value={field.value}\n                      onChange={(_, value) => field.onChange(value)}\n                      inputProps={{ id: \"kc-dateFrom\" }}\n                    />\n                  )}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"dateTo\")}\n                fieldId=\"kc-dateTo\"\n                className=\"keycloak__events_search__form_label\"\n              >\n                <Controller\n                  name=\"dateTo\"\n                  control={control}\n                  render={({ field }) => (\n                    <DatePicker\n                      className=\"pf-u-w-100\"\n                      value={field.value}\n                      onChange={(_, value) => field.onChange(value)}\n                      inputProps={{ id: \"kc-dateTo\" }}\n                    />\n                  )}\n                />\n              </FormGroup>\n              <ActionGroup>\n                <Button\n                  data-testid=\"search-events-btn\"\n                  variant=\"primary\"\n                  type=\"submit\"\n                  isDisabled={!isDirty}\n                >\n                  {t(\"searchUserEventsBtn\")}\n                </Button>\n                <Button\n                  variant=\"secondary\"\n                  onClick={resetSearch}\n                  isDisabled={!isDirty}\n                >\n                  {t(\"resetBtn\")}\n                </Button>\n              </ActionGroup>\n            </Form>\n          </Dropdown>\n          <Button\n            className=\"pf-u-ml-md\"\n            onClick={refresh}\n            data-testid=\"refresh-btn\"\n          >\n            {t(\"refresh\")}\n          </Button>\n        </FlexItem>\n        <FlexItem>\n          {Object.entries(activeFilters).length > 0 && (\n            <div className=\"keycloak__searchChips pf-u-ml-md\">\n              {Object.entries(activeFilters).map((filter) => {\n                const [key, value] = filter as [\n                  keyof UserEventSearchForm,\n                  string | EventType[]\n                ];\n\n                return (\n                  <ChipGroup\n                    className=\"pf-u-mt-md pf-u-mr-md\"\n                    key={key}\n                    categoryName={filterLabels[key]}\n                    isClosable\n                    onClick={() => removeFilter(key)}\n                  >\n                    {typeof value === \"string\" ? (\n                      <Chip isReadOnly>{value}</Chip>\n                    ) : (\n                      value.map((entry) => (\n                        <Chip\n                          key={entry}\n                          onClick={() => removeFilterValue(key, entry)}\n                        >\n                          {entry}\n                        </Chip>\n                      ))\n                    )}\n                  </ChipGroup>\n                );\n              })}\n            </div>\n          )}\n        </FlexItem>\n      </Flex>\n    );\n  };\n\n  return (\n    <>\n      <ViewHeader\n        titleKey=\"events:title\"\n        subKey={\n          <Trans i18nKey=\"events:eventExplain\">\n            If you want to configure user events, Admin events or Event\n            listeners, please enter\n            <Link to={toRealmSettings({ realm, tab: \"events\" })}>\n              {t(\"eventConfig\")}\n            </Link>\n            page realm settings to configure.\n          </Trans>\n        }\n        helpUrl={helpUrls.eventsUrl}\n        divider={false}\n      />\n      <PageSection variant=\"light\" className=\"pf-u-p-0\">\n        <RoutableTabs\n          isBox\n          defaultLocation={toEvents({ realm, tab: \"user-events\" })}\n        >\n          <Tab\n            title={<TabTitleText>{t(\"userEvents\")}</TabTitleText>}\n            {...userEventsTab}\n          >\n            <div className=\"keycloak__events_table\">\n              <KeycloakDataTable\n                key={key}\n                loader={loader}\n                detailColumns={[\n                  {\n                    name: \"details\",\n                    enabled: (event) => event.details !== undefined,\n                    cellRenderer: DetailCell,\n                  },\n                ]}\n                isPaginated\n                ariaLabelKey=\"events:title\"\n                toolbarItem={userEventSearchFormDisplay()}\n                columns={[\n                  {\n                    name: \"time\",\n                    displayKey: \"events:time\",\n                    cellFormatters: [expandable],\n                    cellRenderer: (row) =>\n                      formatDate(new Date(row.time!), FORMAT_DATE_AND_TIME),\n                  },\n                  {\n                    name: \"userId\",\n                    displayKey: \"events:user\",\n                    cellRenderer: UserDetailLink,\n                  },\n                  {\n                    name: \"type\",\n                    displayKey: \"events:eventType\",\n                    cellRenderer: StatusRow,\n                  },\n                  {\n                    name: \"ipAddress\",\n                    displayKey: \"events:ipAddress\",\n                    transforms: [cellWidth(10)],\n                  },\n                  {\n                    name: \"clientId\",\n                    displayKey: \"events:client\",\n                  },\n                ]}\n                emptyState={\n                  <ListEmptyState\n                    message={t(\"emptyEvents\")}\n                    instructions={t(\"emptyEventsInstructions\")}\n                  />\n                }\n                isSearching={Object.keys(activeFilters).length > 0}\n              />\n            </div>\n          </Tab>\n          <Tab\n            title={<TabTitleText>{t(\"adminEvents\")}</TabTitleText>}\n            data-testid=\"admin-events-tab\"\n            {...adminEventsTab}\n          >\n            <AdminEvents />\n          </Tab>\n        </RoutableTabs>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["pickBy","object","predicate","props","arrayMap","getAllKeysIn","prop","baseIteratee","basePickBy","value","path","MAX_TEXT_LENGTH","Truncate","text","children","definedText","needsTruncation","length","truncatedText","substring","Tooltip","isLinkable","event","operationType","resourceType","startsWith","resourcePath","idRegex","RegExp","createLink","realm","part","exec","warn","id","toClient","clientId","tab","toGroups","toClientScope","toUser","toFlow","usedBy","toRealmRole","ResourceLink","useRealm","Link","_jsx","CellResourceLinkRenderer","adminEvent","defaultValues","resourceTypes","operationTypes","dateFrom","dateTo","authClient","authUser","authRealm","authIpAddress","DisplayDialog","titleKey","onClose","t","useTranslation","Modal","ModalVariant","medium","AdminEvents","adminClient","useAdminClient","serverInfo","useServerInfo","formatDate","useFormatDate","enums","key","setKey","useState","searchDropdownOpen","setSearchDropdownOpen","selectResourceTypesOpen","setSelectResourceTypesOpen","selectOperationTypesOpen","setSelectOperationTypesOpen","activeFilters","setActiveFilters","authEvent","setAuthEvent","representationEvent","setRepresentationEvent","filterLabels","getValues","register","reset","formState","isDirty","control","useForm","mode","loader","first","max","realms","findAdminEvents","submitSearch","commitFilters","resetSearch","removeFilter","formValues","removeFilterValue","valueToRemove","fieldValue","newFieldValue","Array","isArray","filter","val","newFilters","refresh","adminEventSearchFormDisplay","Flex","default","_jsxs","FlexItem","Dropdown","DropdownToggle","isOpen","Form","FormGroup","Controller","field","Select","numChips","expandedText","collapsedText","SelectVariant","typeaheadMulti","_","selectedValue","option","toString","changedValue","includes","item","onChange","resource","stopPropagation","ChipGroup","map","chip","Chip","SelectOption","operation","KeycloakTextInput","DatePicker","ActionGroup","Button","Object","entries","entry","rows","authDetails","realmId","userId","ipAddress","code","useMemo","representation","prettyPrintJSON","JSON","parse","_Fragment","undefined","Table","TableVariant","compact","TableHeader","TableBody","CodeEditor","Language","json","KeycloakDataTable","title","onRowClick","name","displayKey","cellRenderer","Date","row","time","FORMAT_DATE_AND_TIME","transforms","cellWidth","ListEmptyState","keys","client","user","type","StatusRow","error","WarningTriangleIcon","CheckCircleIcon","DetailCell","DescriptionList","details","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","EventsSection","selectOpen","setSelectOpen","events","setEvents","handleSubmit","useFetch","getConfigEvents","findEvents","useTab","useRoutableTab","toEvents","userEventsTab","adminEventsTab","onSubmit","UserDetailLink","userEventSearchFormDisplay","enabledEventTypes","ViewHeader","Trans","toRealmSettings","helpUrls","eventsUrl","PageSection","RoutableTabs","Tab","TabTitleText","enabled","cellFormatters","expandable"],"mappings":"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"}