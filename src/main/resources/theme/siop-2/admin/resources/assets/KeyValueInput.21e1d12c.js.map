{"version":3,"file":"KeyValueInput.21e1d12c.js","sources":["../../src/components/key-value-form/KeyValueInput.tsx"],"sourcesContent":["import {\n  ActionList,\n  ActionListItem,\n  Button,\n  Flex,\n  FlexItem,\n} from \"@patternfly/react-core\";\nimport { MinusCircleIcon, PlusCircleIcon } from \"@patternfly/react-icons\";\nimport { useEffect } from \"react\";\nimport { useFieldArray, useFormContext, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { KeycloakTextInput } from \"../keycloak-text-input/KeycloakTextInput\";\nimport { KeyValueType } from \"./key-value-convert\";\n\ntype KeyValueInputProps = {\n  name: string;\n};\n\nexport const KeyValueInput = ({ name }: KeyValueInputProps) => {\n  const { t } = useTranslation(\"common\");\n  const { control, register } = useFormContext();\n  const { fields, append, remove } = useFieldArray({\n    control,\n    name,\n  });\n\n  const watchFields = useWatch({\n    control,\n    name,\n    defaultValue: [{ key: \"\", value: \"\" }],\n  });\n\n  const isValid =\n    Array.isArray(watchFields) &&\n    watchFields.every(\n      ({ key, value }: KeyValueType) =>\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        key?.trim().length !== 0 && value?.trim().length !== 0\n    );\n\n  useEffect(() => {\n    if (!fields.length) {\n      append({ key: \"\", value: \"\" }, { shouldFocus: false });\n    }\n  }, [fields]);\n\n  return (\n    <>\n      <Flex direction={{ default: \"column\" }}>\n        <Flex>\n          <FlexItem\n            grow={{ default: \"grow\" }}\n            spacer={{ default: \"spacerNone\" }}\n          >\n            <strong>{t(\"key\")}</strong>\n          </FlexItem>\n          <FlexItem grow={{ default: \"grow\" }}>\n            <strong>{t(\"value\")}</strong>\n          </FlexItem>\n        </Flex>\n        {fields.map((attribute, index) => (\n          <Flex key={attribute.id} data-testid=\"row\">\n            <FlexItem grow={{ default: \"grow\" }}>\n              <KeycloakTextInput\n                placeholder={t(\"keyPlaceholder\")}\n                aria-label={t(\"key\")}\n                defaultValue=\"\"\n                data-testid={`${name}[${index}].key`}\n                {...register(`${name}[${index}].key`)}\n              />\n            </FlexItem>\n            <FlexItem\n              grow={{ default: \"grow\" }}\n              spacer={{ default: \"spacerNone\" }}\n            >\n              <KeycloakTextInput\n                placeholder={t(\"valuePlaceholder\")}\n                aria-label={t(\"value\")}\n                defaultValue=\"\"\n                data-testid={`${name}[${index}].value`}\n                {...register(`${name}[${index}].value`)}\n              />\n            </FlexItem>\n            <FlexItem>\n              <Button\n                variant=\"link\"\n                title={t(\"removeAttribute\")}\n                isDisabled={watchFields.length === 1}\n                onClick={() => remove(index)}\n                data-testid={`${name}[${index}].remove`}\n              >\n                <MinusCircleIcon />\n              </Button>\n            </FlexItem>\n          </Flex>\n        ))}\n      </Flex>\n      <ActionList>\n        <ActionListItem>\n          <Button\n            data-testid={`${name}-add-row`}\n            className=\"pf-u-px-0 pf-u-mt-sm\"\n            variant=\"link\"\n            icon={<PlusCircleIcon />}\n            isDisabled={!isValid}\n            onClick={() => append({ key: \"\", value: \"\" })}\n          >\n            {t(\"addAttribute\")}\n          </Button>\n        </ActionListItem>\n      </ActionList>\n    </>\n  );\n};\n"],"names":["KeyValueInput","name","t","useTranslation","control","register","useFormContext","fields","append","remove","useFieldArray","watchFields","useWatch","defaultValue","key","value","isValid","Array","isArray","every","trim","length","useEffect","shouldFocus","_Fragment","_jsxs","Flex","default","_jsx","FlexItem","map","attribute","index","KeycloakTextInput","Button","MinusCircleIcon","id","ActionList","ActionListItem","PlusCircleIcon"],"mappings":"0YAmBO,MAAMA,EAAgB,CAAC,CAAEC,KAAAA,CAAyB,IAAM,CACvD,KAAA,CAAEC,CAAAA,EAAMC,EAAe,QAAQ,EAC/B,CAAEC,QAAAA,EAASC,SAAAA,GAAaC,EAAgB,EACxC,CAAEC,OAAAA,EAAQC,OAAAA,EAAQC,OAAAA,GAAWC,EAAc,CAC/CN,QAAAA,EACAH,KAAAA,CAAAA,CACD,EAEKU,EAAcC,EAAS,CAC3BR,QAAAA,EACAH,KAAAA,EACAY,aAAc,CAAC,CAAEC,IAAK,GAAIC,MAAO,EAAA,CAAI,CAAA,CACtC,EAEKC,EACJC,MAAMC,QAAQP,CAAW,GACzBA,EAAYQ,MACV,CAAC,CAAEL,IAAAA,EAAKC,MAAAA,CAAAA,IAEND,GAAKM,KAAOC,EAAAA,SAAW,GAAKN,GAAOK,KAAOC,EAAAA,SAAW,CAAC,EAG5DC,OAAAA,EAAAA,QAAAA,UAAU,IAAM,CACTf,EAAOc,QACHb,EAAA,CAAEM,IAAK,GAAIC,MAAO,EAAA,EAAM,CAAEQ,YAAa,EAAA,CAAO,CACvD,EACC,CAAChB,CAAM,CAAC,IAGTiB,EAAA,CAAA,SAAA,CACEC,EAACC,EAAI,CAAC,UAAW,CAAEC,QAAS,QAAS,EAAE,SAAA,CACrCF,EAACC,EAAI,CAAA,SAAA,CACHE,EAACC,EAAQ,CACP,KAAM,CAAEF,QAAS,MAAO,EACxB,OAAQ,CAAEA,QAAS,YAAa,EAAE,WAElC,SAAA,CAAA,SAASzB,EAAE,KAAK,CAAA,CAAC,CAAA,CACR,EACX0B,EAACC,EAAQ,CAAC,KAAM,CAAEF,QAAS,MAAO,EAAE,WAClC,SAAA,CAAA,SAASzB,EAAE,OAAO,CAAA,CAAC,CAAA,CACV,CAAA,CAAA,CACN,EACNK,EAAOuB,IAAI,CAACC,EAAWC,MACrBN,EAAI,CAAoB,cAAY,MAAK,SAAA,CACxCE,EAACC,EAAQ,CAAC,KAAM,CAAEF,QAAS,MAAO,EAAE,WACjCM,EAAiB,CAChB,YAAa/B,EAAE,gBAAgB,EAC/B,aAAYA,EAAE,KAAK,EACnB,aAAa,GACb,cAAc,GAAED,KAAQ+B,SAAa,GACjC3B,EAAU,GAAEJ,KAAQ+B,QAAY,CAAA,CAAC,CAAA,CAE9B,EACXJ,EAACC,EAAQ,CACP,KAAM,CAAEF,QAAS,MAAO,EACxB,OAAQ,CAAEA,QAAS,YAAa,EAAE,WAEjCM,EAAiB,CAChB,YAAa/B,EAAE,kBAAkB,EACjC,aAAYA,EAAE,OAAO,EACrB,aAAa,GACb,cAAc,GAAED,KAAQ+B,WAAe,GACnC3B,EAAU,GAAEJ,KAAQ+B,UAAc,CAAA,CAAC,CAAA,CAEhC,EACXJ,EAACC,EAAQ,CAAA,WACNK,EAAM,CACL,QAAQ,OACR,MAAOhC,EAAE,iBAAiB,EAC1B,WAAYS,EAAYU,SAAW,EACnC,QAAS,IAAMZ,EAAOuB,CAAK,EAC3B,cAAc,GAAE/B,KAAQ+B,YAAgB,SAExCJ,EAACO,EAAe,EAAA,CAAA,CAAG,CAAA,CAEZ,CAAA,CAAA,EAhCFJ,EAAUK,EAAE,CAkCxB,CAAC,CAAA,CACG,EACPR,EAACS,EAAU,CAAA,WACRC,EAAc,CAAA,WACZJ,EAAM,CACL,cAAc,GAAEjC,YAChB,UAAU,uBACV,QAAQ,OACR,KAAM2B,EAACW,EAAkB,EAAA,EACzB,WAAY,CAACvB,EACb,QAAS,IAAMR,EAAO,CAAEM,IAAK,GAAIC,MAAO,EAAA,CAAI,EAAE,SAE7Cb,EAAE,cAAc,CAAA,CAAC,CAAA,CACX,CAAA,CAEA,CAAA,CAAA,CACZ,CAEP"}