{"version":3,"file":"UserFederationLdapForm.5db28b69.js","sources":["../../src/user-federation/ldap/LdapSettingsConnection.tsx","../../src/user-federation/ldap/LdapSettingsAdvanced.tsx","../../src/user-federation/ldap/LdapSettingsGeneral.tsx","../../src/user-federation/ldap/LdapSettingsKerberosIntegration.tsx","../../src/user-federation/ldap/LdapSettingsSearching.tsx","../../src/user-federation/ldap/LdapSettingsSynchronization.tsx","../../src/user-federation/UserFederationLdapForm.tsx"],"sourcesContent":["// @ts-nocheck\nimport type TestLdapConnectionRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/testLdapConnection\";\nimport {\n  AlertVariant,\n  Button,\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Switch,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { get, isEqual } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { Controller, UseFormReturn, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { PasswordInput } from \"../../components/password-input/PasswordInput\";\nimport { WizardSectionHeader } from \"../../components/wizard-section-header/WizardSectionHeader\";\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\n\nexport type LdapSettingsConnectionProps = {\n  form: UseFormReturn;\n  id?: string;\n  showSectionHeading?: boolean;\n  showSectionDescription?: boolean;\n};\n\nconst testLdapProperties: Array<keyof TestLdapConnectionRepresentation> = [\n  \"connectionUrl\",\n  \"bindDn\",\n  \"bindCredential\",\n  \"useTruststoreSpi\",\n  \"connectionTimeout\",\n  \"startTls\",\n  \"authType\",\n];\n\ntype TestTypes = \"testConnection\" | \"testAuthentication\";\n\nexport const convertFormToSettings = (form: UseFormReturn) => {\n  const settings: TestLdapConnectionRepresentation = {};\n\n  testLdapProperties.forEach((key) => {\n    const value = get(form.getValues(), `config.${key}`);\n    settings[key] = Array.isArray(value) ? value[0] : \"\";\n  });\n\n  return settings;\n};\n\nexport const LdapSettingsConnection = ({\n  form,\n  id,\n  showSectionHeading = false,\n  showSectionDescription = false,\n}: LdapSettingsConnectionProps) => {\n  const { t } = useTranslation(\"user-federation\");\n  const { t: helpText } = useTranslation(\"user-federation-help\");\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n  const { addAlert, addError } = useAlerts();\n  const edit = !!id;\n\n  const testLdap = async (testType: TestTypes) => {\n    try {\n      const settings = convertFormToSettings(form);\n      await adminClient.realms.testLDAPConnection(\n        { realm },\n        { ...settings, action: testType, componentId: id }\n      );\n      addAlert(t(\"testSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"user-federation:testError\", error);\n    }\n  };\n\n  const [isTruststoreSpiDropdownOpen, setIsTruststoreSpiDropdownOpen] =\n    useState(false);\n\n  const [isBindTypeDropdownOpen, setIsBindTypeDropdownOpen] = useState(false);\n\n  const ldapBindType = useWatch({\n    control: form.control,\n    name: \"config.authType\",\n    defaultValue: [\"simple\"],\n  });\n\n  return (\n    <>\n      {showSectionHeading && (\n        <WizardSectionHeader\n          title={t(\"connectionAndAuthenticationSettings\")}\n          description={helpText(\n            \"ldapConnectionAndAuthorizationSettingsDescription\"\n          )}\n          showDescription={showSectionDescription}\n        />\n      )}\n      <FormAccess role=\"manage-realm\" isHorizontal>\n        <FormGroup\n          label={t(\"connectionURL\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"user-federation-help:consoleDisplayConnectionUrlHelp\"\n              fieldLabelId=\"user-federation:connectionURL\"\n            />\n          }\n          fieldId=\"kc-ui-connection-url\"\n          isRequired\n          validated={\n            form.formState.errors.config?.connectionUrl?.[0]\n              ? \"error\"\n              : \"default\"\n          }\n          helperTextInvalid={\n            form.formState.errors.config?.connectionUrl?.[0].message\n          }\n        >\n          <KeycloakTextInput\n            isRequired\n            type=\"url\"\n            id=\"kc-ui-connection-url\"\n            data-testid=\"ldap-connection-url\"\n            validated={\n              form.formState.errors.config?.connectionUrl?.[0]\n                ? \"error\"\n                : \"default\"\n            }\n            {...form.register(\"config.connectionUrl.0\", {\n              required: {\n                value: true,\n                message: t(\"validateConnectionUrl\").toString(),\n              },\n            })}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"enableStartTls\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"user-federation-help:enableStartTlsHelp\"\n              fieldLabelId=\"user-federation:enableStartTls\"\n            />\n          }\n          fieldId=\"kc-enable-start-tls\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.startTls\"\n            defaultValue={[\"false\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id={\"kc-enable-start-tls\"}\n                data-testid=\"enable-start-tls\"\n                isDisabled={false}\n                onChange={(value) => field.onChange([`${value}`])}\n                isChecked={field.value[0] === \"true\"}\n                label={t(\"common:on\")}\n                labelOff={t(\"common:off\")}\n                aria-label={t(\"enableStartTls\")}\n              />\n            )}\n          ></Controller>\n        </FormGroup>\n\n        <FormGroup\n          label={t(\"useTruststoreSpi\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"user-federation-help:useTruststoreSpiHelp\"\n              fieldLabelId=\"user-federation:useTruststoreSpi\"\n            />\n          }\n          fieldId=\"kc-use-truststore-spi\"\n        >\n          <Controller\n            name=\"config.useTruststoreSpi[0]\"\n            control={form.control}\n            defaultValue=\"ldapsOnly\"\n            render={({ field }) => (\n              <Select\n                toggleId=\"kc-use-truststore-spi\"\n                onToggle={() =>\n                  setIsTruststoreSpiDropdownOpen(!isTruststoreSpiDropdownOpen)\n                }\n                isOpen={isTruststoreSpiDropdownOpen}\n                onSelect={(_, value) => {\n                  field.onChange(value.toString());\n                  setIsTruststoreSpiDropdownOpen(false);\n                }}\n                selections={field.value}\n              >\n                <SelectOption value=\"always\">{t(\"always\")}</SelectOption>\n                <SelectOption value=\"ldapsOnly\">{t(\"onlyLdaps\")}</SelectOption>\n                <SelectOption value=\"never\">{t(\"never\")}</SelectOption>\n              </Select>\n            )}\n          ></Controller>\n        </FormGroup>\n        <FormGroup\n          label={t(\"connectionPooling\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"user-federation-help:connectionPoolingHelp\"\n              fieldLabelId=\"user-federation:connectionPooling\"\n            />\n          }\n          fieldId=\"kc-connection-pooling\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.connectionPooling\"\n            defaultValue={[\"false\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id={\"kc-connection-pooling\"}\n                data-testid=\"connection-pooling\"\n                isDisabled={false}\n                onChange={(value) => field.onChange([`${value}`])}\n                isChecked={field.value[0] === \"true\"}\n                label={t(\"common:on\")}\n                labelOff={t(\"common:off\")}\n                aria-label={t(\"connectionPooling\")}\n              />\n            )}\n          ></Controller>\n        </FormGroup>\n        <FormGroup\n          label={t(\"connectionTimeout\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"user-federation-help:connectionTimeoutHelp\"\n              fieldLabelId=\"user-federation:consoleTimeout\"\n            />\n          }\n          fieldId=\"kc-ui-connection-timeout\"\n        >\n          <KeycloakTextInput\n            type=\"number\"\n            min={0}\n            id=\"kc-ui-connection-timeout\"\n            data-testid=\"connection-timeout\"\n            {...form.register(\"config.connectionTimeout.0\")}\n          />\n        </FormGroup>\n        <FormGroup fieldId=\"kc-test-connection-button\">\n          <Button\n            variant=\"secondary\"\n            id=\"kc-test-connection-button\"\n            data-testid=\"test-connection-button\"\n            onClick={() => testLdap(\"testConnection\")}\n          >\n            {t(\"common:testConnection\")}\n          </Button>\n        </FormGroup>\n        <FormGroup\n          label={t(\"bindType\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"user-federation-help:bindTypeHelp\"\n              fieldLabelId=\"user-federation:bindType\"\n            />\n          }\n          fieldId=\"kc-bind-type\"\n          isRequired\n        >\n          <Controller\n            name=\"config.authType[0]\"\n            defaultValue=\"simple\"\n            control={form.control}\n            render={({ field }) => (\n              <Select\n                toggleId=\"kc-bind-type\"\n                required\n                onToggle={() =>\n                  setIsBindTypeDropdownOpen(!isBindTypeDropdownOpen)\n                }\n                isOpen={isBindTypeDropdownOpen}\n                onSelect={(_, value) => {\n                  field.onChange(value as string);\n                  setIsBindTypeDropdownOpen(false);\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n                data-testid=\"ldap-bind-type\"\n              >\n                <SelectOption value=\"simple\" />\n                <SelectOption value=\"none\" />\n              </Select>\n            )}\n          ></Controller>\n        </FormGroup>\n\n        {isEqual(ldapBindType, [\"simple\"]) && (\n          <>\n            <FormGroup\n              label={t(\"bindDn\")}\n              labelIcon={\n                <HelpItem\n                  helpText=\"user-federation-help:bindDnHelp\"\n                  fieldLabelId=\"user-federation:bindDn\"\n                />\n              }\n              fieldId=\"kc-ui-bind-dn\"\n              helperTextInvalid={t(\"validateBindDn\")}\n              validated={\n                form.formState.errors.config?.bindDn\n                  ? ValidatedOptions.error\n                  : ValidatedOptions.default\n              }\n              isRequired\n            >\n              <KeycloakTextInput\n                type=\"text\"\n                id=\"kc-ui-bind-dn\"\n                data-testid=\"ldap-bind-dn\"\n                validated={\n                  form.formState.errors.config?.bindDn\n                    ? ValidatedOptions.error\n                    : ValidatedOptions.default\n                }\n                {...form.register(\"config.bindDn.0\", { required: true })}\n              />\n            </FormGroup>\n            <FormGroup\n              label={t(\"bindCredentials\")}\n              labelIcon={\n                <HelpItem\n                  helpText=\"user-federation-help:bindCredentialsHelp\"\n                  fieldLabelId=\"user-federation:bindCredentials\"\n                />\n              }\n              fieldId=\"kc-ui-bind-credentials\"\n              helperTextInvalid={t(\"validateBindCredentials\")}\n              validated={\n                form.formState.errors.config?.bindCredential\n                  ? ValidatedOptions.error\n                  : ValidatedOptions.default\n              }\n              isRequired\n            >\n              <PasswordInput\n                hasReveal={!edit}\n                isRequired\n                id=\"kc-ui-bind-credentials\"\n                data-testid=\"ldap-bind-credentials\"\n                validated={\n                  form.formState.errors.config?.bindCredential\n                    ? ValidatedOptions.error\n                    : ValidatedOptions.default\n                }\n                {...form.register(\"config.bindCredential.0\", {\n                  required: true,\n                })}\n              />\n            </FormGroup>\n          </>\n        )}\n        <FormGroup fieldId=\"kc-test-auth-button\">\n          <Button\n            variant=\"secondary\"\n            id=\"kc-test-auth-button\"\n            data-testid=\"test-auth-button\"\n            onClick={() => testLdap(\"testAuthentication\")}\n          >\n            {t(\"testAuthentication\")}\n          </Button>\n        </FormGroup>\n      </FormAccess>\n    </>\n  );\n};\n","import { Button, FormGroup, Switch } from \"@patternfly/react-core\";\nimport { Controller, UseFormReturn } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { WizardSectionHeader } from \"../../components/wizard-section-header/WizardSectionHeader\";\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { convertFormToSettings } from \"./LdapSettingsConnection\";\n\nexport type LdapSettingsAdvancedProps = {\n  id?: string;\n  form: UseFormReturn;\n  showSectionHeading?: boolean;\n  showSectionDescription?: boolean;\n};\n\nconst PASSWORD_MODIFY_OID = \"1.3.6.1.4.1.4203.1.11.1\";\n\nexport const LdapSettingsAdvanced = ({\n  id,\n  form,\n  showSectionHeading = false,\n  showSectionDescription = false,\n}: LdapSettingsAdvancedProps) => {\n  const { t } = useTranslation(\"user-federation\");\n  const { t: helpText } = useTranslation(\"user-federation-help\");\n\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n  const { addAlert, addError } = useAlerts();\n\n  const testLdap = async () => {\n    if (!(await form.trigger())) return;\n    try {\n      const settings = convertFormToSettings(form);\n      const ldapOids = await adminClient.realms.ldapServerCapabilities(\n        { realm },\n        { ...settings, componentId: id }\n      );\n      addAlert(t(\"testSuccess\"));\n      const passwordModifyOid = ldapOids.filter(\n        (id: { oid: string }) => id.oid === PASSWORD_MODIFY_OID\n      );\n      form.setValue(\"config.usePasswordModifyExtendedOp\", [\n        (passwordModifyOid.length > 0).toString(),\n      ]);\n    } catch (error) {\n      addError(\"user-federation:testError\", error);\n    }\n  };\n\n  return (\n    <>\n      {showSectionHeading && (\n        <WizardSectionHeader\n          title={t(\"advancedSettings\")}\n          description={helpText(\"ldapAdvancedSettingsDescription\")}\n          showDescription={showSectionDescription}\n        />\n      )}\n\n      <FormAccess role=\"manage-realm\" isHorizontal>\n        <FormGroup\n          label={t(\"enableLdapv3Password\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"user-federation-help:enableLdapv3PasswordHelp\"\n              fieldLabelId=\"user-federation:enableLdapv3Password\"\n            />\n          }\n          fieldId=\"kc-enable-ldapv3-password\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.usePasswordModifyExtendedOp\"\n            defaultValue={[\"false\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id={\"kc-enable-ldapv3-password\"}\n                data-testid=\"ldapv3-password\"\n                isDisabled={false}\n                onChange={(value) => field.onChange([`${value}`])}\n                isChecked={field.value[0] === \"true\"}\n                label={t(\"common:on\")}\n                labelOff={t(\"common:off\")}\n                aria-label={t(\"enableLdapv3Password\")}\n              />\n            )}\n          ></Controller>\n        </FormGroup>\n\n        <FormGroup\n          label={t(\"validatePasswordPolicy\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"user-federation-help:validatePasswordPolicyHelp\"\n              fieldLabelId=\"user-federation:validatePasswordPolicy\"\n            />\n          }\n          fieldId=\"kc-validate-password-policy\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.validatePasswordPolicy\"\n            defaultValue={[\"false\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id={\"kc-validate-password-policy\"}\n                data-testid=\"password-policy\"\n                isDisabled={false}\n                onChange={(value) => field.onChange([`${value}`])}\n                isChecked={field.value[0] === \"true\"}\n                label={t(\"common:on\")}\n                labelOff={t(\"common:off\")}\n                aria-label={t(\"validatePasswordPolicy\")}\n              />\n            )}\n          ></Controller>\n        </FormGroup>\n\n        <FormGroup\n          label={t(\"trustEmail\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"user-federation-help:trustEmailHelp\"\n              fieldLabelId=\"user-federation:trustEmail\"\n            />\n          }\n          fieldId=\"kc-trust-email\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.trustEmail\"\n            defaultValue={[\"false\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id={\"kc-trust-email\"}\n                data-testid=\"trust-email\"\n                isDisabled={false}\n                onChange={(value) => field.onChange([`${value}`])}\n                isChecked={field.value[0] === \"true\"}\n                label={t(\"common:on\")}\n                labelOff={t(\"common:off\")}\n                aria-label={t(\"trustEmail\")}\n              />\n            )}\n          ></Controller>\n        </FormGroup>\n        <FormGroup fieldId=\"query-extensions\">\n          <Button\n            variant=\"secondary\"\n            id=\"query-extensions\"\n            data-testid=\"query-extensions\"\n            onClick={testLdap}\n          >\n            {t(\"queryExtensions\")}\n          </Button>\n        </FormGroup>\n      </FormAccess>\n    </>\n  );\n};\n","import {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, UseFormReturn } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { WizardSectionHeader } from \"../../components/wizard-section-header/WizardSectionHeader\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\n\nexport type LdapSettingsGeneralProps = {\n  form: UseFormReturn;\n  showSectionHeading?: boolean;\n  showSectionDescription?: boolean;\n  vendorEdit?: boolean;\n};\n\nexport const LdapSettingsGeneral = ({\n  form,\n  showSectionHeading = false,\n  showSectionDescription = false,\n  vendorEdit = false,\n}: LdapSettingsGeneralProps) => {\n  const { t } = useTranslation(\"user-federation\");\n  const { t: helpText } = useTranslation(\"user-federation-help\");\n\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n\n  useFetch(\n    () => adminClient.realms.findOne({ realm }),\n    (result) => form.setValue(\"parentId\", result!.id),\n    []\n  );\n  const [isVendorDropdownOpen, setIsVendorDropdownOpen] = useState(false);\n\n  const setVendorDefaultValues = () => {\n    switch (form.getValues(\"config.vendor[0]\")) {\n      case \"ad\":\n        form.setValue(\"config.usernameLDAPAttribute[0]\", \"cn\");\n        form.setValue(\"config.rdnLDAPAttribute[0]\", \"cn\");\n        form.setValue(\"config.uuidLDAPAttribute[0]\", \"objectGUID\");\n        form.setValue(\n          \"config.userObjectClasses[0]\",\n          \"person, organizationalPerson, user\"\n        );\n        break;\n      case \"rhds\":\n        form.setValue(\"config.usernameLDAPAttribute[0]\", \"uid\");\n        form.setValue(\"config.rdnLDAPAttribute[0]\", \"uid\");\n        form.setValue(\"config.uuidLDAPAttribute[0]\", \"nsuniqueid\");\n        form.setValue(\n          \"config.userObjectClasses[0]\",\n          \"inetOrgPerson, organizationalPerson\"\n        );\n        break;\n      case \"tivoli\":\n        form.setValue(\"config.usernameLDAPAttribute[0]\", \"uid\");\n        form.setValue(\"config.rdnLDAPAttribute[0]\", \"uid\");\n        form.setValue(\"config.uuidLDAPAttribute[0]\", \"uniqueidentifier\");\n        form.setValue(\n          \"config.userObjectClasses[0]\",\n          \"inetOrgPerson, organizationalPerson\"\n        );\n        break;\n      case \"edirectory\":\n        form.setValue(\"config.usernameLDAPAttribute[0]\", \"uid\");\n        form.setValue(\"config.rdnLDAPAttribute[0]\", \"uid\");\n        form.setValue(\"config.uuidLDAPAttribute[0]\", \"guid\");\n        form.setValue(\n          \"config.userObjectClasses[0]\",\n          \"inetOrgPerson, organizationalPerson\"\n        );\n        break;\n      case \"other\":\n        form.setValue(\"config.usernameLDAPAttribute[0]\", \"uid\");\n        form.setValue(\"config.rdnLDAPAttribute[0]\", \"uid\");\n        form.setValue(\"config.uuidLDAPAttribute[0]\", \"entryUUID\");\n        form.setValue(\n          \"config.userObjectClasses[0]\",\n          \"inetOrgPerson, organizationalPerson\"\n        );\n        break;\n      default:\n        return \"\";\n    }\n  };\n\n  return (\n    <>\n      {showSectionHeading && (\n        <WizardSectionHeader\n          title={t(\"generalOptions\")}\n          description={helpText(\"ldapGeneralOptionsSettingsDescription\")}\n          showDescription={showSectionDescription}\n        />\n      )}\n      <FormAccess role=\"manage-realm\" isHorizontal>\n        <FormGroup\n          label={t(\"uiDisplayName\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"user-federation-help:uiDisplayNameHelp\"\n              fieldLabelId=\"user-federation:uiDisplayName\"\n            />\n          }\n          fieldId=\"kc-ui-display-name\"\n          isRequired\n          validated={form.formState.errors.name ? \"error\" : \"default\"}\n          helperTextInvalid={form.formState.errors.name?.message}\n        >\n          {/* These hidden fields are required so data object written back matches data retrieved */}\n          <KeycloakTextInput\n            hidden\n            id=\"kc-ui-provider-id\"\n            defaultValue=\"ldap\"\n            {...form.register(\"providerId\")}\n          />\n          <KeycloakTextInput\n            hidden\n            id=\"kc-ui-provider-type\"\n            defaultValue=\"org.keycloak.storage.UserStorageProvider\"\n            {...form.register(\"providerType\")}\n          />\n          <KeycloakTextInput\n            hidden\n            id=\"kc-ui-parentId\"\n            defaultValue={realm}\n            {...form.register(\"parentId\")}\n          />\n          <KeycloakTextInput\n            isRequired\n            id=\"kc-ui-display-name\"\n            defaultValue=\"ldap\"\n            data-testid=\"ldap-name\"\n            validated={form.formState.errors.name ? \"error\" : \"default\"}\n            {...form.register(\"name\", {\n              required: {\n                value: true,\n                message: `${t(\"validateName\")}`,\n              },\n            })}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"vendor\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"user-federation-help:vendorHelp\"\n              fieldLabelId=\"user-federation:vendor\"\n            />\n          }\n          fieldId=\"kc-vendor\"\n          isRequired\n        >\n          <Controller\n            name=\"config.vendor[0]\"\n            defaultValue=\"ad\"\n            control={form.control}\n            render={({ field }) => (\n              <Select\n                isDisabled={!!vendorEdit}\n                toggleId=\"kc-vendor\"\n                required\n                onToggle={() => setIsVendorDropdownOpen(!isVendorDropdownOpen)}\n                isOpen={isVendorDropdownOpen}\n                onSelect={(_, value) => {\n                  field.onChange(value as string);\n                  setIsVendorDropdownOpen(false);\n                  setVendorDefaultValues();\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n              >\n                <SelectOption key={0} value=\"ad\" isPlaceholder>\n                  Active Directory\n                </SelectOption>\n                <SelectOption key={1} value=\"rhds\">\n                  Red Hat Directory Server\n                </SelectOption>\n                <SelectOption key={2} value=\"tivoli\">\n                  Tivoli\n                </SelectOption>\n                <SelectOption key={3} value=\"edirectory\">\n                  Novell eDirectory\n                </SelectOption>\n                <SelectOption key={4} value=\"other\">\n                  Other\n                </SelectOption>\n              </Select>\n            )}\n          ></Controller>\n        </FormGroup>\n      </FormAccess>\n    </>\n  );\n};\n","// @ts-nocheck\nimport { FormGroup, Switch } from \"@patternfly/react-core\";\nimport { Controller, UseFormReturn, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { WizardSectionHeader } from \"../../components/wizard-section-header/WizardSectionHeader\";\n\nexport type LdapSettingsKerberosIntegrationProps = {\n  form: UseFormReturn;\n  showSectionHeading?: boolean;\n  showSectionDescription?: boolean;\n};\n\nexport const LdapSettingsKerberosIntegration = ({\n  form,\n  showSectionHeading = false,\n  showSectionDescription = false,\n}: LdapSettingsKerberosIntegrationProps) => {\n  const { t } = useTranslation(\"user-federation\");\n  const { t: helpText } = useTranslation(\"user-federation-help\");\n\n  const allowKerberosAuth: [string] = useWatch({\n    control: form.control,\n    name: \"config.allowKerberosAuthentication\",\n    defaultValue: [\"false\"],\n  });\n\n  return (\n    <>\n      {showSectionHeading && (\n        <WizardSectionHeader\n          title={t(\"kerberosIntegration\")}\n          description={helpText(\"ldapKerberosSettingsDescription\")}\n          showDescription={showSectionDescription}\n        />\n      )}\n\n      <FormAccess role=\"manage-realm\" isHorizontal>\n        <FormGroup\n          label={t(\"allowKerberosAuthentication\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"user-federation-help:allowKerberosAuthenticationHelp\"\n              fieldLabelId=\"user-federation:allowKerberosAuthentication\"\n            />\n          }\n          fieldId=\"kc-allow-kerberos-authentication\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.allowKerberosAuthentication\"\n            defaultValue={[\"false\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id=\"kc-allow-kerberos-authentication\"\n                data-testid=\"allow-kerberos-auth\"\n                isDisabled={false}\n                onChange={(value) => field.onChange([`${value}`])}\n                isChecked={field.value[0] === \"true\"}\n                label={t(\"common:on\")}\n                labelOff={t(\"common:off\")}\n                aria-label={t(\"allowKerberosAuthentication\")}\n              />\n            )}\n          ></Controller>\n        </FormGroup>\n\n        {allowKerberosAuth[0] === \"true\" && (\n          <>\n            <FormGroup\n              label={t(\"kerberosRealm\")}\n              labelIcon={\n                <HelpItem\n                  helpText=\"user-federation-help:kerberosRealmHelp\"\n                  fieldLabelId=\"user-federation:kerberosRealm\"\n                />\n              }\n              fieldId=\"kc-kerberos-realm\"\n              isRequired\n              validated={\n                form.formState.errors.config?.kerberosRealm?.[0]\n                  ? \"error\"\n                  : \"default\"\n              }\n              helperTextInvalid={\n                form.formState.errors.config?.kerberosRealm?.[0].message\n              }\n            >\n              <KeycloakTextInput\n                isRequired\n                id=\"kc-kerberos-realm\"\n                data-testid=\"kerberos-realm\"\n                validated={\n                  form.formState.errors.config?.kerberosRealm?.[0]\n                    ? \"error\"\n                    : \"default\"\n                }\n                {...form.register(\"config.kerberosRealm.0\", {\n                  required: {\n                    value: true,\n                    message: t(\"validateRealm\").toString(),\n                  },\n                })}\n              />\n            </FormGroup>\n\n            <FormGroup\n              label={t(\"serverPrincipal\")}\n              labelIcon={\n                <HelpItem\n                  helpText=\"user-federation-help:serverPrincipalHelp\"\n                  fieldLabelId=\"user-federation:serverPrincipal\"\n                />\n              }\n              fieldId=\"kc-server-principal\"\n              isRequired\n              validated={\n                form.formState.errors.config?.serverPrincipal?.[0]\n                  ? \"error\"\n                  : \"default\"\n              }\n              helperTextInvalid={\n                form.formState.errors.config?.serverPrincipal?.[0].message\n              }\n            >\n              <KeycloakTextInput\n                isRequired\n                id=\"kc-server-principal\"\n                data-testid=\"kerberos-principal\"\n                validated={\n                  form.formState.errors.config?.serverPrincipal?.[0]\n                    ? \"error\"\n                    : \"default\"\n                }\n                {...form.register(\"config.serverPrincipal.0\", {\n                  required: {\n                    value: true,\n                    message: `${t(\"validateServerPrincipal\")}`,\n                  },\n                })}\n              />\n            </FormGroup>\n\n            <FormGroup\n              label={t(\"keyTab\")}\n              labelIcon={\n                <HelpItem\n                  helpText=\"user-federation-help:keyTabHelp\"\n                  fieldLabelId=\"user-federation:keyTab\"\n                />\n              }\n              fieldId=\"kc-key-tab\"\n              isRequired\n              validated={\n                form.formState.errors.config?.keyTab?.[0] ? \"error\" : \"default\"\n              }\n              helperTextInvalid={\n                form.formState.errors.config?.keyTab?.[0].message\n              }\n            >\n              <KeycloakTextInput\n                isRequired\n                id=\"kc-key-tab\"\n                data-testid=\"kerberos-keytab\"\n                validated={\n                  form.formState.errors.config?.keyTab?.[0]\n                    ? \"error\"\n                    : \"default\"\n                }\n                {...form.register(\"config.keyTab.0\", {\n                  required: {\n                    value: true,\n                    message: `${t(\"validateKeyTab\")}`,\n                  },\n                })}\n              />\n            </FormGroup>\n\n            <FormGroup\n              label={t(\"debug\")}\n              labelIcon={\n                <HelpItem\n                  helpText=\"user-federation-help:debugHelp\"\n                  fieldLabelId=\"user-federation:debug\"\n                />\n              }\n              fieldId=\"kc-debug\"\n              hasNoPaddingTop\n            >\n              {\" \"}\n              <Controller\n                name=\"config.debug\"\n                defaultValue={[\"false\"]}\n                control={form.control}\n                render={({ field }) => (\n                  <Switch\n                    id=\"kc-debug\"\n                    data-testid=\"debug\"\n                    isDisabled={false}\n                    onChange={(value) => field.onChange([`${value}`])}\n                    isChecked={field.value[0] === \"true\"}\n                    label={t(\"common:on\")}\n                    labelOff={t(\"common:off\")}\n                    aria-label={t(\"debug\")}\n                  />\n                )}\n              ></Controller>\n            </FormGroup>\n          </>\n        )}\n        <FormGroup\n          label={t(\"useKerberosForPasswordAuthentication\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"user-federation-help:useKerberosForPasswordAuthenticationHelp\"\n              fieldLabelId=\"user-federation:useKerberosForPasswordAuthentication\"\n            />\n          }\n          fieldId=\"kc-use-kerberos-password-authentication\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.useKerberosForPasswordAuthentication\"\n            defaultValue={[\"false\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id=\"kc-use-kerberos-password-authentication\"\n                data-testid=\"use-kerberos-pw-auth\"\n                isDisabled={false}\n                onChange={(value) => field.onChange([`${value}`])}\n                isChecked={field.value[0] === \"true\"}\n                label={t(\"common:on\")}\n                labelOff={t(\"common:off\")}\n                aria-label={t(\"useKerberosForPasswordAuthentication\")}\n              />\n            )}\n          ></Controller>\n        </FormGroup>\n      </FormAccess>\n    </>\n  );\n};\n","// @ts-nocheck\nimport {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, UseFormReturn } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { WizardSectionHeader } from \"../../components/wizard-section-header/WizardSectionHeader\";\n\nexport type LdapSettingsSearchingProps = {\n  form: UseFormReturn;\n  showSectionHeading?: boolean;\n  showSectionDescription?: boolean;\n};\n\nexport const LdapSettingsSearching = ({\n  form,\n  showSectionHeading = false,\n  showSectionDescription = false,\n}: LdapSettingsSearchingProps) => {\n  const { t } = useTranslation(\"user-federation\");\n  const { t: helpText } = useTranslation(\"user-federation-help\");\n\n  const [isSearchScopeDropdownOpen, setIsSearchScopeDropdownOpen] =\n    useState(false);\n  const [isEditModeDropdownOpen, setIsEditModeDropdownOpen] = useState(false);\n\n  return (\n    <>\n      {showSectionHeading && (\n        <WizardSectionHeader\n          title={t(\"ldapSearchingAndUpdatingSettings\")}\n          description={helpText(\"ldapSearchingAndUpdatingSettingsDescription\")}\n          showDescription={showSectionDescription}\n        />\n      )}\n\n      <FormAccess role=\"manage-realm\" isHorizontal>\n        <FormGroup\n          label={t(\"editMode\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"user-federation-help:editModeLdapHelp\"\n              fieldLabelId=\"user-federation:editMode\"\n            />\n          }\n          fieldId=\"kc-edit-mode\"\n          isRequired\n          validated={\n            form.formState.errors.config?.editMode?.[0] ? \"error\" : \"default\"\n          }\n          helperTextInvalid={\n            form.formState.errors.config?.editMode?.[0].message\n          }\n        >\n          <Controller\n            name=\"config.editMode[0]\"\n            defaultValue=\"\"\n            control={form.control}\n            rules={{\n              required: { value: true, message: t(\"validateEditMode\") },\n            }}\n            render={({ field }) => (\n              <Select\n                toggleId=\"kc-edit-mode\"\n                required\n                onToggle={() =>\n                  setIsEditModeDropdownOpen(!isEditModeDropdownOpen)\n                }\n                isOpen={isEditModeDropdownOpen}\n                onSelect={(_, value) => {\n                  field.onChange(value.toString());\n                  setIsEditModeDropdownOpen(false);\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n                validated={\n                  form.formState.errors.config?.editMode?.[0]\n                    ? \"error\"\n                    : \"default\"\n                }\n              >\n                <SelectOption value=\"\" isPlaceholder />\n                <SelectOption value=\"READ_ONLY\" />\n                <SelectOption value=\"WRITABLE\" />\n                <SelectOption value=\"UNSYNCED\" />\n              </Select>\n            )}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"usersDN\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"user-federation-help:usersDNHelp\"\n              fieldLabelId=\"user-federation:usersDn\"\n            />\n          }\n          fieldId=\"kc-ui-users-dn\"\n          isRequired\n          validated={\n            form.formState.errors.config?.usersDn?.[0] ? \"error\" : \"default\"\n          }\n          helperTextInvalid={form.formState.errors.config?.usersDn?.[0].message}\n        >\n          <KeycloakTextInput\n            isRequired\n            defaultValue=\"\"\n            id=\"kc-ui-users-dn\"\n            data-testid=\"ldap-users-dn\"\n            validated={\n              form.formState.errors.config?.usersDn?.[0] ? \"error\" : \"default\"\n            }\n            {...form.register(\"config.usersDn.0\", {\n              required: {\n                value: true,\n                message: t(\"validateUsersDn\").toString(),\n              },\n            })}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"usernameLdapAttribute\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"user-federation-help:usernameLdapAttributeHelp\"\n              fieldLabelId=\"user-federation:usernameLdapAttribute\"\n            />\n          }\n          fieldId=\"kc-username-ldap-attribute\"\n          isRequired\n          validated={\n            form.formState.errors.config?.usernameLDAPAttribute?.[0]\n              ? \"error\"\n              : \"default\"\n          }\n          helperTextInvalid={\n            form.formState.errors.config?.usernameLDAPAttribute?.[0].message\n          }\n        >\n          <KeycloakTextInput\n            isRequired\n            defaultValue=\"cn\"\n            id=\"kc-username-ldap-attribute\"\n            data-testid=\"ldap-username-attribute\"\n            validated={\n              form.formState.errors.config?.usernameLDAPAttribute?.[0]\n                ? \"error\"\n                : \"default\"\n            }\n            {...form.register(\"config.usernameLDAPAttribute.0\", {\n              required: {\n                value: true,\n                message: `${t(\"validateUsernameLDAPAttribute\")}`,\n              },\n            })}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"rdnLdapAttribute\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"user-federation-help:rdnLdapAttributeHelp\"\n              fieldLabelId=\"user-federation:rdnLdapAttribute\"\n            />\n          }\n          fieldId=\"kc-rdn-ldap-attribute\"\n          isRequired\n          validated={\n            form.formState.errors.config?.rdnLDAPAttribute?.[0]\n              ? \"error\"\n              : \"default\"\n          }\n          helperTextInvalid={\n            form.formState.errors.config?.rdnLDAPAttribute?.[0].message\n          }\n        >\n          <KeycloakTextInput\n            isRequired\n            defaultValue=\"cn\"\n            id=\"kc-rdn-ldap-attribute\"\n            data-testid=\"ldap-rdn-attribute\"\n            validated={\n              form.formState.errors.config?.rdnLDAPAttribute?.[0]\n                ? \"error\"\n                : \"default\"\n            }\n            {...form.register(\"config.rdnLDAPAttribute.0\", {\n              required: {\n                value: true,\n                message: `${t(\"validateRdnLdapAttribute\")}`,\n              },\n            })}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"uuidLdapAttribute\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"user-federation-help:uuidLdapAttributeHelp\"\n              fieldLabelId=\"user-federation:uuidLdapAttribute\"\n            />\n          }\n          fieldId=\"kc-uuid-ldap-attribute\"\n          isRequired\n          validated={\n            form.formState.errors.config?.uuidLDAPAttribute?.[0]\n              ? \"error\"\n              : \"default\"\n          }\n          helperTextInvalid={\n            form.formState.errors.config?.uuidLDAPAttribute?.[0].message\n          }\n        >\n          <KeycloakTextInput\n            isRequired\n            defaultValue=\"objectGUID\"\n            id=\"kc-uuid-ldap-attribute\"\n            data-testid=\"ldap-uuid-attribute\"\n            validated={\n              form.formState.errors.config?.uuidLDAPAttribute?.[0]\n                ? \"error\"\n                : \"default\"\n            }\n            {...form.register(\"config.uuidLDAPAttribute.0\", {\n              required: {\n                value: true,\n                message: `${t(\"validateUuidLDAPAttribute\")}`,\n              },\n            })}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"userObjectClasses\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"user-federation-help:userObjectClassesHelp\"\n              fieldLabelId=\"user-federation:userObjectClasses\"\n            />\n          }\n          fieldId=\"kc-user-object-classes\"\n          isRequired\n          validated={\n            form.formState.errors.config?.userObjectClasses?.[0]\n              ? \"error\"\n              : \"default\"\n          }\n          helperTextInvalid={\n            form.formState.errors.config?.userObjectClasses?.[0].message\n          }\n        >\n          <KeycloakTextInput\n            isRequired\n            defaultValue=\"person, organizationalPerson, user\"\n            id=\"kc-user-object-classes\"\n            data-testid=\"ldap-user-object-classes\"\n            validated={\n              form.formState.errors.config?.userObjectClasses?.[0]\n                ? \"error\"\n                : \"default\"\n            }\n            {...form.register(\"config.userObjectClasses.0\", {\n              required: {\n                value: true,\n                message: t(\"validateUserObjectClasses\").toString(),\n              },\n            })}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"userLdapFilter\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"user-federation-help:userLdapFilterHelp\"\n              fieldLabelId=\"user-federation:userLdapFilter\"\n            />\n          }\n          fieldId=\"kc-user-ldap-filter\"\n          validated={\n            form.formState.errors.config?.customUserSearchFilter?.[0]\n              ? \"error\"\n              : \"default\"\n          }\n          helperTextInvalid={\n            form.formState.errors.config?.customUserSearchFilter?.[0].message\n          }\n        >\n          <KeycloakTextInput\n            id=\"kc-user-ldap-filter\"\n            data-testid=\"user-ldap-filter\"\n            validated={\n              form.formState.errors.config?.customUserSearchFilter?.[0]\n                ? \"error\"\n                : \"default\"\n            }\n            {...form.register(\"config.customUserSearchFilter.0\", {\n              pattern: {\n                value: /(\\(.*\\))$/,\n                message: t(\"validateCustomUserSearchFilter\").toString(),\n              },\n            })}\n          />\n        </FormGroup>\n\n        <FormGroup\n          label={t(\"searchScope\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"user-federation-help:searchScopeHelp\"\n              fieldLabelId=\"user-federation:searchScope\"\n            />\n          }\n          fieldId=\"kc-search-scope\"\n        >\n          <Controller\n            name=\"config.searchScope[0]\"\n            defaultValue=\"\"\n            control={form.control}\n            render={({ field }) => (\n              <Select\n                toggleId=\"kc-search-scope\"\n                required\n                onToggle={() =>\n                  setIsSearchScopeDropdownOpen(!isSearchScopeDropdownOpen)\n                }\n                isOpen={isSearchScopeDropdownOpen}\n                onSelect={(_, value) => {\n                  field.onChange(value as string);\n                  setIsSearchScopeDropdownOpen(false);\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n              >\n                <SelectOption key={0} value=\"1\" isPlaceholder>\n                  {t(\"oneLevel\")}\n                </SelectOption>\n                <SelectOption key={1} value=\"2\">\n                  {t(\"subtree\")}\n                </SelectOption>\n              </Select>\n            )}\n          ></Controller>\n        </FormGroup>\n        <FormGroup\n          label={t(\"readTimeout\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"user-federation-help:readTimeoutHelp\"\n              fieldLabelId=\"user-federation:readTimeout\"\n            />\n          }\n          fieldId=\"kc-read-timeout\"\n        >\n          <KeycloakTextInput\n            type=\"number\"\n            min={0}\n            id=\"kc-read-timeout\"\n            data-testid=\"ldap-read-timeout\"\n            {...form.register(\"config.readTimeout.0\")}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"pagination\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"user-federation-help:paginationHelp\"\n              fieldLabelId=\"user-federation:pagination\"\n            />\n          }\n          fieldId=\"kc-ui-pagination\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.pagination\"\n            defaultValue={[\"false\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id=\"kc-ui-pagination\"\n                data-testid=\"ui-pagination\"\n                isDisabled={false}\n                onChange={(value) => field.onChange([`${value}`])}\n                isChecked={field.value[0] === \"true\"}\n                label={t(\"common:on\")}\n                labelOff={t(\"common:off\")}\n                aria-label={t(\"pagination\")}\n              />\n            )}\n          ></Controller>\n        </FormGroup>\n      </FormAccess>\n    </>\n  );\n};\n","import { FormGroup, Switch } from \"@patternfly/react-core\";\nimport { Controller, UseFormReturn } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { WizardSectionHeader } from \"../../components/wizard-section-header/WizardSectionHeader\";\n\nexport type LdapSettingsSynchronizationProps = {\n  form: UseFormReturn;\n  showSectionHeading?: boolean;\n  showSectionDescription?: boolean;\n};\n\nexport const LdapSettingsSynchronization = ({\n  form,\n  showSectionHeading = false,\n  showSectionDescription = false,\n}: LdapSettingsSynchronizationProps) => {\n  const { t } = useTranslation(\"user-federation\");\n  const { t: helpText } = useTranslation(\"user-federation-help\");\n\n  const watchPeriodicSync = form.watch(\"config.periodicFullSync\", false);\n  const watchChangedSync = form.watch(\"config.periodicChangedUsersSync\", false);\n\n  return (\n    <>\n      {showSectionHeading && (\n        <WizardSectionHeader\n          title={t(\"synchronizationSettings\")}\n          description={helpText(\"ldapSynchronizationSettingsDescription\")}\n          showDescription={showSectionDescription}\n        />\n      )}\n      <FormAccess role=\"manage-realm\" isHorizontal>\n        <FormGroup\n          hasNoPaddingTop\n          label={t(\"importUsers\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"user-federation-help:importUsersHelp\"\n              fieldLabelId=\"user-federation:importUsers\"\n            />\n          }\n          fieldId=\"kc-import-users\"\n        >\n          <Controller\n            name=\"config.importEnabled\"\n            defaultValue={[\"true\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id=\"kc-import-users\"\n                data-testid=\"import-users\"\n                name=\"importEnabled\"\n                label={t(\"common:on\")}\n                labelOff={t(\"common:off\")}\n                onChange={(value) => field.onChange([`${value}`])}\n                isChecked={field.value[0] === \"true\"}\n                isDisabled={false}\n                aria-label={t(\"importUsers\")}\n              />\n            )}\n          ></Controller>\n        </FormGroup>\n        <FormGroup\n          hasNoPaddingTop\n          label={t(\"syncRegistrations\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"user-federation-help:syncRegistrations\"\n              fieldLabelId=\"user-federation:syncRegistrations\"\n            />\n          }\n          fieldId=\"syncRegistrations\"\n        >\n          <Controller\n            name=\"config.syncRegistrations\"\n            defaultValue={[\"true\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id=\"syncRegistrations\"\n                data-testid=\"syncRegistrations\"\n                label={t(\"common:on\")}\n                labelOff={t(\"common:off\")}\n                onChange={(value) => field.onChange([`${value}`])}\n                isChecked={field.value[0] === \"true\"}\n                aria-label={t(\"syncRegistrations\")}\n              />\n            )}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"batchSize\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"user-federation-help:batchSizeHelp\"\n              fieldLabelId=\"user-federation:batchSize\"\n            />\n          }\n          fieldId=\"kc-batch-size\"\n        >\n          <KeycloakTextInput\n            type=\"number\"\n            min={0}\n            id=\"kc-batch-size\"\n            data-testid=\"batch-size\"\n            {...form.register(\"config.batchSizeForSync.0\")}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"periodicFullSync\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"user-federation-help:periodicFullSyncHelp\"\n              fieldLabelId=\"user-federation:periodicFullSync\"\n            />\n          }\n          fieldId=\"kc-periodic-full-sync\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.periodicFullSync\"\n            defaultValue={false}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id=\"kc-periodic-full-sync\"\n                data-testid=\"periodic-full-sync\"\n                isDisabled={false}\n                onChange={(value) => field.onChange(value)}\n                isChecked={field.value === true}\n                label={t(\"common:on\")}\n                labelOff={t(\"common:off\")}\n                aria-label={t(\"periodicFullSync\")}\n              />\n            )}\n          ></Controller>\n        </FormGroup>\n        {watchPeriodicSync && (\n          <FormGroup\n            hasNoPaddingTop\n            label={t(\"fullSyncPeriod\")}\n            labelIcon={\n              <HelpItem\n                helpText=\"user-federation-help:fullSyncPeriodHelp\"\n                fieldLabelId=\"user-federation:fullSyncPeriod\"\n              />\n            }\n            fieldId=\"kc-full-sync-period\"\n          >\n            <KeycloakTextInput\n              type=\"number\"\n              min={-1}\n              defaultValue={604800}\n              id=\"kc-full-sync-period\"\n              data-testid=\"full-sync-period\"\n              {...form.register(\"config.fullSyncPeriod.0\")}\n            />\n          </FormGroup>\n        )}\n        <FormGroup\n          label={t(\"periodicChangedUsersSync\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"user-federation-help:periodicChangedUsersSyncHelp\"\n              fieldLabelId=\"user-federation:periodicChangedUsersSync\"\n            />\n          }\n          fieldId=\"kc-periodic-changed-users-sync\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.periodicChangedUsersSync\"\n            defaultValue={false}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id=\"kc-periodic-changed-users-sync\"\n                data-testid=\"periodic-changed-users-sync\"\n                isDisabled={false}\n                onChange={(value) => field.onChange(value)}\n                isChecked={field.value === true}\n                label={t(\"common:on\")}\n                labelOff={t(\"common:off\")}\n                aria-label={t(\"periodicChangedUsersSync\")}\n              />\n            )}\n          ></Controller>\n        </FormGroup>\n        {watchChangedSync && (\n          <FormGroup\n            label={t(\"changedUsersSyncPeriod\")}\n            labelIcon={\n              <HelpItem\n                helpText=\"user-federation-help:changedUsersSyncHelp\"\n                fieldLabelId=\"user-federation:changedUsersSyncPeriod\"\n              />\n            }\n            fieldId=\"kc-changed-users-sync-period\"\n            hasNoPaddingTop\n          >\n            <KeycloakTextInput\n              type=\"number\"\n              min={-1}\n              defaultValue={86400}\n              id=\"kc-changed-users-sync-period\"\n              data-testid=\"changed-users-sync-period\"\n              {...form.register(\"config.changedSyncPeriod.0\")}\n            />\n          </FormGroup>\n        )}\n      </FormAccess>\n    </>\n  );\n};\n","import type ComponentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentRepresentation\";\nimport { ActionGroup, Button, Form } from \"@patternfly/react-core\";\nimport { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { ScrollForm } from \"../components/scroll-form/ScrollForm\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { LdapSettingsAdvanced } from \"./ldap/LdapSettingsAdvanced\";\nimport { LdapSettingsConnection } from \"./ldap/LdapSettingsConnection\";\nimport { LdapSettingsGeneral } from \"./ldap/LdapSettingsGeneral\";\nimport { LdapSettingsKerberosIntegration } from \"./ldap/LdapSettingsKerberosIntegration\";\nimport { LdapSettingsSearching } from \"./ldap/LdapSettingsSearching\";\nimport { LdapSettingsSynchronization } from \"./ldap/LdapSettingsSynchronization\";\nimport { toUserFederation } from \"./routes/UserFederation\";\nimport { SettingsCache } from \"./shared/SettingsCache\";\nimport { useServerInfo } from \"../context/server-info/ServerInfoProvider\";\n\nexport type LdapComponentRepresentation = ComponentRepresentation & {\n  config?: {\n    periodicChangedUsersSync?: boolean;\n    periodicFullSync?: boolean;\n  };\n};\n\nexport type UserFederationLdapFormProps = {\n  id?: string;\n  onSubmit: (formData: LdapComponentRepresentation) => void;\n};\n\nexport const UserFederationLdapForm = ({\n  id,\n  onSubmit,\n}: UserFederationLdapFormProps) => {\n  const { t } = useTranslation(\"user-federation\");\n  const form = useFormContext<LdapComponentRepresentation>();\n  const navigate = useNavigate();\n  const { realm } = useRealm();\n  const kerberosDisabled =\n    useServerInfo().profileInfo?.disabledFeatures?.includes(\"KERBEROS\");\n\n  return (\n    <>\n      <ScrollForm\n        sections={[\n          {\n            title: t(\"generalOptions\"),\n            panel: <LdapSettingsGeneral form={form} vendorEdit={!!id} />,\n          },\n          {\n            title: t(\"connectionAndAuthenticationSettings\"),\n            panel: <LdapSettingsConnection form={form} id={id} />,\n          },\n          {\n            title: t(\"ldapSearchingAndUpdatingSettings\"),\n            panel: <LdapSettingsSearching form={form} />,\n          },\n          {\n            title: t(\"synchronizationSettings\"),\n            panel: <LdapSettingsSynchronization form={form} />,\n          },\n          {\n            title: t(\"kerberosIntegration\"),\n            panel: <LdapSettingsKerberosIntegration form={form} />,\n            isHidden: kerberosDisabled,\n          },\n          { title: t(\"cacheSettings\"), panel: <SettingsCache form={form} /> },\n          {\n            title: t(\"advancedSettings\"),\n            panel: <LdapSettingsAdvanced form={form} id={id} />,\n          },\n        ]}\n      />\n      <Form onSubmit={form.handleSubmit(onSubmit)}>\n        <ActionGroup className=\"keycloak__form_actions\">\n          <Button\n            isDisabled={!form.formState.isDirty}\n            variant=\"primary\"\n            type=\"submit\"\n            data-testid=\"ldap-save\"\n          >\n            {t(\"common:save\")}\n          </Button>\n          <Button\n            variant=\"link\"\n            onClick={() => navigate(toUserFederation({ realm }))}\n            data-testid=\"ldap-cancel\"\n          >\n            {t(\"common:cancel\")}\n          </Button>\n        </ActionGroup>\n      </Form>\n    </>\n  );\n};\n\nexport function serializeFormData(\n  formData: LdapComponentRepresentation\n): LdapComponentRepresentation {\n  const { config } = formData;\n\n  if (config?.periodicChangedUsersSync !== undefined) {\n    if (config.periodicChangedUsersSync === false) {\n      config.changedSyncPeriod = [\"-1\"];\n    }\n    delete config.periodicChangedUsersSync;\n  }\n\n  if (config?.periodicFullSync !== undefined) {\n    if (config.periodicFullSync === false) {\n      config.fullSyncPeriod = [\"-1\"];\n    }\n    delete config.periodicFullSync;\n  }\n\n  return formData;\n}\n"],"names":["testLdapProperties","convertFormToSettings","form","settings","forEach","key","value","get","getValues","Array","isArray","LdapSettingsConnection","id","showSectionHeading","showSectionDescription","t","useTranslation","helpText","adminClient","useAdminClient","realm","useRealm","addAlert","addError","useAlerts","edit","testLdap","testType","realms","testLDAPConnection","action","componentId","AlertVariant","success","error","isTruststoreSpiDropdownOpen","setIsTruststoreSpiDropdownOpen","useState","isBindTypeDropdownOpen","setIsBindTypeDropdownOpen","ldapBindType","useWatch","control","name","defaultValue","_Fragment","_jsx","WizardSectionHeader","_jsxs","FormAccess","FormGroup","HelpItem","formState","errors","config","connectionUrl","message","KeycloakTextInput","register","required","toString","Controller","field","Switch","onChange","Select","_","SelectOption","Button","SelectVariant","single","isEqual","bindDn","ValidatedOptions","default","bindCredential","PasswordInput","PASSWORD_MODIFY_OID","LdapSettingsAdvanced","trigger","ldapOids","ldapServerCapabilities","passwordModifyOid","filter","oid","setValue","length","LdapSettingsGeneral","vendorEdit","useFetch","findOne","result","isVendorDropdownOpen","setIsVendorDropdownOpen","setVendorDefaultValues","LdapSettingsKerberosIntegration","allowKerberosAuth","kerberosRealm","serverPrincipal","keyTab","LdapSettingsSearching","isSearchScopeDropdownOpen","setIsSearchScopeDropdownOpen","isEditModeDropdownOpen","setIsEditModeDropdownOpen","editMode","usersDn","usernameLDAPAttribute","rdnLDAPAttribute","uuidLDAPAttribute","userObjectClasses","customUserSearchFilter","pattern","LdapSettingsSynchronization","watchPeriodicSync","watch","watchChangedSync","UserFederationLdapForm","onSubmit","useFormContext","navigate","useNavigate","kerberosDisabled","useServerInfo","profileInfo","disabledFeatures","includes","ScrollForm","title","panel","isHidden","SettingsCache","Form","handleSubmit","ActionGroup","isDirty","toUserFederation","serializeFormData","formData","periodicChangedUsersSync","undefined","changedSyncPeriod","periodicFullSync","fullSyncPeriod"],"mappings":"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"}