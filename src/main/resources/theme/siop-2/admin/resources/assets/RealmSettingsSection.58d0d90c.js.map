{"version":3,"file":"RealmSettingsSection.58d0d90c.js","sources":["../../../../node_modules/lodash-es/uniqWith.js","../../../../node_modules/@patternfly/react-table/dist/esm/components/Table/EditableTextCell.js","../../src/utils/useCurrentUser.ts","../../src/realm-settings/EmailTab.tsx","../../src/realm-settings/event-config/EventsTypeTable.tsx","../../src/realm-settings/event-config/AddEventTypesDialog.tsx","../../src/realm-settings/event-config/EventConfigForm.tsx","../../src/realm-settings/event-config/EventListenersForm.tsx","../../src/realm-settings/event-config/EventsTab.tsx","../../src/realm-settings/GeneralTab.tsx","../../src/realm-settings/keys/KeysListTab.tsx","../../src/realm-settings/keys/key-providers/KeyProviderModal.tsx","../../src/realm-settings/keys/KeysProvidersTab.tsx","../../src/realm-settings/keys/KeysTab.tsx","../../src/realm-settings/AddMessageBundleModal.tsx","../../src/realm-settings/LocalizationTab.tsx","../../src/realm-settings/LoginTab.tsx","../../src/realm-settings/PartialExport.tsx","../../src/realm-settings/PartialImport.tsx","../../src/realm-settings/PoliciesTab.tsx","../../src/realm-settings/ProfilesTab.tsx","../../src/realm-settings/security-defences/HelpLinkTextInput.tsx","../../src/realm-settings/security-defences/HeadersForm.tsx","../../src/realm-settings/security-defences/Time.tsx","../../src/realm-settings/security-defences/BruteForceDetection.tsx","../../src/realm-settings/security-defences/SecurityDefenses.tsx","../../src/realm-settings/SessionsTab.tsx","../../src/realm-settings/ThemesTab.tsx","../../src/realm-settings/TokensTab.tsx","../../src/realm-settings/user-profile/AttributesGroupTab.tsx","../../src/realm-settings/user-profile/AttributesTab.tsx","../../src/realm-settings/user-profile/JsonEditorTab.tsx","../../src/realm-settings/user-profile/UserProfileTab.tsx","../../src/realm-settings/DefaultGroupsTab.tsx","../../src/realm-settings/UserRegistration.tsx","../../src/realm-settings/RealmSettingsTabs.tsx","../../src/realm-settings/RealmSettingsSection.tsx"],"sourcesContent":["import baseUniq from './_baseUniq.js';\n\n/**\n * This method is like `_.uniq` except that it accepts `comparator` which\n * is invoked to compare elements of `array`. The order of result values is\n * determined by the order they occur in the array.The comparator is invoked\n * with two arguments: (arrVal, othVal).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];\n *\n * _.uniqWith(objects, _.isEqual);\n * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n */\nfunction uniqWith(array, comparator) {\n  comparator = typeof comparator == 'function' ? comparator : undefined;\n  return (array && array.length) ? baseUniq(array, undefined, comparator) : [];\n}\n\nexport default uniqWith;\n","import * as React from 'react';\nimport { TextInput } from '@patternfly/react-core/dist/esm/components/TextInput';\nimport inlineStyles from '@patternfly/react-styles/css/components/InlineEdit/inline-edit';\nimport formStyles from '@patternfly/react-styles/css/components/Form/form';\nimport { css } from '@patternfly/react-styles';\nexport const EditableTextCell = ({ value, rowIndex, cellIndex, props, handleTextInputChange, inputAriaLabel, isDisabled = false }) => (React.createElement(React.Fragment, null,\n    React.createElement(\"div\", { className: inlineStyles.inlineEditValue }, value),\n    React.createElement(\"div\", { className: inlineStyles.inlineEditInput },\n        React.createElement(TextInput, { isDisabled: isDisabled, value: props.editableValue !== undefined ? props.editableValue : value, validated: props.isValid !== false ? 'default' : 'error', type: \"text\", onChange: (newValue, event) => {\n                handleTextInputChange(newValue, event, rowIndex, cellIndex);\n            }, \"aria-label\": inputAriaLabel }),\n        React.createElement(\"div\", { className: css(formStyles.formHelperText, formStyles.modifiers.error), \"aria-live\": \"polite\" }, props.errorText))));\nEditableTextCell.displayName = 'EditableTextCell';\n//# sourceMappingURL=EditableTextCell.js.map","import UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport { useState } from \"react\";\nimport { useAdminClient, useFetch } from \"../context/auth/AdminClient\";\nimport { useWhoAmI } from \"../context/whoami/WhoAmI\";\n\nexport function useCurrentUser() {\n  const { whoAmI } = useWhoAmI();\n  const { adminClient } = useAdminClient();\n  const [currentUser, setCurrentUser] = useState<UserRepresentation>();\n\n  const userId = whoAmI.getUserId();\n\n  useFetch(() => adminClient.users.findOne({ id: userId }), setCurrentUser, [\n    userId,\n  ]);\n\n  return currentUser;\n}\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  ActionGroup,\n  ActionListItem,\n  Alert,\n  AlertActionLink,\n  AlertVariant,\n  Button,\n  Checkbox,\n  FormGroup,\n  PageSection,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\n\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { FormAccess } from \"../components/form-access/FormAccess\";\nimport { HelpItem } from \"../components/help-enabler/HelpItem\";\nimport { KeycloakTextInput } from \"../components/keycloak-text-input/KeycloakTextInput\";\nimport { PasswordInput } from \"../components/password-input/PasswordInput\";\nimport { FormPanel } from \"../components/scroll-form/FormPanel\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { toUser } from \"../user/routes/User\";\nimport { emailRegexPattern } from \"../util\";\nimport { useCurrentUser } from \"../utils/useCurrentUser\";\nimport useToggle from \"../utils/useToggle\";\n\nimport \"./realm-settings-section.css\";\n\ntype RealmSettingsEmailTabProps = {\n  realm: RealmRepresentation;\n};\n\nexport const RealmSettingsEmailTab = ({\n  realm: initialRealm,\n}: RealmSettingsEmailTabProps) => {\n  const { t } = useTranslation(\"realm-settings\");\n  const { adminClient } = useAdminClient();\n  const { realm: realmName } = useRealm();\n  const { addAlert, addError } = useAlerts();\n  const currentUser = useCurrentUser();\n\n  const [realm, setRealm] = useState(initialRealm);\n  const {\n    register,\n    control,\n    handleSubmit,\n    watch,\n    reset: resetForm,\n    getValues,\n    formState: { errors },\n  } = useForm<RealmRepresentation>({ defaultValues: realm });\n\n  const reset = () => resetForm(realm);\n  const watchFromValue = watch(\"smtpServer.from\", \"\");\n  const watchHostValue = watch(\"smtpServer.host\", \"\");\n  const [isTesting, toggleTest] = useToggle();\n\n  const authenticationEnabled = useWatch({\n    control,\n    name: \"smtpServer.auth\",\n    defaultValue: \"\",\n  });\n\n  const save = async (form: RealmRepresentation) => {\n    try {\n      const savedRealm = { ...realm, ...form };\n\n      // For default value, back end is expecting null instead of empty string\n      if (savedRealm.smtpServer?.port === \"\") savedRealm.smtpServer.port = null;\n\n      await adminClient.realms.update({ realm: realmName }, savedRealm);\n      setRealm(savedRealm);\n      addAlert(t(\"saveSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"realm-settings:saveError\", error);\n    }\n  };\n\n  const testConnection = async () => {\n    const toNumber = (value: string) => Number(value);\n    const toBoolean = (value: string) => value === true.toString();\n    const valueMapper = new Map<string, (value: string) => unknown>([\n      [\"port\", toNumber],\n      [\"ssl\", toBoolean],\n      [\"starttls\", toBoolean],\n      [\"auth\", toBoolean],\n    ]);\n\n    const serverSettings = { ...getValues()[\"smtpServer\"] };\n\n    for (const [key, mapperFn] of valueMapper.entries()) {\n      serverSettings[key] = mapperFn(serverSettings[key]);\n    }\n\n    // For default value, back end is expecting null instead of 0\n    if (serverSettings.port === 0) serverSettings.port = null;\n\n    try {\n      toggleTest();\n      await adminClient.realms.testSMTPConnection(\n        { realm: realm.realm! },\n        serverSettings\n      );\n      addAlert(t(\"testConnectionSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"realm-settings:testConnectionError\", error);\n    }\n    toggleTest();\n  };\n\n  return (\n    <PageSection variant=\"light\">\n      <FormPanel title={t(\"template\")} className=\"kc-email-template\">\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          className=\"pf-u-mt-lg\"\n          onSubmit={handleSubmit(save)}\n        >\n          <FormGroup\n            label={t(\"from\")}\n            fieldId=\"kc-display-name\"\n            isRequired\n            validated={errors.smtpServer?.from ? \"error\" : \"default\"}\n            helperTextInvalid={t(\"users:emailInvalid\")}\n          >\n            <KeycloakTextInput\n              type=\"email\"\n              id=\"kc-sender-email-address\"\n              data-testid=\"sender-email-address\"\n              placeholder=\"Sender email address\"\n              validated={errors.smtpServer?.from ? \"error\" : \"default\"}\n              {...register(\"smtpServer.from\", {\n                pattern: emailRegexPattern,\n                required: true,\n              })}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"fromDisplayName\")}\n            fieldId=\"kc-from-display-name\"\n            labelIcon={\n              <HelpItem\n                helpText=\"realm-settings-help:fromDisplayName\"\n                fieldLabelId=\"realm-settings:authentication\"\n              />\n            }\n          >\n            <KeycloakTextInput\n              id=\"kc-from-display-name\"\n              data-testid=\"from-display-name\"\n              placeholder=\"Display name for Sender email address\"\n              {...register(\"smtpServer.fromDisplayName\")}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"replyTo\")}\n            fieldId=\"kc-reply-to\"\n            validated={errors.smtpServer?.replyTo ? \"error\" : \"default\"}\n            helperTextInvalid={t(\"users:emailInvalid\")}\n          >\n            <KeycloakTextInput\n              type=\"email\"\n              id=\"kc-reply-to\"\n              placeholder=\"Reply to email address\"\n              validated={errors.smtpServer?.replyTo ? \"error\" : \"default\"}\n              {...register(\"smtpServer.replyTo\", {\n                pattern: emailRegexPattern,\n              })}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"replyToDisplayName\")}\n            fieldId=\"kc-reply-to-display-name\"\n            labelIcon={\n              <HelpItem\n                helpText=\"realm-settings-help:replyToDisplayName\"\n                fieldLabelId=\"realm-settings:replyToDisplayName\"\n              />\n            }\n          >\n            <KeycloakTextInput\n              id=\"kc-reply-to-display-name\"\n              placeholder='Display name for \"reply to\" email address'\n              {...register(\"smtpServer.replyToDisplayName\")}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"envelopeFrom\")}\n            fieldId=\"kc-envelope-from\"\n            labelIcon={\n              <HelpItem\n                helpText=\"realm-settings-help:envelopeFrom\"\n                fieldLabelId=\"realm-settings:envelopeFrom\"\n              />\n            }\n          >\n            <KeycloakTextInput\n              id=\"kc-envelope-from\"\n              placeholder=\"Sender envelope email address\"\n              {...register(\"smtpServer.envelopeFrom\")}\n            />\n          </FormGroup>\n        </FormAccess>\n      </FormPanel>\n      <FormPanel\n        className=\"kc-email-connection\"\n        title={t(\"connectionAndAuthentication\")}\n      >\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          className=\"pf-u-mt-lg\"\n          onSubmit={handleSubmit(save)}\n        >\n          <FormGroup\n            label={t(\"host\")}\n            fieldId=\"kc-host\"\n            isRequired\n            validated={errors.smtpServer?.host ? \"error\" : \"default\"}\n            helperTextInvalid={t(\"common:required\")}\n          >\n            <KeycloakTextInput\n              id=\"kc-host\"\n              placeholder=\"SMTP host\"\n              validated={errors.smtpServer?.host ? \"error\" : \"default\"}\n              {...register(\"smtpServer.host\", { required: true })}\n            />\n          </FormGroup>\n          <FormGroup label={t(\"port\")} fieldId=\"kc-port\">\n            <KeycloakTextInput\n              id=\"kc-port\"\n              placeholder=\"SMTP port (defaults to 25)\"\n              {...register(\"smtpServer.port\")}\n            />\n          </FormGroup>\n          <FormGroup label={t(\"encryption\")} fieldId=\"kc-html-display-name\">\n            <Controller\n              name=\"smtpServer.ssl\"\n              control={control}\n              defaultValue=\"false\"\n              render={({ field }) => (\n                <Checkbox\n                  id=\"kc-enable-ssl\"\n                  data-testid=\"enable-ssl\"\n                  label={t(\"enableSSL\")}\n                  isChecked={field.value === \"true\"}\n                  onChange={(value) => field.onChange(\"\" + value)}\n                />\n              )}\n            />\n            <Controller\n              name=\"smtpServer.starttls\"\n              control={control}\n              defaultValue=\"false\"\n              render={({ field }) => (\n                <Checkbox\n                  id=\"kc-enable-start-tls\"\n                  data-testid=\"enable-start-tls\"\n                  label={t(\"enableStartTLS\")}\n                  isChecked={field.value === \"true\"}\n                  onChange={(value) => field.onChange(\"\" + value)}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            hasNoPaddingTop\n            label={t(\"authentication\")}\n            fieldId=\"kc-authentication\"\n          >\n            <Controller\n              name=\"smtpServer.auth\"\n              control={control}\n              defaultValue=\"\"\n              render={({ field }) => (\n                <Switch\n                  id=\"kc-authentication-switch\"\n                  data-testid=\"email-authentication-switch\"\n                  label={t(\"common:enabled\")}\n                  labelOff={t(\"common:disabled\")}\n                  isChecked={field.value === \"true\"}\n                  onChange={(value) => {\n                    field.onChange(\"\" + value);\n                  }}\n                  aria-label={t(\"authentication\")}\n                />\n              )}\n            />\n          </FormGroup>\n          {authenticationEnabled === \"true\" && (\n            <>\n              <FormGroup\n                label={t(\"username\")}\n                fieldId=\"kc-username\"\n                isRequired\n                validated={errors.smtpServer?.user ? \"error\" : \"default\"}\n                helperTextInvalid={t(\"common:required\")}\n              >\n                <KeycloakTextInput\n                  id=\"kc-username\"\n                  data-testid=\"username-input\"\n                  placeholder=\"Login username\"\n                  validated={errors.smtpServer?.user ? \"error\" : \"default\"}\n                  {...register(\"smtpServer.user\", { required: true })}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"password\")}\n                fieldId=\"kc-username\"\n                isRequired\n                validated={errors.smtpServer?.password ? \"error\" : \"default\"}\n                helperTextInvalid={t(\"common:required\")}\n                labelIcon={\n                  <HelpItem\n                    helpText=\"realm-settings-help:password\"\n                    fieldLabelId=\"realm-settings:password\"\n                  />\n                }\n              >\n                <PasswordInput\n                  id=\"kc-password\"\n                  data-testid=\"password-input\"\n                  aria-label={t(\"password\")}\n                  validated={errors.smtpServer?.password ? \"error\" : \"default\"}\n                  {...register(\"smtpServer.password\", { required: true })}\n                />\n              </FormGroup>\n            </>\n          )}\n\n          <ActionGroup>\n            <ActionListItem>\n              <Button\n                variant=\"primary\"\n                type=\"submit\"\n                data-testid=\"email-tab-save\"\n              >\n                {t(\"common:save\")}\n              </Button>\n            </ActionListItem>\n            <ActionListItem>\n              <Button\n                variant=\"secondary\"\n                onClick={() => testConnection()}\n                data-testid=\"test-connection-button\"\n                isDisabled={\n                  !(emailRegexPattern.test(watchFromValue) && watchHostValue) ||\n                  !currentUser?.email\n                }\n                aria-describedby=\"descriptionTestConnection\"\n                isLoading={isTesting}\n                spinnerAriaValueText={t(\"testingConnection\")}\n              >\n                {t(\"common:testConnection\")}\n              </Button>\n            </ActionListItem>\n            <ActionListItem>\n              <Button\n                variant=\"link\"\n                onClick={reset}\n                data-testid=\"email-tab-revert\"\n              >\n                {t(\"common:revert\")}\n              </Button>\n            </ActionListItem>\n          </ActionGroup>\n          {currentUser && (\n            <FormGroup id=\"descriptionTestConnection\">\n              {currentUser.email ? (\n                <Alert\n                  variant=\"info\"\n                  isInline\n                  title={t(\"testConnectionHint.withEmail\", {\n                    email: currentUser.email,\n                  })}\n                />\n              ) : (\n                <Alert\n                  variant=\"warning\"\n                  isInline\n                  title={t(\"testConnectionHint.withoutEmail\", {\n                    userName: currentUser.username,\n                  })}\n                  actionLinks={\n                    <AlertActionLink\n                      component={(props) => (\n                        <Link\n                          {...props}\n                          to={toUser({\n                            realm: realmName,\n                            id: currentUser.id!,\n                            tab: \"settings\",\n                          })}\n                        />\n                      )}\n                    >\n                      {t(\"testConnectionHint.withoutEmailAction\")}\n                    </AlertActionLink>\n                  }\n                />\n              )}\n            </FormGroup>\n          )}\n        </FormAccess>\n      </FormPanel>\n    </PageSection>\n  );\n};\n","import { Fragment } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Button, ToolbarItem } from \"@patternfly/react-core\";\nimport type { IFormatterValueType } from \"@patternfly/react-table\";\n\nimport { KeycloakDataTable } from \"../../components/table-toolbar/KeycloakDataTable\";\nimport { ListEmptyState } from \"../../components/list-empty-state/ListEmptyState\";\n\nexport type EventType = {\n  id: string;\n};\n\ntype EventsTypeTableProps = {\n  loader: () => Promise<EventType[]>;\n  addTypes?: () => void;\n  onSelect?: (value: EventType[]) => void;\n  onDelete?: (value: EventType) => void;\n};\n\nexport function EventsTypeTable({\n  loader,\n  addTypes,\n  onSelect,\n  onDelete,\n}: EventsTypeTableProps) {\n  const { t } = useTranslation(\"realm-settings\");\n\n  const DescriptionCell = (event: EventType) => (\n    <Fragment key={event.id}>\n      {t(`eventTypes.${event.id}.description`)}\n    </Fragment>\n  );\n\n  return (\n    <KeycloakDataTable\n      ariaLabelKey=\"userEventsRegistered\"\n      searchPlaceholderKey=\"realm-settings:searchEventType\"\n      loader={loader}\n      onSelect={onSelect ? onSelect : undefined}\n      canSelectAll={!!onSelect}\n      toolbarItem={\n        addTypes && (\n          <ToolbarItem>\n            <Button id=\"addTypes\" onClick={addTypes} data-testid=\"addTypes\">\n              {t(\"addSavedTypes\")}\n            </Button>\n          </ToolbarItem>\n        )\n      }\n      actions={\n        !onDelete\n          ? []\n          : [\n              {\n                title: t(\"common:remove\"),\n                onRowClick: onDelete,\n              },\n            ]\n      }\n      columns={[\n        {\n          name: \"id\",\n          displayKey: \"realm-settings:eventType\",\n          cellFormatters: [\n            (data?: IFormatterValueType) => t(`eventTypes.${data}.name`),\n          ],\n        },\n        {\n          name: \"description\",\n          displayKey: \"description\",\n          cellRenderer: DescriptionCell,\n        },\n      ]}\n      emptyState={\n        <ListEmptyState\n          message={t(\"emptyEvents\")}\n          instructions={t(\"emptyEventsInstructions\")}\n        />\n      }\n    />\n  );\n}\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Button, Modal, ModalVariant } from \"@patternfly/react-core\";\n\nimport { EventsTypeTable, EventType } from \"./EventsTypeTable\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\n\ntype AddEventTypesDialogProps = {\n  onConfirm: (selected: EventType[]) => void;\n  onClose: () => void;\n  configured: string[];\n};\n\nexport const AddEventTypesDialog = ({\n  onConfirm,\n  onClose,\n  configured,\n}: AddEventTypesDialogProps) => {\n  const { t } = useTranslation(\"realm-settings\");\n  const { enums } = useServerInfo();\n\n  const [selectedTypes, setSelectedTypes] = useState<EventType[]>([]);\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      title={t(\"addTypes\")}\n      isOpen={true}\n      onClose={onClose}\n      actions={[\n        <Button\n          data-testid=\"addEventTypeConfirm\"\n          key=\"confirm\"\n          variant=\"primary\"\n          onClick={() => onConfirm(selectedTypes)}\n        >\n          {t(\"common:add\")}\n        </Button>,\n        <Button\n          data-testid=\"moveCancel\"\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={onClose}\n        >\n          {t(\"common:cancel\")}\n        </Button>,\n      ]}\n    >\n      <EventsTypeTable\n        onSelect={(selected) => setSelectedTypes(selected)}\n        loader={() =>\n          Promise.resolve(\n            enums![\"eventType\"]\n              .filter((type) => !configured.includes(type))\n              .map((id) => {\n                return { id };\n              })\n          )\n        }\n      />\n    </Modal>\n  );\n};\n","import {\n  ActionGroup,\n  Button,\n  Divider,\n  FormGroup,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { Controller, UseFormReturn } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { TimeSelector } from \"../../components/time-selector/TimeSelector\";\n\nexport type EventsType = \"admin\" | \"user\";\n\ntype EventConfigFormProps = {\n  type: EventsType;\n  form: UseFormReturn;\n  reset: () => void;\n  clear: () => void;\n};\n\nexport const EventConfigForm = ({\n  type,\n  form,\n  reset,\n  clear,\n}: EventConfigFormProps) => {\n  const { t } = useTranslation(\"realm-settings\");\n  const {\n    control,\n    watch,\n    setValue,\n    formState: { isDirty },\n  } = form;\n  const eventKey = type === \"admin\" ? \"adminEventsEnabled\" : \"eventsEnabled\";\n  const eventsEnabled: boolean = watch(eventKey);\n\n  const [toggleDisableDialog, DisableConfirm] = useConfirmDialog({\n    titleKey: \"realm-settings:events-disable-title\",\n    messageKey: \"realm-settings:events-disable-confirm\",\n    continueButtonLabel: \"realm-settings:confirm\",\n    onConfirm: () => setValue(eventKey, false),\n  });\n\n  return (\n    <>\n      <DisableConfirm />\n      <FormGroup\n        hasNoPaddingTop\n        label={t(\"saveEvents\")}\n        fieldId={eventKey}\n        labelIcon={\n          <HelpItem\n            helpText={`realm-settings-help:save-${type}-events`}\n            fieldLabelId=\"realm-settings:saveEvents\"\n          />\n        }\n      >\n        <Controller\n          name={eventKey}\n          defaultValue={false}\n          control={control}\n          render={({ field }) => (\n            <Switch\n              data-testid={eventKey}\n              id={`${eventKey}-switch`}\n              label={t(\"common:on\")}\n              labelOff={t(\"common:off\")}\n              isChecked={field.value}\n              onChange={(value) => {\n                if (!value) {\n                  toggleDisableDialog();\n                } else {\n                  field.onChange(value);\n                }\n              }}\n              aria-label={t(\"saveEvents\")}\n            />\n          )}\n        />\n      </FormGroup>\n      {eventsEnabled && (\n        <>\n          {type === \"admin\" && (\n            <FormGroup\n              hasNoPaddingTop\n              label={t(\"includeRepresentation\")}\n              fieldId=\"includeRepresentation\"\n              labelIcon={\n                <HelpItem\n                  helpText=\"realm-settings-help:includeRepresentation\"\n                  fieldLabelId=\"realm-settings:includeRepresentation\"\n                />\n              }\n            >\n              <Controller\n                name=\"adminEventsDetailsEnabled\"\n                defaultValue={false}\n                control={control}\n                render={({ field }) => (\n                  <Switch\n                    data-testid=\"includeRepresentation\"\n                    id=\"includeRepresentation\"\n                    label={t(\"common:on\")}\n                    labelOff={t(\"common:off\")}\n                    isChecked={field.value}\n                    onChange={field.onChange}\n                    aria-label={t(\"includeRepresentation\")}\n                  />\n                )}\n              />\n            </FormGroup>\n          )}\n          <FormGroup\n            label={t(\"expiration\")}\n            fieldId=\"expiration\"\n            labelIcon={\n              <HelpItem\n                helpText=\"realm-settings-help:expiration\"\n                fieldLabelId=\"realm-settings:expiration\"\n              />\n            }\n          >\n            <Controller\n              name={\n                type === \"user\" ? \"eventsExpiration\" : \"adminEventsExpiration\"\n              }\n              defaultValue=\"\"\n              control={control}\n              render={({ field }) => (\n                <TimeSelector\n                  value={field.value}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n        </>\n      )}\n      <ActionGroup>\n        <Button\n          variant=\"primary\"\n          type=\"submit\"\n          id={`save-${type}`}\n          data-testid={`save-${type}`}\n          isDisabled={!isDirty}\n        >\n          {t(\"common:save\")}\n        </Button>\n        <Button variant=\"link\" onClick={reset}>\n          {t(\"common:revert\")}\n        </Button>\n      </ActionGroup>\n      <Divider />\n      <FormGroup\n        label={type === \"user\" ? t(\"clearUserEvents\") : t(\"clearAdminEvents\")}\n        fieldId={`clear-${type}-events`}\n        labelIcon={\n          <HelpItem\n            helpText={`realm-settings-help:${type}-clearEvents`}\n            fieldLabelId={`realm-settings:clear-${type}-events`}\n          />\n        }\n      >\n        <Button\n          variant=\"danger\"\n          id={`clear-${type}-events`}\n          data-testid={`clear-${type}-events`}\n          onClick={() => clear()}\n        >\n          {type === \"user\" ? t(\"clearUserEvents\") : t(\"clearAdminEvents\")}\n        </Button>\n      </FormGroup>\n    </>\n  );\n};\n","import {\n  ActionGroup,\n  Button,\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, UseFormReturn } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\n\ntype EventListenersFormProps = {\n  form: UseFormReturn;\n  reset: () => void;\n};\n\nexport const EventListenersForm = ({\n  form,\n  reset,\n}: EventListenersFormProps) => {\n  const { t } = useTranslation(\"realm-settings\");\n  const {\n    control,\n    formState: { isDirty },\n  } = form;\n\n  const [selectEventListenerOpen, setSelectEventListenerOpen] = useState(false);\n  const serverInfo = useServerInfo();\n  const eventListeners = serverInfo.providers?.eventsListener.providers;\n\n  return (\n    <>\n      <FormGroup\n        hasNoPaddingTop\n        label={t(\"eventListeners\")}\n        fieldId={\"kc-eventListeners\"}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"eventListenersHelpText\")}\n            fieldLabelId=\"realm-settings:eventListeners\"\n          />\n        }\n      >\n        <Controller\n          name=\"eventsListeners\"\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              name=\"eventsListeners\"\n              className=\"kc_eventListeners_select\"\n              data-testid=\"eventListeners-select\"\n              chipGroupProps={{\n                numChips: 3,\n                expandedText: t(\"common:hide\"),\n                collapsedText: t(\"common:showRemaining\"),\n              }}\n              variant={SelectVariant.typeaheadMulti}\n              typeAheadAriaLabel=\"Select\"\n              onToggle={(isOpen) => setSelectEventListenerOpen(isOpen)}\n              selections={field.value}\n              onSelect={(_, selectedValue) => {\n                const option = selectedValue.toString();\n                const changedValue = field.value.includes(option)\n                  ? field.value.filter((item: string) => item !== option)\n                  : [...field.value, option];\n                field.onChange(changedValue);\n              }}\n              onClear={(operation) => {\n                operation.stopPropagation();\n                field.onChange([]);\n              }}\n              isOpen={selectEventListenerOpen}\n              aria-labelledby={\"eventsListeners\"}\n            >\n              {Object.keys(eventListeners!).map((event) => (\n                <SelectOption key={event} value={event} />\n              ))}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <ActionGroup>\n        <Button\n          variant=\"primary\"\n          type=\"submit\"\n          data-testid={\"saveEventListenerBtn\"}\n          isDisabled={!isDirty}\n        >\n          {t(\"common:save\")}\n        </Button>\n        <Button\n          variant=\"link\"\n          data-testid={\"revertEventListenerBtn\"}\n          onClick={reset}\n        >\n          {t(\"common:revert\")}\n        </Button>\n      </ActionGroup>\n    </>\n  );\n};\n","import type { RealmEventsConfigRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/realmEventsConfigRepresentation\";\nimport type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  AlertVariant,\n  ButtonVariant,\n  PageSection,\n  Tab,\n  Tabs,\n  TabTitleText,\n} from \"@patternfly/react-core\";\nimport { isEqual } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { convertToFormValues } from \"../../util\";\nimport { AddEventTypesDialog } from \"./AddEventTypesDialog\";\nimport { EventConfigForm, EventsType } from \"./EventConfigForm\";\nimport { EventListenersForm } from \"./EventListenersForm\";\nimport { EventsTypeTable, EventType } from \"./EventsTypeTable\";\n\ntype EventsTabProps = {\n  realm: RealmRepresentation;\n};\n\ntype EventsConfigForm = RealmEventsConfigRepresentation & {\n  adminEventsExpiration?: number;\n};\n\nexport const EventsTab = ({ realm }: EventsTabProps) => {\n  const { t } = useTranslation(\"realm-settings\");\n  const form = useForm<EventsConfigForm>();\n  const { setValue, handleSubmit } = form;\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(new Date().getTime());\n  const [tableKey, setTableKey] = useState(0);\n  const reload = () => setTableKey(new Date().getTime());\n\n  const [activeTab, setActiveTab] = useState(\"event\");\n  const [events, setEvents] = useState<RealmEventsConfigRepresentation>();\n  const [type, setType] = useState<EventsType>();\n  const [addEventType, setAddEventType] = useState(false);\n\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const { realm: realmName } = useRealm();\n\n  const setupForm = (eventConfig?: EventsConfigForm) => {\n    setEvents(eventConfig);\n    convertToFormValues(eventConfig || {}, setValue);\n  };\n\n  const clear = async (type: EventsType) => {\n    setType(type);\n    toggleDeleteDialog();\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"realm-settings:deleteEvents\",\n    messageKey: \"realm-settings:deleteEventsConfirm\",\n    continueButtonLabel: \"common:clear\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        switch (type) {\n          case \"admin\":\n            await adminClient.realms.clearAdminEvents({ realm: realmName });\n            break;\n          case \"user\":\n            await adminClient.realms.clearEvents({ realm: realmName });\n            break;\n        }\n        addAlert(t(`${type}-events-cleared`), AlertVariant.success);\n      } catch (error) {\n        addError(`realm-settings:${type}-events-cleared-error`, error);\n      }\n    },\n  });\n\n  useFetch(\n    () => adminClient.realms.getConfigEvents({ realm: realmName }),\n    (eventConfig) => {\n      setupForm({\n        ...eventConfig,\n        adminEventsExpiration: realm.attributes?.adminEventsExpiration,\n      });\n      reload();\n    },\n    [key]\n  );\n\n  const save = async (config: EventsConfigForm) => {\n    const updatedEventListener = !isEqual(\n      events?.eventsListeners,\n      config.eventsListeners\n    );\n\n    const { adminEventsExpiration, ...eventConfig } = config;\n    if (realm.attributes?.adminEventsExpiration !== adminEventsExpiration) {\n      await adminClient.realms.update(\n        { realm: realmName },\n        {\n          ...realm,\n          attributes: { ...(realm.attributes || {}), adminEventsExpiration },\n        }\n      );\n    }\n\n    try {\n      await adminClient.realms.updateConfigEvents(\n        { realm: realmName },\n        eventConfig\n      );\n      setupForm({ ...events, ...eventConfig, adminEventsExpiration });\n      addAlert(\n        updatedEventListener\n          ? t(\"realm-settings:saveEventListenersSuccess\")\n          : t(\"realm-settings:eventConfigSuccessfully\"),\n        AlertVariant.success\n      );\n    } catch (error) {\n      addError(\n        updatedEventListener\n          ? t(\"realm-settings:saveEventListenersError\")\n          : t(\"realm-settings:eventConfigError\"),\n        error\n      );\n    }\n  };\n\n  const addEventTypes = async (eventTypes: EventType[]) => {\n    const eventsTypes = eventTypes.map((type) => type.id);\n    const enabledEvents = events!.enabledEventTypes?.concat(eventsTypes);\n    await addEvents(enabledEvents);\n  };\n\n  const addEvents = async (events: string[] = []) => {\n    const eventConfig = { ...form.getValues(), enabledEventTypes: events };\n    await save(eventConfig);\n    setAddEventType(false);\n    refresh();\n  };\n\n  return (\n    <>\n      <DeleteConfirm />\n      {addEventType && (\n        <AddEventTypesDialog\n          onConfirm={(eventTypes) => addEventTypes(eventTypes)}\n          configured={events?.enabledEventTypes || []}\n          onClose={() => setAddEventType(false)}\n        />\n      )}\n      <Tabs\n        activeKey={activeTab}\n        onSelect={(_, key) => setActiveTab(key as string)}\n      >\n        <Tab\n          eventKey=\"event\"\n          title={<TabTitleText>{t(\"eventListeners\")}</TabTitleText>}\n          data-testid=\"rs-event-listeners-tab\"\n        >\n          <PageSection>\n            <FormAccess\n              role=\"manage-events\"\n              isHorizontal\n              onSubmit={handleSubmit(save)}\n            >\n              <EventListenersForm form={form} reset={() => setupForm(events)} />\n            </FormAccess>\n          </PageSection>\n        </Tab>\n        <Tab\n          eventKey=\"user\"\n          title={<TabTitleText>{t(\"userEventsSettings\")}</TabTitleText>}\n          data-testid=\"rs-events-tab\"\n        >\n          <PageSection>\n            <FormAccess\n              role=\"manage-events\"\n              isHorizontal\n              onSubmit={handleSubmit(save)}\n            >\n              <EventConfigForm\n                type=\"user\"\n                form={form}\n                reset={() => setupForm(events)}\n                clear={() => clear(\"user\")}\n              />\n            </FormAccess>\n          </PageSection>\n          {events?.eventsEnabled && (\n            <PageSection>\n              <EventsTypeTable\n                key={tableKey}\n                addTypes={() => setAddEventType(true)}\n                loader={() =>\n                  Promise.resolve(\n                    events.enabledEventTypes?.map((id) => {\n                      return { id };\n                    }) || []\n                  )\n                }\n                onDelete={(value) => {\n                  const enabledEventTypes = events.enabledEventTypes?.filter(\n                    (e) => e !== value.id\n                  );\n                  addEvents(enabledEventTypes);\n                  setEvents({ ...events, enabledEventTypes });\n                }}\n              />\n            </PageSection>\n          )}\n        </Tab>\n        <Tab\n          eventKey=\"admin\"\n          title={<TabTitleText>{t(\"adminEventsSettings\")}</TabTitleText>}\n          data-testid=\"rs-admin-events-tab\"\n        >\n          <PageSection>\n            <FormAccess\n              role=\"manage-events\"\n              isHorizontal\n              onSubmit={handleSubmit(save)}\n            >\n              <EventConfigForm\n                type=\"admin\"\n                form={form}\n                reset={() => setupForm(events)}\n                clear={() => clear(\"admin\")}\n              />\n            </FormAccess>\n          </PageSection>\n        </Tab>\n      </Tabs>\n    </>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  ActionGroup,\n  Button,\n  ClipboardCopy,\n  FormGroup,\n  PageSection,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Stack,\n  StackItem,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { useEffect, useState } from \"react\";\nimport { Controller, FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormattedLink } from \"../components/external-link/FormattedLink\";\nimport { FormAccess } from \"../components/form-access/FormAccess\";\nimport { HelpItem } from \"../components/help-enabler/HelpItem\";\nimport { KeyValueInput } from \"../components/key-value-form/KeyValueInput\";\nimport { KeycloakTextInput } from \"../components/keycloak-text-input/KeycloakTextInput\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport {\n  addTrailingSlash,\n  convertAttributeNameToForm,\n  convertToFormValues,\n} from \"../util\";\nimport useIsFeatureEnabled, { Feature } from \"../utils/useIsFeatureEnabled\";\n\ntype RealmSettingsGeneralTabProps = {\n  realm: RealmRepresentation;\n  save: (realm: RealmRepresentation) => void;\n};\n\nexport const RealmSettingsGeneralTab = ({\n  realm,\n  save,\n}: RealmSettingsGeneralTabProps) => {\n  const { t } = useTranslation(\"realm-settings\");\n  const { adminClient } = useAdminClient();\n  const { realm: realmName } = useRealm();\n  const form = useForm<RealmRepresentation>();\n  const {\n    register,\n    control,\n    handleSubmit,\n    setValue,\n    formState: { isDirty, errors },\n  } = form;\n  const isFeatureEnabled = useIsFeatureEnabled();\n  const [open, setOpen] = useState(false);\n\n  const requireSslTypes = [\"all\", \"external\", \"none\"];\n\n  const setupForm = () => {\n    convertToFormValues(realm, setValue);\n    if (realm.attributes?.[\"acr.loa.map\"]) {\n      const result = Object.entries(\n        JSON.parse(realm.attributes[\"acr.loa.map\"])\n      ).flatMap(([key, value]) => ({ key, value }));\n      result.concat({ key: \"\", value: \"\" });\n      setValue(\n        convertAttributeNameToForm(\"attributes.acr.loa.map\") as any,\n        result\n      );\n    }\n  };\n\n  useEffect(setupForm, []);\n\n  return (\n    <PageSection variant=\"light\">\n      <FormAccess\n        isHorizontal\n        role=\"manage-realm\"\n        className=\"pf-u-mt-lg\"\n        onSubmit={handleSubmit(save)}\n      >\n        <FormGroup\n          label={t(\"realmId\")}\n          fieldId=\"kc-realm-id\"\n          isRequired\n          validated={errors.realm ? \"error\" : \"default\"}\n          helperTextInvalid={errors.realm?.message}\n        >\n          <Controller\n            name=\"realm\"\n            control={control}\n            rules={{\n              required: { value: true, message: t(\"common:required\") },\n              pattern: {\n                value: /^[a-zA-Z0-9-_]+$/,\n                message: t(\"realm:invalidRealmName\"),\n              },\n            }}\n            defaultValue=\"\"\n            render={({ field }) => (\n              <ClipboardCopy data-testid=\"realmName\" onChange={field.onChange}>\n                {field.value}\n              </ClipboardCopy>\n            )}\n          />\n        </FormGroup>\n        <FormGroup label={t(\"displayName\")} fieldId=\"kc-display-name\">\n          <KeycloakTextInput\n            id=\"kc-display-name\"\n            {...register(\"displayName\")}\n          />\n        </FormGroup>\n        <FormGroup label={t(\"htmlDisplayName\")} fieldId=\"kc-html-display-name\">\n          <KeycloakTextInput\n            id=\"kc-html-display-name\"\n            {...register(\"displayNameHtml\")}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"frontendUrl\")}\n          fieldId=\"kc-frontend-url\"\n          labelIcon={\n            <HelpItem\n              helpText=\"realm-settings-help:frontendUrl\"\n              fieldLabelId=\"realm-settings:frontendUrl\"\n            />\n          }\n        >\n          <KeycloakTextInput\n            type=\"url\"\n            id=\"kc-frontend-url\"\n            {...register(convertAttributeNameToForm(\"attributes.frontendUrl\"))}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"requireSsl\")}\n          fieldId=\"kc-require-ssl\"\n          labelIcon={\n            <HelpItem\n              helpText=\"realm-settings-help:requireSsl\"\n              fieldLabelId=\"realm-settings:requireSsl\"\n            />\n          }\n        >\n          <Controller\n            name=\"sslRequired\"\n            defaultValue=\"none\"\n            control={control}\n            render={({ field }) => (\n              <Select\n                toggleId=\"kc-require-ssl\"\n                onToggle={() => setOpen(!open)}\n                onSelect={(_, value) => {\n                  field.onChange(value as string);\n                  setOpen(false);\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n                aria-label={t(\"requireSsl\")}\n                isOpen={open}\n              >\n                {requireSslTypes.map((sslType) => (\n                  <SelectOption\n                    selected={sslType === field.value}\n                    key={sslType}\n                    value={sslType}\n                  >\n                    {t(`sslType.${sslType}`)}\n                  </SelectOption>\n                ))}\n              </Select>\n            )}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"clients:acrToLoAMapping\")}\n          fieldId=\"acrToLoAMapping\"\n          labelIcon={\n            <HelpItem\n              helpText=\"clients-help:acrToLoAMapping\"\n              fieldLabelId=\"clients:acrToLoAMapping\"\n            />\n          }\n        >\n          <FormProvider {...form}>\n            <KeyValueInput\n              name={convertAttributeNameToForm(\"attributes.acr.loa.map\")}\n            />\n          </FormProvider>\n        </FormGroup>\n        <FormGroup\n          hasNoPaddingTop\n          label={t(\"userManagedAccess\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"realm-settings-help:userManagedAccess\"\n              fieldLabelId=\"realm-settings:userManagedAccess\"\n            />\n          }\n          fieldId=\"kc-user-managed-access\"\n        >\n          <Controller\n            name=\"userManagedAccessAllowed\"\n            control={control}\n            defaultValue={false}\n            render={({ field }) => (\n              <Switch\n                id=\"kc-user-managed-access\"\n                data-testid=\"user-managed-access-switch\"\n                label={t(\"common:on\")}\n                labelOff={t(\"common:off\")}\n                isChecked={field.value}\n                onChange={field.onChange}\n                aria-label={t(\"userManagedAccess\")}\n              />\n            )}\n          />\n        </FormGroup>\n        {isFeatureEnabled(Feature.DeclarativeUserProfile) && (\n          <FormGroup\n            hasNoPaddingTop\n            label={t(\"userProfileEnabled\")}\n            labelIcon={\n              <HelpItem\n                helpText=\"realm-settings-help:userProfileEnabled\"\n                fieldLabelId=\"realm-settings:userProfileEnabled\"\n              />\n            }\n            fieldId=\"kc-user-profile-enabled\"\n          >\n            <Controller\n              name={\n                convertAttributeNameToForm(\n                  \"attributes.userProfileEnabled\"\n                ) as any\n              }\n              control={control}\n              defaultValue=\"false\"\n              render={({ field }) => (\n                <Switch\n                  id=\"kc-user-profile-enabled\"\n                  data-testid=\"user-profile-enabled-switch\"\n                  label={t(\"common:on\")}\n                  labelOff={t(\"common:off\")}\n                  isChecked={field.value === \"true\"}\n                  onChange={(value) => field.onChange(value.toString())}\n                  aria-label={t(\"userProfileEnabled\")}\n                />\n              )}\n            />\n          </FormGroup>\n        )}\n        <FormGroup\n          label={t(\"endpoints\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"realm-settings-help:endpoints\"\n              fieldLabelId=\"realm-settings:endpoints\"\n            />\n          }\n          fieldId=\"kc-endpoints\"\n        >\n          <Stack>\n            <StackItem>\n              <FormattedLink\n                href={`${addTrailingSlash(\n                  adminClient.baseUrl\n                )}realms/${realmName}/.well-known/openid-configuration`}\n                title={t(\"openIDEndpointConfiguration\")}\n              />\n            </StackItem>\n            <StackItem>\n              <FormattedLink\n                href={`${addTrailingSlash(\n                  adminClient.baseUrl\n                )}realms/${realmName}/protocol/saml/descriptor`}\n                title={t(\"samlIdentityProviderMetadata\")}\n              />\n            </StackItem>\n          </Stack>\n        </FormGroup>\n\n        <ActionGroup>\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            data-testid=\"general-tab-save\"\n            isDisabled={!isDirty}\n          >\n            {t(\"common:save\")}\n          </Button>\n          <Button\n            data-testid=\"general-tab-revert\"\n            variant=\"link\"\n            onClick={setupForm}\n          >\n            {t(\"common:revert\")}\n          </Button>\n        </ActionGroup>\n      </FormAccess>\n    </PageSection>\n  );\n};\n","import { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Button,\n  ButtonVariant,\n  PageSection,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { cellWidth } from \"@patternfly/react-table\";\nimport { FilterIcon } from \"@patternfly/react-icons\";\n\nimport type { KeyMetadataRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/keyMetadataRepresentation\";\nimport type ComponentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentRepresentation\";\nimport { ListEmptyState } from \"../../components/list-empty-state/ListEmptyState\";\nimport { KeycloakDataTable } from \"../../components/table-toolbar/KeycloakDataTable\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { emptyFormatter } from \"../../util\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { toKeysTab } from \"../routes/KeysTab\";\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport useToggle from \"../../utils/useToggle\";\n\nimport \"../realm-settings-section.css\";\n\nconst FILTER_OPTIONS = [\"ACTIVE\", \"PASSIVE\", \"DISABLED\"] as const;\ntype FilterType = (typeof FILTER_OPTIONS)[number];\n\ntype KeyData = KeyMetadataRepresentation & {\n  provider?: string;\n};\n\ntype KeysListTabProps = {\n  realmComponents: ComponentRepresentation[];\n};\n\ntype SelectFilterProps = {\n  onFilter: (filter: FilterType) => void;\n};\n\nconst SelectFilter = ({ onFilter }: SelectFilterProps) => {\n  const { t } = useTranslation(\"realm-settings\");\n  const [filterType, setFilterType] = useState<FilterType>(FILTER_OPTIONS[0]);\n\n  const [filterDropdownOpen, toggleFilter] = useToggle();\n  return (\n    <Select\n      width={300}\n      data-testid=\"filter-type-select\"\n      isOpen={filterDropdownOpen}\n      className=\"kc-filter-type-select\"\n      variant={SelectVariant.single}\n      onToggle={toggleFilter}\n      toggleIcon={<FilterIcon />}\n      onSelect={(_, value) => {\n        const filter =\n          FILTER_OPTIONS.find((o) => o === value.toString()) ||\n          FILTER_OPTIONS[0];\n        setFilterType(filter);\n        onFilter(filter);\n        toggleFilter();\n      }}\n      selections={filterType}\n    >\n      {FILTER_OPTIONS.map((option) => (\n        <SelectOption\n          key={option}\n          data-testid={`${option}-option`}\n          value={option}\n        >\n          {t(`keysFilter.${option}`)}\n        </SelectOption>\n      ))}\n    </Select>\n  );\n};\n\nexport const KeysListTab = ({ realmComponents }: KeysListTabProps) => {\n  const { t } = useTranslation(\"realm-settings\");\n  const navigate = useNavigate();\n\n  const [publicKey, setPublicKey] = useState(\"\");\n  const [certificate, setCertificate] = useState(\"\");\n\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n\n  const [keyData, setKeyData] = useState<KeyData[]>();\n  const [filteredKeyData, setFilteredKeyData] = useState<KeyData[]>();\n\n  useFetch(\n    async () => {\n      const keysMetaData = await adminClient.realms.getKeys({ realm });\n      return keysMetaData.keys?.map((key) => {\n        const provider = realmComponents.find(\n          (component: ComponentRepresentation) =>\n            component.id === key.providerId\n        );\n        return { ...key, provider: provider?.name } as KeyData;\n      })!;\n    },\n    setKeyData,\n    []\n  );\n\n  const [togglePublicKeyDialog, PublicKeyDialog] = useConfirmDialog({\n    titleKey: t(\"publicKeys\").slice(0, -1),\n    messageKey: publicKey,\n    continueButtonLabel: \"common:close\",\n    continueButtonVariant: ButtonVariant.primary,\n    onConfirm: () => Promise.resolve(),\n  });\n\n  const [toggleCertificateDialog, CertificateDialog] = useConfirmDialog({\n    titleKey: t(\"certificate\"),\n    messageKey: certificate,\n    continueButtonLabel: \"common:close\",\n    continueButtonVariant: ButtonVariant.primary,\n    onConfirm: () => Promise.resolve(),\n  });\n\n  const ProviderRenderer = ({ provider }: KeyData) => provider;\n\n  const ButtonRenderer = ({ type, publicKey, certificate }: KeyData) => {\n    if (type === \"EC\") {\n      return (\n        <Button\n          onClick={() => {\n            togglePublicKeyDialog();\n            setPublicKey(publicKey!);\n          }}\n          variant=\"secondary\"\n          id=\"kc-public-key\"\n        >\n          {t(\"publicKeys\").slice(0, -1)}\n        </Button>\n      );\n    } else if (type === \"RSA\") {\n      return (\n        <div className=\"button-wrapper\">\n          <Button\n            onClick={() => {\n              togglePublicKeyDialog();\n              setPublicKey(publicKey!);\n            }}\n            variant=\"secondary\"\n            id={publicKey}\n          >\n            {t(\"publicKeys\").slice(0, -1)}\n          </Button>\n          <Button\n            onClick={() => {\n              toggleCertificateDialog();\n              setCertificate(certificate!);\n            }}\n            variant=\"secondary\"\n            id={certificate}\n            className=\"kc-certificate\"\n          >\n            {t(\"certificate\")}\n          </Button>\n        </div>\n      );\n    }\n  };\n\n  if (!keyData) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <PageSection variant=\"light\" padding={{ default: \"noPadding\" }}>\n      <PublicKeyDialog />\n      <CertificateDialog />\n      <KeycloakDataTable\n        isNotCompact\n        className=\"kc-keys-list\"\n        loader={filteredKeyData || keyData}\n        ariaLabelKey=\"realm-settings:keysList\"\n        searchPlaceholderKey=\"realm-settings:searchKey\"\n        searchTypeComponent={\n          <SelectFilter\n            onFilter={(filterType) =>\n              setFilteredKeyData(\n                filterType !== FILTER_OPTIONS[0]\n                  ? keyData!.filter(({ status }) => status === filterType)\n                  : undefined\n              )\n            }\n          />\n        }\n        canSelectAll\n        columns={[\n          {\n            name: \"algorithm\",\n            displayKey: \"realm-settings:algorithm\",\n            cellFormatters: [emptyFormatter()],\n            transforms: [cellWidth(15)],\n          },\n          {\n            name: \"type\",\n            displayKey: \"type\",\n            cellFormatters: [emptyFormatter()],\n            transforms: [cellWidth(10)],\n          },\n          {\n            name: \"kid\",\n            displayKey: \"realm-settings:kid\",\n            cellFormatters: [emptyFormatter()],\n            transforms: [cellWidth(10)],\n          },\n          {\n            name: \"use\",\n            displayKey: \"realm-settings:use\",\n            cellFormatters: [emptyFormatter()],\n            transforms: [cellWidth(10)],\n          },\n          {\n            name: \"provider\",\n            displayKey: \"realm-settings:provider\",\n            cellRenderer: ProviderRenderer,\n            cellFormatters: [emptyFormatter()],\n            transforms: [cellWidth(10)],\n          },\n          {\n            name: \"publicKeys\",\n            displayKey: \"realm-settings:publicKeys\",\n            cellRenderer: ButtonRenderer,\n            cellFormatters: [],\n            transforms: [cellWidth(20)],\n          },\n        ]}\n        isSearching={!!filteredKeyData}\n        emptyState={\n          <ListEmptyState\n            hasIcon\n            message={t(\"noKeys\")}\n            instructions={t(\"noKeysDescription\")}\n            primaryActionText={t(\"addProvider\")}\n            onPrimaryAction={() =>\n              navigate(toKeysTab({ realm, tab: \"providers\" }))\n            }\n          />\n        }\n      />\n    </PageSection>\n  );\n};\n","import { Modal, ModalVariant } from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { KeyProviderForm } from \"./KeyProviderForm\";\nimport type { ProviderType } from \"../../routes/KeyProvider\";\n\ntype KeyProviderModalProps = {\n  providerType: ProviderType;\n  onClose: () => void;\n};\n\nexport const KeyProviderModal = ({\n  providerType,\n  onClose,\n}: KeyProviderModalProps) => {\n  const { t } = useTranslation(\"realm-settings\");\n  return (\n    <Modal\n      className=\"add-provider-modal\"\n      variant={ModalVariant.medium}\n      title={t(\"addProvider\")}\n      isOpen\n      onClose={onClose}\n    >\n      <KeyProviderForm providerType={providerType} onClose={onClose} />\n    </Modal>\n  );\n};\n","import type ComponentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentRepresentation\";\nimport type ComponentTypeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentTypeRepresentation\";\nimport type { KeyMetadataRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/keyMetadataRepresentation\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Dropdown,\n  DropdownItem,\n  DropdownToggle,\n  InputGroup,\n  PageSection,\n  TextInput,\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { SearchIcon } from \"@patternfly/react-icons\";\nimport { KeyboardEvent, useMemo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\n\nimport { DraggableTable } from \"../../authentication/components/DraggableTable\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { KEY_PROVIDER_TYPE } from \"../../util\";\nimport useToggle from \"../../utils/useToggle\";\nimport { ProviderType, toKeyProvider } from \"../routes/KeyProvider\";\nimport { KeyProviderModal } from \"./key-providers/KeyProviderModal\";\n\nimport \"../realm-settings-section.css\";\n\ntype ComponentData = KeyMetadataRepresentation & {\n  id?: string;\n  providerDescription?: string;\n  name?: string;\n  toggleHidden?: boolean;\n  config?: any;\n  parentId?: string;\n};\n\ntype KeysProvidersTabProps = {\n  realmComponents: ComponentRepresentation[];\n  refresh: () => void;\n};\n\nexport const KeysProvidersTab = ({\n  realmComponents,\n  refresh,\n}: KeysProvidersTabProps) => {\n  const { t } = useTranslation(\"realm-settings\");\n  const { addAlert, addError } = useAlerts();\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n\n  const [searchVal, setSearchVal] = useState(\"\");\n  const [filteredComponents, setFilteredComponents] = useState<ComponentData[]>(\n    []\n  );\n\n  const [isCreateModalOpen, handleModalToggle] = useToggle();\n  const serverInfo = useServerInfo();\n  const keyProviderComponentTypes =\n    serverInfo.componentTypes?.[KEY_PROVIDER_TYPE] ?? [];\n  const providerTypes = keyProviderComponentTypes.map((item) => item.id);\n\n  const [providerDropdownOpen, setProviderDropdownOpen] = useState(false);\n  const [defaultUIDisplayName, setDefaultUIDisplayName] =\n    useState<ProviderType>();\n\n  const [selectedComponent, setSelectedComponent] =\n    useState<ComponentRepresentation>();\n\n  const components = useMemo(\n    () =>\n      realmComponents.map((component) => {\n        const provider = keyProviderComponentTypes.find(\n          (componentType: ComponentTypeRepresentation) =>\n            component.providerId === componentType.id\n        );\n\n        return {\n          ...component,\n          providerDescription: provider?.helpText,\n        };\n      }),\n    [realmComponents]\n  );\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"realm-settings:deleteProviderTitle\",\n    messageKey: t(\"deleteProviderConfirm\", {\n      provider: selectedComponent?.name,\n    }),\n    continueButtonLabel: \"common:delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.components.del({\n          id: selectedComponent!.id!,\n          realm: realm,\n        });\n\n        refresh();\n\n        addAlert(t(\"deleteProviderSuccess\"), AlertVariant.success);\n      } catch (error) {\n        addError(\"realm-settings:deleteProviderError\", error);\n      }\n    },\n  });\n\n  const onSearch = () => {\n    if (searchVal !== \"\") {\n      setSearchVal(searchVal);\n      const filteredComponents = components.filter(\n        (component) =>\n          component.name?.includes(searchVal) ||\n          component.providerId?.includes(searchVal)\n      );\n      setFilteredComponents(filteredComponents);\n    } else {\n      setSearchVal(\"\");\n      setFilteredComponents(components);\n    }\n  };\n\n  const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Enter\") {\n      onSearch();\n    }\n  };\n\n  const handleInputChange = (value: string) => {\n    setSearchVal(value);\n  };\n\n  return (\n    <>\n      {isCreateModalOpen && defaultUIDisplayName && (\n        <KeyProviderModal\n          providerType={defaultUIDisplayName}\n          onClose={() => {\n            handleModalToggle();\n            refresh();\n          }}\n        />\n      )}\n      <DeleteConfirm />\n      <PageSection variant=\"light\" padding={{ default: \"noPadding\" }}>\n        <Toolbar>\n          <ToolbarGroup className=\"providers-toolbar\">\n            <ToolbarItem>\n              <InputGroup>\n                <TextInput\n                  name={\"inputGroupName\"}\n                  id={\"inputGroupName\"}\n                  data-testid=\"provider-search-input\"\n                  type=\"search\"\n                  aria-label={t(\"common:search\")}\n                  placeholder={t(\"common:search\")}\n                  onChange={handleInputChange}\n                  onKeyDown={handleKeyDown}\n                />\n                <Button\n                  variant={ButtonVariant.control}\n                  aria-label={t(\"common:search\")}\n                  onClick={onSearch}\n                >\n                  <SearchIcon />\n                </Button>\n              </InputGroup>\n            </ToolbarItem>\n            <ToolbarItem>\n              <Dropdown\n                data-testid=\"addProviderDropdown\"\n                className=\"add-provider-dropdown\"\n                isOpen={providerDropdownOpen}\n                toggle={\n                  <DropdownToggle\n                    onToggle={(val) => setProviderDropdownOpen(val)}\n                    isPrimary\n                  >\n                    {t(\"addProvider\")}\n                  </DropdownToggle>\n                }\n                dropdownItems={[\n                  providerTypes.map((item) => (\n                    <DropdownItem\n                      onClick={() => {\n                        handleModalToggle();\n\n                        setProviderDropdownOpen(false);\n                        setDefaultUIDisplayName(item as ProviderType);\n                      }}\n                      data-testid={`option-${item}`}\n                      key={item}\n                    >\n                      {item}\n                    </DropdownItem>\n                  )),\n                ]}\n              />\n            </ToolbarItem>\n          </ToolbarGroup>\n        </Toolbar>\n        <DraggableTable\n          variant=\"compact\"\n          className=\"kc-draggable-table\"\n          keyField=\"id\"\n          data={\n            filteredComponents.length === 0 ? components : filteredComponents\n          }\n          onDragFinish={async (_, itemOrder) => {\n            const updateAll = components.map((component: ComponentData) => {\n              const componentToSave = { ...component };\n              delete componentToSave.providerDescription;\n\n              return adminClient.components.update(\n                { id: component.id! },\n                {\n                  ...componentToSave,\n                  config: {\n                    priority: [\n                      (\n                        itemOrder.length -\n                        itemOrder.indexOf(component.id!) +\n                        100\n                      ).toString(),\n                    ],\n                  },\n                }\n              );\n            });\n\n            try {\n              await Promise.all(updateAll);\n              refresh();\n              addAlert(t(\"saveProviderListSuccess\"), AlertVariant.success);\n            } catch (error) {\n              addError(\"realm-settings:saveProviderError\", error);\n            }\n          }}\n          columns={[\n            {\n              name: \"name\",\n              displayKey: \"realm-settings:name\",\n              cellRenderer: (component) => (\n                <Link\n                  key={component.name}\n                  data-testid=\"provider-name-link\"\n                  to={toKeyProvider({\n                    realm,\n                    id: component.id!,\n                    providerType: component.providerId as ProviderType,\n                  })}\n                >\n                  {component.name}\n                </Link>\n              ),\n            },\n            {\n              name: \"providerId\",\n              displayKey: \"realm-settings:provider\",\n            },\n            {\n              name: \"providerDescription\",\n              displayKey: \"realm-settings:providerDescription\",\n            },\n          ]}\n          actions={[\n            {\n              title: t(\"common:delete\"),\n              onClick: (_key, _idx, component) => {\n                setSelectedComponent(component as ComponentRepresentation);\n                toggleDeleteDialog();\n              },\n            },\n          ]}\n        />\n      </PageSection>\n    </>\n  );\n};\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Tab, TabTitleText } from \"@patternfly/react-core\";\n\nimport type ComponentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentRepresentation\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { KEY_PROVIDER_TYPE } from \"../../util\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../../components/routable-tabs/RoutableTabs\";\nimport { KeySubTab, toKeysTab } from \"../routes/KeysTab\";\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport { KeysListTab } from \"./KeysListTab\";\nimport { KeysProvidersTab } from \"./KeysProvidersTab\";\n\nconst sortByPriority = (components: ComponentRepresentation[]) => {\n  const sortedComponents = [...components].sort((a, b) => {\n    const priorityA = Number(a.config?.priority);\n    const priorityB = Number(b.config?.priority);\n\n    return (\n      (!isNaN(priorityB) ? priorityB : 0) - (!isNaN(priorityA) ? priorityA : 0)\n    );\n  });\n\n  return sortedComponents;\n};\n\nexport const KeysTab = () => {\n  const { t } = useTranslation(\"realm-settings\");\n\n  const { adminClient } = useAdminClient();\n  const { realm: realmName } = useRealm();\n\n  const [realmComponents, setRealmComponents] =\n    useState<ComponentRepresentation[]>();\n  const [key, setKey] = useState(0);\n  const refresh = () => {\n    setKey(key + 1);\n  };\n\n  useFetch(\n    () =>\n      adminClient.components.find({\n        type: KEY_PROVIDER_TYPE,\n        realm: realmName,\n      }),\n    (components) => setRealmComponents(sortByPriority(components)),\n    [key]\n  );\n\n  const useTab = (tab: KeySubTab) =>\n    useRoutableTab(toKeysTab({ realm: realmName, tab }));\n\n  const listTab = useTab(\"list\");\n  const providersTab = useTab(\"providers\");\n\n  if (!realmComponents) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <RoutableTabs\n      mountOnEnter\n      unmountOnExit\n      defaultLocation={toKeysTab({ realm: realmName, tab: \"list\" })}\n    >\n      <Tab\n        id=\"keysList\"\n        data-testid=\"rs-keys-list-tab\"\n        aria-label=\"keys-list-subtab\"\n        title={<TabTitleText>{t(\"keysList\")}</TabTitleText>}\n        {...listTab}\n      >\n        <KeysListTab realmComponents={realmComponents} />\n      </Tab>\n      <Tab\n        id=\"providers\"\n        data-testid=\"rs-providers-tab\"\n        aria-label=\"rs-providers-tab\"\n        title={<TabTitleText>{t(\"providers\")}</TabTitleText>}\n        {...providersTab}\n      >\n        <KeysProvidersTab realmComponents={realmComponents} refresh={refresh} />\n      </Tab>\n    </RoutableTabs>\n  );\n};\n","// @ts-nocheck\nimport {\n  Button,\n  ButtonVariant,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { SubmitHandler, UseFormReturn } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport type { KeyValueType } from \"../components/key-value-form/key-value-convert\";\nimport { KeycloakTextInput } from \"../components/keycloak-text-input/KeycloakTextInput\";\n\ntype AddMessageBundleModalProps = {\n  id?: string;\n  form: UseFormReturn<BundleForm>;\n  save: SubmitHandler<BundleForm>;\n  handleModalToggle: () => void;\n};\n\nexport type BundleForm = {\n  messageBundle: KeyValueType;\n};\n\nexport const AddMessageBundleModal = ({\n  handleModalToggle,\n  save,\n  form: {\n    register,\n    handleSubmit,\n    formState: { errors },\n  },\n}: AddMessageBundleModalProps) => {\n  const { t } = useTranslation(\"realm-settings\");\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title={t(\"addMessageBundle\")}\n      isOpen\n      onClose={handleModalToggle}\n      actions={[\n        <Button\n          data-testid=\"add-bundle-confirm-button\"\n          key=\"confirm\"\n          variant=\"primary\"\n          type=\"submit\"\n          form=\"bundle-form\"\n        >\n          {t(\"common:create\")}\n        </Button>,\n        <Button\n          id=\"modal-cancel\"\n          data-testid=\"cancel\"\n          key=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={() => {\n            handleModalToggle();\n          }}\n        >\n          {t(\"common:cancel\")}\n        </Button>,\n      ]}\n    >\n      <Form id=\"bundle-form\" isHorizontal onSubmit={handleSubmit(save)}>\n        <FormGroup\n          label={t(\"common:key\")}\n          name=\"key\"\n          fieldId=\"key-id\"\n          helperTextInvalid={t(\"common:required\")}\n          validated={\n            errors.key ? ValidatedOptions.error : ValidatedOptions.default\n          }\n          isRequired\n        >\n          <KeycloakTextInput\n            data-testid=\"key-input\"\n            autoFocus\n            id=\"key-id\"\n            validated={\n              errors.key ? ValidatedOptions.error : ValidatedOptions.default\n            }\n            {...register(\"key\", { required: true })}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"common:value\")}\n          name=\"add-value\"\n          fieldId=\"value-id\"\n          helperTextInvalid={t(\"common:required\")}\n          validated={\n            errors.value ? ValidatedOptions.error : ValidatedOptions.default\n          }\n          isRequired\n        >\n          <KeycloakTextInput\n            data-testid=\"value-input\"\n            id=\"value-id\"\n            validated={\n              errors.value ? ValidatedOptions.error : ValidatedOptions.default\n            }\n            {...register(\"value\", { required: true })}\n          />\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  Divider,\n  FormGroup,\n  PageSection,\n  Select,\n  SelectGroup,\n  SelectOption,\n  SelectVariant,\n  Switch,\n  TextContent,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { SearchIcon } from \"@patternfly/react-icons\";\nimport {\n  applyCellEdits,\n  cancelCellEdits,\n  EditableTextCell,\n  IEditableTextCell,\n  IRow,\n  IRowCell,\n  RowEditType,\n  RowErrors,\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n  validateCellEdits,\n} from \"@patternfly/react-table\";\nimport type { EditableTextCellProps } from \"@patternfly/react-table/dist/esm/components/Table/base\";\nimport { cloneDeep, isEqual, uniqWith } from \"lodash-es\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { Controller, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { FormAccess } from \"../components/form-access/FormAccess\";\nimport { HelpItem } from \"../components/help-enabler/HelpItem\";\nimport type { KeyValueType } from \"../components/key-value-form/key-value-convert\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport { FormPanel } from \"../components/scroll-form/FormPanel\";\nimport { PaginatingTableToolbar } from \"../components/table-toolbar/PaginatingTableToolbar\";\nimport { useAdminClient, useFetch } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../context/server-info/ServerInfoProvider\";\nimport { useWhoAmI } from \"../context/whoami/WhoAmI\";\nimport { DEFAULT_LOCALE } from \"../i18n\";\nimport { convertToFormValues } from \"../util\";\nimport { AddMessageBundleModal } from \"./AddMessageBundleModal\";\n\ntype LocalizationTabProps = {\n  save: (realm: RealmRepresentation) => void;\n  refresh: () => void;\n  realm: RealmRepresentation;\n};\n\nexport enum RowEditAction {\n  Save = \"save\",\n  Cancel = \"cancel\",\n  Edit = \"edit\",\n  Delete = \"delete\",\n}\n\nexport type BundleForm = {\n  messageBundle: KeyValueType;\n};\n\nconst localeToDisplayName = (locale: string) => {\n  try {\n    return new Intl.DisplayNames([locale], { type: \"language\" }).of(locale);\n  } catch (error) {\n    return locale;\n  }\n};\n\nexport const LocalizationTab = ({ save, realm }: LocalizationTabProps) => {\n  const { t } = useTranslation(\"realm-settings\");\n  const { adminClient } = useAdminClient();\n  const [addMessageBundleModalOpen, setAddMessageBundleModalOpen] =\n    useState(false);\n\n  const [supportedLocalesOpen, setSupportedLocalesOpen] = useState(false);\n  const [defaultLocaleOpen, setDefaultLocaleOpen] = useState(false);\n  const [filterDropdownOpen, setFilterDropdownOpen] = useState(false);\n  const [selectMenuLocale, setSelectMenuLocale] = useState(DEFAULT_LOCALE);\n\n  const { setValue, getValues, control, handleSubmit, formState } = useForm();\n  const [selectMenuValueSelected, setSelectMenuValueSelected] = useState(false);\n  const [messageBundles, setMessageBundles] = useState<[string, string][]>([]);\n  const [tableRows, setTableRows] = useState<IRow[]>([]);\n\n  const themeTypes = useServerInfo().themes!;\n  const allLocales = useMemo(() => {\n    const locales = Object.values(themeTypes).flatMap((theme) =>\n      theme.flatMap(({ locales }) => (locales ? locales : []))\n    );\n    return Array.from(new Set(locales));\n  }, [themeTypes]);\n  const bundleForm = useForm<BundleForm>({ mode: \"onChange\" });\n  const { addAlert, addError } = useAlerts();\n  const { realm: currentRealm } = useRealm();\n  const { whoAmI } = useWhoAmI();\n\n  const defaultSupportedLocales = realm.supportedLocales?.length\n    ? realm.supportedLocales\n    : [DEFAULT_LOCALE];\n\n  const setupForm = () => {\n    convertToFormValues(realm, setValue);\n    setValue(\"supportedLocales\", defaultSupportedLocales);\n  };\n\n  useEffect(setupForm, []);\n\n  const watchSupportedLocales: string[] = useWatch({\n    control,\n    name: \"supportedLocales\",\n    defaultValue: defaultSupportedLocales,\n  });\n  const internationalizationEnabled = useWatch({\n    control,\n    name: \"internationalizationEnabled\",\n    defaultValue: realm.internationalizationEnabled,\n  });\n\n  const [tableKey, setTableKey] = useState(0);\n  const [max, setMax] = useState(10);\n  const [first, setFirst] = useState(0);\n  const [filter, setFilter] = useState(\"\");\n\n  const refreshTable = () => {\n    setTableKey(tableKey + 1);\n  };\n\n  useFetch(\n    async () => {\n      let result = await adminClient.realms\n        .getRealmLocalizationTexts({\n          first,\n          max,\n          realm: realm.realm!,\n          selectedLocale:\n            selectMenuLocale ||\n            getValues(\"defaultLocale\") ||\n            whoAmI.getLocale(),\n        })\n        // prevents server error in dev mode due to snowpack\n        .catch(() => []);\n\n      const searchInBundles = (idx: number) => {\n        return Object.entries(result).filter((i) => i[idx].includes(filter));\n      };\n\n      if (filter) {\n        const filtered = uniqWith(\n          searchInBundles(0).concat(searchInBundles(1)),\n          isEqual\n        );\n\n        result = Object.fromEntries(filtered);\n      }\n\n      return { result };\n    },\n    ({ result }) => {\n      const bundles = Object.entries(result).slice(first, first + max + 1);\n      setMessageBundles(bundles);\n\n      const updatedRows = bundles.map<IRow>((messageBundle) => ({\n        rowEditBtnAriaLabel: () =>\n          t(\"rowEditBtnAriaLabel\", {\n            messageBundle: messageBundle[1],\n          }),\n        rowSaveBtnAriaLabel: () =>\n          t(\"rowSaveBtnAriaLabel\", {\n            messageBundle: messageBundle[1],\n          }),\n        rowCancelBtnAriaLabel: () =>\n          t(\"rowCancelBtnAriaLabel\", {\n            messageBundle: messageBundle[1],\n          }),\n        cells: [\n          {\n            title: (\n              value: string,\n              rowIndex: number,\n              cellIndex: number,\n              props\n            ) => (\n              <EditableTextCell\n                value={value}\n                rowIndex={rowIndex}\n                cellIndex={cellIndex}\n                props={props}\n                isDisabled\n                handleTextInputChange={handleTextInputChange}\n                inputAriaLabel={messageBundle[0]}\n              />\n            ),\n            props: {\n              value: messageBundle[0],\n            },\n          },\n          {\n            title: (\n              value: string,\n              rowIndex: number,\n              cellIndex: number,\n              props: EditableTextCellProps\n            ) => (\n              <EditableTextCell\n                value={value}\n                rowIndex={rowIndex}\n                cellIndex={cellIndex}\n                props={props}\n                handleTextInputChange={handleTextInputChange}\n                inputAriaLabel={messageBundle[1]}\n              />\n            ),\n            props: {\n              value: messageBundle[1],\n            },\n          },\n        ],\n      }));\n      setTableRows(updatedRows);\n\n      return bundles;\n    },\n    [tableKey, filter, first, max]\n  );\n\n  const handleTextInputChange = (\n    newValue: string,\n    evt: any,\n    rowIndex: number,\n    cellIndex: number\n  ) => {\n    setTableRows((prev) => {\n      const newRows = cloneDeep(prev);\n      const textCell = newRows[rowIndex]?.cells?.[\n        cellIndex\n      ] as IEditableTextCell;\n      textCell.props.editableValue = newValue;\n      return newRows;\n    });\n  };\n\n  const updateEditableRows = async (\n    type: RowEditType,\n    rowIndex?: number,\n    validationErrors?: RowErrors\n  ) => {\n    if (rowIndex === undefined) {\n      return;\n    }\n    const newRows = cloneDeep(tableRows);\n    let newRow: IRow;\n    const invalid =\n      !!validationErrors && Object.keys(validationErrors).length > 0;\n\n    if (invalid) {\n      newRow = validateCellEdits(newRows[rowIndex], type, validationErrors);\n    } else if (type === RowEditAction.Cancel) {\n      newRow = cancelCellEdits(newRows[rowIndex]);\n    } else {\n      newRow = applyCellEdits(newRows[rowIndex], type);\n    }\n    newRows[rowIndex] = newRow;\n\n    // Update the copy of the retrieved data set so we can save it when the user saves changes\n\n    if (!invalid && type === RowEditAction.Save) {\n      const key = (newRow.cells?.[0] as IRowCell).props.value;\n      const value = (newRow.cells?.[1] as IRowCell).props.value;\n\n      // We only have one editable value, otherwise we'd need to save each\n      try {\n        await adminClient.realms.addLocalization(\n          {\n            realm: realm.realm!,\n            selectedLocale:\n              selectMenuLocale || getValues(\"defaultLocale\") || DEFAULT_LOCALE,\n            key,\n          },\n          value\n        );\n        addAlert(t(\"updateMessageBundleSuccess\"), AlertVariant.success);\n      } catch (error) {\n        addAlert(t(\"updateMessageBundleError\"), AlertVariant.danger);\n      }\n    }\n    setTableRows(newRows);\n  };\n\n  const handleModalToggle = () => {\n    setAddMessageBundleModalOpen(!addMessageBundleModalOpen);\n  };\n\n  const options = [\n    <SelectGroup label={t(\"defaultLocale\")} key=\"group1\">\n      <SelectOption key={DEFAULT_LOCALE} value={DEFAULT_LOCALE}>\n        {localeToDisplayName(DEFAULT_LOCALE)}\n      </SelectOption>\n    </SelectGroup>,\n    <Divider key=\"divider\" />,\n    <SelectGroup label={t(\"supportedLocales\")} key=\"group2\">\n      {watchSupportedLocales.map((locale) => (\n        <SelectOption key={locale} value={locale}>\n          {localeToDisplayName(locale)}\n        </SelectOption>\n      ))}\n    </SelectGroup>,\n  ];\n\n  const addKeyValue = async (pair: KeyValueType): Promise<void> => {\n    try {\n      await adminClient.realms.addLocalization(\n        {\n          realm: currentRealm!,\n          selectedLocale:\n            selectMenuLocale || getValues(\"defaultLocale\") || DEFAULT_LOCALE,\n          key: pair.key,\n        },\n        pair.value\n      );\n\n      adminClient.setConfig({\n        realmName: currentRealm!,\n      });\n      refreshTable();\n      addAlert(t(\"addMessageBundleSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(t(\"addMessageBundleError\"), error);\n    }\n  };\n\n  const deleteKey = async (key: string) => {\n    try {\n      await adminClient.realms.deleteRealmLocalizationTexts({\n        realm: currentRealm!,\n        selectedLocale: selectMenuLocale,\n        key,\n      });\n      refreshTable();\n      addAlert(t(\"deleteMessageBundleSuccess\"));\n    } catch (error) {\n      addError(\"realm-settings:deleteMessageBundleError\", error);\n    }\n  };\n\n  return (\n    <>\n      {addMessageBundleModalOpen && (\n        <AddMessageBundleModal\n          handleModalToggle={handleModalToggle}\n          save={(pair: any) => {\n            addKeyValue(pair);\n            handleModalToggle();\n          }}\n          form={bundleForm}\n        />\n      )}\n      <PageSection variant=\"light\">\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          className=\"pf-u-mt-lg\"\n          onSubmit={handleSubmit(save)}\n        >\n          <FormGroup\n            label={t(\"internationalization\")}\n            fieldId=\"kc-internationalization\"\n            labelIcon={\n              <HelpItem\n                helpText=\"realm-settings-help:internationalization\"\n                fieldLabelId=\"realm-settings:internationalization\"\n              />\n            }\n          >\n            <Controller\n              name=\"internationalizationEnabled\"\n              control={control}\n              defaultValue={realm.internationalizationEnabled}\n              render={({ field }) => (\n                <Switch\n                  id=\"kc-l-internationalization\"\n                  label={t(\"common:enabled\")}\n                  labelOff={t(\"common:disabled\")}\n                  isChecked={field.value}\n                  data-testid={\n                    field.value\n                      ? \"internationalization-enabled\"\n                      : \"internationalization-disabled\"\n                  }\n                  onChange={field.onChange}\n                  aria-label={t(\"internationalization\")}\n                />\n              )}\n            />\n          </FormGroup>\n          {internationalizationEnabled && (\n            <>\n              <FormGroup\n                label={t(\"supportedLocales\")}\n                fieldId=\"kc-l-supported-locales\"\n              >\n                <Controller\n                  name=\"supportedLocales\"\n                  control={control}\n                  defaultValue={defaultSupportedLocales}\n                  render={({ field }) => (\n                    <Select\n                      toggleId=\"kc-l-supported-locales\"\n                      onToggle={(open) => {\n                        setSupportedLocalesOpen(open);\n                      }}\n                      onSelect={(_, v) => {\n                        const option = v as string;\n                        if (field.value.includes(option)) {\n                          field.onChange(\n                            field.value.filter(\n                              (item: string) => item !== option\n                            )\n                          );\n                        } else {\n                          field.onChange([...field.value, option]);\n                        }\n                      }}\n                      onClear={() => {\n                        field.onChange([]);\n                      }}\n                      selections={field.value}\n                      variant={SelectVariant.typeaheadMulti}\n                      aria-label={t(\"supportedLocales\")}\n                      isOpen={supportedLocalesOpen}\n                      placeholderText={t(\"selectLocales\")}\n                    >\n                      {allLocales.map((locale) => (\n                        <SelectOption\n                          selected={field.value.includes(locale)}\n                          key={locale}\n                          value={locale}\n                        >\n                          {localeToDisplayName(locale)}\n                        </SelectOption>\n                      ))}\n                    </Select>\n                  )}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"defaultLocale\")}\n                fieldId=\"kc-l-default-locale\"\n              >\n                <Controller\n                  name=\"defaultLocale\"\n                  control={control}\n                  defaultValue={DEFAULT_LOCALE}\n                  render={({ field }) => (\n                    <Select\n                      toggleId=\"kc-default-locale\"\n                      onToggle={() => setDefaultLocaleOpen(!defaultLocaleOpen)}\n                      onSelect={(_, value) => {\n                        field.onChange(value as string);\n                        setDefaultLocaleOpen(false);\n                      }}\n                      selections={\n                        field.value\n                          ? localeToDisplayName(field.value)\n                          : realm.defaultLocale !== \"\"\n                          ? localeToDisplayName(\n                              realm.defaultLocale || DEFAULT_LOCALE\n                            )\n                          : t(\"placeholderText\")\n                      }\n                      variant={SelectVariant.single}\n                      aria-label={t(\"defaultLocale\")}\n                      isOpen={defaultLocaleOpen}\n                      placeholderText={t(\"placeholderText\")}\n                      data-testid=\"select-default-locale\"\n                    >\n                      {watchSupportedLocales.map((locale, idx) => (\n                        <SelectOption\n                          key={`default-locale-${idx}`}\n                          value={locale}\n                        >\n                          {localeToDisplayName(locale)}\n                        </SelectOption>\n                      ))}\n                    </Select>\n                  )}\n                />\n              </FormGroup>\n            </>\n          )}\n          <ActionGroup>\n            <Button\n              variant=\"primary\"\n              isDisabled={!formState.isDirty}\n              type=\"submit\"\n              data-testid=\"localization-tab-save\"\n            >\n              {t(\"common:save\")}\n            </Button>\n            <Button variant=\"link\" onClick={setupForm}>\n              {t(\"common:revert\")}\n            </Button>\n          </ActionGroup>\n        </FormAccess>\n\n        <FormPanel className=\"kc-message-bundles\" title=\"Edit message bundles\">\n          <TextContent className=\"messageBundleDescription\">\n            {t(\"messageBundleDescription\")}\n          </TextContent>\n          <div className=\"tableBorder\">\n            <PaginatingTableToolbar\n              count={messageBundles.length}\n              first={first}\n              max={max}\n              onNextClick={setFirst}\n              onPreviousClick={setFirst}\n              onPerPageSelect={(first, max) => {\n                setFirst(first);\n                setMax(max);\n              }}\n              inputGroupName={\"common:search\"}\n              inputGroupOnEnter={(search) => {\n                setFilter(search);\n                setFirst(0);\n                setMax(10);\n              }}\n              inputGroupPlaceholder={t(\"searchForMessageBundle\")}\n              toolbarItem={\n                <Button\n                  data-testid=\"add-bundle-button\"\n                  onClick={() => setAddMessageBundleModalOpen(true)}\n                >\n                  {t(\"addMessageBundle\")}\n                </Button>\n              }\n              searchTypeComponent={\n                <ToolbarItem>\n                  <Select\n                    width={180}\n                    data-testid=\"filter-by-locale-select\"\n                    isOpen={filterDropdownOpen}\n                    className=\"kc-filter-by-locale-select\"\n                    variant={SelectVariant.single}\n                    isDisabled={!internationalizationEnabled}\n                    onToggle={(isExpanded) => setFilterDropdownOpen(isExpanded)}\n                    onSelect={(_, value) => {\n                      setSelectMenuLocale(value.toString());\n                      setSelectMenuValueSelected(true);\n                      refreshTable();\n                      setFilterDropdownOpen(false);\n                    }}\n                    selections={\n                      selectMenuValueSelected\n                        ? localeToDisplayName(selectMenuLocale)\n                        : realm.defaultLocale !== \"\"\n                        ? localeToDisplayName(DEFAULT_LOCALE)\n                        : t(\"placeholderText\")\n                    }\n                  >\n                    {options}\n                  </Select>\n                </ToolbarItem>\n              }\n            >\n              {messageBundles.length === 0 && !filter && (\n                <ListEmptyState\n                  hasIcon\n                  message={t(\"noMessageBundles\")}\n                  instructions={t(\"noMessageBundlesInstructions\")}\n                  onPrimaryAction={handleModalToggle}\n                />\n              )}\n              {messageBundles.length === 0 && filter && (\n                <ListEmptyState\n                  hasIcon\n                  icon={SearchIcon}\n                  isSearchVariant\n                  message={t(\"common:noSearchResults\")}\n                  instructions={t(\"common:noSearchResultsInstructions\")}\n                />\n              )}\n              {messageBundles.length !== 0 && (\n                <Table\n                  aria-label={t(\"editableRowsTable\")}\n                  data-testid=\"editable-rows-table\"\n                  variant={TableVariant.compact}\n                  cells={[t(\"common:key\"), t(\"common:value\")]}\n                  rows={tableRows}\n                  onRowEdit={(_, type, _b, rowIndex, validation) =>\n                    updateEditableRows(type, rowIndex, validation)\n                  }\n                  actions={[\n                    {\n                      title: t(\"common:delete\"),\n                      onClick: (_, row) =>\n                        deleteKey(\n                          (tableRows[row].cells?.[0] as IRowCell).props.value\n                        ),\n                    },\n                  ]}\n                >\n                  <TableHeader />\n                  <TableBody />\n                </Table>\n              )}\n            </PaginatingTableToolbar>\n          </div>\n        </FormPanel>\n      </PageSection>\n    </>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { FormGroup, PageSection, Switch } from \"@patternfly/react-core\";\nimport { FormAccess } from \"../components/form-access/FormAccess\";\nimport { HelpItem } from \"../components/help-enabler/HelpItem\";\nimport { FormPanel } from \"../components/scroll-form/FormPanel\";\nimport type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\n\ntype RealmSettingsLoginTabProps = {\n  realm: RealmRepresentation;\n  refresh: () => void;\n};\n\ntype SwitchType = { [K in keyof RealmRepresentation]: boolean };\n\nexport const RealmSettingsLoginTab = ({\n  realm,\n  refresh,\n}: RealmSettingsLoginTabProps) => {\n  const { t } = useTranslation(\"realm-settings\");\n\n  const { addAlert, addError } = useAlerts();\n  const { adminClient } = useAdminClient();\n  const { realm: realmName } = useRealm();\n\n  const updateSwitchValue = async (switches: SwitchType | SwitchType[]) => {\n    const name = Array.isArray(switches)\n      ? Object.keys(switches[0])[0]\n      : Object.keys(switches)[0];\n\n    try {\n      await adminClient.realms.update(\n        {\n          realm: realmName,\n        },\n        Array.isArray(switches)\n          ? switches.reduce((realm, s) => Object.assign(realm, s), realm)\n          : Object.assign(realm, switches)\n      );\n      addAlert(t(\"enableSwitchSuccess\", { switch: t(name) }));\n      refresh();\n    } catch (error) {\n      addError(t(\"enableSwitchError\"), error);\n    }\n  };\n\n  return (\n    <PageSection variant=\"light\">\n      <FormPanel\n        className=\"kc-login-screen\"\n        title={t(\"loginScreenCustomization\")}\n      >\n        <FormAccess isHorizontal role=\"manage-realm\">\n          <FormGroup\n            label={t(\"registrationAllowed\")}\n            fieldId=\"kc-user-reg\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"userRegistrationHelpText\")}\n                fieldLabelId=\"realm-settings:registrationAllowed\"\n              />\n            }\n            hasNoPaddingTop\n          >\n            <Switch\n              id=\"kc-user-reg-switch\"\n              data-testid=\"user-reg-switch\"\n              value={realm.registrationAllowed ? \"on\" : \"off\"}\n              label={t(\"common:on\")}\n              labelOff={t(\"common:off\")}\n              isChecked={realm.registrationAllowed}\n              onChange={(value) => {\n                updateSwitchValue({ registrationAllowed: value });\n              }}\n              aria-label={t(\"registrationAllowed\")}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"resetPasswordAllowed\")}\n            fieldId=\"kc-forgot-pw\"\n            labelIcon={\n              <HelpItem\n                helpText=\"realm-settings:forgotPasswordHelpText\"\n                fieldLabelId=\"realm-settings:resetPasswordAllowed\"\n              />\n            }\n            hasNoPaddingTop\n          >\n            <Switch\n              id=\"kc-forgot-pw-switch\"\n              data-testid=\"forgot-pw-switch\"\n              name=\"resetPasswordAllowed\"\n              value={realm.resetPasswordAllowed ? \"on\" : \"off\"}\n              label={t(\"common:on\")}\n              labelOff={t(\"common:off\")}\n              isChecked={realm.resetPasswordAllowed}\n              onChange={(value) => {\n                updateSwitchValue({ resetPasswordAllowed: value });\n              }}\n              aria-label={t(\"resetPasswordAllowed\")}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"rememberMe\")}\n            fieldId=\"kc-remember-me\"\n            labelIcon={\n              <HelpItem\n                helpText=\"realm-settings:rememberMeHelpText\"\n                fieldLabelId=\"realm-settings:rememberMe\"\n              />\n            }\n            hasNoPaddingTop\n          >\n            <Switch\n              id=\"kc-remember-me-switch\"\n              data-testid=\"remember-me-switch\"\n              value={realm.rememberMe ? \"on\" : \"off\"}\n              label={t(\"common:on\")}\n              labelOff={t(\"common:off\")}\n              isChecked={realm.rememberMe}\n              onChange={(value) => {\n                updateSwitchValue({ rememberMe: value });\n              }}\n              aria-label={t(\"rememberMe\")}\n            />\n          </FormGroup>\n        </FormAccess>\n      </FormPanel>\n      <FormPanel className=\"kc-email-settings\" title={t(\"emailSettings\")}>\n        <FormAccess isHorizontal role=\"manage-realm\">\n          <FormGroup\n            label={t(\"registrationEmailAsUsername\")}\n            fieldId=\"kc-email-as-username\"\n            labelIcon={\n              <HelpItem\n                helpText=\"realm-settings:emailAsUsernameHelpText\"\n                fieldLabelId=\"realm-settings:registrationEmailAsUsername\"\n              />\n            }\n            hasNoPaddingTop\n          >\n            <Switch\n              id=\"kc-email-as-username-switch\"\n              data-testid=\"email-as-username-switch\"\n              value={realm.registrationEmailAsUsername ? \"on\" : \"off\"}\n              label={t(\"common:on\")}\n              labelOff={t(\"common:off\")}\n              isChecked={realm.registrationEmailAsUsername}\n              onChange={(value) => {\n                updateSwitchValue([\n                  {\n                    registrationEmailAsUsername: value,\n                  },\n                  {\n                    duplicateEmailsAllowed: false,\n                  },\n                ]);\n              }}\n              aria-label={t(\"registrationEmailAsUsername\")}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"loginWithEmailAllowed\")}\n            fieldId=\"kc-login-with-email\"\n            labelIcon={\n              <HelpItem\n                helpText=\"realm-settings:loginWithEmailHelpText\"\n                fieldLabelId=\"realm-settings:loginWithEmailAllowed\"\n              />\n            }\n            hasNoPaddingTop\n          >\n            <Switch\n              id=\"kc-login-with-email-switch\"\n              data-testid=\"login-with-email-switch\"\n              value={realm.loginWithEmailAllowed ? \"on\" : \"off\"}\n              label={t(\"common:on\")}\n              labelOff={t(\"common:off\")}\n              isChecked={realm.loginWithEmailAllowed}\n              onChange={(value) => {\n                updateSwitchValue([\n                  {\n                    loginWithEmailAllowed: value,\n                  },\n                  { duplicateEmailsAllowed: false },\n                ]);\n              }}\n              aria-label={t(\"loginWithEmailAllowed\")}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"duplicateEmailsAllowed\")}\n            fieldId=\"kc-duplicate-emails\"\n            labelIcon={\n              <HelpItem\n                helpText=\"realm-settings:duplicateEmailsHelpText\"\n                fieldLabelId=\"realm-settings:duplicateEmailsAllowed\"\n              />\n            }\n            hasNoPaddingTop\n          >\n            <Switch\n              id=\"kc-duplicate-emails-switch\"\n              data-testid=\"duplicate-emails-switch\"\n              label={t(\"common:on\")}\n              labelOff={t(\"common:off\")}\n              isChecked={\n                realm.duplicateEmailsAllowed ||\n                (realm.loginWithEmailAllowed &&\n                  realm.registrationEmailAsUsername)\n              }\n              onChange={(value) => {\n                updateSwitchValue({\n                  duplicateEmailsAllowed: value,\n                });\n              }}\n              isDisabled={\n                realm.loginWithEmailAllowed || realm.registrationEmailAsUsername\n              }\n              aria-label={t(\"duplicateEmailsAllowed\")}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"verifyEmail\")}\n            fieldId=\"kc-verify-email\"\n            labelIcon={\n              <HelpItem\n                helpText=\"realm-settings:verifyEmailHelpText\"\n                fieldLabelId=\"realm-settings:verifyEmail\"\n              />\n            }\n            hasNoPaddingTop\n          >\n            <Switch\n              id=\"kc-verify-email-switch\"\n              data-testid=\"verify-email-switch\"\n              name=\"verifyEmail\"\n              value={realm.verifyEmail ? \"on\" : \"off\"}\n              label={t(\"common:on\")}\n              labelOff={t(\"common:off\")}\n              isChecked={realm.verifyEmail}\n              onChange={(value) => {\n                updateSwitchValue({ verifyEmail: value });\n              }}\n              aria-label={t(\"verifyEmail\")}\n            />\n          </FormGroup>\n        </FormAccess>\n      </FormPanel>\n      <FormPanel\n        className=\"kc-user-info-settings\"\n        title={t(\"userInfoSettings\")}\n      >\n        <FormAccess isHorizontal role=\"manage-realm\">\n          <FormGroup\n            label={t(\"editUsernameAllowed\")}\n            fieldId=\"kc-edit-username\"\n            labelIcon={\n              <HelpItem\n                helpText=\"realm-settings-help:editUsername\"\n                fieldLabelId=\"realm-settings:editUsernameAllowed\"\n              />\n            }\n            hasNoPaddingTop\n          >\n            <Switch\n              id=\"kc-edit-username-switch\"\n              data-testid=\"edit-username-switch\"\n              value={realm.editUsernameAllowed ? \"on\" : \"off\"}\n              label={t(\"common:on\")}\n              labelOff={t(\"common:off\")}\n              isChecked={realm.editUsernameAllowed}\n              onChange={(value) => {\n                updateSwitchValue({ editUsernameAllowed: value });\n              }}\n              aria-label={t(\"editUsernameAllowed\")}\n            />\n          </FormGroup>\n        </FormAccess>\n      </FormPanel>\n    </PageSection>\n  );\n};\n","import {\n  Alert,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  Switch,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { saveAs } from \"file-saver\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { prettyPrintJSON } from \"../util\";\n\nimport \"./partial-export.css\";\n\nexport type PartialExportDialogProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\nexport const PartialExportDialog = ({\n  isOpen,\n  onClose,\n}: PartialExportDialogProps) => {\n  const { t } = useTranslation(\"realm-settings\");\n  const { realm } = useRealm();\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  const [exportGroupsAndRoles, setExportGroupsAndRoles] = useState(false);\n  const [exportClients, setExportClients] = useState(false);\n  const [isExporting, setIsExporting] = useState(false);\n\n  const showWarning = exportGroupsAndRoles || exportClients;\n\n  async function exportRealm() {\n    setIsExporting(true);\n\n    try {\n      const realmExport = await adminClient.realms.export({\n        realm,\n        exportClients,\n        exportGroupsAndRoles,\n      });\n\n      saveAs(\n        new Blob([prettyPrintJSON(realmExport)], {\n          type: \"application/json\",\n        }),\n        \"realm-export.json\"\n      );\n\n      addAlert(t(\"exportSuccess\"), AlertVariant.success);\n      onClose();\n    } catch (error) {\n      addError(\"exportFail\", error);\n    }\n\n    setIsExporting(false);\n  }\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title={t(\"partialExport\")}\n      isOpen={isOpen}\n      onClose={onClose}\n      actions={[\n        <Button\n          key=\"export\"\n          data-testid=\"export-button\"\n          isDisabled={isExporting}\n          onClick={exportRealm}\n        >\n          {t(\"common:export\")}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          data-testid=\"cancel-button\"\n          variant={ButtonVariant.link}\n          onClick={onClose}\n        >\n          {t(\"common:cancel\")}\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        <Text>{t(\"partialExportHeaderText\")}</Text>\n      </TextContent>\n      <Form\n        isHorizontal\n        className=\"keycloak__realm-settings__partial-import_form\"\n      >\n        <FormGroup\n          label={t(\"includeGroupsAndRoles\")}\n          fieldId=\"include-groups-and-roles-check\"\n          hasNoPaddingTop\n        >\n          <Switch\n            id=\"include-groups-and-roles-check\"\n            data-testid=\"include-groups-and-roles-check\"\n            isChecked={exportGroupsAndRoles}\n            onChange={setExportGroupsAndRoles}\n            label={t(\"common:on\")}\n            labelOff={t(\"common:off\")}\n            aria-label={t(\"includeGroupsAndRoles\")}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"includeClients\")}\n          fieldId=\"include-clients-check\"\n          hasNoPaddingTop\n        >\n          <Switch\n            id=\"include-clients-check\"\n            data-testid=\"include-clients-check\"\n            onChange={setExportClients}\n            isChecked={exportClients}\n            label={t(\"common:on\")}\n            labelOff={t(\"common:off\")}\n            aria-label={t(\"includeClients\")}\n          />\n        </FormGroup>\n      </Form>\n\n      {showWarning && (\n        <Alert\n          data-testid=\"warning-message\"\n          variant=\"warning\"\n          title={t(\"exportWarningTitle\")}\n          isInline\n        >\n          {t(\"exportWarningDescription\")}\n        </Alert>\n      )}\n    </Modal>\n  );\n};\n","import {\n  useState,\n  useEffect,\n  FormEvent,\n  ChangeEvent,\n  MouseEvent as ReactMouseEvent,\n} from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Alert,\n  Button,\n  ButtonVariant,\n  Checkbox,\n  DataList,\n  DataListCell,\n  DataListItem,\n  DataListItemCells,\n  DataListItemRow,\n  Divider,\n  Label,\n  Modal,\n  ModalVariant,\n  Select,\n  SelectOption,\n  SelectOptionObject,\n  Stack,\n  StackItem,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\n\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { JsonFileUpload } from \"../components/json-file-upload/JsonFileUpload\";\nimport { KeycloakDataTable } from \"../components/table-toolbar/KeycloakDataTable\";\n\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\n\nimport type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport type {\n  PartialImportRealmRepresentation,\n  PartialImportResponse,\n  PartialImportResult,\n} from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport type RoleRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\n\nexport type PartialImportProps = {\n  open: boolean;\n  toggleDialog: () => void;\n};\n\n// An imported JSON file can either be an array of realm objects\n// or a single realm object.\ntype ImportedMultiRealm = RealmRepresentation | RealmRepresentation[];\n\ntype NonRoleResource = \"users\" | \"clients\" | \"groups\" | \"identityProviders\";\ntype RoleResource = \"realmRoles\" | \"clientRoles\";\ntype Resource = NonRoleResource | RoleResource;\n\ntype CollisionOption = \"FAIL\" | \"SKIP\" | \"OVERWRITE\";\n\ntype ResourceChecked = { [k in Resource]: boolean };\n\nconst INITIAL_RESOURCES: Readonly<ResourceChecked> = {\n  users: false,\n  clients: false,\n  groups: false,\n  identityProviders: false,\n  realmRoles: false,\n  clientRoles: false,\n};\n\nexport const PartialImportDialog = (props: PartialImportProps) => {\n  const { t } = useTranslation(\"realm-settings\");\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n\n  const [importedFile, setImportedFile] = useState<ImportedMultiRealm>();\n  const isFileSelected = !!importedFile;\n  const [isRealmSelectOpen, setIsRealmSelectOpen] = useState(false);\n  const [isCollisionSelectOpen, setIsCollisionSelectOpen] = useState(false);\n  const [importInProgress, setImportInProgress] = useState(false);\n  const [collisionOption, setCollisionOption] =\n    useState<CollisionOption>(\"FAIL\");\n  const [targetRealm, setTargetRealm] = useState<RealmRepresentation>({});\n  const [importResponse, setImportResponse] = useState<PartialImportResponse>();\n  const { addError } = useAlerts();\n\n  const [resourcesToImport, setResourcesToImport] = useState(INITIAL_RESOURCES);\n  const isAnyResourceChecked = Object.values(resourcesToImport).some(\n    (checked) => checked\n  );\n\n  const resetResourcesToImport = () => {\n    setResourcesToImport(INITIAL_RESOURCES);\n  };\n\n  const resetInputState = () => {\n    setImportedFile(undefined);\n    setTargetRealm({});\n    setCollisionOption(\"FAIL\");\n    resetResourcesToImport();\n  };\n\n  // when dialog opens or closes, clear state\n  useEffect(() => {\n    setImportInProgress(false);\n    setImportResponse(undefined);\n    resetInputState();\n  }, [props.open]);\n\n  const handleFileChange = (value: ImportedMultiRealm) => {\n    resetInputState();\n    setImportedFile(value);\n\n    if (!Array.isArray(value)) {\n      setTargetRealm(value);\n    } else if (value.length > 0) {\n      setTargetRealm(value[0]);\n    }\n  };\n\n  const handleRealmSelect = (realm: string | SelectOptionObject) => {\n    setTargetRealm(realm as RealmRepresentation);\n    setIsRealmSelectOpen(false);\n    resetResourcesToImport();\n  };\n\n  const handleResourceCheckBox = (\n    checked: boolean,\n    event: FormEvent<HTMLInputElement>\n  ) => {\n    const resource = event.currentTarget.name as Resource;\n\n    setResourcesToImport({\n      ...resourcesToImport,\n      [resource]: checked,\n    });\n  };\n\n  const realmSelectOptions = (realms: RealmRepresentation[]) =>\n    realms.map((realm) => (\n      <SelectOption\n        key={realm.id}\n        value={realm}\n        data-testid={realm.id + \"-select-option\"}\n      >\n        {realm.realm || realm.id}\n      </SelectOption>\n    ));\n\n  const handleCollisionSelect = (\n    event: ChangeEvent<Element> | ReactMouseEvent<Element, MouseEvent>,\n    option: string | SelectOptionObject\n  ) => {\n    setCollisionOption(option as CollisionOption);\n    setIsCollisionSelectOpen(false);\n  };\n\n  const collisionOptions = () => {\n    return [\n      <SelectOption key=\"fail\" value=\"FAIL\">\n        {t(\"FAIL\")}\n      </SelectOption>,\n      <SelectOption key=\"skip\" value=\"SKIP\">\n        {t(\"SKIP\")}\n      </SelectOption>,\n      <SelectOption key=\"overwrite\" value=\"OVERWRITE\">\n        {t(\"OVERWRITE\")}\n      </SelectOption>,\n    ];\n  };\n\n  const targetHasResources = () => {\n    return (\n      targetHasResource(\"users\") ||\n      targetHasResource(\"groups\") ||\n      targetHasResource(\"clients\") ||\n      targetHasResource(\"identityProviders\") ||\n      targetHasRealmRoles() ||\n      targetHasClientRoles()\n    );\n  };\n\n  const targetHasResource = (resource: NonRoleResource) => {\n    const value = targetRealm[resource];\n    return value !== undefined && value.length > 0;\n  };\n\n  const targetHasRealmRoles = () => {\n    const value = targetRealm.roles?.realm;\n    return value !== undefined && value.length > 0;\n  };\n\n  const targetHasClientRoles = () => {\n    const value = targetRealm.roles?.client;\n    return value !== undefined && Object.keys(value).length > 0;\n  };\n\n  const itemCount = (resource: Resource) => {\n    if (!isFileSelected) return 0;\n\n    if (resource === \"realmRoles\") {\n      return targetRealm.roles?.realm?.length ?? 0;\n    }\n\n    if (resource === \"clientRoles\") {\n      return targetHasClientRoles()\n        ? clientRolesCount(targetRealm.roles!.client!)\n        : 0;\n    }\n\n    return targetRealm[resource]?.length ?? 0;\n  };\n\n  const clientRolesCount = (\n    clientRoles: Record<string, RoleRepresentation[]>\n  ) =>\n    Object.values(clientRoles).reduce((total, role) => total + role.length, 0);\n\n  const resourceDataListItem = (\n    resource: Resource,\n    resourceDisplayName: string\n  ) => {\n    return (\n      <DataListItem aria-labelledby={`${resource}-list-item`}>\n        <DataListItemRow>\n          <DataListItemCells\n            dataListCells={[\n              <DataListCell key={resource}>\n                <Checkbox\n                  id={`${resource}-checkbox`}\n                  label={`${itemCount(resource)} ${resourceDisplayName}`}\n                  aria-labelledby={`${resource}-checkbox`}\n                  name={resource}\n                  isChecked={resourcesToImport[resource]}\n                  onChange={handleResourceCheckBox}\n                  data-testid={resource + \"-checkbox\"}\n                />\n              </DataListCell>,\n            ]}\n          />\n        </DataListItemRow>\n      </DataListItem>\n    );\n  };\n\n  const jsonForImport = () => {\n    const jsonToImport: PartialImportRealmRepresentation = {\n      ifResourceExists: collisionOption,\n      id: targetRealm.id,\n      realm: targetRealm.realm,\n    };\n\n    if (resourcesToImport[\"users\"]) jsonToImport.users = targetRealm.users;\n    if (resourcesToImport[\"groups\"]) jsonToImport.groups = targetRealm.groups;\n    if (resourcesToImport[\"identityProviders\"])\n      jsonToImport.identityProviders = targetRealm.identityProviders;\n    if (resourcesToImport[\"clients\"])\n      jsonToImport.clients = targetRealm.clients;\n    if (resourcesToImport[\"realmRoles\"] || resourcesToImport[\"clientRoles\"]) {\n      jsonToImport.roles = targetRealm.roles;\n      if (!resourcesToImport[\"realmRoles\"]) delete jsonToImport.roles?.realm;\n      if (!resourcesToImport[\"clientRoles\"]) delete jsonToImport.roles?.client;\n    }\n    return jsonToImport;\n  };\n\n  async function doImport() {\n    if (importInProgress) return;\n\n    setImportInProgress(true);\n\n    try {\n      const importResults = await adminClient.realms.partialImport({\n        realm,\n        rep: jsonForImport(),\n      });\n      setImportResponse(importResults);\n    } catch (error) {\n      addError(\"realm-settings:importFail\", error);\n    }\n\n    setImportInProgress(false);\n  }\n\n  const importModal = () => {\n    return (\n      <Modal\n        variant={ModalVariant.medium}\n        title={t(\"partialImport\")}\n        isOpen={props.open}\n        onClose={props.toggleDialog}\n        actions={[\n          <Button\n            id=\"modal-import\"\n            data-testid=\"import-button\"\n            key=\"import\"\n            isDisabled={!isAnyResourceChecked}\n            onClick={() => {\n              doImport();\n            }}\n          >\n            {t(\"import\")}\n          </Button>,\n          <Button\n            id=\"modal-cancel\"\n            data-testid=\"cancel-button\"\n            key=\"cancel\"\n            variant={ButtonVariant.link}\n            onClick={() => {\n              props.toggleDialog();\n            }}\n          >\n            {t(\"common:cancel\")}\n          </Button>,\n        ]}\n      >\n        <Stack hasGutter>\n          <StackItem>\n            <TextContent>\n              <Text>{t(\"partialImportHeaderText\")}</Text>\n            </TextContent>\n          </StackItem>\n          <StackItem>\n            <JsonFileUpload\n              id=\"partial-import-file\"\n              allowEditingUploadedText\n              onChange={handleFileChange}\n            />\n          </StackItem>\n\n          {isFileSelected && targetHasResources() && (\n            <>\n              <StackItem>\n                <Divider />\n              </StackItem>\n              {Array.isArray(importedFile) && importedFile.length > 1 && (\n                <StackItem>\n                  <Text>{t(\"selectRealm\")}:</Text>\n                  <Select\n                    toggleId=\"realm-selector\"\n                    isOpen={isRealmSelectOpen}\n                    onToggle={() => setIsRealmSelectOpen(!isRealmSelectOpen)}\n                    onSelect={(_, value) => handleRealmSelect(value)}\n                    placeholderText={targetRealm.realm || targetRealm.id}\n                  >\n                    {realmSelectOptions(importedFile)}\n                  </Select>\n                </StackItem>\n              )}\n              <StackItem>\n                <Text>{t(\"chooseResources\")}:</Text>\n                <DataList aria-label={t(\"resourcesToImport\")} isCompact>\n                  {targetHasResource(\"users\") &&\n                    resourceDataListItem(\"users\", t(\"common:users\"))}\n                  {targetHasResource(\"groups\") &&\n                    resourceDataListItem(\"groups\", t(\"common:groups\"))}\n                  {targetHasResource(\"clients\") &&\n                    resourceDataListItem(\"clients\", t(\"common:clients\"))}\n                  {targetHasResource(\"identityProviders\") &&\n                    resourceDataListItem(\n                      \"identityProviders\",\n                      t(\"common:identityProviders\")\n                    )}\n                  {targetHasRealmRoles() &&\n                    resourceDataListItem(\"realmRoles\", t(\"common:realmRoles\"))}\n                  {targetHasClientRoles() &&\n                    resourceDataListItem(\n                      \"clientRoles\",\n                      t(\"common:clientRoles\")\n                    )}\n                </DataList>\n              </StackItem>\n              <StackItem>\n                <Text>{t(\"selectIfResourceExists\")}:</Text>\n                <Select\n                  isOpen={isCollisionSelectOpen}\n                  direction=\"up\"\n                  onToggle={() => {\n                    setIsCollisionSelectOpen(!isCollisionSelectOpen);\n                  }}\n                  onSelect={handleCollisionSelect}\n                  placeholderText={t(collisionOption)}\n                >\n                  {collisionOptions()}\n                </Select>\n              </StackItem>\n            </>\n          )}\n        </Stack>\n      </Modal>\n    );\n  };\n\n  const importCompleteMessage = () => {\n    return `${t(\"importAdded\", {\n      count: importResponse?.added,\n    })}  ${t(\"importSkipped\", {\n      count: importResponse?.skipped,\n    })} ${t(\"importOverwritten\", {\n      count: importResponse?.overwritten,\n    })}`;\n  };\n\n  const loader = async (first = 0, max = 15) => {\n    if (!importResponse) {\n      return [];\n    }\n\n    const last = Math.min(first + max, importResponse.results.length);\n\n    return importResponse.results.slice(first, last);\n  };\n\n  const ActionLabel = (importRecord: PartialImportResult) => {\n    switch (importRecord.action) {\n      case \"ADDED\":\n        return (\n          <Label key={importRecord.id} color=\"green\">\n            {t(\"added\")}\n          </Label>\n        );\n      case \"SKIPPED\":\n        return (\n          <Label key={importRecord.id} color=\"orange\">\n            {t(\"skipped\")}\n          </Label>\n        );\n      case \"OVERWRITTEN\":\n        return (\n          <Label key={importRecord.id} color=\"purple\">\n            {t(\"overwritten\")}\n          </Label>\n        );\n    }\n  };\n\n  const TypeRenderer = (importRecord: PartialImportResult) => {\n    const typeMap = new Map([\n      [\"CLIENT\", t(\"common:clients\")],\n      [\"REALM_ROLE\", t(\"common:realmRoles\")],\n      [\"USER\", t(\"common:users\")],\n      [\"CLIENT_ROLE\", t(\"common:clientRoles\")],\n      [\"IDP\", t(\"common:identityProviders\")],\n      [\"GROUP\", t(\"common:groups\")],\n    ]);\n\n    return <span>{typeMap.get(importRecord.resourceType)}</span>;\n  };\n\n  const importCompletedModal = () => {\n    return (\n      <Modal\n        variant={ModalVariant.medium}\n        title={t(\"partialImport\")}\n        isOpen={props.open}\n        onClose={props.toggleDialog}\n        actions={[\n          <Button\n            id=\"modal-close\"\n            data-testid=\"close-button\"\n            key=\"close\"\n            variant={ButtonVariant.primary}\n            onClick={() => {\n              props.toggleDialog();\n            }}\n          >\n            {t(\"common:close\")}\n          </Button>,\n        ]}\n      >\n        <Alert variant=\"success\" isInline title={importCompleteMessage()} />\n        <KeycloakDataTable\n          loader={loader}\n          isPaginated\n          ariaLabelKey=\"realm-settings:partialImport\"\n          columns={[\n            {\n              name: \"action\",\n              displayKey: \"common:action\",\n              cellRenderer: ActionLabel,\n            },\n            {\n              name: \"resourceType\",\n              displayKey: \"common:type\",\n              cellRenderer: TypeRenderer,\n            },\n            {\n              name: \"resourceName\",\n              displayKey: \"common:name\",\n            },\n            {\n              name: \"id\",\n              displayKey: \"common:id\",\n            },\n          ]}\n        />\n      </Modal>\n    );\n  };\n\n  if (!importResponse) {\n    return importModal();\n  }\n\n  return importCompletedModal();\n};\n","import type ClientPolicyRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientPolicyRepresentation\";\nimport { CodeEditor, Language } from \"@patternfly/react-code-editor\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Divider,\n  Flex,\n  FlexItem,\n  PageSection,\n  Radio,\n  Switch,\n  Title,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\n\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport { KeycloakDataTable } from \"../components/table-toolbar/KeycloakDataTable\";\nimport { useAdminClient, useFetch } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { prettyPrintJSON } from \"../util\";\nimport { toAddClientPolicy } from \"./routes/AddClientPolicy\";\nimport { toClientPolicies } from \"./routes/ClientPolicies\";\nimport { toEditClientPolicy } from \"./routes/EditClientPolicy\";\n\nimport \"./realm-settings-section.css\";\n\nexport const PoliciesTab = () => {\n  const { t } = useTranslation(\"realm-settings\");\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n  const navigate = useNavigate();\n  const [show, setShow] = useState(false);\n  const [policies, setPolicies] = useState<ClientPolicyRepresentation[]>();\n  const [selectedPolicy, setSelectedPolicy] =\n    useState<ClientPolicyRepresentation>();\n  const [key, setKey] = useState(0);\n  const [code, setCode] = useState<string>();\n  const [tablePolicies, setTablePolicies] =\n    useState<ClientPolicyRepresentation[]>();\n  const refresh = () => setKey(key + 1);\n\n  const form = useForm<Record<string, boolean>>({ mode: \"onChange\" });\n\n  useFetch(\n    () => adminClient.clientPolicies.listPolicies(),\n    (policies) => {\n      setPolicies(policies.policies),\n        setTablePolicies(policies.policies || []),\n        setCode(prettyPrintJSON(policies.policies));\n    },\n    [key]\n  );\n\n  const loader = async () => policies ?? [];\n\n  const saveStatus = async () => {\n    const switchValues = form.getValues();\n\n    const updatedPolicies = policies?.map<ClientPolicyRepresentation>(\n      (policy) => {\n        const enabled = switchValues[policy.name!];\n\n        return {\n          ...policy,\n          enabled,\n        };\n      }\n    );\n\n    try {\n      await adminClient.clientPolicies.updatePolicy({\n        policies: updatedPolicies,\n      });\n      navigate(toClientPolicies({ realm, tab: \"policies\" }));\n      addAlert(\n        t(\"realm-settings:updateClientPolicySuccess\"),\n        AlertVariant.success\n      );\n    } catch (error) {\n      addError(\"realm-settings:updateClientPolicyError\", error);\n    }\n  };\n\n  const ClientPolicyDetailLink = ({ name }: ClientPolicyRepresentation) => (\n    <Link to={toEditClientPolicy({ realm, policyName: name! })}>{name}</Link>\n  );\n\n  const SwitchRenderer = ({\n    clientPolicy,\n  }: {\n    clientPolicy: ClientPolicyRepresentation;\n  }) => {\n    const [toggleDisableDialog, DisableConfirm] = useConfirmDialog({\n      titleKey: \"realm-settings:disablePolicyConfirmTitle\",\n      messageKey: \"realm-settings:disablePolicyConfirm\",\n      continueButtonLabel: \"common:disable\",\n      onConfirm: () => {\n        form.setValue(clientPolicy.name!, false);\n        saveStatus();\n      },\n    });\n\n    return (\n      <>\n        <DisableConfirm />\n        <Controller\n          name={clientPolicy.name!}\n          data-testid={`${clientPolicy.name!}-switch`}\n          defaultValue={clientPolicy.enabled}\n          control={form.control}\n          render={({ field }) => (\n            <Switch\n              label={t(\"common:enabled\")}\n              labelOff={t(\"common:disabled\")}\n              isChecked={field.value}\n              onChange={(value) => {\n                if (!value) {\n                  toggleDisableDialog();\n                } else {\n                  field.onChange(value);\n                  saveStatus();\n                }\n              }}\n              aria-label={clientPolicy.name!}\n            />\n          )}\n        />\n      </>\n    );\n  };\n\n  const save = async () => {\n    if (!code) {\n      return;\n    }\n\n    try {\n      const obj: ClientPolicyRepresentation[] = JSON.parse(code);\n\n      try {\n        await adminClient.clientPolicies.updatePolicy({\n          policies: obj,\n        });\n        addAlert(\n          t(\"realm-settings:updateClientPoliciesSuccess\"),\n          AlertVariant.success\n        );\n        refresh();\n      } catch (error) {\n        addError(\"realm-settings:updateClientPoliciesError\", error);\n      }\n    } catch (error) {\n      console.warn(\"Invalid json, ignoring value using {}\");\n      addError(\"realm-settings:updateClientPoliciesError\", error);\n    }\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: t(\"deleteClientPolicyConfirmTitle\"),\n    messageKey: t(\"deleteClientPolicyConfirm\", {\n      policyName: selectedPolicy?.name,\n    }),\n    continueButtonLabel: t(\"delete\"),\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      const updatedPolicies = policies?.filter(\n        (policy) => policy.name !== selectedPolicy?.name\n      );\n\n      try {\n        await adminClient.clientPolicies.updatePolicy({\n          policies: updatedPolicies,\n        });\n        addAlert(t(\"deleteClientPolicySuccess\"), AlertVariant.success);\n        refresh();\n      } catch (error) {\n        addError(t(\"deleteClientPolicyError\"), error);\n      }\n    },\n  });\n\n  if (!policies) {\n    return <KeycloakSpinner />;\n  }\n  return (\n    <>\n      <DeleteConfirm />\n      <PageSection>\n        <Flex className=\"kc-policies-config-section\">\n          <FlexItem>\n            <Title headingLevel=\"h1\" size=\"md\">\n              {t(\"policiesConfigType\")}\n            </Title>\n          </FlexItem>\n          <FlexItem>\n            <Radio\n              isChecked={!show}\n              name=\"policiesView\"\n              onChange={() => setShow(false)}\n              label={t(\"policiesConfigTypes.formView\")}\n              id=\"formView-policiesView\"\n              data-testid=\"formView-policiesView\"\n              className=\"kc-form-radio-btn pf-u-mr-sm pf-u-ml-sm\"\n            />\n          </FlexItem>\n          <FlexItem>\n            <Radio\n              isChecked={show}\n              name=\"policiesView\"\n              onChange={() => setShow(true)}\n              label={t(\"policiesConfigTypes.jsonEditor\")}\n              id=\"jsonEditor-policiesView\"\n              data-testid=\"jsonEditor-policiesView\"\n              className=\"kc-editor-radio-btn\"\n            />\n          </FlexItem>\n        </Flex>\n      </PageSection>\n      <Divider />\n      {!show ? (\n        <KeycloakDataTable\n          key={policies.length}\n          emptyState={\n            <ListEmptyState\n              message={t(\"realm-settings:noClientPolicies\")}\n              instructions={t(\"realm-settings:noClientPoliciesInstructions\")}\n              primaryActionText={t(\"realm-settings:createClientPolicy\")}\n              onPrimaryAction={() => navigate(toAddClientPolicy({ realm }))}\n            />\n          }\n          ariaLabelKey=\"realm-settings:clientPolicies\"\n          searchPlaceholderKey=\"realm-settings:clientPolicySearch\"\n          loader={loader}\n          toolbarItem={\n            <ToolbarItem>\n              <Button\n                id=\"createPolicy\"\n                component={(props) => (\n                  <Link {...props} to={toAddClientPolicy({ realm })} />\n                )}\n                data-testid=\"createPolicy\"\n              >\n                {t(\"createClientPolicy\")}\n              </Button>\n            </ToolbarItem>\n          }\n          actions={[\n            {\n              title: t(\"common:delete\"),\n              onRowClick: (item) => {\n                toggleDeleteDialog();\n                setSelectedPolicy(item);\n              },\n            },\n          ]}\n          columns={[\n            {\n              name: \"name\",\n              cellRenderer: ClientPolicyDetailLink,\n            },\n            {\n              name: \"enabled\",\n              displayKey: \"realm-settings:status\",\n              cellRenderer: (clientPolicy) => (\n                <SwitchRenderer clientPolicy={clientPolicy} />\n              ),\n            },\n            {\n              name: \"description\",\n            },\n          ]}\n        />\n      ) : (\n        <>\n          <div className=\"pf-u-mt-md pf-u-ml-lg\">\n            <CodeEditor\n              isLineNumbersVisible\n              isLanguageLabelVisible\n              isReadOnly={false}\n              code={code}\n              language={Language.json}\n              height=\"30rem\"\n              onChange={setCode}\n            />\n          </div>\n          <div className=\"pf-u-mt-md\">\n            <Button\n              variant={ButtonVariant.primary}\n              className=\"pf-u-mr-md pf-u-ml-lg\"\n              data-testid=\"jsonEditor-policies-saveBtn\"\n              onClick={save}\n            >\n              {t(\"save\")}\n            </Button>\n            <Button\n              variant={ButtonVariant.link}\n              data-testid=\"jsonEditor-reloadBtn\"\n              onClick={() => {\n                setCode(prettyPrintJSON(tablePolicies));\n              }}\n            >\n              {t(\"reload\")}\n            </Button>\n          </div>\n        </>\n      )}\n    </>\n  );\n};\n","import { useState } from \"react\";\nimport { omit } from \"lodash-es\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  FormGroup,\n  Label,\n  PageSection,\n  ToolbarItem,\n  Divider,\n  Flex,\n  FlexItem,\n  Radio,\n  Title,\n} from \"@patternfly/react-core\";\nimport { CodeEditor, Language } from \"@patternfly/react-code-editor\";\nimport { KeycloakDataTable } from \"../components/table-toolbar/KeycloakDataTable\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient, useFetch } from \"../context/auth/AdminClient\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { prettyPrintJSON } from \"../util\";\nimport { Link } from \"react-router-dom\";\nimport { toAddClientProfile } from \"./routes/AddClientProfile\";\nimport type ClientProfileRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientProfileRepresentation\";\nimport { toClientProfile } from \"./routes/ClientProfile\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\n\nimport \"./realm-settings-section.css\";\n\ntype ClientProfile = ClientProfileRepresentation & {\n  global: boolean;\n};\n\nexport default function ProfilesTab() {\n  const { t } = useTranslation(\"realm-settings\");\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n  const { addAlert, addError } = useAlerts();\n  const [tableProfiles, setTableProfiles] = useState<ClientProfile[]>();\n  const [globalProfiles, setGlobalProfiles] =\n    useState<ClientProfileRepresentation[]>();\n  const [selectedProfile, setSelectedProfile] = useState<ClientProfile>();\n  const [show, setShow] = useState(false);\n  const [code, setCode] = useState<string>();\n  const [key, setKey] = useState(0);\n\n  useFetch(\n    () =>\n      adminClient.clientPolicies.listProfiles({\n        includeGlobalProfiles: true,\n      }),\n    (allProfiles) => {\n      setGlobalProfiles(allProfiles.globalProfiles);\n\n      const globalProfiles = allProfiles.globalProfiles?.map(\n        (globalProfiles) => ({\n          ...globalProfiles,\n          global: true,\n        })\n      );\n\n      const profiles = allProfiles.profiles?.map((profiles) => ({\n        ...profiles,\n        global: false,\n      }));\n\n      const allClientProfiles = globalProfiles?.concat(profiles ?? []);\n      setTableProfiles(allClientProfiles || []);\n      setCode(JSON.stringify(allClientProfiles, null, 2));\n    },\n    [key]\n  );\n\n  const loader = async () => tableProfiles ?? [];\n\n  const normalizeProfile = (\n    profile: ClientProfile\n  ): ClientProfileRepresentation => omit(profile, \"global\");\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: t(\"deleteClientProfileConfirmTitle\"),\n    messageKey: t(\"deleteClientProfileConfirm\", {\n      profileName: selectedProfile?.name,\n    }),\n    continueButtonLabel: t(\"delete\"),\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      const updatedProfiles = tableProfiles\n        ?.filter(\n          (profile) => profile.name !== selectedProfile?.name && !profile.global\n        )\n        .map<ClientProfileRepresentation>((profile) =>\n          normalizeProfile(profile)\n        );\n\n      try {\n        await adminClient.clientPolicies.createProfiles({\n          profiles: updatedProfiles,\n          globalProfiles,\n        });\n        addAlert(t(\"deleteClientSuccess\"), AlertVariant.success);\n        setKey(key + 1);\n      } catch (error) {\n        addError(t(\"deleteClientError\"), error);\n      }\n    },\n  });\n\n  const cellFormatter = (row: ClientProfile) => (\n    <Link\n      to={toClientProfile({\n        realm,\n        profileName: row.name!,\n      })}\n      key={row.name}\n    >\n      {row.name} {row.global && <Label color=\"blue\">{t(\"global\")}</Label>}\n    </Link>\n  );\n\n  if (!tableProfiles) {\n    return <KeycloakSpinner />;\n  }\n\n  const save = async () => {\n    if (!code) {\n      return;\n    }\n\n    try {\n      const obj: ClientProfile[] = JSON.parse(code);\n      const changedProfiles = obj\n        .filter((profile) => !profile.global)\n        .map((profile) => normalizeProfile(profile));\n\n      const changedGlobalProfiles = obj\n        .filter((profile) => profile.global)\n        .map((profile) => normalizeProfile(profile));\n\n      try {\n        await adminClient.clientPolicies.createProfiles({\n          profiles: changedProfiles,\n          globalProfiles: changedGlobalProfiles,\n        });\n        addAlert(\n          t(\"realm-settings:updateClientProfilesSuccess\"),\n          AlertVariant.success\n        );\n        setKey(key + 1);\n      } catch (error) {\n        addError(\"realm-settings:updateClientProfilesError\", error);\n      }\n    } catch (error) {\n      console.warn(\"Invalid json, ignoring value using {}\");\n    }\n  };\n\n  return (\n    <>\n      <DeleteConfirm />\n      <PageSection>\n        <Flex className=\"kc-profiles-config-section\">\n          <FlexItem>\n            <Title headingLevel=\"h1\" size=\"md\">\n              {t(\"profilesConfigType\")}\n            </Title>\n          </FlexItem>\n          <FlexItem>\n            <Radio\n              isChecked={!show}\n              name=\"profilesView\"\n              onChange={() => setShow(false)}\n              label={t(\"profilesConfigTypes.formView\")}\n              id=\"formView-profilesView\"\n              className=\"kc-form-radio-btn pf-u-mr-sm pf-u-ml-sm\"\n              data-testid=\"formView-profilesView\"\n            />\n          </FlexItem>\n          <FlexItem>\n            <Radio\n              isChecked={show}\n              name=\"profilesView\"\n              onChange={() => setShow(true)}\n              label={t(\"profilesConfigTypes.jsonEditor\")}\n              id=\"jsonEditor-profilesView\"\n              className=\"kc-editor-radio-btn\"\n              data-testid=\"jsonEditor-profilesView\"\n            />\n          </FlexItem>\n        </Flex>\n      </PageSection>\n      <Divider />\n      {!show ? (\n        <KeycloakDataTable\n          key={tableProfiles.length}\n          ariaLabelKey=\"realm-settings:profiles\"\n          searchPlaceholderKey=\"realm-settings:clientProfileSearch\"\n          loader={loader}\n          toolbarItem={\n            <ToolbarItem>\n              <Button\n                id=\"createProfile\"\n                component={(props) => (\n                  <Link\n                    {...props}\n                    to={toAddClientProfile({ realm, tab: \"profiles\" })}\n                  />\n                )}\n                data-testid=\"createProfile\"\n              >\n                {t(\"createClientProfile\")}\n              </Button>\n            </ToolbarItem>\n          }\n          isRowDisabled={(value) => value.global}\n          actions={[\n            {\n              title: t(\"common:delete\"),\n              onRowClick: (profile) => {\n                setSelectedProfile(profile);\n                toggleDeleteDialog();\n              },\n            },\n          ]}\n          columns={[\n            {\n              name: \"name\",\n              displayKey: t(\"common:name\"),\n              cellRenderer: cellFormatter,\n            },\n            {\n              name: \"description\",\n              displayKey: t(\"clientProfileDescription\"),\n            },\n          ]}\n          emptyState={\n            <ListEmptyState\n              message={t(\"emptyClientProfiles\")}\n              instructions={t(\"emptyClientProfilesInstructions\")}\n            />\n          }\n        />\n      ) : (\n        <FormGroup fieldId={\"jsonEditor\"}>\n          <div className=\"pf-u-mt-md pf-u-ml-lg\">\n            <CodeEditor\n              isLineNumbersVisible\n              isLanguageLabelVisible\n              isReadOnly={false}\n              code={code}\n              language={Language.json}\n              height=\"30rem\"\n              onChange={(value) => {\n                setCode(value ?? \"\");\n              }}\n            />\n          </div>\n          <ActionGroup>\n            <div className=\"pf-u-mt-md\">\n              <Button\n                variant={ButtonVariant.primary}\n                className=\"pf-u-mr-md pf-u-ml-lg\"\n                onClick={save}\n                data-testid=\"jsonEditor-saveBtn\"\n              >\n                {t(\"save\")}\n              </Button>\n              <Button\n                variant={ButtonVariant.link}\n                onClick={() => {\n                  setCode(prettyPrintJSON(tableProfiles));\n                }}\n                data-testid=\"jsonEditor-reloadBtn\"\n              >\n                {t(\"reload\")}\n              </Button>\n            </div>\n          </ActionGroup>\n        </FormGroup>\n      )}\n    </>\n  );\n}\n","import { FormGroup } from \"@patternfly/react-core\";\nimport { useFormContext } from \"react-hook-form\";\nimport { Trans, useTranslation } from \"react-i18next\";\n\nimport { FormattedLink } from \"../../components/external-link/FormattedLink\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\n\ntype HelpLinkTextInputProps = {\n  fieldName: string;\n  url: string;\n};\n\nexport const HelpLinkTextInput = ({\n  fieldName,\n  url,\n}: HelpLinkTextInputProps) => {\n  const { t } = useTranslation(\"realm-settings\");\n  const { register } = useFormContext();\n  const name = fieldName.substr(fieldName.indexOf(\".\") + 1);\n  return (\n    <FormGroup\n      label={t(name)}\n      fieldId={name}\n      labelIcon={\n        <HelpItem\n          helpText={\n            <Trans i18nKey={`realm-settings-help:${name}`}>\n              Default value prevents pages from being included\n              <FormattedLink href={url} title={t(\"common:learnMore\")} />\n            </Trans>\n          }\n          fieldLabelId={name}\n        />\n      }\n    >\n      <KeycloakTextInput id={name} {...register(fieldName)} />\n    </FormGroup>\n  );\n};\n","import { useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { ActionGroup, Button } from \"@patternfly/react-core\";\n\nimport type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpLinkTextInput } from \"./HelpLinkTextInput\";\nimport { convertToFormValues } from \"../../util\";\n\nimport \"./security-defences.css\";\n\ntype HeadersFormProps = {\n  realm: RealmRepresentation;\n  save: (realm: RealmRepresentation) => void;\n};\n\nexport const HeadersForm = ({ realm, save }: HeadersFormProps) => {\n  const { t } = useTranslation();\n  const form = useForm();\n  const {\n    setValue,\n    formState: { isDirty },\n    handleSubmit,\n  } = form;\n\n  const setupForm = () => convertToFormValues(realm, setValue);\n  useEffect(setupForm, []);\n\n  return (\n    <FormProvider {...form}>\n      <FormAccess\n        isHorizontal\n        role=\"manage-realm\"\n        className=\"keycloak__security-defences__form\"\n        onSubmit={handleSubmit(save)}\n      >\n        <HelpLinkTextInput\n          fieldName=\"browserSecurityHeaders.xFrameOptions\"\n          url=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options\"\n        />\n        <HelpLinkTextInput\n          fieldName=\"browserSecurityHeaders.contentSecurityPolicy\"\n          url=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy\"\n        />\n        <HelpLinkTextInput\n          fieldName=\"browserSecurityHeaders.contentSecurityPolicyReportOnly\"\n          url=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy-Report-Only\"\n        />\n        <HelpLinkTextInput\n          fieldName=\"browserSecurityHeaders.xContentTypeOptions\"\n          url=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options\"\n        />\n        <HelpLinkTextInput\n          fieldName=\"browserSecurityHeaders.xRobotsTag\"\n          url=\"https://developers.google.com/search/docs/advanced/robots/robots_meta_tag\"\n        />\n        <HelpLinkTextInput\n          fieldName=\"browserSecurityHeaders.xXSSProtection\"\n          url=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection\"\n        />\n        <HelpLinkTextInput\n          fieldName=\"browserSecurityHeaders.strictTransportSecurity\"\n          url=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security\"\n        />\n\n        <ActionGroup>\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            data-testid=\"headers-form-tab-save\"\n            isDisabled={!isDirty}\n          >\n            {t(\"common:save\")}\n          </Button>\n          <Button variant=\"link\" onClick={setupForm}>\n            {t(\"common:revert\")}\n          </Button>\n        </ActionGroup>\n      </FormAccess>\n    </FormProvider>\n  );\n};\n","import { FormGroup, ValidatedOptions } from \"@patternfly/react-core\";\nimport { CSSProperties } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { TimeSelector } from \"../../components/time-selector/TimeSelector\";\n\nexport const Time = ({\n  name,\n  style,\n}: {\n  name: string;\n  style?: CSSProperties;\n}) => {\n  const { t } = useTranslation(\"realm-settings\");\n  const {\n    control,\n    formState: { errors },\n  } = useFormContext();\n  return (\n    <FormGroup\n      style={style}\n      label={t(name)}\n      fieldId={name}\n      labelIcon={\n        <HelpItem\n          helpText={`realm-settings-help:${name}`}\n          fieldLabelId={`realm-settings:${name}`}\n        />\n      }\n      validated={\n        errors[name] ? ValidatedOptions.error : ValidatedOptions.default\n      }\n      helperTextInvalid={t(\"common:required\")}\n    >\n      <Controller\n        name={name}\n        defaultValue=\"\"\n        control={control}\n        rules={{ required: true }}\n        render={({ field }) => (\n          <TimeSelector\n            data-testid={name}\n            value={field.value}\n            onChange={field.onChange}\n            validated={\n              errors[name] ? ValidatedOptions.error : ValidatedOptions.default\n            }\n          />\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  ActionGroup,\n  Button,\n  FormGroup,\n  NumberInput,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { useEffect } from \"react\";\nimport { Controller, FormProvider, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { convertToFormValues } from \"../../util\";\nimport { Time } from \"./Time\";\n\ntype BruteForceDetectionProps = {\n  realm: RealmRepresentation;\n  save: (realm: RealmRepresentation) => void;\n};\n\nexport const BruteForceDetection = ({\n  realm,\n  save,\n}: BruteForceDetectionProps) => {\n  const { t } = useTranslation(\"realm-settings\");\n  const form = useForm();\n  const {\n    setValue,\n    handleSubmit,\n    control,\n    formState: { isDirty },\n  } = form;\n\n  const enable = useWatch({\n    control,\n    name: \"bruteForceProtected\",\n  });\n\n  const permanentLockout = useWatch({\n    control,\n    name: \"permanentLockout\",\n  });\n\n  const setupForm = () => convertToFormValues(realm, setValue);\n  useEffect(setupForm, []);\n\n  return (\n    <FormProvider {...form}>\n      <FormAccess\n        role=\"manage-realm\"\n        isHorizontal\n        onSubmit={handleSubmit(save)}\n      >\n        <FormGroup\n          label={t(\"common:enabled\")}\n          fieldId=\"bruteForceProtected\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"bruteForceProtected\"\n            defaultValue={false}\n            control={control}\n            render={({ field }) => (\n              <Switch\n                id=\"bruteForceProtected\"\n                label={t(\"common:on\")}\n                labelOff={t(\"common:off\")}\n                isChecked={field.value}\n                onChange={field.onChange}\n              />\n            )}\n          />\n        </FormGroup>\n        {enable && (\n          <>\n            <FormGroup\n              label={t(\"failureFactor\")}\n              labelIcon={\n                <HelpItem\n                  helpText=\"realm-settings-help:failureFactor\"\n                  fieldLabelId=\"realm-settings:failureFactor\"\n                />\n              }\n              fieldId=\"failureFactor\"\n            >\n              <Controller\n                name=\"failureFactor\"\n                defaultValue={0}\n                control={control}\n                rules={{ required: true }}\n                render={({ field }) => (\n                  <NumberInput\n                    type=\"text\"\n                    id=\"failureFactor\"\n                    value={field.value}\n                    onPlus={() => field.onChange(field.value + 1)}\n                    onMinus={() => field.onChange(field.value - 1)}\n                    onChange={(event) =>\n                      field.onChange(\n                        Number((event.target as HTMLInputElement).value)\n                      )\n                    }\n                  />\n                )}\n              />\n            </FormGroup>\n            <FormGroup\n              label={t(\"permanentLockout\")}\n              fieldId=\"permanentLockout\"\n              hasNoPaddingTop\n            >\n              <Controller\n                name=\"permanentLockout\"\n                defaultValue={false}\n                control={control}\n                render={({ field }) => (\n                  <Switch\n                    id=\"permanentLockout\"\n                    label={t(\"common:on\")}\n                    labelOff={t(\"common:off\")}\n                    isChecked={field.value}\n                    onChange={field.onChange}\n                    aria-label={t(\"permanentLockout\")}\n                  />\n                )}\n              />\n            </FormGroup>\n\n            {!permanentLockout && (\n              <>\n                <Time name=\"waitIncrementSeconds\" />\n                <Time name=\"maxFailureWaitSeconds\" />\n                <Time name=\"maxDeltaTimeSeconds\" />\n              </>\n            )}\n\n            <FormGroup\n              label={t(\"quickLoginCheckMilliSeconds\")}\n              labelIcon={\n                <HelpItem\n                  helpText=\"realm-settings-help:quickLoginCheckMilliSeconds\"\n                  fieldLabelId=\"realm-settings:quickLoginCheckMilliSeconds\"\n                />\n              }\n              fieldId=\"quickLoginCheckMilliSeconds\"\n            >\n              <Controller\n                name=\"quickLoginCheckMilliSeconds\"\n                defaultValue={0}\n                control={control}\n                render={({ field }) => (\n                  <NumberInput\n                    type=\"text\"\n                    id=\"quickLoginCheckMilliSeconds\"\n                    value={field.value}\n                    onPlus={() => field.onChange(field.value + 1)}\n                    onMinus={() => field.onChange(field.value - 1)}\n                    onChange={(event) =>\n                      field.onChange(\n                        Number((event.target as HTMLInputElement).value)\n                      )\n                    }\n                  />\n                )}\n              />\n            </FormGroup>\n\n            <Time name=\"minimumQuickLoginWaitSeconds\" />\n          </>\n        )}\n\n        <ActionGroup>\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            data-testid=\"brute-force-tab-save\"\n            isDisabled={!isDirty}\n          >\n            {t(\"common:save\")}\n          </Button>\n          <Button variant=\"link\" onClick={setupForm}>\n            {t(\"common:revert\")}\n          </Button>\n        </ActionGroup>\n      </FormAccess>\n    </FormProvider>\n  );\n};\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { PageSection, Tab, Tabs, TabTitleText } from \"@patternfly/react-core\";\n\nimport type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport { HeadersForm } from \"./HeadersForm\";\nimport { BruteForceDetection } from \"./BruteForceDetection\";\n\ntype SecurityDefensesProps = {\n  realm: RealmRepresentation;\n  save: (realm: RealmRepresentation) => void;\n};\n\nexport const SecurityDefenses = ({ realm, save }: SecurityDefensesProps) => {\n  const { t } = useTranslation(\"realm-settings\");\n  const [activeTab, setActiveTab] = useState(10);\n  return (\n    <Tabs\n      activeKey={activeTab}\n      onSelect={(_, key) => setActiveTab(key as number)}\n    >\n      <Tab\n        id=\"headers\"\n        eventKey={10}\n        title={<TabTitleText>{t(\"headers\")}</TabTitleText>}\n      >\n        <PageSection variant=\"light\">\n          <HeadersForm realm={realm} save={save} />\n        </PageSection>\n      </Tab>\n      <Tab\n        id=\"bruteForce\"\n        eventKey={20}\n        title={<TabTitleText>{t(\"bruteForceDetection\")}</TabTitleText>}\n      >\n        <PageSection variant=\"light\">\n          <BruteForceDetection realm={realm} save={save} />\n        </PageSection>\n      </Tab>\n    </Tabs>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  ActionGroup,\n  Button,\n  FormGroup,\n  PageSection,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { useEffect } from \"react\";\nimport { Controller, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../components/form-access/FormAccess\";\nimport { HelpItem } from \"../components/help-enabler/HelpItem\";\nimport { FormPanel } from \"../components/scroll-form/FormPanel\";\nimport { TimeSelector } from \"../components/time-selector/TimeSelector\";\nimport { convertToFormValues } from \"../util\";\n\nimport \"./realm-settings-section.css\";\n\ntype RealmSettingsSessionsTabProps = {\n  realm: RealmRepresentation;\n  save: (realm: RealmRepresentation) => void;\n};\n\nexport const RealmSettingsSessionsTab = ({\n  realm,\n  save,\n}: RealmSettingsSessionsTabProps) => {\n  const { t } = useTranslation(\"realm-settings\");\n\n  const { setValue, control, handleSubmit, formState } =\n    useForm<RealmRepresentation>();\n\n  const offlineSessionMaxEnabled = useWatch({\n    control,\n    name: \"offlineSessionMaxLifespanEnabled\",\n  });\n\n  const setupForm = () => {\n    convertToFormValues(realm, setValue);\n  };\n\n  useEffect(setupForm, []);\n\n  return (\n    <PageSection variant=\"light\">\n      <FormPanel\n        title={t(\"SSOSessionSettings\")}\n        className=\"kc-sso-session-template\"\n      >\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          onSubmit={handleSubmit(save)}\n        >\n          <FormGroup\n            label={t(\"SSOSessionIdle\")}\n            fieldId=\"SSOSessionIdle\"\n            labelIcon={\n              <HelpItem\n                helpText=\"realm-settings-help:ssoSessionIdle\"\n                fieldLabelId=\"realm-settings:SSOSessionIdle\"\n              />\n            }\n          >\n            <Controller\n              name=\"ssoSessionIdleTimeout\"\n              defaultValue={realm.ssoSessionIdleTimeout}\n              control={control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-sso-session-idle\"\n                  data-testid=\"sso-session-idle-input\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n\n          <FormGroup\n            label={t(\"SSOSessionMax\")}\n            fieldId=\"SSOSessionMax\"\n            labelIcon={\n              <HelpItem\n                helpText=\"realm-settings-help:ssoSessionMax\"\n                fieldLabelId=\"realm-settings:SSOSessionMax\"\n              />\n            }\n          >\n            <Controller\n              name=\"ssoSessionMaxLifespan\"\n              control={control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-sso-session-max\"\n                  data-testid=\"sso-session-max-input\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n\n          <FormGroup\n            label={t(\"SSOSessionIdleRememberMe\")}\n            fieldId=\"SSOSessionIdleRememberMe\"\n            labelIcon={\n              <HelpItem\n                helpText=\"realm-settings-help:ssoSessionIdleRememberMe\"\n                fieldLabelId=\"realm-settings:SSOSessionIdleRememberMe\"\n              />\n            }\n          >\n            <Controller\n              name=\"ssoSessionIdleTimeoutRememberMe\"\n              control={control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-sso-session-idle-remember-me\"\n                  data-testid=\"sso-session-idle-remember-me-input\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n\n          <FormGroup\n            label={t(\"SSOSessionMaxRememberMe\")}\n            fieldId=\"SSOSessionMaxRememberMe\"\n            labelIcon={\n              <HelpItem\n                helpText=\"realm-settings-help:ssoSessionMaxRememberMe\"\n                fieldLabelId=\"realm-settings:SSOSessionMaxRememberMe\"\n              />\n            }\n          >\n            <Controller\n              name=\"ssoSessionMaxLifespanRememberMe\"\n              control={control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-sso-session-max-remember-me\"\n                  data-testid=\"sso-session-max-remember-me-input\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n        </FormAccess>\n      </FormPanel>\n      <FormPanel\n        title={t(\"clientSessionSettings\")}\n        className=\"kc-client-session-template\"\n      >\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          className=\"pf-u-mt-lg\"\n          onSubmit={handleSubmit(save)}\n        >\n          <FormGroup\n            label={t(\"clientSessionIdle\")}\n            fieldId=\"clientSessionIdle\"\n            labelIcon={\n              <HelpItem\n                helpText=\"realm-settings-help:clientSessionIdle\"\n                fieldLabelId=\"realm-settings:clientSessionIdle\"\n              />\n            }\n          >\n            <Controller\n              name=\"clientSessionIdleTimeout\"\n              control={control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-client-session-idle\"\n                  data-testid=\"client-session-idle-input\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n\n          <FormGroup\n            label={t(\"clientSessionMax\")}\n            fieldId=\"clientSessionMax\"\n            labelIcon={\n              <HelpItem\n                helpText=\"realm-settings-help:clientSessionMax\"\n                fieldLabelId=\"realm-settings:clientSessionMax\"\n              />\n            }\n          >\n            <Controller\n              name=\"clientSessionMaxLifespan\"\n              control={control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-client-session-max\"\n                  data-testid=\"client-session-max-input\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n        </FormAccess>\n      </FormPanel>\n      <FormPanel\n        title={t(\"offlineSessionSettings\")}\n        className=\"kc-offline-session-template\"\n      >\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          className=\"pf-u-mt-lg\"\n          onSubmit={handleSubmit(save)}\n        >\n          <FormGroup\n            label={t(\"offlineSessionIdle\")}\n            fieldId=\"offlineSessionIdle\"\n            labelIcon={\n              <HelpItem\n                helpText=\"realm-settings-help:offlineSessionIdle\"\n                fieldLabelId=\"realm-settings:offlineSessionIdle\"\n              />\n            }\n          >\n            <Controller\n              name=\"offlineSessionIdleTimeout\"\n              control={control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-offline-session-idle\"\n                  data-testid=\"offline-session-idle-input\"\n                  aria-label=\"offline-session-idle-input\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n\n          <FormGroup\n            hasNoPaddingTop\n            label={t(\"offlineSessionMaxLimited\")}\n            fieldId=\"kc-offlineSessionMaxLimited\"\n            labelIcon={\n              <HelpItem\n                helpText=\"realm-settings-help:offlineSessionMaxLimited\"\n                fieldLabelId=\"realm-settings:offlineSessionMaxLimited\"\n              />\n            }\n          >\n            <Controller\n              name=\"offlineSessionMaxLifespanEnabled\"\n              control={control}\n              defaultValue={false}\n              render={({ field }) => (\n                <Switch\n                  id=\"kc-offline-session-max\"\n                  data-testid=\"offline-session-max-switch\"\n                  aria-label={t(\"offlineSessionMaxLimited\")}\n                  label={t(\"common:enabled\")}\n                  labelOff={t(\"common:disabled\")}\n                  isChecked={field.value}\n                  onChange={field.onChange}\n                />\n              )}\n            />\n          </FormGroup>\n          {offlineSessionMaxEnabled && (\n            <FormGroup\n              label={t(\"offlineSessionMax\")}\n              fieldId=\"offlineSessionMax\"\n              id=\"offline-session-max-label\"\n              labelIcon={\n                <HelpItem\n                  helpText=\"realm-settings-help:offlineSessionMax\"\n                  fieldLabelId=\"realm-settings:offlineSessionMax\"\n                />\n              }\n            >\n              <Controller\n                name=\"offlineSessionMaxLifespan\"\n                control={control}\n                render={({ field }) => (\n                  <TimeSelector\n                    className=\"kc-offline-session-max\"\n                    data-testid=\"offline-session-max-input\"\n                    value={field.value!}\n                    onChange={field.onChange}\n                    units={[\"minute\", \"hour\", \"day\"]}\n                  />\n                )}\n              />\n            </FormGroup>\n          )}\n        </FormAccess>\n      </FormPanel>\n      <FormPanel\n        className=\"kc-login-settings-template\"\n        title={t(\"loginSettings\")}\n      >\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          className=\"pf-u-mt-lg\"\n          onSubmit={handleSubmit(save)}\n        >\n          <FormGroup\n            label={t(\"loginTimeout\")}\n            id=\"kc-login-timeout-label\"\n            fieldId=\"offlineSessionIdle\"\n            labelIcon={\n              <HelpItem\n                helpText=\"realm-settings-help:loginTimeout\"\n                fieldLabelId=\"realm-settings:loginTimeout\"\n              />\n            }\n          >\n            <Controller\n              name=\"accessCodeLifespanLogin\"\n              control={control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-login-timeout\"\n                  data-testid=\"login-timeout-input\"\n                  aria-label=\"login-timeout-input\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"loginActionTimeout\")}\n            fieldId=\"loginActionTimeout\"\n            id=\"login-action-timeout-label\"\n            labelIcon={\n              <HelpItem\n                helpText=\"realm-settings-help:loginActionTimeout\"\n                fieldLabelId=\"realm-settings:loginActionTimeout\"\n              />\n            }\n          >\n            <Controller\n              name=\"accessCodeLifespanUserAction\"\n              control={control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-login-action-timeout\"\n                  data-testid=\"login-action-timeout-input\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n          <ActionGroup>\n            <Button\n              variant=\"primary\"\n              type=\"submit\"\n              data-testid=\"sessions-tab-save\"\n              isDisabled={!formState.isDirty}\n            >\n              {t(\"common:save\")}\n            </Button>\n            <Button variant=\"link\" onClick={setupForm}>\n              {t(\"common:revert\")}\n            </Button>\n          </ActionGroup>\n        </FormAccess>\n      </FormPanel>\n    </PageSection>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  ActionGroup,\n  Button,\n  FormGroup,\n  PageSection,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { useEffect, useState } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../components/form-access/FormAccess\";\nimport { HelpItem } from \"../components/help-enabler/HelpItem\";\nimport { useServerInfo } from \"../context/server-info/ServerInfoProvider\";\nimport { convertToFormValues } from \"../util\";\n\ntype RealmSettingsThemesTabProps = {\n  realm: RealmRepresentation;\n  save: (realm: RealmRepresentation) => void;\n};\n\nexport const RealmSettingsThemesTab = ({\n  realm,\n  save,\n}: RealmSettingsThemesTabProps) => {\n  const { t } = useTranslation(\"realm-settings\");\n\n  const [loginThemeOpen, setLoginThemeOpen] = useState(false);\n  const [accountThemeOpen, setAccountThemeOpen] = useState(false);\n  const [adminUIThemeOpen, setAdminUIThemeOpen] = useState(false);\n  const [emailThemeOpen, setEmailThemeOpen] = useState(false);\n\n  const { control, handleSubmit, setValue } = useForm<RealmRepresentation>();\n  const themeTypes = useServerInfo().themes!;\n\n  const setupForm = () => {\n    convertToFormValues(realm, setValue);\n  };\n  useEffect(setupForm, []);\n\n  return (\n    <PageSection variant=\"light\">\n      <FormAccess\n        isHorizontal\n        role=\"manage-realm\"\n        className=\"pf-u-mt-lg\"\n        onSubmit={handleSubmit(save)}\n      >\n        <FormGroup\n          label={t(\"loginTheme\")}\n          fieldId=\"kc-login-theme\"\n          labelIcon={\n            <HelpItem\n              helpText=\"realm-settings-help:loginTheme\"\n              fieldLabelId=\"realm-settings:loginTheme\"\n            />\n          }\n        >\n          <Controller\n            name=\"loginTheme\"\n            control={control}\n            defaultValue=\"\"\n            render={({ field }) => (\n              <Select\n                toggleId=\"kc-login-theme\"\n                onToggle={() => setLoginThemeOpen(!loginThemeOpen)}\n                onSelect={(_, value) => {\n                  field.onChange(value as string);\n                  setLoginThemeOpen(false);\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n                aria-label={t(\"loginTheme\")}\n                isOpen={loginThemeOpen}\n                placeholderText=\"Select a theme\"\n                data-testid=\"select-login-theme\"\n              >\n                {themeTypes.login.map((theme, idx) => (\n                  <SelectOption\n                    selected={theme.name === field.value}\n                    key={`login-theme-${idx}`}\n                    value={theme.name}\n                  >\n                    {t(`${theme.name}`)}\n                  </SelectOption>\n                ))}\n              </Select>\n            )}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"accountTheme\")}\n          fieldId=\"kc-account-theme\"\n          labelIcon={\n            <HelpItem\n              helpText=\"realm-settings-help:accountTheme\"\n              fieldLabelId=\"realm-settings:accountTheme\"\n            />\n          }\n        >\n          <Controller\n            name=\"accountTheme\"\n            control={control}\n            defaultValue=\"\"\n            render={({ field }) => (\n              <Select\n                toggleId=\"kc-account-theme\"\n                onToggle={() => setAccountThemeOpen(!accountThemeOpen)}\n                onSelect={(_, value) => {\n                  field.onChange(value as string);\n                  setAccountThemeOpen(false);\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n                aria-label={t(\"accountTheme\")}\n                isOpen={accountThemeOpen}\n                placeholderText=\"Select a theme\"\n                data-testid=\"select-account-theme\"\n              >\n                {themeTypes.account.map((theme, idx) => (\n                  <SelectOption\n                    selected={theme.name === field.value}\n                    key={`account-theme-${idx}`}\n                    value={theme.name}\n                  >\n                    {t(`${theme.name}`)}\n                  </SelectOption>\n                ))}\n              </Select>\n            )}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"adminTheme\")}\n          fieldId=\"kc-admin-ui-theme\"\n          labelIcon={\n            <HelpItem\n              helpText=\"realm-settings-help:adminUITheme\"\n              fieldLabelId=\"realm-settings:adminTheme\"\n            />\n          }\n        >\n          <Controller\n            name=\"adminTheme\"\n            control={control}\n            defaultValue=\"\"\n            render={({ field }) => (\n              <Select\n                toggleId=\"kc-admin-ui-theme\"\n                onToggle={() => setAdminUIThemeOpen(!adminUIThemeOpen)}\n                onSelect={(_, value) => {\n                  field.onChange(value as string);\n                  setAdminUIThemeOpen(false);\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n                aria-label={t(\"adminUITheme\")}\n                isOpen={adminUIThemeOpen}\n                placeholderText=\"Select a theme\"\n                data-testid=\"select-admin-theme\"\n              >\n                {themeTypes.admin.map((theme, idx) => (\n                  <SelectOption\n                    selected={theme.name === field.value}\n                    key={`admin-theme-${idx}`}\n                    value={theme.name}\n                  >\n                    {t(`${theme.name}`)}\n                  </SelectOption>\n                ))}\n              </Select>\n            )}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"emailTheme\")}\n          fieldId=\"kc-email-theme\"\n          labelIcon={\n            <HelpItem\n              helpText=\"realm-settings-help:emailTheme\"\n              fieldLabelId=\"realm-settings:emailTheme\"\n            />\n          }\n        >\n          <Controller\n            name=\"emailTheme\"\n            control={control}\n            defaultValue=\"\"\n            render={({ field }) => (\n              <Select\n                toggleId=\"kc-email-theme\"\n                onToggle={() => setEmailThemeOpen(!emailThemeOpen)}\n                onSelect={(_, value) => {\n                  field.onChange(value as string);\n                  setEmailThemeOpen(false);\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n                aria-label={t(\"emailTheme\")}\n                isOpen={emailThemeOpen}\n                placeholderText=\"Select a theme\"\n                data-testid=\"select-email-theme\"\n              >\n                {themeTypes.email.map((theme, idx) => (\n                  <SelectOption\n                    selected={theme.name === field.value}\n                    key={`email-theme-${idx}`}\n                    value={theme.name}\n                  >\n                    {t(`${theme.name}`)}\n                  </SelectOption>\n                ))}\n              </Select>\n            )}\n          />\n        </FormGroup>\n        <ActionGroup>\n          <Button variant=\"primary\" type=\"submit\" data-testid=\"themes-tab-save\">\n            {t(\"common:save\")}\n          </Button>\n          <Button variant=\"link\" onClick={setupForm}>\n            {t(\"common:revert\")}\n          </Button>\n        </ActionGroup>\n      </FormAccess>\n    </PageSection>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  ActionGroup,\n  Button,\n  FormGroup,\n  NumberInput,\n  PageSection,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Switch,\n  Text,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { useEffect, useState } from \"react\";\nimport { Controller, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../components/form-access/FormAccess\";\nimport { HelpItem } from \"../components/help-enabler/HelpItem\";\nimport { KeycloakTextInput } from \"../components/keycloak-text-input/KeycloakTextInput\";\nimport { FormPanel } from \"../components/scroll-form/FormPanel\";\nimport {\n  TimeSelector,\n  toHumanFormat,\n} from \"../components/time-selector/TimeSelector\";\nimport { useServerInfo } from \"../context/server-info/ServerInfoProvider\";\nimport { useWhoAmI } from \"../context/whoami/WhoAmI\";\nimport { convertToFormValues } from \"../util\";\n\nimport \"./realm-settings-section.css\";\n\ntype RealmSettingsSessionsTabProps = {\n  realm: RealmRepresentation;\n  save: (realm: RealmRepresentation) => void;\n  reset?: () => void;\n};\n\nexport const RealmSettingsTokensTab = ({\n  realm,\n  reset,\n  save,\n}: RealmSettingsSessionsTabProps) => {\n  const { t } = useTranslation(\"realm-settings\");\n  const serverInfo = useServerInfo();\n  const { whoAmI } = useWhoAmI();\n\n  const [defaultSigAlgDrpdwnIsOpen, setDefaultSigAlgDrpdwnOpen] =\n    useState(false);\n\n  const allComponentTypes =\n    serverInfo.componentTypes?.[\"org.keycloak.keys.KeyProvider\"] ?? [];\n\n  const esOptions = [\"ES256\", \"ES384\", \"ES512\"];\n\n  const hmacAlgorithmOptions = allComponentTypes[2].properties[4].options;\n\n  const javaKeystoreAlgOptions = allComponentTypes[3].properties[3].options;\n\n  const defaultSigAlgOptions = esOptions.concat(\n    hmacAlgorithmOptions!,\n    javaKeystoreAlgOptions!\n  );\n\n  const form = useForm<RealmRepresentation>();\n  const { setValue, control } = form;\n\n  const offlineSessionMaxEnabled = useWatch({\n    control,\n    name: \"offlineSessionMaxLifespanEnabled\",\n    defaultValue: realm.offlineSessionMaxLifespanEnabled,\n  });\n\n  const ssoSessionIdleTimeout = useWatch({\n    control,\n    name: \"ssoSessionIdleTimeout\",\n    defaultValue: 36000,\n  });\n\n  const revokeRefreshToken = useWatch({\n    control,\n    name: \"revokeRefreshToken\",\n    defaultValue: false,\n  });\n\n  useEffect(() => {\n    convertToFormValues(realm, setValue);\n  }, []);\n\n  return (\n    <PageSection variant=\"light\">\n      <FormPanel\n        title={t(\"realm-settings:general\")}\n        className=\"kc-sso-session-template\"\n      >\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          onSubmit={form.handleSubmit(save)}\n        >\n          <FormGroup\n            label={t(\"defaultSigAlg\")}\n            fieldId=\"kc-default-signature-algorithm\"\n            labelIcon={\n              <HelpItem\n                helpText=\"realm-settings-help:defaultSigAlg\"\n                fieldLabelId=\"realm-settings:algorithm\"\n              />\n            }\n          >\n            <Controller\n              name=\"defaultSignatureAlgorithm\"\n              defaultValue={\"RS256\"}\n              control={form.control}\n              render={({ field }) => (\n                <Select\n                  toggleId=\"kc-default-sig-alg\"\n                  onToggle={() =>\n                    setDefaultSigAlgDrpdwnOpen(!defaultSigAlgDrpdwnIsOpen)\n                  }\n                  onSelect={(_, value) => {\n                    field.onChange(value.toString());\n                    setDefaultSigAlgDrpdwnOpen(false);\n                  }}\n                  selections={[field.value?.toString()]}\n                  variant={SelectVariant.single}\n                  aria-label={t(\"defaultSigAlg\")}\n                  isOpen={defaultSigAlgDrpdwnIsOpen}\n                  data-testid=\"select-default-sig-alg\"\n                >\n                  {defaultSigAlgOptions!.map((p, idx) => (\n                    <SelectOption\n                      selected={p === field.value}\n                      key={`default-sig-alg-${idx}`}\n                      value={p}\n                    ></SelectOption>\n                  ))}\n                </Select>\n              )}\n            />\n          </FormGroup>\n\n          <FormGroup\n            label={t(\"shortVerificationUri\")}\n            fieldId=\"shortVerificationUri\"\n            labelIcon={\n              <HelpItem\n                helpText=\"realm-settings-help:shortVerificationUriTooltip\"\n                fieldLabelId=\"realm-settings:shortVerificationUri\"\n              />\n            }\n          >\n            <Controller\n              name=\"attributes.shortVerificationUri\"\n              defaultValue=\"\"\n              control={form.control}\n              render={({ field }) => (\n                <KeycloakTextInput\n                  id=\"shortVerificationUri\"\n                  value={field.value}\n                  onChange={field.onChange}\n                  placeholder={t(\"shortVerificationUri\")}\n                />\n              )}\n            />\n          </FormGroup>\n        </FormAccess>\n      </FormPanel>\n      <FormPanel\n        title={t(\"realm-settings:refreshTokens\")}\n        className=\"kc-client-session-template\"\n      >\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          className=\"pf-u-mt-lg\"\n          onSubmit={form.handleSubmit(save)}\n        >\n          <FormGroup\n            hasNoPaddingTop\n            label={t(\"revokeRefreshToken\")}\n            fieldId=\"kc-revoke-refresh-token\"\n            labelIcon={\n              <HelpItem\n                helpText=\"realm-settings-help:revokeRefreshToken\"\n                fieldLabelId=\"realm-settings:revokeRefreshToken\"\n              />\n            }\n          >\n            <Controller\n              name=\"revokeRefreshToken\"\n              control={form.control}\n              defaultValue={false}\n              render={({ field }) => (\n                <Switch\n                  id=\"kc-revoke-refresh-token\"\n                  data-testid=\"revoke-refresh-token-switch\"\n                  aria-label={t(\"revokeRefreshToken\")}\n                  label={t(\"common:enabled\")}\n                  labelOff={t(\"common:disabled\")}\n                  isChecked={field.value}\n                  onChange={field.onChange}\n                />\n              )}\n            />\n          </FormGroup>\n          {revokeRefreshToken && (\n            <FormGroup\n              label={t(\"refreshTokenMaxReuse\")}\n              labelIcon={\n                <HelpItem\n                  helpText=\"realm-settings-help:refreshTokenMaxReuse\"\n                  fieldLabelId=\"realm-settings:refreshTokenMaxReuse\"\n                />\n              }\n              fieldId=\"refreshTokenMaxReuse\"\n            >\n              <Controller\n                name=\"refreshTokenMaxReuse\"\n                defaultValue={0}\n                control={form.control}\n                render={({ field }) => (\n                  <NumberInput\n                    type=\"text\"\n                    id=\"refreshTokenMaxReuseMs\"\n                    value={field.value}\n                    onPlus={() => field.onChange(field.value! + 1)}\n                    onMinus={() => field.onChange(field.value! - 1)}\n                    onChange={(event) =>\n                      field.onChange(\n                        Number((event.target as HTMLInputElement).value)\n                      )\n                    }\n                  />\n                )}\n              />\n            </FormGroup>\n          )}\n        </FormAccess>\n      </FormPanel>\n      <FormPanel\n        title={t(\"realm-settings:accessTokens\")}\n        className=\"kc-offline-session-template\"\n      >\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          className=\"pf-u-mt-lg\"\n          onSubmit={form.handleSubmit(save)}\n        >\n          <FormGroup\n            label={t(\"accessTokenLifespan\")}\n            fieldId=\"accessTokenLifespan\"\n            helperText={t(\"recommendedSsoTimeout\", {\n              time: toHumanFormat(ssoSessionIdleTimeout!, whoAmI.getLocale()),\n            })}\n            labelIcon={\n              <HelpItem\n                helpText=\"realm-settings-help:accessTokenLifespan\"\n                fieldLabelId=\"realm-settings:accessTokenLifespan\"\n              />\n            }\n          >\n            <Controller\n              name=\"accessTokenLifespan\"\n              control={form.control}\n              render={({ field }) => (\n                <TimeSelector\n                  validated={\n                    field.value! > ssoSessionIdleTimeout!\n                      ? \"warning\"\n                      : \"default\"\n                  }\n                  className=\"kc-access-token-lifespan\"\n                  data-testid=\"access-token-lifespan-input\"\n                  aria-label=\"access-token-lifespan\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n\n          <FormGroup\n            label={t(\"accessTokenLifespanImplicitFlow\")}\n            fieldId=\"accessTokenLifespanImplicitFlow\"\n            labelIcon={\n              <HelpItem\n                helpText=\"realm-settings-help:accessTokenLifespanImplicitFlow\"\n                fieldLabelId=\"realm-settings:accessTokenLifespanImplicitFlow\"\n              />\n            }\n          >\n            <Controller\n              name=\"accessTokenLifespanForImplicitFlow\"\n              control={form.control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-access-token-lifespan-implicit\"\n                  data-testid=\"access-token-lifespan-implicit-input\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"clientLoginTimeout\")}\n            fieldId=\"clientLoginTimeout\"\n            labelIcon={\n              <HelpItem\n                helpText=\"realm-settings-help:clientLoginTimeout\"\n                fieldLabelId=\"realm-settings:clientLoginTimeout\"\n              />\n            }\n          >\n            <Controller\n              name=\"accessCodeLifespan\"\n              control={form.control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-client-login-timeout\"\n                  data-testid=\"client-login-timeout-input\"\n                  aria-label=\"client-login-timeout\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n\n          {offlineSessionMaxEnabled && (\n            <FormGroup\n              label={t(\"offlineSessionMax\")}\n              fieldId=\"offlineSessionMax\"\n              id=\"offline-session-max-label\"\n              labelIcon={\n                <HelpItem\n                  helpText=\"realm-settings-help:offlineSessionMax\"\n                  fieldLabelId=\"realm-settings:offlineSessionMax\"\n                />\n              }\n            >\n              <Controller\n                name=\"offlineSessionMaxLifespan\"\n                control={form.control}\n                render={({ field }) => (\n                  <TimeSelector\n                    className=\"kc-offline-session-max\"\n                    data-testid=\"offline-session-max-input\"\n                    value={field.value!}\n                    onChange={field.onChange}\n                    units={[\"minute\", \"hour\", \"day\"]}\n                  />\n                )}\n              />\n            </FormGroup>\n          )}\n        </FormAccess>\n      </FormPanel>\n      <FormPanel\n        className=\"kc-login-settings-template\"\n        title={t(\"actionTokens\")}\n      >\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          className=\"pf-u-mt-lg\"\n          onSubmit={form.handleSubmit(save)}\n        >\n          <FormGroup\n            label={t(\"userInitiatedActionLifespan\")}\n            id=\"kc-user-initiated-action-lifespan\"\n            fieldId=\"userInitiatedActionLifespan\"\n            labelIcon={\n              <HelpItem\n                helpText=\"realm-settings-help:userInitiatedActionLifespan\"\n                fieldLabelId=\"realm-settings:userInitiatedActionLifespan\"\n              />\n            }\n          >\n            <Controller\n              name=\"actionTokenGeneratedByUserLifespan\"\n              control={form.control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-user-initiated-action-lifespan\"\n                  data-testid=\"user-initiated-action-lifespan\"\n                  aria-label=\"user-initiated-action-lifespan\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"defaultAdminInitiated\")}\n            fieldId=\"defaultAdminInitiated\"\n            id=\"default-admin-initiated-label\"\n            labelIcon={\n              <HelpItem\n                helpText=\"realm-settings-help:defaultAdminInitiatedActionLifespan\"\n                fieldLabelId=\"realm-settings:defaultAdminInitiated\"\n              />\n            }\n          >\n            <Controller\n              name=\"actionTokenGeneratedByAdminLifespan\"\n              control={form.control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-default-admin-initiated\"\n                  data-testid=\"default-admin-initated-input\"\n                  aria-label=\"default-admin-initated-input\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n          <Text\n            className=\"kc-override-action-tokens-subtitle\"\n            component={TextVariants.h1}\n          >\n            {t(\"overrideActionTokens\")}\n          </Text>\n          <FormGroup\n            label={t(\"emailVerification\")}\n            fieldId=\"emailVerification\"\n            id=\"email-verification\"\n          >\n            <Controller\n              name=\"attributes.actionTokenGeneratedByUserLifespan-verify-email\"\n              defaultValue=\"\"\n              control={form.control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-email-verification\"\n                  data-testid=\"email-verification-input\"\n                  value={field.value}\n                  onChange={(value) => field.onChange(value.toString())}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"idpAccountEmailVerification\")}\n            fieldId=\"idpAccountEmailVerification\"\n            id=\"idp-acct-label\"\n          >\n            <Controller\n              name=\"attributes.actionTokenGeneratedByUserLifespan-idp-verify-account-via-email\"\n              defaultValue={\"\"}\n              control={form.control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-idp-email-verification\"\n                  data-testid=\"idp-email-verification-input\"\n                  value={field.value}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"forgotPassword\")}\n            fieldId=\"forgotPassword\"\n            id=\"forgot-password-label\"\n          >\n            <Controller\n              name=\"attributes.actionTokenGeneratedByUserLifespan-reset-credentials\"\n              defaultValue={\"\"}\n              control={form.control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-forgot-pw\"\n                  data-testid=\"forgot-pw-input\"\n                  value={field.value}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"executeActions\")}\n            fieldId=\"executeActions\"\n            id=\"execute-actions\"\n          >\n            <Controller\n              name=\"attributes.actionTokenGeneratedByUserLifespan-execute-actions\"\n              defaultValue={\"\"}\n              control={form.control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-execute-actions\"\n                  data-testid=\"execute-actions-input\"\n                  value={field.value}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n          <ActionGroup>\n            <Button\n              variant=\"primary\"\n              type=\"submit\"\n              data-testid=\"tokens-tab-save\"\n              isDisabled={!form.formState.isDirty}\n            >\n              {t(\"common:save\")}\n            </Button>\n            <Button variant=\"link\" onClick={reset}>\n              {t(\"common:revert\")}\n            </Button>\n          </ActionGroup>\n        </FormAccess>\n      </FormPanel>\n    </PageSection>\n  );\n};\n","import type { UserProfileGroup } from \"@keycloak/keycloak-admin-client/lib/defs/userProfileConfig\";\nimport {\n  Button,\n  ButtonVariant,\n  PageSection,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { useEffect, useState } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { ListEmptyState } from \"../../components/list-empty-state/ListEmptyState\";\nimport { KeycloakDataTable } from \"../../components/table-toolbar/KeycloakDataTable\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { toEditAttributesGroup } from \"../routes/EditAttributesGroup\";\nimport { toNewAttributesGroup } from \"../routes/NewAttributesGroup\";\nimport { useUserProfile } from \"./UserProfileContext\";\n\nexport const AttributesGroupTab = () => {\n  const { config, save } = useUserProfile();\n  const { t } = useTranslation(\"realm-settings\");\n  const navigate = useNavigate();\n  const { realm } = useRealm();\n  const [key, setKey] = useState(0);\n  const [groupToDelete, setGroupToDelete] = useState<UserProfileGroup>();\n\n  // Refresh data in table when config changes.\n  useEffect(() => setKey((value) => value + 1), [config]);\n\n  async function loader() {\n    return config?.groups ?? [];\n  }\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"realm-settings:deleteDialogTitle\",\n    children: (\n      <Trans i18nKey=\"realm-settings:deleteDialogDescription\">\n        {\" \"}\n        <strong>{{ group: groupToDelete?.name }}</strong>.\n      </Trans>\n    ),\n    continueButtonLabel: \"common:delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm() {\n      const groups = (config?.groups ?? []).filter(\n        (group) => group !== groupToDelete\n      );\n\n      save(\n        { ...config, groups },\n        {\n          successMessageKey: \"realm-settings:deleteSuccess\",\n          errorMessageKey: \"realm-settings:deleteAttributeGroupError\",\n        }\n      );\n    },\n  });\n\n  function deleteAttributeGroup(group: UserProfileGroup) {\n    setGroupToDelete(group);\n    toggleDeleteDialog();\n  }\n\n  return (\n    <PageSection variant=\"light\" className=\"pf-u-p-0\">\n      <DeleteConfirm />\n      <KeycloakDataTable\n        key={key}\n        loader={loader}\n        ariaLabelKey=\"realm-settings:tableTitle\"\n        toolbarItem={\n          <ToolbarItem>\n            <Button\n              component={(props) => (\n                <Link {...props} to={toNewAttributesGroup({ realm })} />\n              )}\n            >\n              {t(\"createGroupText\")}\n            </Button>\n          </ToolbarItem>\n        }\n        columns={[\n          {\n            name: \"name\",\n            displayKey: \"realm-settings:columnName\",\n            cellRenderer: (group) => (\n              <Link to={toEditAttributesGroup({ realm, name: group.name! })}>\n                {group.name}\n              </Link>\n            ),\n          },\n          {\n            name: \"displayHeader\",\n            displayKey: \"realm-settings:columnDisplayName\",\n          },\n          {\n            name: \"displayDescription\",\n            displayKey: \"realm-settings:columnDisplayDescription\",\n          },\n        ]}\n        actions={[\n          {\n            title: t(\"common:delete\"),\n            onRowClick: deleteAttributeGroup,\n          },\n        ]}\n        emptyState={\n          <ListEmptyState\n            message={t(\"emptyStateMessage\")}\n            instructions={t(\"emptyStateInstructions\")}\n            primaryActionText={t(\"createGroupText\")}\n            onPrimaryAction={() => navigate(toNewAttributesGroup({ realm }))}\n          />\n        }\n      />\n    </PageSection>\n  );\n};\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Button,\n  ButtonVariant,\n  Divider,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Toolbar,\n  ToolbarContent,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { FilterIcon } from \"@patternfly/react-icons\";\n\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport { DraggableTable } from \"../../authentication/components/DraggableTable\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { toAddAttribute } from \"../routes/AddAttribute\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useUserProfile } from \"./UserProfileContext\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { toAttribute } from \"../routes/Attribute\";\nimport type { UserProfileAttribute } from \"@keycloak/keycloak-admin-client/lib/defs/userProfileConfig\";\nimport useToggle from \"../../utils/useToggle\";\n\nconst RESTRICTED_ATTRIBUTES = [\"username\", \"email\"];\n\ntype movedAttributeType = UserProfileAttribute;\n\nexport const AttributesTab = () => {\n  const { config, save } = useUserProfile();\n  const { realm: realmName } = useRealm();\n  const { t } = useTranslation(\"realm-settings\");\n  const navigate = useNavigate();\n  const [filter, setFilter] = useState(\"allGroups\");\n  const [isFilterTypeDropdownOpen, toggleIsFilterTypeDropdownOpen] =\n    useToggle();\n  const [data, setData] = useState(config?.attributes);\n  const [attributeToDelete, setAttributeToDelete] = useState(\"\");\n\n  const executeMove = async (\n    attribute: UserProfileAttribute,\n    newIndex: number\n  ) => {\n    const fromIndex = config?.attributes!.findIndex((attr) => {\n      return attr.name === attribute.name;\n    });\n\n    let movedAttribute: movedAttributeType = {};\n    movedAttribute = config?.attributes![fromIndex!]!;\n    config?.attributes!.splice(fromIndex!, 1);\n    config?.attributes!.splice(newIndex, 0, movedAttribute);\n\n    save(\n      { attributes: config?.attributes!, groups: config?.groups },\n      {\n        successMessageKey: \"realm-settings:updatedUserProfileSuccess\",\n        errorMessageKey: \"realm-settings:updatedUserProfileError\",\n      }\n    );\n  };\n\n  const updatedAttributes = config?.attributes!.filter(\n    (attribute) => attribute.name !== attributeToDelete\n  );\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: t(\"deleteAttributeConfirmTitle\"),\n    messageKey: t(\"deleteAttributeConfirm\", {\n      attributeName: attributeToDelete,\n    }),\n    continueButtonLabel: t(\"common:delete\"),\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      save(\n        { attributes: updatedAttributes!, groups: config?.groups },\n        {\n          successMessageKey: \"realm-settings:deleteAttributeSuccess\",\n          errorMessageKey: \"realm-settings:deleteAttributeError\",\n        }\n      );\n      setAttributeToDelete(\"\");\n    },\n  });\n\n  const cellFormatter = (row: UserProfileAttribute) => (\n    <Link\n      to={toAttribute({\n        realm: realmName,\n        attributeName: row.name!,\n      })}\n      key={row.name}\n    >\n      {row.name}\n    </Link>\n  );\n\n  if (!config?.attributes) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <>\n      <Toolbar>\n        <ToolbarContent>\n          <ToolbarItem>\n            <Select\n              width={200}\n              data-testid=\"filter-select\"\n              isOpen={isFilterTypeDropdownOpen}\n              variant={SelectVariant.single}\n              onToggle={toggleIsFilterTypeDropdownOpen}\n              toggleIcon={<FilterIcon />}\n              onSelect={(_, value) => {\n                const filter = value.toString();\n                setFilter(filter);\n                setData(\n                  filter === \"allGroups\"\n                    ? config.attributes\n                    : config.attributes?.filter((attr) => attr.group === filter)\n                );\n                toggleIsFilterTypeDropdownOpen();\n              }}\n              selections={filter === \"allGroups\" ? t(filter) : filter}\n            >\n              {[\n                <SelectOption\n                  key=\"allGroups\"\n                  data-testid=\"all-groups\"\n                  value=\"allGroups\"\n                >\n                  {t(\"allGroups\")}\n                </SelectOption>,\n                ...config\n                  .attributes!.filter((attr) => !!attr.group)\n                  .map((attr) => (\n                    <SelectOption\n                      key={attr.group}\n                      data-testid={`${attr.group}-option`}\n                      value={attr.group}\n                    />\n                  )),\n              ]}\n            </Select>\n          </ToolbarItem>\n          <ToolbarItem className=\"kc-toolbar-attributesTab\">\n            <Button\n              data-testid=\"createAttributeBtn\"\n              variant=\"primary\"\n              component={(props) => (\n                <Link {...props} to={toAddAttribute({ realm: realmName })} />\n              )}\n            >\n              {t(\"createAttribute\")}\n            </Button>\n          </ToolbarItem>\n        </ToolbarContent>\n      </Toolbar>\n      <Divider />\n      <DeleteConfirm />\n      <DraggableTable\n        keyField=\"name\"\n        onDragFinish={async (nameDragged, items) => {\n          const keys = config.attributes!.map((e) => e.name);\n          const newIndex = items.indexOf(nameDragged);\n          const oldIndex = keys.indexOf(nameDragged);\n          const dragged = config.attributes![oldIndex];\n          if (!dragged.name) return;\n\n          executeMove(dragged, newIndex);\n        }}\n        actions={[\n          {\n            title: t(\"common:edit\"),\n            onClick: (_key, _idx, component) => {\n              navigate(\n                toAttribute({\n                  realm: realmName,\n                  attributeName: component.name,\n                })\n              );\n            },\n          },\n          {\n            title: t(\"common:delete\"),\n            isActionable: ({ name }) => !RESTRICTED_ATTRIBUTES.includes(name!),\n            onClick: (_key, _idx, component) => {\n              setAttributeToDelete(component.name);\n              toggleDeleteDialog();\n            },\n          },\n        ]}\n        columns={[\n          {\n            name: \"name\",\n            displayKey: t(\"attributeName\"),\n            cellRenderer: cellFormatter,\n          },\n          {\n            name: \"displayName\",\n            displayKey: t(\"attributeDisplayName\"),\n          },\n          {\n            name: \"group\",\n            displayKey: t(\"attributeGroup\"),\n          },\n        ]}\n        data={data || config.attributes}\n      />\n    </>\n  );\n};\n","import { CodeEditor, Language } from \"@patternfly/react-code-editor\";\nimport { ActionGroup, Button, Form, PageSection } from \"@patternfly/react-core\";\nimport type { editor } from \"monaco-editor\";\nimport { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { prettyPrintJSON } from \"../../util\";\nimport { useUserProfile } from \"./UserProfileContext\";\n\nexport const JsonEditorTab = () => {\n  const { config, save, isSaving } = useUserProfile();\n  const { t } = useTranslation();\n  const { addError } = useAlerts();\n  const [editor, setEditor] = useState<editor.IStandaloneCodeEditor>();\n\n  useEffect(() => resetCode(), [config, editor]);\n\n  function resetCode() {\n    editor?.setValue(config ? prettyPrintJSON(config) : \"\");\n  }\n\n  async function handleSave() {\n    const value = editor?.getValue();\n\n    if (!value) {\n      return;\n    }\n\n    try {\n      await save(JSON.parse(value));\n    } catch (error) {\n      addError(\"realm-settings:invalidJsonError\", error);\n      return;\n    }\n  }\n\n  return (\n    <PageSection variant=\"light\">\n      <CodeEditor\n        language={Language.json}\n        height=\"30rem\"\n        onEditorDidMount={(editor) => setEditor(editor)}\n        isLanguageLabelVisible\n      />\n      <Form>\n        <ActionGroup>\n          <Button\n            data-testid=\"save\"\n            variant=\"primary\"\n            onClick={handleSave}\n            isDisabled={isSaving}\n          >\n            {t(\"common:save\")}\n          </Button>\n          <Button variant=\"link\" onClick={resetCode} isDisabled={isSaving}>\n            {t(\"common:revert\")}\n          </Button>\n        </ActionGroup>\n      </Form>\n    </PageSection>\n  );\n};\n","import { Tab, TabTitleText } from \"@patternfly/react-core\";\n\nimport { useTranslation } from \"react-i18next\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../../components/routable-tabs/RoutableTabs\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport {\n  toUserProfile,\n  UserProfileTab as IUserProfileTab,\n} from \"../routes/UserProfile\";\nimport { AttributesGroupTab } from \"./AttributesGroupTab\";\nimport { AttributesTab } from \"./AttributesTab\";\nimport { JsonEditorTab } from \"./JsonEditorTab\";\nimport { UserProfileProvider } from \"./UserProfileContext\";\n\nexport const UserProfileTab = () => {\n  const { realm } = useRealm();\n  const { t } = useTranslation(\"realm-settings\");\n\n  const useTab = (tab: IUserProfileTab) =>\n    useRoutableTab(toUserProfile({ realm, tab }));\n\n  const attributesTab = useTab(\"attributes\");\n  const attributesGroupTab = useTab(\"attributes-group\");\n  const jsonEditorTab = useTab(\"json-editor\");\n\n  return (\n    <UserProfileProvider>\n      <RoutableTabs\n        defaultLocation={toUserProfile({ realm, tab: \"attributes\" })}\n        mountOnEnter\n      >\n        <Tab\n          title={<TabTitleText>{t(\"attributes\")}</TabTitleText>}\n          data-testid=\"attributesTab\"\n          {...attributesTab}\n        >\n          <AttributesTab />\n        </Tab>\n        <Tab\n          title={<TabTitleText>{t(\"attributesGroup\")}</TabTitleText>}\n          data-testid=\"attributesGroupTab\"\n          {...attributesGroupTab}\n        >\n          <AttributesGroupTab />\n        </Tab>\n        <Tab\n          title={<TabTitleText>{t(\"jsonEditor\")}</TabTitleText>}\n          data-testid=\"jsonEditorTab\"\n          {...jsonEditorTab}\n        >\n          <JsonEditorTab />\n        </Tab>\n      </RoutableTabs>\n    </UserProfileProvider>\n  );\n};\n","import { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Dropdown,\n  DropdownItem,\n  KebabToggle,\n  Popover,\n  Text,\n  TextContent,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { QuestionCircleIcon } from \"@patternfly/react-icons\";\n\nimport type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport { KeycloakDataTable } from \"../components/table-toolbar/KeycloakDataTable\";\nimport { useAdminClient, useFetch } from \"../context/auth/AdminClient\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport useToggle from \"../utils/useToggle\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { toUserFederation } from \"../user-federation/routes/UserFederation\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { GroupPickerDialog } from \"../components/group/GroupPickerDialog\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport { useHelp } from \"../components/help-enabler/HelpHeader\";\n\nexport const DefaultsGroupsTab = () => {\n  const { t } = useTranslation(\"realm-settings\");\n\n  const [isKebabOpen, toggleKebab] = useToggle();\n  const [isGroupPickerOpen, toggleGroupPicker] = useToggle();\n  const [defaultGroups, setDefaultGroups] = useState<GroupRepresentation[]>();\n  const [selectedRows, setSelectedRows] = useState<GroupRepresentation[]>([]);\n\n  const [key, setKey] = useState(0);\n  const [load, setLoad] = useState(0);\n  const reload = () => setLoad(load + 1);\n\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n  const { addAlert, addError } = useAlerts();\n  const { enabled } = useHelp();\n\n  useFetch(\n    () => adminClient.realms.getDefaultGroups({ realm }),\n    (groups) => {\n      setDefaultGroups(groups);\n      setKey(key + 1);\n    },\n    [load]\n  );\n\n  const loader = () => Promise.resolve(defaultGroups!);\n\n  const removeGroup = async () => {\n    try {\n      await Promise.all(\n        selectedRows.map((group) =>\n          adminClient.realms.removeDefaultGroup({\n            realm,\n            id: group.id!,\n          })\n        )\n      );\n      addAlert(\n        t(\"groupRemove\", { count: selectedRows.length }),\n        AlertVariant.success\n      );\n      setSelectedRows([]);\n    } catch (error) {\n      addError(\"realm-settings:groupRemoveError\", error);\n    }\n    reload();\n  };\n\n  const addGroups = async (groups: GroupRepresentation[]) => {\n    try {\n      await Promise.all(\n        groups.map((group) =>\n          adminClient.realms.addDefaultGroup({\n            realm,\n            id: group.id!,\n          })\n        )\n      );\n      addAlert(\n        t(\"defaultGroupAdded\", { count: groups.length }),\n        AlertVariant.success\n      );\n    } catch (error) {\n      addError(\"realm-settings:defaultGroupAddedError\", error);\n    }\n    reload();\n  };\n\n  const [toggleRemoveDialog, RemoveDialog] = useConfirmDialog({\n    titleKey: t(\"removeConfirmTitle\", { count: selectedRows.length }),\n    messageKey: t(\"removeConfirm\", { count: selectedRows.length }),\n    continueButtonLabel: \"common:delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: removeGroup,\n  });\n\n  if (!defaultGroups) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <>\n      <RemoveDialog />\n      {isGroupPickerOpen && (\n        <GroupPickerDialog\n          type=\"selectMany\"\n          text={{\n            title: \"realm-settings:addDefaultGroups\",\n            ok: \"common:add\",\n          }}\n          onConfirm={(groups) => {\n            addGroups(groups || []);\n            toggleGroupPicker();\n          }}\n          onClose={toggleGroupPicker}\n        />\n      )}\n      {enabled && (\n        <Popover\n          bodyContent={\n            <Trans i18nKey=\"realm-settings-help:defaultGroups\">\n              {\" \"}\n              <Link to={toUserFederation({ realm })} />.\n            </Trans>\n          }\n        >\n          <TextContent\n            className=\"keycloak__section_intro__help\"\n            style={{\n              paddingLeft: \"var(--pf-c-page__main-section--PaddingLeft)\",\n            }}\n          >\n            <Text>\n              <QuestionCircleIcon /> {t(\"whatIsDefaultGroups\")}\n            </Text>\n          </TextContent>\n        </Popover>\n      )}\n      <KeycloakDataTable\n        key={key}\n        canSelectAll\n        onSelect={(rows) => setSelectedRows([...rows])}\n        loader={loader}\n        ariaLabelKey=\"realm-settings:defaultGroups\"\n        searchPlaceholderKey=\"realm-settings:searchForGroups\"\n        toolbarItem={\n          <>\n            <ToolbarItem>\n              <Button\n                data-testid=\"openCreateGroupModal\"\n                variant=\"primary\"\n                onClick={toggleGroupPicker}\n              >\n                {t(\"addGroups\")}\n              </Button>\n            </ToolbarItem>\n            <ToolbarItem>\n              <Dropdown\n                toggle={\n                  <KebabToggle\n                    onToggle={toggleKebab}\n                    isDisabled={selectedRows!.length === 0}\n                  />\n                }\n                isOpen={isKebabOpen}\n                isPlain\n                dropdownItems={[\n                  <DropdownItem\n                    key=\"action\"\n                    component=\"button\"\n                    onClick={() => {\n                      toggleRemoveDialog();\n                      toggleKebab();\n                    }}\n                  >\n                    {t(\"common:remove\")}\n                  </DropdownItem>,\n                ]}\n              />\n            </ToolbarItem>\n          </>\n        }\n        actions={[\n          {\n            title: t(\"common:remove\"),\n            onRowClick: (group: GroupRepresentation) => {\n              setSelectedRows([group]);\n              toggleRemoveDialog();\n              return Promise.resolve(false);\n            },\n          },\n        ]}\n        columns={[\n          {\n            name: \"name\",\n            displayKey: \"groups:groupName\",\n          },\n          {\n            name: \"path\",\n            displayKey: \"groups:path\",\n          },\n        ]}\n        emptyState={\n          <ListEmptyState\n            hasIcon\n            message={t(\"noDefaultGroups\")}\n            instructions={\n              <Trans i18nKey=\"realm-settings:noDefaultGroupsInstructions\">\n                {\" \"}\n                <Link to={toUserFederation({ realm })} />\n                Add groups...\n              </Trans>\n            }\n            primaryActionText={t(\"addGroups\")}\n            onPrimaryAction={toggleGroupPicker}\n          />\n        }\n      />\n    </>\n  );\n};\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { AlertVariant, Tab, Tabs, TabTitleText } from \"@patternfly/react-core\";\n\nimport type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport type RoleRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport { useAdminClient, useFetch } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { RoleMapping } from \"../components/role-mapping/RoleMapping\";\nimport { DefaultsGroupsTab } from \"./DefaultGroupsTab\";\n\nexport const UserRegistration = () => {\n  const { t } = useTranslation(\"realm-settings\");\n  const [realm, setRealm] = useState<RealmRepresentation>();\n  const [activeTab, setActiveTab] = useState(10);\n  const [key, setKey] = useState(0);\n\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const { realm: realmName } = useRealm();\n\n  useFetch(\n    () => adminClient.realms.findOne({ realm: realmName }),\n    setRealm,\n    []\n  );\n\n  if (!realm) {\n    return <KeycloakSpinner />;\n  }\n\n  const addComposites = async (composites: RoleRepresentation[]) => {\n    const compositeArray = composites;\n\n    try {\n      await adminClient.roles.createComposite(\n        { roleId: realm.defaultRole!.id!, realm: realmName },\n        compositeArray\n      );\n      setKey(key + 1);\n      addAlert(t(\"roles:addAssociatedRolesSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"roles:addAssociatedRolesError\", error);\n    }\n  };\n\n  return (\n    <Tabs\n      activeKey={activeTab}\n      onSelect={(_, key) => setActiveTab(key as number)}\n    >\n      <Tab\n        key={key}\n        id=\"roles\"\n        eventKey={10}\n        title={<TabTitleText>{t(\"defaultRoles\")}</TabTitleText>}\n      >\n        <RoleMapping\n          name={realm.defaultRole!.name!}\n          id={realm.defaultRole!.id!}\n          type=\"roles\"\n          isManager\n          save={(rows) => addComposites(rows.map((r) => r.role))}\n        />\n      </Tab>\n      <Tab\n        id=\"groups\"\n        eventKey={20}\n        title={<TabTitleText>{t(\"defaultGroups\")}</TabTitleText>}\n      >\n        <DefaultsGroupsTab />\n      </Tab>\n    </Tabs>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  AlertVariant,\n  ButtonVariant,\n  DropdownItem,\n  DropdownSeparator,\n  PageSection,\n  Tab,\n  TabTitleText,\n  Tooltip,\n} from \"@patternfly/react-core\";\nimport { useEffect, useState } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport type { KeyValueType } from \"../components/key-value-form/key-value-convert\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../components/routable-tabs/RoutableTabs\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { useRealms } from \"../context/RealmsContext\";\nimport { toDashboard } from \"../dashboard/routes/Dashboard\";\nimport environment from \"../environment\";\nimport helpUrls from \"../help-urls\";\nimport { convertFormValuesToObject, convertToFormValues } from \"../util\";\nimport useIsFeatureEnabled, { Feature } from \"../utils/useIsFeatureEnabled\";\nimport { RealmSettingsEmailTab } from \"./EmailTab\";\nimport { EventsTab } from \"./event-config/EventsTab\";\nimport { RealmSettingsGeneralTab } from \"./GeneralTab\";\nimport { KeysTab } from \"./keys/KeysTab\";\nimport { LocalizationTab } from \"./LocalizationTab\";\nimport { RealmSettingsLoginTab } from \"./LoginTab\";\nimport { PartialExportDialog } from \"./PartialExport\";\nimport { PartialImportDialog } from \"./PartialImport\";\nimport { PoliciesTab } from \"./PoliciesTab\";\nimport ProfilesTab from \"./ProfilesTab\";\nimport { ClientPoliciesTab, toClientPolicies } from \"./routes/ClientPolicies\";\nimport { RealmSettingsTab, toRealmSettings } from \"./routes/RealmSettings\";\nimport { SecurityDefenses } from \"./security-defences/SecurityDefenses\";\nimport { RealmSettingsSessionsTab } from \"./SessionsTab\";\nimport { RealmSettingsThemesTab } from \"./ThemesTab\";\nimport { RealmSettingsTokensTab } from \"./TokensTab\";\nimport { UserProfileTab } from \"./user-profile/UserProfileTab\";\nimport { UserRegistration } from \"./UserRegistration\";\n\ntype RealmSettingsHeaderProps = {\n  onChange: (value: boolean) => void;\n  value: boolean;\n  save: () => void;\n  realmName: string;\n  refresh: () => void;\n};\n\nconst RealmSettingsHeader = ({\n  save,\n  onChange,\n  value,\n  realmName,\n  refresh,\n}: RealmSettingsHeaderProps) => {\n  const { t } = useTranslation(\"realm-settings\");\n  const { adminClient } = useAdminClient();\n  const { refresh: refreshRealms } = useRealms();\n  const { addAlert, addError } = useAlerts();\n  const navigate = useNavigate();\n  const [partialImportOpen, setPartialImportOpen] = useState(false);\n  const [partialExportOpen, setPartialExportOpen] = useState(false);\n\n  const [toggleDisableDialog, DisableConfirm] = useConfirmDialog({\n    titleKey: \"realm-settings:disableConfirmTitle\",\n    messageKey: \"realm-settings:disableConfirm\",\n    continueButtonLabel: \"common:disable\",\n    onConfirm: () => {\n      onChange(!value);\n      save();\n    },\n  });\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"realm-settings:deleteConfirmTitle\",\n    messageKey: \"realm-settings:deleteConfirm\",\n    continueButtonLabel: \"common:delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.realms.del({ realm: realmName });\n        addAlert(t(\"deletedSuccess\"), AlertVariant.success);\n        await refreshRealms();\n        navigate(toDashboard({ realm: environment.masterRealm }));\n        refresh();\n      } catch (error) {\n        addError(\"realm-settings:deleteError\", error);\n      }\n    },\n  });\n\n  return (\n    <>\n      <DisableConfirm />\n      <DeleteConfirm />\n      <PartialImportDialog\n        open={partialImportOpen}\n        toggleDialog={() => setPartialImportOpen(!partialImportOpen)}\n      />\n      <PartialExportDialog\n        isOpen={partialExportOpen}\n        onClose={() => setPartialExportOpen(false)}\n      />\n      <ViewHeader\n        titleKey={realmName}\n        subKey=\"realm-settings:realmSettingsExplain\"\n        helpUrl={helpUrls.realmSettingsUrl}\n        divider={false}\n        dropdownItems={[\n          <DropdownItem\n            key=\"import\"\n            data-testid=\"openPartialImportModal\"\n            onClick={() => {\n              setPartialImportOpen(true);\n            }}\n          >\n            {t(\"partialImport\")}\n          </DropdownItem>,\n          <DropdownItem\n            key=\"export\"\n            data-testid=\"openPartialExportModal\"\n            onClick={() => setPartialExportOpen(true)}\n          >\n            {t(\"partialExport\")}\n          </DropdownItem>,\n          <DropdownSeparator key=\"separator\" />,\n          <DropdownItem key=\"delete\" onClick={toggleDeleteDialog}>\n            {t(\"common:delete\")}\n          </DropdownItem>,\n        ]}\n        isEnabled={value}\n        onToggle={(value) => {\n          if (!value) {\n            toggleDisableDialog();\n          } else {\n            onChange(value);\n            save();\n          }\n        }}\n      />\n    </>\n  );\n};\n\ntype RealmSettingsTabsProps = {\n  realm: RealmRepresentation;\n  refresh: () => void;\n};\n\nexport const RealmSettingsTabs = ({\n  realm,\n  refresh,\n}: RealmSettingsTabsProps) => {\n  const { t } = useTranslation(\"realm-settings\");\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const { realm: realmName } = useRealm();\n  const { refresh: refreshRealms } = useRealms();\n  const navigate = useNavigate();\n  const isFeatureEnabled = useIsFeatureEnabled();\n\n  const { control, setValue, getValues } = useForm({\n    mode: \"onChange\",\n  });\n  const [key, setKey] = useState(0);\n\n  const refreshHeader = () => {\n    setKey(key + 1);\n  };\n\n  const setupForm = (r: RealmRepresentation = realm) => {\n    convertToFormValues(r, setValue);\n  };\n\n  useEffect(setupForm, []);\n\n  const save = async (r: RealmRepresentation) => {\n    r = convertFormValuesToObject(r);\n    if (\n      r.attributes?.[\"acr.loa.map\"] &&\n      typeof r.attributes[\"acr.loa.map\"] !== \"string\"\n    ) {\n      r.attributes[\"acr.loa.map\"] = JSON.stringify(\n        Object.fromEntries(\n          (r.attributes[\"acr.loa.map\"] as KeyValueType[])\n            .filter(({ key }) => key !== \"\")\n            .map(({ key, value }) => [key, value])\n        )\n      );\n    }\n\n    try {\n      await adminClient.realms.update(\n        { realm: realmName },\n        {\n          ...realm,\n          ...r,\n          id: r.realm,\n        }\n      );\n      addAlert(t(\"saveSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"realm-settings:saveError\", error);\n    }\n\n    const isRealmRenamed = realmName !== (r.realm || realm.realm);\n    if (isRealmRenamed) {\n      await refreshRealms();\n      navigate(toRealmSettings({ realm: r.realm!, tab: \"general\" }));\n    }\n    refresh();\n  };\n\n  const useTab = (tab: RealmSettingsTab) =>\n    useRoutableTab(toRealmSettings({ realm: realmName, tab }));\n\n  const generalTab = useTab(\"general\");\n  const loginTab = useTab(\"login\");\n  const emailTab = useTab(\"email\");\n  const themesTab = useTab(\"themes\");\n  const keysTab = useTab(\"keys\");\n  const eventsTab = useTab(\"events\");\n  const localizationTab = useTab(\"localization\");\n  const securityDefensesTab = useTab(\"security-defenses\");\n  const sessionsTab = useTab(\"sessions\");\n  const tokensTab = useTab(\"tokens\");\n  const clientPoliciesTab = useTab(\"client-policies\");\n  const userProfileTab = useTab(\"user-profile\");\n  const userRegistrationTab = useTab(\"user-registration\");\n\n  const useClientPoliciesTab = (tab: ClientPoliciesTab) =>\n    useRoutableTab(\n      toClientPolicies({\n        realm: realmName,\n        tab,\n      })\n    );\n\n  const clientPoliciesProfilesTab = useClientPoliciesTab(\"profiles\");\n  const clientPoliciesPoliciesTab = useClientPoliciesTab(\"policies\");\n\n  return (\n    <>\n      <Controller\n        name=\"enabled\"\n        defaultValue={true}\n        control={control}\n        render={({ field }) => (\n          <RealmSettingsHeader\n            value={field.value}\n            onChange={field.onChange}\n            realmName={realmName}\n            refresh={refreshHeader}\n            save={() => save(getValues())}\n          />\n        )}\n      />\n      <PageSection variant=\"light\" className=\"pf-u-p-0\">\n        <RoutableTabs\n          isBox\n          mountOnEnter\n          defaultLocation={toRealmSettings({\n            realm: realmName,\n            tab: \"general\",\n          })}\n        >\n          <Tab\n            title={<TabTitleText>{t(\"general\")}</TabTitleText>}\n            data-testid=\"rs-general-tab\"\n            {...generalTab}\n          >\n            <RealmSettingsGeneralTab realm={realm} save={save} />\n          </Tab>\n          <Tab\n            title={<TabTitleText>{t(\"login\")}</TabTitleText>}\n            data-testid=\"rs-login-tab\"\n            {...loginTab}\n          >\n            <RealmSettingsLoginTab refresh={refresh} realm={realm} />\n          </Tab>\n          <Tab\n            title={<TabTitleText>{t(\"email\")}</TabTitleText>}\n            data-testid=\"rs-email-tab\"\n            {...emailTab}\n          >\n            <RealmSettingsEmailTab realm={realm} />\n          </Tab>\n          <Tab\n            title={<TabTitleText>{t(\"themes\")}</TabTitleText>}\n            data-testid=\"rs-themes-tab\"\n            {...themesTab}\n          >\n            <RealmSettingsThemesTab realm={realm} save={save} />\n          </Tab>\n          <Tab\n            title={<TabTitleText>{t(\"realm-settings:keys\")}</TabTitleText>}\n            data-testid=\"rs-keys-tab\"\n            {...keysTab}\n          >\n            <KeysTab />\n          </Tab>\n          <Tab\n            title={<TabTitleText>{t(\"events\")}</TabTitleText>}\n            data-testid=\"rs-realm-events-tab\"\n            {...eventsTab}\n          >\n            <EventsTab realm={realm} />\n          </Tab>\n          <Tab\n            title={<TabTitleText>{t(\"localization\")}</TabTitleText>}\n            data-testid=\"rs-localization-tab\"\n            {...localizationTab}\n          >\n            <LocalizationTab\n              key={key}\n              refresh={refresh}\n              save={save}\n              realm={realm}\n            />\n          </Tab>\n          <Tab\n            title={<TabTitleText>{t(\"securityDefences\")}</TabTitleText>}\n            data-testid=\"rs-security-defenses-tab\"\n            {...securityDefensesTab}\n          >\n            <SecurityDefenses realm={realm} save={save} />\n          </Tab>\n          <Tab\n            title={<TabTitleText>{t(\"realm-settings:sessions\")}</TabTitleText>}\n            data-testid=\"rs-sessions-tab\"\n            {...sessionsTab}\n          >\n            <RealmSettingsSessionsTab key={key} realm={realm} save={save} />\n          </Tab>\n          <Tab\n            title={<TabTitleText>{t(\"realm-settings:tokens\")}</TabTitleText>}\n            data-testid=\"rs-tokens-tab\"\n            {...tokensTab}\n          >\n            <RealmSettingsTokensTab save={save} realm={realm} />\n          </Tab>\n          <Tab\n            title={\n              <TabTitleText>{t(\"realm-settings:clientPolicies\")}</TabTitleText>\n            }\n            data-testid=\"rs-clientPolicies-tab\"\n            {...clientPoliciesTab}\n          >\n            <RoutableTabs\n              mountOnEnter\n              defaultLocation={toClientPolicies({\n                realm: realmName,\n                tab: \"profiles\",\n              })}\n            >\n              <Tab\n                id=\"profiles\"\n                data-testid=\"rs-policies-clientProfiles-tab\"\n                aria-label={t(\"clientProfilesSubTab\")}\n                title={<TabTitleText>{t(\"profiles\")}</TabTitleText>}\n                tooltip={\n                  <Tooltip\n                    content={t(\"realm-settings:clientPoliciesProfilesHelpText\")}\n                  />\n                }\n                {...clientPoliciesProfilesTab}\n              >\n                <ProfilesTab />\n              </Tab>\n              <Tab\n                id=\"policies\"\n                data-testid=\"rs-policies-clientPolicies-tab\"\n                aria-label={t(\"clientPoliciesSubTab\")}\n                {...clientPoliciesPoliciesTab}\n                title={<TabTitleText>{t(\"policies\")}</TabTitleText>}\n                tooltip={\n                  <Tooltip\n                    content={t(\"realm-settings:clientPoliciesPoliciesHelpText\")}\n                  />\n                }\n              >\n                <PoliciesTab />\n              </Tab>\n            </RoutableTabs>\n          </Tab>\n          {isFeatureEnabled(Feature.DeclarativeUserProfile) &&\n            realm.attributes?.userProfileEnabled === \"true\" && (\n              <Tab\n                title={\n                  <TabTitleText>{t(\"realm-settings:userProfile\")}</TabTitleText>\n                }\n                data-testid=\"rs-user-profile-tab\"\n                {...userProfileTab}\n              >\n                <UserProfileTab />\n              </Tab>\n            )}\n          <Tab\n            title={<TabTitleText>{t(\"userRegistration\")}</TabTitleText>}\n            data-testid=\"rs-userRegistration-tab\"\n            {...userRegistrationTab}\n          >\n            <UserRegistration />\n          </Tab>\n        </RoutableTabs>\n      </PageSection>\n    </>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport { useState } from \"react\";\n\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport { useAdminClient, useFetch } from \"../context/auth/AdminClient\";\nimport { useParams } from \"../utils/useParams\";\nimport { RealmSettingsTabs } from \"./RealmSettingsTabs\";\nimport type { RealmSettingsParams } from \"./routes/RealmSettings\";\n\nexport default function RealmSettingsSection() {\n  const { adminClient } = useAdminClient();\n  const { realm: realmName } = useParams<RealmSettingsParams>();\n  const [realm, setRealm] = useState<RealmRepresentation>();\n  const [key, setKey] = useState(0);\n\n  const refresh = () => {\n    setKey(key + 1);\n    setRealm(undefined);\n  };\n\n  useFetch(() => adminClient.realms.findOne({ realm: realmName }), setRealm, [\n    key,\n  ]);\n\n  if (!realm) {\n    return <KeycloakSpinner />;\n  }\n  return <RealmSettingsTabs realm={realm} refresh={refresh} />;\n}\n"],"names":["uniqWith","array","comparator","baseUniq","EditableTextCell","value","rowIndex","cellIndex","props","handleTextInputChange","inputAriaLabel","isDisabled","_jsxs","_Fragment","_jsx","inlineStyles","inlineEditValue","inlineEditInput","TextInput","editableValue","undefined","isValid","newValue","event","css","formStyles","formHelperText","modifiers","error","errorText","displayName","useCurrentUser","whoAmI","useWhoAmI","adminClient","useAdminClient","currentUser","setCurrentUser","useState","userId","useFetch","RealmSettingsEmailTab","realm","initialRealm","t","useTranslation","realmName","useRealm","addAlert","addError","useAlerts","setRealm","register","control","handleSubmit","watch","reset","resetForm","getValues","formState","errors","useForm","defaultValues","watchFromValue","watchHostValue","isTesting","toggleTest","useToggle","authenticationEnabled","useWatch","name","defaultValue","save","form","savedRealm","smtpServer","port","realms","update","AlertVariant","success","testConnection","toNumber","Number","toBoolean","toString","valueMapper","Map","serverSettings","key","mapperFn","entries","testSMTPConnection","PageSection","FormPanel","FormAccess","FormGroup","from","KeycloakTextInput","pattern","emailRegexPattern","required","HelpItem","replyTo","host","Controller","field","Checkbox","onChange","Switch","user","password","PasswordInput","ActionGroup","ActionListItem","Button","test","email","Alert","userName","username","AlertActionLink","Link","toUser","id","tab","EventsTypeTable","loader","addTypes","onSelect","onDelete","DescriptionCell","Fragment","KeycloakDataTable","ToolbarItem","title","onRowClick","displayKey","cellFormatters","data","cellRenderer","ListEmptyState","AddEventTypesDialog","onConfirm","onClose","configured","enums","useServerInfo","selectedTypes","setSelectedTypes","Modal","ModalVariant","medium","selected","Promise","resolve","filter","type","includes","map","EventConfigForm","clear","setValue","isDirty","eventKey","eventsEnabled","toggleDisableDialog","DisableConfirm","useConfirmDialog","titleKey","messageKey","continueButtonLabel","TimeSelector","Divider","EventListenersForm","selectEventListenerOpen","setSelectEventListenerOpen","eventListeners","providers","eventsListener","Select","numChips","expandedText","collapsedText","SelectVariant","typeaheadMulti","isOpen","_","selectedValue","option","changedValue","item","operation","stopPropagation","Object","keys","SelectOption","EventsTab","setKey","refresh","Date","getTime","tableKey","setTableKey","reload","activeTab","setActiveTab","events","setEvents","setType","addEventType","setAddEventType","setupForm","eventConfig","toggleDeleteDialog","DeleteConfirm","continueButtonVariant","ButtonVariant","danger","clearAdminEvents","clearEvents","getConfigEvents","adminEventsExpiration","attributes","config","updatedEventListener","isEqual","eventsListeners","updateConfigEvents","addEventTypes","eventTypes","eventsTypes","enabledEvents","enabledEventTypes","concat","addEvents","Tabs","Tab","TabTitleText","e","RealmSettingsGeneralTab","isFeatureEnabled","useIsFeatureEnabled","open","setOpen","requireSslTypes","convertToFormValues","result","JSON","parse","flatMap","convertAttributeNameToForm","message","ClipboardCopy","single","sslType","FormProvider","KeyValueInput","Feature","DeclarativeUserProfile","Stack","StackItem","FormattedLink","addTrailingSlash","baseUrl","FILTER_OPTIONS","SelectFilter","onFilter","filterType","setFilterType","filterDropdownOpen","toggleFilter","FilterIcon","find","o","KeysListTab","realmComponents","navigate","useNavigate","publicKey","setPublicKey","certificate","setCertificate","keyData","setKeyData","filteredKeyData","setFilteredKeyData","getKeys","provider","component","providerId","togglePublicKeyDialog","PublicKeyDialog","slice","primary","toggleCertificateDialog","CertificateDialog","ProviderRenderer","ButtonRenderer","default","status","emptyFormatter","transforms","cellWidth","toKeysTab","KeycloakSpinner","KeyProviderModal","providerType","KeyProviderForm","KeysProvidersTab","searchVal","setSearchVal","filteredComponents","setFilteredComponents","isCreateModalOpen","handleModalToggle","keyProviderComponentTypes","componentTypes","KEY_PROVIDER_TYPE","providerTypes","providerDropdownOpen","setProviderDropdownOpen","defaultUIDisplayName","setDefaultUIDisplayName","selectedComponent","setSelectedComponent","components","useMemo","componentType","providerDescription","helpText","del","onSearch","handleKeyDown","handleInputChange","Toolbar","ToolbarGroup","InputGroup","SearchIcon","Dropdown","DropdownToggle","val","DropdownItem","DraggableTable","length","itemOrder","updateAll","componentToSave","priority","indexOf","all","toKeyProvider","onClick","_key","_idx","sortByPriority","sort","a","b","priorityA","priorityB","isNaN","KeysTab","setRealmComponents","useTab","useRoutableTab","listTab","providersTab","RoutableTabs","AddMessageBundleModal","small","link","Form","ValidatedOptions","localeToDisplayName","locale","Intl","DisplayNames","of","LocalizationTab","addMessageBundleModalOpen","setAddMessageBundleModalOpen","supportedLocalesOpen","setSupportedLocalesOpen","defaultLocaleOpen","setDefaultLocaleOpen","setFilterDropdownOpen","selectMenuLocale","setSelectMenuLocale","DEFAULT_LOCALE","selectMenuValueSelected","setSelectMenuValueSelected","messageBundles","setMessageBundles","tableRows","setTableRows","themeTypes","themes","allLocales","locales","values","theme","Array","Set","bundleForm","mode","currentRealm","defaultSupportedLocales","supportedLocales","watchSupportedLocales","internationalizationEnabled","max","setMax","first","setFirst","setFilter","refreshTable","getRealmLocalizationTexts","selectedLocale","getLocale","catch","searchInBundles","idx","i","filtered","fromEntries","bundles","updatedRows","messageBundle","rowEditBtnAriaLabel","rowSaveBtnAriaLabel","rowCancelBtnAriaLabel","cells","evt","prev","newRows","cloneDeep","textCell","updateEditableRows","validationErrors","newRow","invalid","validateCellEdits","RowEditAction","cancelCellEdits","applyCellEdits","addLocalization","options","SelectGroup","addKeyValue","pair","setConfig","deleteKey","deleteRealmLocalizationTexts","v","defaultLocale","TextContent","PaginatingTableToolbar","search","isExpanded","Table","TableVariant","compact","_b","validation","row","TableHeader","TableBody","RealmSettingsLoginTab","updateSwitchValue","switches","isArray","reduce","s","assign","switch","registrationAllowed","resetPasswordAllowed","rememberMe","registrationEmailAsUsername","duplicateEmailsAllowed","loginWithEmailAllowed","verifyEmail","editUsernameAllowed","PartialExportDialog","exportGroupsAndRoles","setExportGroupsAndRoles","exportClients","setExportClients","isExporting","setIsExporting","showWarning","exportRealm","realmExport","export","saveAs","Blob","prettyPrintJSON","Text","INITIAL_RESOURCES","users","clients","groups","identityProviders","realmRoles","clientRoles","PartialImportDialog","importedFile","setImportedFile","isFileSelected","isRealmSelectOpen","setIsRealmSelectOpen","isCollisionSelectOpen","setIsCollisionSelectOpen","importInProgress","setImportInProgress","collisionOption","setCollisionOption","targetRealm","setTargetRealm","importResponse","setImportResponse","resourcesToImport","setResourcesToImport","isAnyResourceChecked","some","checked","resetResourcesToImport","resetInputState","useEffect","handleFileChange","handleRealmSelect","handleResourceCheckBox","resource","currentTarget","realmSelectOptions","handleCollisionSelect","collisionOptions","targetHasResources","targetHasResource","targetHasRealmRoles","targetHasClientRoles","roles","client","itemCount","clientRolesCount","total","role","resourceDataListItem","resourceDisplayName","DataListItem","DataListItemRow","DataListItemCells","DataListCell","jsonForImport","jsonToImport","ifResourceExists","doImport","importResults","partialImport","rep","importModal","toggleDialog","JsonFileUpload","DataList","importCompleteMessage","count","added","skipped","overwritten","last","Math","min","results","ActionLabel","importRecord","action","Label","TypeRenderer","typeMap","get","resourceType","importCompletedModal","PoliciesTab","show","setShow","policies","setPolicies","selectedPolicy","setSelectedPolicy","code","setCode","tablePolicies","setTablePolicies","clientPolicies","listPolicies","saveStatus","switchValues","updatedPolicies","policy","enabled","updatePolicy","toClientPolicies","ClientPolicyDetailLink","toEditClientPolicy","policyName","SwitchRenderer","clientPolicy","obj","console","warn","Flex","FlexItem","Title","Radio","CodeEditor","Language","json","toAddClientPolicy","ProfilesTab","tableProfiles","setTableProfiles","globalProfiles","setGlobalProfiles","selectedProfile","setSelectedProfile","listProfiles","includeGlobalProfiles","allProfiles","global","profiles","allClientProfiles","stringify","normalizeProfile","profile","omit","profileName","updatedProfiles","createProfiles","cellFormatter","toClientProfile","changedProfiles","changedGlobalProfiles","toAddClientProfile","HelpLinkTextInput","fieldName","url","useFormContext","substr","Trans","HeadersForm","Time","style","BruteForceDetection","enable","permanentLockout","NumberInput","target","SecurityDefenses","RealmSettingsSessionsTab","offlineSessionMaxEnabled","ssoSessionIdleTimeout","RealmSettingsThemesTab","loginThemeOpen","setLoginThemeOpen","accountThemeOpen","setAccountThemeOpen","adminUIThemeOpen","setAdminUIThemeOpen","emailThemeOpen","setEmailThemeOpen","login","account","admin","RealmSettingsTokensTab","serverInfo","defaultSigAlgDrpdwnIsOpen","setDefaultSigAlgDrpdwnOpen","allComponentTypes","esOptions","hmacAlgorithmOptions","properties","javaKeystoreAlgOptions","defaultSigAlgOptions","offlineSessionMaxLifespanEnabled","revokeRefreshToken","p","time","toHumanFormat","TextVariants","h1","AttributesGroupTab","useUserProfile","groupToDelete","setGroupToDelete","children","group","successMessageKey","errorMessageKey","deleteAttributeGroup","toNewAttributesGroup","toEditAttributesGroup","RESTRICTED_ATTRIBUTES","AttributesTab","isFilterTypeDropdownOpen","toggleIsFilterTypeDropdownOpen","setData","attributeToDelete","setAttributeToDelete","executeMove","attribute","newIndex","fromIndex","findIndex","attr","movedAttribute","splice","updatedAttributes","attributeName","toAttribute","ToolbarContent","toAddAttribute","nameDragged","items","oldIndex","dragged","isActionable","JsonEditorTab","isSaving","editor","setEditor","resetCode","handleSave","getValue","UserProfileTab","toUserProfile","attributesTab","attributesGroupTab","jsonEditorTab","UserProfileProvider","DefaultsGroupsTab","isKebabOpen","toggleKebab","isGroupPickerOpen","toggleGroupPicker","defaultGroups","setDefaultGroups","selectedRows","setSelectedRows","load","setLoad","useHelp","getDefaultGroups","removeGroup","removeDefaultGroup","addGroups","addDefaultGroup","toggleRemoveDialog","RemoveDialog","GroupPickerDialog","ok","Popover","toUserFederation","paddingLeft","QuestionCircleIcon","rows","KebabToggle","UserRegistration","findOne","addComposites","composites","compositeArray","createComposite","roleId","defaultRole","RoleMapping","r","RealmSettingsHeader","refreshRealms","useRealms","partialImportOpen","setPartialImportOpen","partialExportOpen","setPartialExportOpen","toDashboard","environment","masterRealm","ViewHeader","helpUrls","realmSettingsUrl","DropdownSeparator","RealmSettingsTabs","refreshHeader","convertFormValuesToObject","toRealmSettings","generalTab","loginTab","emailTab","themesTab","keysTab","eventsTab","localizationTab","securityDefensesTab","sessionsTab","tokensTab","clientPoliciesTab","userProfileTab","userRegistrationTab","useClientPoliciesTab","clientPoliciesProfilesTab","clientPoliciesPoliciesTab","Tooltip","userProfileEnabled","RealmSettingsSection","useParams"],"mappings":"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"}