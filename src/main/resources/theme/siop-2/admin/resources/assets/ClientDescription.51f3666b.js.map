{"version":3,"file":"ClientDescription.51f3666b.js","sources":["../../src/clients/add/CapabilityConfig.tsx","../../src/clients/ClientDescription.tsx"],"sourcesContent":["import {\n  Checkbox,\n  FormGroup,\n  Grid,\n  GridItem,\n  InputGroup,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\n\nimport \"./capability-config.css\";\n\ntype CapabilityConfigProps = {\n  unWrap?: boolean;\n  protocol?: string;\n};\n\nexport const CapabilityConfig = ({\n  unWrap,\n  protocol: type,\n}: CapabilityConfigProps) => {\n  const { t } = useTranslation(\"clients\");\n  const { control, watch, setValue } = useFormContext<FormFields>();\n  const protocol = type || watch(\"protocol\");\n  const clientAuthentication = watch(\"publicClient\");\n  const authorization = watch(\"authorizationServicesEnabled\");\n\n  return (\n    <FormAccess\n      isHorizontal\n      role=\"manage-clients\"\n      unWrap={unWrap}\n      className=\"keycloak__capability-config__form\"\n      data-testid=\"capability-config-form\"\n    >\n      {protocol === \"openid-connect\" && (\n        <>\n          <FormGroup\n            hasNoPaddingTop\n            label={t(\"clientAuthentication\")}\n            fieldId=\"kc-authentication\"\n            labelIcon={\n              <HelpItem\n                helpText=\"clients-help:authentication\"\n                fieldLabelId=\"clients:authentication\"\n              />\n            }\n          >\n            <Controller\n              name=\"publicClient\"\n              defaultValue={false}\n              control={control}\n              render={({ field }) => (\n                <Switch\n                  data-testid=\"authentication\"\n                  id=\"kc-authentication-switch\"\n                  label={t(\"common:on\")}\n                  labelOff={t(\"common:off\")}\n                  isChecked={!field.value}\n                  onChange={(value) => {\n                    field.onChange(!value);\n                    if (!value) {\n                      setValue(\"authorizationServicesEnabled\", false);\n                      setValue(\"serviceAccountsEnabled\", false);\n                      setValue(\n                        convertAttributeNameToForm<FormFields>(\n                          \"attributes.oidc.ciba.grant.enabled\"\n                        ),\n                        false\n                      );\n                    }\n                  }}\n                  aria-label={t(\"clientAuthentication\")}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            hasNoPaddingTop\n            label={t(\"clientAuthorization\")}\n            fieldId=\"kc-authorization\"\n            labelIcon={\n              <HelpItem\n                helpText=\"clients-help:authorization\"\n                fieldLabelId=\"clients:authorization\"\n              />\n            }\n          >\n            <Controller\n              name=\"authorizationServicesEnabled\"\n              defaultValue={false}\n              control={control}\n              render={({ field }) => (\n                <Switch\n                  data-testid=\"authorization\"\n                  id=\"kc-authorization-switch\"\n                  label={t(\"common:on\")}\n                  labelOff={t(\"common:off\")}\n                  isChecked={field.value && !clientAuthentication}\n                  onChange={(value) => {\n                    field.onChange(value);\n                    if (value) {\n                      setValue(\"serviceAccountsEnabled\", true);\n                    }\n                  }}\n                  isDisabled={clientAuthentication}\n                  aria-label={t(\"clientAuthorization\")}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            hasNoPaddingTop\n            label={t(\"authenticationFlow\")}\n            fieldId=\"kc-flow\"\n          >\n            <Grid id=\"authenticationFlowGrid\">\n              <GridItem lg={4} sm={6}>\n                <Controller\n                  name=\"standardFlowEnabled\"\n                  defaultValue={true}\n                  control={control}\n                  render={({ field }) => (\n                    <InputGroup>\n                      <Checkbox\n                        data-testid=\"standard\"\n                        label={t(\"standardFlow\")}\n                        id=\"kc-flow-standard\"\n                        isChecked={field.value?.toString() === \"true\"}\n                        onChange={field.onChange}\n                      />\n                      <HelpItem\n                        helpText=\"clients-help:standardFlow\"\n                        fieldLabelId=\"clients:standardFlow\"\n                      />\n                    </InputGroup>\n                  )}\n                />\n              </GridItem>\n              <GridItem lg={8} sm={6}>\n                <Controller\n                  name=\"directAccessGrantsEnabled\"\n                  defaultValue={true}\n                  control={control}\n                  render={({ field }) => (\n                    <InputGroup>\n                      <Checkbox\n                        data-testid=\"direct\"\n                        label={t(\"directAccess\")}\n                        id=\"kc-flow-direct\"\n                        isChecked={field.value}\n                        onChange={field.onChange}\n                      />\n                      <HelpItem\n                        helpText=\"clients-help:directAccess\"\n                        fieldLabelId=\"clients:directAccess\"\n                      />\n                    </InputGroup>\n                  )}\n                />\n              </GridItem>\n              <GridItem lg={4} sm={6}>\n                <Controller\n                  name=\"implicitFlowEnabled\"\n                  defaultValue={true}\n                  control={control}\n                  render={({ field }) => (\n                    <InputGroup>\n                      <Checkbox\n                        data-testid=\"implicit\"\n                        label={t(\"implicitFlow\")}\n                        id=\"kc-flow-implicit\"\n                        isChecked={field.value?.toString() === \"true\"}\n                        onChange={field.onChange}\n                      />\n                      <HelpItem\n                        helpText=\"clients-help:implicitFlow\"\n                        fieldLabelId=\"clients:implicitFlow\"\n                      />\n                    </InputGroup>\n                  )}\n                />\n              </GridItem>\n              <GridItem lg={8} sm={6}>\n                <Controller\n                  name=\"serviceAccountsEnabled\"\n                  defaultValue={false}\n                  control={control}\n                  render={({ field }) => (\n                    <InputGroup>\n                      <Checkbox\n                        data-testid=\"service-account\"\n                        label={t(\"serviceAccount\")}\n                        id=\"kc-flow-service-account\"\n                        isChecked={\n                          field.value?.toString() === \"true\" ||\n                          (clientAuthentication && authorization)\n                        }\n                        onChange={field.onChange}\n                        isDisabled={\n                          (clientAuthentication && !authorization) ||\n                          (!clientAuthentication && authorization)\n                        }\n                      />\n                      <HelpItem\n                        helpText=\"clients-help:serviceAccount\"\n                        fieldLabelId=\"clients:serviceAccount\"\n                      />\n                    </InputGroup>\n                  )}\n                />\n              </GridItem>\n              <GridItem lg={8} sm={6}>\n                <Controller\n                  name={convertAttributeNameToForm<\n                    Required<ClientRepresentation[\"attributes\"]>\n                  >(\"attributes.oauth2.device.authorization.grant.enabled\")}\n                  defaultValue={false}\n                  control={control}\n                  render={({ field }) => (\n                    <InputGroup>\n                      <Checkbox\n                        data-testid=\"oauth-device-authorization-grant\"\n                        label={t(\"oauthDeviceAuthorizationGrant\")}\n                        id=\"kc-oauth-device-authorization-grant\"\n                        name=\"oauth2.device.authorization.grant.enabled\"\n                        isChecked={field.value.toString() === \"true\"}\n                        onChange={field.onChange}\n                      />\n                      <HelpItem\n                        helpText=\"clients-help:oauthDeviceAuthorizationGrant\"\n                        fieldLabelId=\"clients:oauthDeviceAuthorizationGrant\"\n                      />\n                    </InputGroup>\n                  )}\n                />\n              </GridItem>\n              <GridItem lg={8} sm={6}>\n                <Controller\n                  name={convertAttributeNameToForm<FormFields>(\n                    \"attributes.oidc.ciba.grant.enabled\"\n                  )}\n                  defaultValue={false}\n                  control={control}\n                  render={({ field }) => (\n                    <InputGroup>\n                      <Checkbox\n                        data-testid=\"oidc-ciba-grant\"\n                        label={t(\"oidcCibaGrant\")}\n                        id=\"kc-oidc-ciba-grant\"\n                        name=\"oidc.ciba.grant.enabled\"\n                        isChecked={field.value.toString() === \"true\"}\n                        onChange={field.onChange}\n                        isDisabled={clientAuthentication}\n                      />\n                      <HelpItem\n                        helpText=\"clients-help:oidcCibaGrant\"\n                        fieldLabelId=\"clients:oidcCibaGrant\"\n                      />\n                    </InputGroup>\n                  )}\n                />\n              </GridItem>\n            </Grid>\n          </FormGroup>\n        </>\n      )}\n      {protocol === \"saml\" && (\n        <>\n          <FormGroup\n            labelIcon={\n              <HelpItem\n                helpText=\"clients-help:encryptAssertions\"\n                fieldLabelId=\"clients:encryptAssertions\"\n              />\n            }\n            label={t(\"encryptAssertions\")}\n            fieldId=\"kc-encrypt\"\n            hasNoPaddingTop\n          >\n            <Controller\n              name={convertAttributeNameToForm<FormFields>(\n                \"attributes.saml.encrypt\"\n              )}\n              control={control}\n              defaultValue={false}\n              render={({ field }) => (\n                <Switch\n                  data-testid=\"encrypt\"\n                  id=\"kc-encrypt\"\n                  label={t(\"common:on\")}\n                  labelOff={t(\"common:off\")}\n                  isChecked={field.value}\n                  onChange={field.onChange}\n                  aria-label={t(\"encryptAssertions\")}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            labelIcon={\n              <HelpItem\n                helpText=\"clients-help:clientSignature\"\n                fieldLabelId=\"clients:clientSignature\"\n              />\n            }\n            label={t(\"clientSignature\")}\n            fieldId=\"kc-client-signature\"\n            hasNoPaddingTop\n          >\n            <Controller\n              name={convertAttributeNameToForm<FormFields>(\n                \"attributes.saml.client.signature\"\n              )}\n              control={control}\n              defaultValue={false}\n              render={({ field }) => (\n                <Switch\n                  data-testid=\"client-signature\"\n                  id=\"kc-client-signature\"\n                  label={t(\"common:on\")}\n                  labelOff={t(\"common:off\")}\n                  isChecked={field.value}\n                  onChange={field.onChange}\n                  aria-label={t(\"clientSignature\")}\n                />\n              )}\n            />\n          </FormGroup>\n        </>\n      )}\n    </FormAccess>\n  );\n};\n","import { FormGroup, Switch, ValidatedOptions } from \"@patternfly/react-core\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../components/form-access/FormAccess\";\nimport { HelpItem } from \"../components/help-enabler/HelpItem\";\nimport { KeycloakTextArea } from \"../components/keycloak-text-area/KeycloakTextArea\";\nimport { KeycloakTextInput } from \"../components/keycloak-text-input/KeycloakTextInput\";\nimport { FormFields } from \"./ClientDetails\";\n\ntype ClientDescriptionProps = {\n  protocol?: string;\n  hasConfigureAccess?: boolean;\n};\n\nexport const ClientDescription = ({\n  hasConfigureAccess: configure,\n}: ClientDescriptionProps) => {\n  const { t } = useTranslation(\"clients\");\n  const {\n    register,\n    control,\n    formState: { errors },\n  } = useFormContext<FormFields>();\n  return (\n    <FormAccess role=\"manage-clients\" fineGrainedAccess={configure} unWrap>\n      <FormGroup\n        labelIcon={\n          <HelpItem helpText=\"clients-help:clientId\" fieldLabelId=\"clientId\" />\n        }\n        label={t(\"common:clientId\")}\n        fieldId=\"kc-client-id\"\n        helperTextInvalid={t(\"common:required\")}\n        validated={\n          errors.clientId ? ValidatedOptions.error : ValidatedOptions.default\n        }\n        isRequired\n      >\n        <KeycloakTextInput\n          {...register(\"clientId\", { required: true })}\n          id=\"kc-client-id\"\n          data-testid=\"kc-client-id\"\n          validated={\n            errors.clientId ? ValidatedOptions.error : ValidatedOptions.default\n          }\n        />\n      </FormGroup>\n      <FormGroup\n        labelIcon={\n          <HelpItem helpText=\"clients-help:clientName\" fieldLabelId=\"name\" />\n        }\n        label={t(\"common:name\")}\n        fieldId=\"kc-name\"\n      >\n        <KeycloakTextInput {...register(\"name\")} id=\"kc-name\" />\n      </FormGroup>\n      <FormGroup\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:description\"\n            fieldLabelId=\"description\"\n          />\n        }\n        label={t(\"common:description\")}\n        fieldId=\"kc-description\"\n        validated={\n          errors.description ? ValidatedOptions.error : ValidatedOptions.default\n        }\n        helperTextInvalid={errors.description?.message}\n      >\n        <KeycloakTextArea\n          {...register(\"description\", {\n            maxLength: {\n              value: 255,\n              message: t(\"common:maxLength\", { length: 255 }),\n            },\n          })}\n          id=\"kc-description\"\n          validated={\n            errors.description\n              ? ValidatedOptions.error\n              : ValidatedOptions.default\n          }\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"alwaysDisplayInUI\")}\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:alwaysDisplayInUI\"\n            fieldLabelId=\"clients:alwaysDisplayInUI\"\n          />\n        }\n        fieldId=\"kc-always-display-in-ui\"\n        hasNoPaddingTop\n      >\n        <Controller\n          name=\"alwaysDisplayInConsole\"\n          defaultValue={false}\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"kc-always-display-in-ui-switch\"\n              label={t(\"common:on\")}\n              labelOff={t(\"common:off\")}\n              isChecked={field.value}\n              onChange={field.onChange}\n              aria-label={t(\"alwaysDisplayInUI\")}\n            />\n          )}\n        />\n      </FormGroup>\n    </FormAccess>\n  );\n};\n"],"names":["CapabilityConfig","unWrap","protocol","type","t","useTranslation","control","watch","setValue","useFormContext","clientAuthentication","authorization","FormAccess","_Fragment","_jsx","FormGroup","HelpItem","Controller","field","Switch","value","onChange","convertAttributeNameToForm","Grid","GridItem","InputGroup","Checkbox","toString","ClientDescription","hasConfigureAccess","configure","register","formState","errors","clientId","ValidatedOptions","error","default","KeycloakTextInput","required","description","message","KeycloakTextArea","maxLength","length"],"mappings":"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"}