{"version":3,"file":"ClientDetails.d4a82208.js","sources":["../../../../node_modules/@patternfly/react-styles/css/components/CodeBlock/code-block.mjs","../../../../node_modules/@patternfly/react-core/dist/esm/components/CodeBlock/CodeBlock.js","../../../../node_modules/@patternfly/react-core/dist/esm/components/CodeBlock/CodeBlockAction.js","../../../../node_modules/@patternfly/react-core/dist/esm/components/Text/TextList.js","../../../../node_modules/@patternfly/react-core/dist/esm/components/Text/TextListItem.js","../../src/components/download-dialog/DownloadDialog.tsx","../../src/clients/advanced/TokenLifespan.tsx","../../src/clients/advanced/AdvancedSettings.tsx","../../src/clients/advanced/AuthenticationOverrides.tsx","../../src/clients/advanced/AddHostDialog.tsx","../../src/clients/advanced/ClusteringPanel.tsx","../../src/clients/advanced/ApplicationUrls.tsx","../../src/clients/advanced/FineGrainOpenIdConnect.tsx","../../src/clients/advanced/FineGrainSamlEndpointConfig.tsx","../../src/clients/advanced/OpenIdConnectCompatibilityModes.tsx","../../src/clients/advanced/RevocationPanel.tsx","../../src/clients/AdvancedTab.tsx","../../src/clients/authorization/AuthorizationEvaluateResourcePolicies.tsx","../../src/clients/authorization/AuthorizationEvaluateResource.tsx","../../src/clients/authorization/AuthorizationDataModal.tsx","../../src/clients/authorization/evaluate/Results.tsx","../../src/clients/authorization/KeyBasedAttributeInput.tsx","../../src/clients/authorization/AuthorizationEvaluate.tsx","../../src/clients/authorization/AuthorizationExport.tsx","../../src/clients/authorization/SearchDropdown.tsx","../../src/clients/authorization/MoreLabel.tsx","../../src/clients/authorization/DetailDescription.tsx","../../src/clients/authorization/EmptyPermissionsState.tsx","../../src/clients/authorization/Permissions.tsx","../../src/clients/authorization/NewPolicyDialog.tsx","../../src/clients/authorization/Policies.tsx","../../src/clients/authorization/DetailCell.tsx","../../src/clients/authorization/Resources.tsx","../../src/clients/authorization/Scopes.tsx","../../src/clients/advanced/SaveReset.tsx","../../src/clients/authorization/ImportDialog.tsx","../../src/clients/authorization/Settings.tsx","../../src/clients/ClientSessions.tsx","../../src/clients/add/SamlConfig.tsx","../../src/clients/add/SamlSignature.tsx","../../src/clients/add/AccessSettings.tsx","../../src/clients/add/LoginSettingsPanel.tsx","../../src/clients/add/LogoutPanel.tsx","../../src/clients/ClientSettings.tsx","../../src/clients/scopes/CopyToClipboardButton.tsx","../../src/clients/credentials/ClientSecret.tsx","../../src/clients/credentials/SignedJWT.tsx","../../src/clients/credentials/X509.tsx","../../src/clients/credentials/Credentials.tsx","../../src/clients/keys/Certificate.tsx","../../src/clients/keys/StoreSettings.tsx","../../src/clients/keys/GenerateKeyDialog.tsx","../../src/clients/keys/ImportKeyDialog.tsx","../../src/clients/keys/Keys.tsx","../../src/clients/keys/ExportSamlKeyDialog.tsx","../../src/clients/keys/SamlKeysDialog.tsx","../../src/clients/keys/SamlImportKeyDialog.tsx","../../src/clients/keys/SamlKeys.tsx","../../src/clients/scopes/ClientScopes.tsx","../../src/clients/scopes/GeneratedCodeTab.tsx","../../src/clients/scopes/EvaluateScopes.tsx","../../src/clients/service-account/ServiceAccount.tsx","../../src/clients/ClientDetails.tsx"],"sourcesContent":["import './code-block.css';\nexport default {\n  \"codeBlock\": \"pf-c-code-block\",\n  \"codeBlockActions\": \"pf-c-code-block__actions\",\n  \"codeBlockCode\": \"pf-c-code-block__code\",\n  \"codeBlockContent\": \"pf-c-code-block__content\",\n  \"codeBlockHeader\": \"pf-c-code-block__header\",\n  \"codeBlockPre\": \"pf-c-code-block__pre\"\n};","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/CodeBlock/code-block';\nimport { css } from '@patternfly/react-styles';\nexport const CodeBlock = (_a) => {\n    var { children = null, className, actions = null } = _a, props = __rest(_a, [\"children\", \"className\", \"actions\"]);\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.codeBlock, className) }, props),\n        React.createElement(\"div\", { className: css(styles.codeBlockHeader) },\n            React.createElement(\"div\", { className: css(styles.codeBlockActions) }, actions && actions)),\n        React.createElement(\"div\", { className: css(styles.codeBlockContent) }, children)));\n};\nCodeBlock.displayName = 'CodeBlock';\n//# sourceMappingURL=CodeBlock.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nexport const CodeBlockAction = (_a) => {\n    var { children = null, className } = _a, props = __rest(_a, [\"children\", \"className\"]);\n    return (React.createElement(\"div\", Object.assign({ className: css('pf-c-code-block__actions-item', className) }, props), children));\n};\nCodeBlockAction.displayName = 'CodeBlockAction';\n//# sourceMappingURL=CodeBlockAction.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Content/content';\nimport { css } from '@patternfly/react-styles';\nexport var TextListVariants;\n(function (TextListVariants) {\n    TextListVariants[\"ul\"] = \"ul\";\n    TextListVariants[\"ol\"] = \"ol\";\n    TextListVariants[\"dl\"] = \"dl\";\n})(TextListVariants || (TextListVariants = {}));\nexport const TextList = (_a) => {\n    var { children = null, className = '', component = TextListVariants.ul, isPlain = false } = _a, props = __rest(_a, [\"children\", \"className\", \"component\", \"isPlain\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({}, props, { className: css(isPlain && styles.modifiers.plain, className) }), children));\n};\nTextList.displayName = 'TextList';\n//# sourceMappingURL=TextList.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nexport var TextListItemVariants;\n(function (TextListItemVariants) {\n    TextListItemVariants[\"li\"] = \"li\";\n    TextListItemVariants[\"dt\"] = \"dt\";\n    TextListItemVariants[\"dd\"] = \"dd\";\n})(TextListItemVariants || (TextListItemVariants = {}));\nexport const TextListItem = (_a) => {\n    var { children = null, className = '', component = TextListItemVariants.li } = _a, props = __rest(_a, [\"children\", \"className\", \"component\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({}, props, { className: css(className) }), children));\n};\nTextListItem.displayName = 'TextListItem';\n//# sourceMappingURL=TextListItem.js.map","import {\n  Alert,\n  AlertVariant,\n  Form,\n  FormGroup,\n  ModalVariant,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Stack,\n  StackItem,\n} from \"@patternfly/react-core\";\nimport { saveAs } from \"file-saver\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { addTrailingSlash, prettyPrintJSON } from \"../../util\";\nimport { getAuthorizationHeaders } from \"../../utils/getAuthorizationHeaders\";\nimport { ConfirmDialogModal } from \"../confirm-dialog/ConfirmDialog\";\nimport { useHelp } from \"../help-enabler/HelpHeader\";\nimport { HelpItem } from \"../help-enabler/HelpItem\";\nimport { KeycloakTextArea } from \"../keycloak-text-area/KeycloakTextArea\";\n\ntype DownloadDialogProps = {\n  id: string;\n  protocol?: string;\n  open: boolean;\n  toggleDialog: () => void;\n};\n\nexport const DownloadDialog = ({\n  id,\n  open,\n  toggleDialog,\n  protocol = \"openid-connect\",\n}: DownloadDialogProps) => {\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n  const { t } = useTranslation(\"common\");\n  const { enabled } = useHelp();\n  const serverInfo = useServerInfo();\n\n  const configFormats = serverInfo.clientInstallations![protocol];\n  const [selected, setSelected] = useState(\n    configFormats[configFormats.length - 1].id\n  );\n  const [snippet, setSnippet] = useState<string | ArrayBuffer>();\n  const [openType, setOpenType] = useState(false);\n\n  const selectedConfig = useMemo(\n    () => configFormats.find((config) => config.id === selected) ?? null,\n    [selected]\n  );\n\n  const sanitizeSnippet = (snippet: string) =>\n    snippet.replace(\n      /<PrivateKeyPem>.*<\\/PrivateKeyPem>/gs,\n      `<PrivateKeyPem>${t(\"clients:privateKeyMask\")}</PrivateKeyPem>`\n    );\n\n  useFetch(\n    async () => {\n      if (selectedConfig?.mediaType === \"application/zip\") {\n        const response = await fetch(\n          `${addTrailingSlash(\n            adminClient.baseUrl\n          )}admin/realms/${realm}/clients/${id}/installation/providers/${selected}`,\n          {\n            method: \"GET\",\n            headers: getAuthorizationHeaders(\n              await adminClient.getAccessToken()\n            ),\n          }\n        );\n\n        return response.arrayBuffer();\n      } else {\n        const snippet = await adminClient.clients.getInstallationProviders({\n          id,\n          providerId: selected,\n        });\n        if (typeof snippet === \"string\") {\n          return sanitizeSnippet(snippet);\n        } else {\n          return prettyPrintJSON(snippet);\n        }\n      }\n    },\n    (snippet) => setSnippet(snippet),\n    [id, selected]\n  );\n\n  // Clear snippet when selected config changes, this prevents old snippets from being displayed during fetch.\n  useEffect(() => setSnippet(\"\"), [id, selected]);\n\n  return (\n    <ConfirmDialogModal\n      titleKey={t(\"clients:downloadAdaptorTitle\")}\n      continueButtonLabel={t(\"download\")}\n      onConfirm={() => {\n        saveAs(\n          new Blob([snippet!], { type: selectedConfig?.mediaType }),\n          selectedConfig?.filename\n        );\n      }}\n      open={open}\n      toggleDialog={toggleDialog}\n      variant={ModalVariant.medium}\n    >\n      <Form>\n        <Stack hasGutter>\n          {enabled && (\n            <StackItem>\n              <Alert\n                id={id}\n                title={t(\"clients:description\")}\n                variant={AlertVariant.info}\n                isInline\n              >\n                {\n                  configFormats.find(\n                    (configFormat) => configFormat.id === selected\n                  )?.helpText\n                }\n              </Alert>\n            </StackItem>\n          )}\n          <StackItem>\n            <FormGroup\n              fieldId=\"type\"\n              label={t(\"clients:formatOption\")}\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"clients-help:downloadType\")}\n                  fieldLabelId=\"clients:formatOption\"\n                />\n              }\n            >\n              <Select\n                toggleId=\"type\"\n                isOpen={openType}\n                onToggle={(isExpanded) => setOpenType(isExpanded)}\n                variant={SelectVariant.single}\n                value={selected}\n                selections={selected}\n                onSelect={(_, value) => {\n                  setSelected(value.toString());\n                  setOpenType(false);\n                }}\n                aria-label=\"Select Input\"\n                menuAppendTo={() => document.body}\n              >\n                {configFormats.map((configFormat) => (\n                  <SelectOption\n                    key={configFormat.id}\n                    value={configFormat.id}\n                    isSelected={selected === configFormat.id}\n                  >\n                    {configFormat.displayType}\n                  </SelectOption>\n                ))}\n              </Select>\n            </FormGroup>\n          </StackItem>\n          {!selectedConfig?.downloadOnly && (\n            <StackItem isFilled>\n              <FormGroup\n                fieldId=\"details\"\n                label={t(\"details\")}\n                labelIcon={\n                  <HelpItem\n                    helpText={t(\"clients-help:details\")}\n                    fieldLabelId=\"clients:details\"\n                  />\n                }\n              >\n                <KeycloakTextArea\n                  id=\"details\"\n                  readOnly\n                  rows={12}\n                  resizeOrientation=\"vertical\"\n                  value={snippet && typeof snippet === \"string\" ? snippet : \"\"}\n                  aria-label=\"text area example\"\n                />\n              </FormGroup>\n            </StackItem>\n          )}\n        </Stack>\n      </Form>\n    </ConfirmDialogModal>\n  );\n};\n","import {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Split,\n  SplitItem,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport {\n  TimeSelector,\n  Unit,\n} from \"../../components/time-selector/TimeSelector\";\n\ntype TokenLifespanProps = {\n  id: string;\n  name: string;\n  defaultValue?: number;\n  units?: Unit[];\n};\n\nconst inherited = \"tokenLifespan.inherited\";\nconst never = \"tokenLifespan.never\";\nconst expires = \"tokenLifespan.expires\";\n\nexport const TokenLifespan = ({\n  id,\n  name,\n  defaultValue,\n  units,\n}: TokenLifespanProps) => {\n  const { t } = useTranslation(\"clients\");\n  const [open, setOpen] = useState(false);\n\n  const [focused, setFocused] = useState(false);\n  const onFocus = () => setFocused(true);\n  const onBlur = () => setFocused(false);\n\n  const { control } = useFormContext();\n  const isExpireSet = (value: string | number) =>\n    (typeof value === \"number\" && value !== -1) ||\n    (typeof value === \"string\" && value !== \"\" && value !== \"-1\") ||\n    focused;\n\n  return (\n    <FormGroup\n      label={t(id)}\n      fieldId={id}\n      labelIcon={\n        <HelpItem\n          helpText={`clients-help:${id}`}\n          fieldLabelId={`clients:${id}`}\n        />\n      }\n    >\n      <Controller\n        name={name}\n        defaultValue=\"\"\n        control={control}\n        render={({ field }) => (\n          <Split hasGutter>\n            <SplitItem>\n              <Select\n                variant={SelectVariant.single}\n                onToggle={setOpen}\n                isOpen={open}\n                onSelect={(_, value) => {\n                  field.onChange(value);\n                  setOpen(false);\n                }}\n                selections={[\n                  isExpireSet(field.value)\n                    ? t(expires)\n                    : field.value === \"\"\n                    ? t(inherited)\n                    : t(never),\n                ]}\n              >\n                <SelectOption value=\"\">{t(inherited)}</SelectOption>\n                <SelectOption value={-1}>{t(never)}</SelectOption>\n                <SelectOption value={60}>{t(expires)}</SelectOption>\n              </Select>\n            </SplitItem>\n            <SplitItem>\n              {field.value !== \"-1\" && field.value !== -1 && (\n                <TimeSelector\n                  units={units}\n                  value={field.value === \"\" ? defaultValue : field.value}\n                  onChange={field.onChange}\n                  onFocus={onFocus}\n                  onBlur={onBlur}\n                  min={1}\n                  isDisabled={field.value === \"\"}\n                />\n              )}\n            </SplitItem>\n          </Split>\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  ActionGroup,\n  Button,\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { KeyValueInput } from \"../../components/key-value-form/KeyValueInput\";\nimport { MultiLineInput } from \"../../components/multi-line-input/MultiLineInput\";\nimport { TimeSelector } from \"../../components/time-selector/TimeSelector\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\nimport { TokenLifespan } from \"./TokenLifespan\";\n\ntype AdvancedSettingsProps = {\n  save: () => void;\n  reset: () => void;\n  protocol?: string;\n  hasConfigureAccess?: boolean;\n};\n\nexport const AdvancedSettings = ({\n  save,\n  reset,\n  protocol,\n  hasConfigureAccess,\n}: AdvancedSettingsProps) => {\n  const { t } = useTranslation(\"clients\");\n  const [open, setOpen] = useState(false);\n\n  const [realm, setRealm] = useState<RealmRepresentation>();\n  const { realm: realmName } = useRealm();\n  const { adminClient } = useAdminClient();\n\n  useFetch(\n    () => adminClient.realms.findOne({ realm: realmName }),\n    setRealm,\n    []\n  );\n\n  const { control, register } = useFormContext();\n  return (\n    <FormAccess\n      role=\"manage-realm\"\n      fineGrainedAccess={hasConfigureAccess}\n      isHorizontal\n    >\n      {protocol !== \"openid-connect\" && (\n        <FormGroup\n          label={t(\"assertionLifespan\")}\n          fieldId=\"assertionLifespan\"\n          labelIcon={\n            <HelpItem\n              helpText=\"clients-help:assertionLifespan\"\n              fieldLabelId=\"clients:assertionLifespan\"\n            />\n          }\n        >\n          <Controller\n            name={convertAttributeNameToForm<FormFields>(\n              \"attributes.saml.assertion.lifespan\"\n            )}\n            defaultValue=\"\"\n            control={control}\n            render={({ field }) => (\n              <TimeSelector\n                units={[\"minute\", \"day\", \"hour\"]}\n                value={field.value}\n                onChange={field.onChange}\n              />\n            )}\n          />\n        </FormGroup>\n      )}\n      {protocol === \"openid-connect\" && (\n        <>\n          <TokenLifespan\n            id=\"accessTokenLifespan\"\n            name={convertAttributeNameToForm(\n              \"attributes.access.token.lifespan\"\n            )}\n            defaultValue={realm?.accessTokenLifespan}\n            units={[\"minute\", \"day\", \"hour\"]}\n          />\n\n          <TokenLifespan\n            id=\"clientSessionIdle\"\n            name={convertAttributeNameToForm(\n              \"attributes.client.session.idle.timeout\"\n            )}\n            defaultValue={realm?.clientSessionIdleTimeout}\n            units={[\"minute\", \"day\", \"hour\"]}\n          />\n\n          <TokenLifespan\n            id=\"clientSessionMax\"\n            name={convertAttributeNameToForm(\n              \"attributes.client.session.max.lifespan\"\n            )}\n            defaultValue={realm?.clientSessionMaxLifespan}\n            units={[\"minute\", \"day\", \"hour\"]}\n          />\n\n          <TokenLifespan\n            id=\"clientOfflineSessionIdle\"\n            name={convertAttributeNameToForm(\n              \"attributes.client.offline.session.idle.timeout\"\n            )}\n            defaultValue={realm?.offlineSessionIdleTimeout}\n            units={[\"minute\", \"day\", \"hour\"]}\n          />\n\n          <TokenLifespan\n            id=\"clientOfflineSessionMax\"\n            name={convertAttributeNameToForm(\n              \"attributes.client.offline.session.max.lifespan\"\n            )}\n            defaultValue={realm?.offlineSessionMaxLifespan}\n            units={[\"minute\", \"day\", \"hour\"]}\n          />\n\n          <FormGroup\n            label={t(\"oAuthMutual\")}\n            fieldId=\"oAuthMutual\"\n            hasNoPaddingTop\n            labelIcon={\n              <HelpItem\n                helpText=\"clients-help:oAuthMutual\"\n                fieldLabelId=\"clients:oAuthMutual\"\n              />\n            }\n          >\n            <Controller\n              name=\"attributes.tls-client-certificate-bound-access-tokens\"\n              defaultValue={false}\n              control={control}\n              render={({ field }) => (\n                <Switch\n                  id=\"oAuthMutual-switch\"\n                  label={t(\"common:on\")}\n                  labelOff={t(\"common:off\")}\n                  isChecked={field.value === \"true\"}\n                  onChange={(value) => field.onChange(\"\" + value)}\n                  aria-label={t(\"oAuthMutual\")}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"keyForCodeExchange\")}\n            fieldId=\"keyForCodeExchange\"\n            hasNoPaddingTop\n            labelIcon={\n              <HelpItem\n                helpText=\"clients-help:keyForCodeExchange\"\n                fieldLabelId=\"clients:keyForCodeExchange\"\n              />\n            }\n          >\n            <Controller\n              name={convertAttributeNameToForm<FormFields>(\n                \"attributes.pkce.code.challenge.method\"\n              )}\n              defaultValue=\"\"\n              control={control}\n              render={({ field }) => (\n                <Select\n                  toggleId=\"keyForCodeExchange\"\n                  variant={SelectVariant.single}\n                  onToggle={setOpen}\n                  isOpen={open}\n                  onSelect={(_, value) => {\n                    field.onChange(value);\n                    setOpen(false);\n                  }}\n                  selections={[field.value || t(\"common:choose\")]}\n                >\n                  {[\"\", \"S256\", \"plain\"].map((v) => (\n                    <SelectOption key={v} value={v}>\n                      {v || t(\"common:choose\")}\n                    </SelectOption>\n                  ))}\n                </Select>\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"pushedAuthorizationRequestRequired\")}\n            fieldId=\"pushedAuthorizationRequestRequired\"\n            labelIcon={\n              <HelpItem\n                helpText=\"clients-help:pushedAuthorizationRequestRequired\"\n                fieldLabelId=\"clients:pushedAuthorizationRequestRequired\"\n              />\n            }\n          >\n            <Controller\n              name={convertAttributeNameToForm<FormFields>(\n                \"attributes.require.pushed.authorization.requests\"\n              )}\n              defaultValue=\"false\"\n              control={control}\n              render={({ field }) => (\n                <Switch\n                  id=\"pushedAuthorizationRequestRequired\"\n                  label={t(\"common:on\")}\n                  labelOff={t(\"common:off\")}\n                  isChecked={field.value === \"true\"}\n                  onChange={(value) => field.onChange(value.toString())}\n                  aria-label={t(\"pushedAuthorizationRequestRequired\")}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"acrToLoAMapping\")}\n            fieldId=\"acrToLoAMapping\"\n            labelIcon={\n              <HelpItem\n                helpText=\"clients-help:acrToLoAMapping\"\n                fieldLabelId=\"clients:acrToLoAMapping\"\n              />\n            }\n          >\n            <KeyValueInput\n              {...register(\n                convertAttributeNameToForm(\"attributes.acr.loa.map\")\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"defaultACRValues\")}\n            fieldId=\"defaultACRValues\"\n            labelIcon={\n              <HelpItem\n                helpText=\"clients-help:defaultACRValues\"\n                fieldLabelId=\"clients:defaultACRValues\"\n              />\n            }\n          >\n            <MultiLineInput\n              id=\"defaultACRValues\"\n              name={convertAttributeNameToForm(\"attributes.default.acr.values\")}\n              stringify\n            />\n          </FormGroup>\n        </>\n      )}\n      <ActionGroup>\n        <Button\n          variant=\"secondary\"\n          onClick={save}\n          data-testid=\"OIDCAdvancedSave\"\n        >\n          {t(\"common:save\")}\n        </Button>\n        <Button variant=\"link\" onClick={reset} data-testid=\"OIDCAdvancedRevert\">\n          {t(\"common:revert\")}\n        </Button>\n      </ActionGroup>\n    </FormAccess>\n  );\n};\n","import {\n  ActionGroup,\n  Button,\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { sortBy } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\n\ntype AuthenticationOverridesProps = {\n  save: () => void;\n  reset: () => void;\n  protocol?: string;\n  hasConfigureAccess?: boolean;\n};\n\nexport const AuthenticationOverrides = ({\n  protocol,\n  save,\n  reset,\n  hasConfigureAccess,\n}: AuthenticationOverridesProps) => {\n  const { adminClient } = useAdminClient();\n  const { t } = useTranslation(\"clients\");\n  const [flows, setFlows] = useState<JSX.Element[]>([]);\n  const [browserFlowOpen, setBrowserFlowOpen] = useState(false);\n  const [directGrantOpen, setDirectGrantOpen] = useState(false);\n\n  const { control } = useFormContext();\n\n  useFetch(\n    () => adminClient.authenticationManagement.getFlows(),\n    (flows) => {\n      let filteredFlows = [\n        ...flows.filter((flow) => flow.providerId !== \"client-flow\"),\n      ];\n      filteredFlows = sortBy(filteredFlows, [(f) => f.alias]);\n      setFlows([\n        <SelectOption key=\"empty\" value=\"\">\n          {t(\"common:choose\")}\n        </SelectOption>,\n        ...filteredFlows.map((flow) => (\n          <SelectOption key={flow.id} value={flow.id}>\n            {flow.alias}\n          </SelectOption>\n        )),\n      ]);\n    },\n    []\n  );\n\n  return (\n    <FormAccess\n      role=\"manage-clients\"\n      fineGrainedAccess={hasConfigureAccess}\n      isHorizontal\n    >\n      <FormGroup\n        label={t(\"browserFlow\")}\n        fieldId=\"browserFlow\"\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:browserFlow\"\n            fieldLabelId=\"clients:browserFlow\"\n          />\n        }\n      >\n        <Controller\n          name=\"authenticationFlowBindingOverrides.browser\"\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"browserFlow\"\n              variant={SelectVariant.single}\n              onToggle={setBrowserFlowOpen}\n              isOpen={browserFlowOpen}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setBrowserFlowOpen(false);\n              }}\n              selections={[field.value]}\n            >\n              {flows}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      {protocol === \"openid-connect\" && (\n        <FormGroup\n          label={t(\"directGrant\")}\n          fieldId=\"directGrant\"\n          labelIcon={\n            <HelpItem\n              helpText=\"clients-help:directGrant\"\n              fieldLabelId=\"clients:directGrant\"\n            />\n          }\n        >\n          <Controller\n            name=\"authenticationFlowBindingOverrides.direct_grant\"\n            defaultValue=\"\"\n            control={control}\n            render={({ field }) => (\n              <Select\n                toggleId=\"directGrant\"\n                variant={SelectVariant.single}\n                onToggle={setDirectGrantOpen}\n                isOpen={directGrantOpen}\n                onSelect={(_, value) => {\n                  field.onChange(value);\n                  setDirectGrantOpen(false);\n                }}\n                selections={[field.value]}\n              >\n                {flows}\n              </Select>\n            )}\n          />\n        </FormGroup>\n      )}\n      <ActionGroup>\n        <Button\n          variant=\"secondary\"\n          onClick={save}\n          data-testid=\"OIDCAuthFlowOverrideSave\"\n        >\n          {t(\"common:save\")}\n        </Button>\n        <Button\n          variant=\"link\"\n          onClick={reset}\n          data-testid=\"OIDCAuthFlowOverrideRevert\"\n        >\n          {t(\"common:revert\")}\n        </Button>\n      </ActionGroup>\n    </FormAccess>\n  );\n};\n","import {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Form,\n  FormGroup,\n  Modal,\n} from \"@patternfly/react-core\";\nimport { useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\n\ntype FormFields = {\n  node: string;\n};\n\ntype AddHostDialogProps = {\n  clientId: string;\n  isOpen: boolean;\n  onAdded: (host: string) => void;\n  onClose: () => void;\n};\n\nexport const AddHostDialog = ({\n  clientId: id,\n  isOpen,\n  onAdded,\n  onClose,\n}: AddHostDialogProps) => {\n  const { t } = useTranslation(\"clients\");\n  const {\n    register,\n    handleSubmit,\n    formState: { isDirty, isValid },\n  } = useForm<FormFields>();\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  async function onSubmit({ node }: FormFields) {\n    try {\n      await adminClient.clients.addClusterNode({\n        id,\n        node,\n      });\n      onAdded(node);\n      addAlert(t(\"addedNodeSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"clients:addedNodeFail\", error);\n    }\n\n    onClose();\n  }\n\n  return (\n    <Modal\n      title={t(\"addNode\")}\n      isOpen={isOpen}\n      onClose={onClose}\n      variant=\"small\"\n      actions={[\n        <Button\n          key=\"confirm\"\n          id=\"add-node-confirm\"\n          type=\"submit\"\n          form=\"add-host-form\"\n          isDisabled={!isDirty || !isValid}\n        >\n          {t(\"common:save\")}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          id=\"add-node-cancel\"\n          variant={ButtonVariant.link}\n          onClick={onClose}\n        >\n          {t(\"common:cancel\")}\n        </Button>,\n      ]}\n    >\n      <Form id=\"add-host-form\" onSubmit={handleSubmit(onSubmit)} isHorizontal>\n        <FormGroup label={t(\"nodeHost\")} fieldId=\"nodeHost\" isRequired>\n          <KeycloakTextInput\n            id=\"nodeHost\"\n            {...register(\"node\", { required: true })}\n            isRequired\n          />\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n","import {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  ExpandableSection,\n  FormGroup,\n  Split,\n  SplitItem,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { ListEmptyState } from \"../../components/list-empty-state/ListEmptyState\";\nimport { KeycloakDataTable } from \"../../components/table-toolbar/KeycloakDataTable\";\nimport { TimeSelector } from \"../../components/time-selector/TimeSelector\";\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\nimport useFormatDate, { FORMAT_DATE_AND_TIME } from \"../../utils/useFormatDate\";\nimport { AddHostDialog } from \".././advanced/AddHostDialog\";\nimport { AdvancedProps, parseResult } from \"../AdvancedTab\";\n\nexport const ClusteringPanel = ({\n  save,\n  client: { id, registeredNodes, access },\n}: AdvancedProps) => {\n  const { t } = useTranslation(\"clients\");\n  const { control } = useFormContext();\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const formatDate = useFormatDate();\n\n  const [nodes, setNodes] = useState(registeredNodes || {});\n  const [expanded, setExpanded] = useState(false);\n  const [selectedNode, setSelectedNode] = useState(\"\");\n  const [addNodeOpen, setAddNodeOpen] = useState(false);\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(new Date().getTime());\n\n  const testCluster = async () => {\n    const result = await adminClient.clients.testNodesAvailable({ id: id! });\n    parseResult(result, \"testCluster\", addAlert, t);\n  };\n\n  const [toggleDeleteNodeConfirm, DeleteNodeConfirm] = useConfirmDialog({\n    titleKey: \"clients:deleteNode\",\n    messageKey: t(\"deleteNodeBody\", {\n      node: selectedNode,\n    }),\n    continueButtonLabel: \"common:delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.clients.deleteClusterNode({\n          id: id!,\n          node: selectedNode,\n        });\n        setNodes({\n          ...Object.keys(nodes).reduce((object: any, key) => {\n            if (key !== selectedNode) {\n              object[key] = nodes[key];\n            }\n            return object;\n          }, {}),\n        });\n        refresh();\n        addAlert(t(\"deleteNodeSuccess\"), AlertVariant.success);\n      } catch (error) {\n        addError(\"clients:deleteNodeFail\", error);\n      }\n    },\n  });\n\n  return (\n    <>\n      <FormAccess\n        role=\"manage-clients\"\n        fineGrainedAccess={access?.configure}\n        isHorizontal\n      >\n        <FormGroup\n          label={t(\"nodeReRegistrationTimeout\")}\n          fieldId=\"kc-node-reregistration-timeout\"\n          labelIcon={\n            <HelpItem\n              helpText=\"clients-help:nodeReRegistrationTimeout\"\n              fieldLabelId=\"clients:nodeReRegistrationTimeout\"\n            />\n          }\n        >\n          <Split hasGutter>\n            <SplitItem>\n              <Controller\n                name=\"nodeReRegistrationTimeout\"\n                defaultValue=\"\"\n                control={control}\n                render={({ field }) => (\n                  <TimeSelector value={field.value} onChange={field.onChange} />\n                )}\n              />\n            </SplitItem>\n            <SplitItem>\n              <Button variant={ButtonVariant.secondary} onClick={() => save()}>\n                {t(\"common:save\")}\n              </Button>\n            </SplitItem>\n          </Split>\n        </FormGroup>\n      </FormAccess>\n      <>\n        <DeleteNodeConfirm />\n        <AddHostDialog\n          clientId={id!}\n          isOpen={addNodeOpen}\n          onAdded={(node) => {\n            nodes[node] = Date.now() / 1000;\n            refresh();\n          }}\n          onClose={() => setAddNodeOpen(false)}\n        />\n        <ExpandableSection\n          toggleText={t(\"registeredClusterNodes\")}\n          onToggle={setExpanded}\n          isExpanded={expanded}\n        >\n          <KeycloakDataTable\n            key={key}\n            ariaLabelKey=\"registeredClusterNodes\"\n            loader={() =>\n              Promise.resolve(\n                Object.entries(nodes || {}).map((entry) => {\n                  return { host: entry[0], registration: entry[1] };\n                })\n              )\n            }\n            toolbarItem={\n              <>\n                <ToolbarItem>\n                  <Button\n                    id=\"testClusterAvailability\"\n                    onClick={testCluster}\n                    variant={ButtonVariant.secondary}\n                    isDisabled={Object.keys(nodes).length === 0}\n                  >\n                    {t(\"testClusterAvailability\")}\n                  </Button>\n                </ToolbarItem>\n                <ToolbarItem>\n                  <Button\n                    id=\"registerNodeManually\"\n                    onClick={() => setAddNodeOpen(true)}\n                    variant={ButtonVariant.tertiary}\n                  >\n                    {t(\"registerNodeManually\")}\n                  </Button>\n                </ToolbarItem>\n              </>\n            }\n            actions={[\n              {\n                title: t(\"common:delete\"),\n                onRowClick: (node) => {\n                  setSelectedNode(node.host);\n                  toggleDeleteNodeConfirm();\n                },\n              },\n            ]}\n            columns={[\n              {\n                name: \"host\",\n                displayKey: \"clients:nodeHost\",\n              },\n              {\n                name: \"registration\",\n                displayKey: \"clients:lastRegistration\",\n                cellFormatters: [\n                  (value) =>\n                    value\n                      ? formatDate(\n                          new Date(parseInt(value.toString()) * 1000),\n                          FORMAT_DATE_AND_TIME\n                        )\n                      : \"\",\n                ],\n              },\n            ]}\n            emptyState={\n              <ListEmptyState\n                message={t(\"noNodes\")}\n                instructions={t(\"noNodesInstructions\")}\n                primaryActionText={t(\"registerNodeManually\")}\n                onPrimaryAction={() => setAddNodeOpen(true)}\n              />\n            }\n          />\n        </ExpandableSection>\n      </>\n    </>\n  );\n};\n","import { FormGroup } from \"@patternfly/react-core\";\nimport { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\n\nexport const ApplicationUrls = () => {\n  const { t } = useTranslation(\"clients\");\n  const { register } = useFormContext();\n\n  return (\n    <>\n      <FormGroup\n        label={t(\"logoUrl\")}\n        fieldId=\"logoUrl\"\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:logoUrl\"\n            fieldLabelId=\"clients:logoUrl\"\n          />\n        }\n      >\n        <KeycloakTextInput\n          id=\"logoUrl\"\n          type=\"url\"\n          data-testid=\"logoUrl\"\n          {...register(\n            convertAttributeNameToForm<FormFields>(\"attributes.logoUri\")\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"policyUrl\")}\n        fieldId=\"policyUrl\"\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:policyUrl\"\n            fieldLabelId=\"clients:policyUrl\"\n          />\n        }\n      >\n        <KeycloakTextInput\n          id=\"policyUrl\"\n          data-testid=\"policyUrl\"\n          type=\"url\"\n          {...register(\n            convertAttributeNameToForm<FormFields>(\"attributes.policyUri\")\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"termsOfServiceUrl\")}\n        fieldId=\"termsOfServiceUrl\"\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:termsOfServiceUrl\"\n            fieldLabelId=\"clients:termsOfServiceUrl\"\n          />\n        }\n      >\n        <KeycloakTextInput\n          id=\"termsOfServiceUrl\"\n          type=\"url\"\n          data-testid=\"termsOfServiceUrl\"\n          {...register(\n            convertAttributeNameToForm<FormFields>(\"attributes.tosUri\")\n          )}\n        />\n      </FormGroup>\n    </>\n  );\n};\n","import {\n  ActionGroup,\n  Button,\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { MultiLineInput } from \"../../components/multi-line-input/MultiLineInput\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { convertAttributeNameToForm, sortProviders } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\nimport { ApplicationUrls } from \"./ApplicationUrls\";\n\ntype FineGrainOpenIdConnectProps = {\n  save: () => void;\n  reset: () => void;\n  hasConfigureAccess?: boolean;\n};\n\nexport const FineGrainOpenIdConnect = ({\n  save,\n  reset,\n  hasConfigureAccess,\n}: FineGrainOpenIdConnectProps) => {\n  const { t } = useTranslation(\"clients\");\n  const providers = useServerInfo().providers;\n  const clientSignatureProviders = providers?.clientSignature.providers;\n  const contentEncryptionProviders = providers?.contentencryption.providers;\n  const cekManagementProviders = providers?.cekmanagement.providers;\n  const signatureProviders = providers?.signature.providers;\n  const [accessTokenOpen, setAccessTokenOpen] = useState(false);\n  const [idTokenOpen, setIdTokenOpen] = useState(false);\n  const [idTokenKeyManagementOpen, setIdTokenKeyManagementOpen] =\n    useState(false);\n  const [idTokenContentOpen, setIdTokenContentOpen] = useState(false);\n  const [userInfoSignedResponseOpen, setUserInfoSignedResponseOpen] =\n    useState(false);\n  const [requestObjectSignatureOpen, setRequestObjectSignatureOpen] =\n    useState(false);\n  const [requestObjectRequiredOpen, setRequestObjectRequiredOpen] =\n    useState(false);\n  const [requestObjectEncryptionOpen, setRequestObjectEncryptionOpen] =\n    useState(false);\n  const [requestObjectEncodingOpen, setRequestObjectEncodingOpen] =\n    useState(false);\n  const [authorizationSignedOpen, setAuthorizationSignedOpen] = useState(false);\n  const [authorizationEncryptedOpen, setAuthorizationEncryptedOpen] =\n    useState(false);\n  const [\n    authorizationEncryptedResponseOpen,\n    setAuthorizationEncryptedResponseOpen,\n  ] = useState(false);\n\n  const { control } = useFormContext();\n\n  const keyOptions = [\n    <SelectOption key=\"empty\" value=\"\">\n      {t(\"common:choose\")}\n    </SelectOption>,\n    ...sortProviders(clientSignatureProviders!).map((p) => (\n      <SelectOption key={p} value={p} />\n    )),\n  ];\n  const cekManagementOptions = [\n    <SelectOption key=\"empty\" value=\"\">\n      {t(\"common:choose\")}\n    </SelectOption>,\n    ...sortProviders(cekManagementProviders!).map((p) => (\n      <SelectOption key={p} value={p} />\n    )),\n  ];\n  const signatureOptions = [\n    <SelectOption key=\"unsigned\" value=\"\">\n      {t(\"unsigned\")}\n    </SelectOption>,\n    ...sortProviders(signatureProviders!).map((p) => (\n      <SelectOption key={p} value={p} />\n    )),\n  ];\n  const contentOptions = [\n    <SelectOption key=\"empty\" value=\"\">\n      {t(\"common:choose\")}\n    </SelectOption>,\n    ...sortProviders(contentEncryptionProviders!).map((p) => (\n      <SelectOption key={p} value={p} />\n    )),\n  ];\n\n  const requestObjectOptions = [\n    <SelectOption key=\"any\" value=\"any\">\n      {t(\"common:any\")}\n    </SelectOption>,\n    <SelectOption key=\"none\" value=\"none\">\n      {t(\"common:none\")}\n    </SelectOption>,\n    ...sortProviders(clientSignatureProviders!).map((p) => (\n      <SelectOption key={p} value={p} />\n    )),\n  ];\n\n  const requestObjectEncryptionOptions = [\n    <SelectOption key=\"any\" value=\"any\">\n      {t(\"common:any\")}\n    </SelectOption>,\n    ...sortProviders(cekManagementProviders!).map((p) => (\n      <SelectOption key={p} value={p} />\n    )),\n  ];\n\n  const requestObjectEncodingOptions = [\n    <SelectOption key=\"any\" value=\"any\">\n      {t(\"common:any\")}\n    </SelectOption>,\n    ...sortProviders(contentEncryptionProviders!).map((p) => (\n      <SelectOption key={p} value={p} />\n    )),\n  ];\n\n  const authorizationSignedResponseOptions = [\n    <SelectOption key=\"empty\" value=\"\">\n      {t(\"common:choose\")}\n    </SelectOption>,\n    ...sortProviders(signatureProviders!).map((p) => (\n      <SelectOption key={p} value={p} />\n    )),\n  ];\n\n  const requestObjectRequiredOptions = [\n    \"not required\",\n    \"request or request_uri\",\n    \"request only\",\n    \"request_uri only\",\n  ].map((p) => (\n    <SelectOption key={p} value={p}>\n      {t(`requestObject.${p}`)}\n    </SelectOption>\n  ));\n\n  return (\n    <FormAccess\n      role=\"manage-clients\"\n      fineGrainedAccess={hasConfigureAccess}\n      isHorizontal\n    >\n      <ApplicationUrls />\n      <FormGroup\n        label={t(\"accessTokenSignatureAlgorithm\")}\n        fieldId=\"accessTokenSignatureAlgorithm\"\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:accessTokenSignatureAlgorithm\"\n            fieldLabelId=\"clients:accessTokenSignatureAlgorithm\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.access.token.signed.response.alg\"\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"accessTokenSignatureAlgorithm\"\n              variant={SelectVariant.single}\n              onToggle={setAccessTokenOpen}\n              isOpen={accessTokenOpen}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setAccessTokenOpen(false);\n              }}\n              selections={field.value}\n            >\n              {keyOptions}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"idTokenSignatureAlgorithm\")}\n        fieldId=\"kc-id-token-signature\"\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:idTokenSignatureAlgorithm\"\n            fieldLabelId=\"clients:idTokenSignatureAlgorithm\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.id.token.signed.response.alg\"\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"idTokenSignatureAlgorithm\"\n              variant={SelectVariant.single}\n              onToggle={setIdTokenOpen}\n              isOpen={idTokenOpen}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setIdTokenOpen(false);\n              }}\n              selections={field.value}\n            >\n              {keyOptions}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"idTokenEncryptionKeyManagementAlgorithm\")}\n        fieldId=\"idTokenEncryptionKeyManagementAlgorithm\"\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:idTokenEncryptionKeyManagementAlgorithm\"\n            fieldLabelId=\"clients:idTokenEncryptionKeyManagementAlgorithm\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.id.token.encrypted.response.alg\"\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"idTokenEncryptionKeyManagementAlgorithm\"\n              variant={SelectVariant.single}\n              onToggle={setIdTokenKeyManagementOpen}\n              isOpen={idTokenKeyManagementOpen}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setIdTokenKeyManagementOpen(false);\n              }}\n              selections={field.value}\n            >\n              {cekManagementOptions}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"idTokenEncryptionContentEncryptionAlgorithm\")}\n        fieldId=\"idTokenEncryptionContentEncryptionAlgorithm\"\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:idTokenEncryptionContentEncryptionAlgorithm\"\n            fieldLabelId=\"clients:idTokenEncryptionContentEncryptionAlgorithm\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.id.token.encrypted.response.enc\"\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"idTokenEncryptionContentEncryptionAlgorithm\"\n              variant={SelectVariant.single}\n              onToggle={setIdTokenContentOpen}\n              isOpen={idTokenContentOpen}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setIdTokenContentOpen(false);\n              }}\n              selections={field.value}\n            >\n              {contentOptions}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"userInfoSignedResponseAlgorithm\")}\n        fieldId=\"userInfoSignedResponseAlgorithm\"\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:userInfoSignedResponseAlgorithm\"\n            fieldLabelId=\"clients:userInfoSignedResponseAlgorithm\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.user.info.response.signature.alg\"\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"userInfoSignedResponseAlgorithm\"\n              variant={SelectVariant.single}\n              onToggle={setUserInfoSignedResponseOpen}\n              isOpen={userInfoSignedResponseOpen}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setUserInfoSignedResponseOpen(false);\n              }}\n              selections={field.value}\n            >\n              {signatureOptions}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"requestObjectSignatureAlgorithm\")}\n        fieldId=\"requestObjectSignatureAlgorithm\"\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:requestObjectSignatureAlgorithm\"\n            fieldLabelId=\"clients:requestObjectSignatureAlgorithm\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.request.object.signature.alg\"\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"requestObjectSignatureAlgorithm\"\n              variant={SelectVariant.single}\n              onToggle={setRequestObjectSignatureOpen}\n              isOpen={requestObjectSignatureOpen}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setRequestObjectSignatureOpen(false);\n              }}\n              selections={field.value}\n            >\n              {requestObjectOptions}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"requestObjectEncryption\")}\n        fieldId=\"requestObjectEncryption\"\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:requestObjectEncryption\"\n            fieldLabelId=\"clients:requestObjectEncryption\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.request.object.encryption.alg\"\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"requestObjectEncryption\"\n              variant={SelectVariant.single}\n              onToggle={setRequestObjectEncryptionOpen}\n              isOpen={requestObjectEncryptionOpen}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setRequestObjectEncryptionOpen(false);\n              }}\n              selections={field.value}\n            >\n              {requestObjectEncryptionOptions}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"requestObjectEncoding\")}\n        fieldId=\"requestObjectEncoding\"\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:requestObjectEncoding\"\n            fieldLabelId=\"clients:requestObjectEncoding\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.request.object.encryption.enc\"\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"requestObjectEncoding\"\n              variant={SelectVariant.single}\n              onToggle={setRequestObjectEncodingOpen}\n              isOpen={requestObjectEncodingOpen}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setRequestObjectEncodingOpen(false);\n              }}\n              selections={field.value}\n            >\n              {requestObjectEncodingOptions}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"requestObjectRequired\")}\n        fieldId=\"requestObjectRequired\"\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:requestObjectRequired\"\n            fieldLabelId=\"clients:requestObjectRequired\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.request.object.required\"\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"requestObjectRequired\"\n              variant={SelectVariant.single}\n              onToggle={setRequestObjectRequiredOpen}\n              isOpen={requestObjectRequiredOpen}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setRequestObjectRequiredOpen(false);\n              }}\n              selections={field.value}\n            >\n              {requestObjectRequiredOptions}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"validRequestURIs\")}\n        fieldId=\"validRequestURIs\"\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:validRequestURIs\"\n            fieldLabelId=\"clients:validRequestURIs\"\n          />\n        }\n      >\n        <MultiLineInput\n          name={convertAttributeNameToForm(\"attributes.request.uris\")}\n          aria-label={t(\"validRequestURIs\")}\n          addButtonLabel=\"clients:addRequestUri\"\n          stringify\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"authorizationSignedResponseAlg\")}\n        fieldId=\"authorizationSignedResponseAlg\"\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:authorizationSignedResponseAlg\"\n            fieldLabelId=\"clients:authorizationSignedResponseAlg\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.authorization.signed.response.alg\"\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"authorizationSignedResponseAlg\"\n              variant={SelectVariant.single}\n              onToggle={setAuthorizationSignedOpen}\n              isOpen={authorizationSignedOpen}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setAuthorizationSignedOpen(false);\n              }}\n              selections={field.value}\n            >\n              {authorizationSignedResponseOptions}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"authorizationEncryptedResponseAlg\")}\n        fieldId=\"authorizationEncryptedResponseAlg\"\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:authorizationEncryptedResponseAlg\"\n            fieldLabelId=\"clients:authorizationEncryptedResponseAlg\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.authorization.encrypted.response.alg\"\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"authorizationEncryptedResponseAlg\"\n              variant={SelectVariant.single}\n              onToggle={setAuthorizationEncryptedOpen}\n              isOpen={authorizationEncryptedOpen}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setAuthorizationEncryptedOpen(false);\n              }}\n              selections={field.value}\n            >\n              {cekManagementOptions}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"authorizationEncryptedResponseEnc\")}\n        fieldId=\"authorizationEncryptedResponseEnc\"\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:authorizationEncryptedResponseEnc\"\n            fieldLabelId=\"clients:authorizationEncryptedResponseEnc\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.authorization.encrypted.response.enc\"\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"authorizationEncryptedResponseEnc\"\n              variant={SelectVariant.single}\n              onToggle={setAuthorizationEncryptedResponseOpen}\n              isOpen={authorizationEncryptedResponseOpen}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setAuthorizationEncryptedResponseOpen(false);\n              }}\n              selections={field.value}\n            >\n              {contentOptions}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <ActionGroup>\n        <Button variant=\"secondary\" id=\"fineGrainSave\" onClick={save}>\n          {t(\"common:save\")}\n        </Button>\n        <Button id=\"fineGrainRevert\" variant=\"link\" onClick={reset}>\n          {t(\"common:revert\")}\n        </Button>\n      </ActionGroup>\n    </FormAccess>\n  );\n};\n","import { ActionGroup, Button, FormGroup } from \"@patternfly/react-core\";\nimport { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { ApplicationUrls } from \"./ApplicationUrls\";\n\ntype FineGrainSamlEndpointConfigProps = {\n  save: () => void;\n  reset: () => void;\n};\n\nexport const FineGrainSamlEndpointConfig = ({\n  save,\n  reset,\n}: FineGrainSamlEndpointConfigProps) => {\n  const { t } = useTranslation(\"clients\");\n  const { register } = useFormContext();\n  return (\n    <FormAccess role=\"manage-realm\" isHorizontal>\n      <ApplicationUrls />\n      <FormGroup\n        label={t(\"assertionConsumerServicePostBindingURL\")}\n        fieldId=\"assertionConsumerServicePostBindingURL\"\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:assertionConsumerServicePostBindingURL\"\n            fieldLabelId=\"clients:assertionConsumerServicePostBindingURL\"\n          />\n        }\n      >\n        <KeycloakTextInput\n          id=\"assertionConsumerServicePostBindingURL\"\n          type=\"url\"\n          {...register(\"attributes.saml_assertion_consumer_url_post\")}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"assertionConsumerServiceRedirectBindingURL\")}\n        fieldId=\"assertionConsumerServiceRedirectBindingURL\"\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:assertionConsumerServiceRedirectBindingURL\"\n            fieldLabelId=\"clients:assertionConsumerServiceRedirectBindingURL\"\n          />\n        }\n      >\n        <KeycloakTextInput\n          id=\"assertionConsumerServiceRedirectBindingURL\"\n          type=\"url\"\n          {...register(\"attributes.saml_assertion_consumer_url_redirect\")}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"logoutServicePostBindingURL\")}\n        fieldId=\"logoutServicePostBindingURL\"\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:logoutServicePostBindingURL\"\n            fieldLabelId=\"clients:logoutServicePostBindingURL\"\n          />\n        }\n      >\n        <KeycloakTextInput\n          id=\"logoutServicePostBindingURL\"\n          type=\"url\"\n          {...register(\"attributes.saml_single_logout_service_url_post\")}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"logoutServiceRedirectBindingURL\")}\n        fieldId=\"logoutServiceRedirectBindingURL\"\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:logoutServiceRedirectBindingURL\"\n            fieldLabelId=\"clients:logoutServiceRedirectBindingURL\"\n          />\n        }\n      >\n        <KeycloakTextInput\n          id=\"logoutServiceRedirectBindingURL\"\n          type=\"url\"\n          {...register(\"attributes.saml_single_logout_service_url_redirect\")}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"logoutServiceArtifactBindingUrl\")}\n        fieldId=\"logoutServiceArtifactBindingUrl\"\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:logoutServiceArtifactBindingUrl\"\n            fieldLabelId=\"clients:logoutServiceArtifactBindingUrl\"\n          />\n        }\n      >\n        <KeycloakTextInput\n          id=\"logoutServiceArtifactBindingUrl\"\n          type=\"url\"\n          {...register(\"attributes.saml_single_logout_service_url_artifact\")}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"artifactBindingUrl\")}\n        fieldId=\"artifactBindingUrl\"\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:artifactBindingUrl\"\n            fieldLabelId=\"clients:artifactBindingUrl\"\n          />\n        }\n      >\n        <KeycloakTextInput\n          id=\"artifactBindingUrl\"\n          type=\"url\"\n          {...register(\"attributes.saml_artifact_binding_url\")}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"artifactResolutionService\")}\n        fieldId=\"artifactResolutionService\"\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:artifactResolutionService\"\n            fieldLabelId=\"clients:artifactResolutionService\"\n          />\n        }\n      >\n        <KeycloakTextInput\n          id=\"artifactResolutionService\"\n          type=\"url\"\n          {...register(\"attributes.saml_artifact_resolution_service_url\")}\n        />\n      </FormGroup>\n\n      <ActionGroup>\n        <Button variant=\"tertiary\" onClick={save}>\n          {t(\"common:save\")}\n        </Button>\n        <Button variant=\"link\" onClick={reset}>\n          {t(\"common:revert\")}\n        </Button>\n      </ActionGroup>\n    </FormAccess>\n  );\n};\n","import { ActionGroup, Button, FormGroup, Switch } from \"@patternfly/react-core\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\n\ntype OpenIdConnectCompatibilityModesProps = {\n  save: () => void;\n  reset: () => void;\n  hasConfigureAccess?: boolean;\n};\n\nexport const OpenIdConnectCompatibilityModes = ({\n  save,\n  reset,\n  hasConfigureAccess,\n}: OpenIdConnectCompatibilityModesProps) => {\n  const { t } = useTranslation(\"clients\");\n  const { control } = useFormContext();\n  return (\n    <FormAccess\n      role=\"manage-realm\"\n      fineGrainedAccess={hasConfigureAccess}\n      isHorizontal\n    >\n      <FormGroup\n        label={t(\"excludeSessionStateFromAuthenticationResponse\")}\n        fieldId=\"excludeSessionStateFromAuthenticationResponse\"\n        hasNoPaddingTop\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:excludeSessionStateFromAuthenticationResponse\"\n            fieldLabelId=\"clients:excludeSessionStateFromAuthenticationResponse\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.exclude.session.state.from.auth.response\"\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"excludeSessionStateFromAuthenticationResponse-switch\"\n              label={t(\"common:on\")}\n              labelOff={t(\"common:off\")}\n              isChecked={field.value === \"true\"}\n              onChange={(value) => field.onChange(value.toString())}\n              aria-label={t(\"excludeSessionStateFromAuthenticationResponse\")}\n            />\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"useRefreshTokens\")}\n        fieldId=\"useRefreshTokens\"\n        hasNoPaddingTop\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:useRefreshTokens\"\n            fieldLabelId=\"clients:useRefreshTokens\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.use.refresh.tokens\"\n          )}\n          defaultValue=\"true\"\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"useRefreshTokens\"\n              label={t(\"common:on\")}\n              labelOff={t(\"common:off\")}\n              isChecked={field.value === \"true\"}\n              onChange={(value) => field.onChange(value.toString())}\n              aria-label={t(\"useRefreshTokens\")}\n            />\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"useRefreshTokenForClientCredentialsGrant\")}\n        fieldId=\"useRefreshTokenForClientCredentialsGrant\"\n        hasNoPaddingTop\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:useRefreshTokenForClientCredentialsGrant\"\n            fieldLabelId=\"clients:useRefreshTokenForClientCredentialsGrant\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.client_credentials.use_refresh_token\"\n          )}\n          defaultValue=\"false\"\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"useRefreshTokenForClientCredentialsGrant\"\n              label={t(\"common:on\")}\n              labelOff={t(\"common:off\")}\n              isChecked={field.value === \"true\"}\n              onChange={(value) => field.onChange(value.toString())}\n              aria-label={t(\"useRefreshTokenForClientCredentialsGrant\")}\n            />\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"useLowerCaseBearerType\")}\n        fieldId=\"useLowerCaseBearerType\"\n        hasNoPaddingTop\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:useLowerCaseBearerType\"\n            fieldLabelId=\"clients:useLowerCaseBearerType\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.token.response.type.bearer.lower-case\"\n          )}\n          defaultValue=\"false\"\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"useLowerCaseBearerType\"\n              label={t(\"common:on\")}\n              labelOff={t(\"common:off\")}\n              isChecked={field.value === \"true\"}\n              onChange={(value) => field.onChange(value.toString())}\n              aria-label={t(\"useLowerCaseBearerType\")}\n            />\n          )}\n        />\n      </FormGroup>\n      <ActionGroup>\n        <Button\n          variant=\"secondary\"\n          onClick={save}\n          data-testid=\"OIDCCompatabilitySave\"\n        >\n          {t(\"common:save\")}\n        </Button>\n        <Button\n          variant=\"link\"\n          onClick={reset}\n          data-testid=\"OIDCCompatabilityRevert\"\n        >\n          {t(\"common:revert\")}\n        </Button>\n      </ActionGroup>\n    </FormAccess>\n  );\n};\n","import {\n  ActionGroup,\n  Button,\n  FormGroup,\n  InputGroup,\n  Text,\n  Tooltip,\n} from \"@patternfly/react-core\";\nimport { useEffect, useRef } from \"react\";\nimport { useFormContext } from \"react-hook-form\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\n\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport useFormatDate, { FORMAT_DATE_AND_TIME } from \"../../utils/useFormatDate\";\nimport { AdvancedProps, parseResult } from \"../AdvancedTab\";\nimport { toClient } from \"../routes/Client\";\n\nexport const RevocationPanel = ({\n  save,\n  client: { id, adminUrl, access },\n}: AdvancedProps) => {\n  const revocationFieldName = \"notBefore\";\n  const pushRevocationButtonRef = useRef<HTMLElement>();\n\n  const { t } = useTranslation(\"clients\");\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n  const { addAlert } = useAlerts();\n  const formatDate = useFormatDate();\n\n  const { getValues, setValue, register } = useFormContext();\n\n  const setNotBefore = (time: number, messageKey: string) => {\n    setValue(revocationFieldName, time);\n    save({ messageKey });\n  };\n\n  useEffect(() => {\n    register(revocationFieldName);\n  }, [register]);\n\n  const getNotBeforeValue = () => {\n    const date = getValues(revocationFieldName);\n    if (date > 0) {\n      return formatDate(new Date(date * 1000), FORMAT_DATE_AND_TIME);\n    } else {\n      return t(\"common:none\");\n    }\n  };\n\n  const push = async () => {\n    const result = await adminClient.clients.pushRevocation({\n      id: id!,\n    });\n    parseResult(result, \"notBeforePush\", addAlert, t);\n  };\n\n  return (\n    <>\n      <Text className=\"pf-u-pb-lg\">\n        <Trans i18nKey=\"clients-help:notBeforeIntro\">\n          In order to successfully push setup url on\n          <Link to={toClient({ realm, clientId: id!, tab: \"settings\" })}>\n            {t(\"settings\")}\n          </Link>\n          tab\n        </Trans>\n      </Text>\n      <FormAccess\n        role=\"manage-clients\"\n        fineGrainedAccess={access?.configure}\n        isHorizontal\n      >\n        <FormGroup\n          label={t(\"notBefore\")}\n          fieldId=\"kc-not-before\"\n          labelIcon={\n            <HelpItem\n              helpText=\"clients-help:notBefore\"\n              fieldLabelId=\"clients:notBefore\"\n            />\n          }\n        >\n          <InputGroup>\n            <KeycloakTextInput\n              type=\"text\"\n              id=\"kc-not-before\"\n              name=\"notBefore\"\n              isReadOnly\n              value={getNotBeforeValue()}\n            />\n            <Button\n              id=\"setToNow\"\n              variant=\"control\"\n              onClick={() => {\n                setNotBefore(Date.now() / 1000, \"notBeforeSetToNow\");\n              }}\n            >\n              {t(\"setToNow\")}\n            </Button>\n            <Button\n              id=\"clear\"\n              variant=\"control\"\n              onClick={() => {\n                setNotBefore(0, \"notBeforeNowClear\");\n              }}\n            >\n              {t(\"clear\")}\n            </Button>\n          </InputGroup>\n        </FormGroup>\n        <ActionGroup>\n          {!adminUrl && (\n            <Tooltip\n              reference={pushRevocationButtonRef}\n              content={t(\"clients-help:notBeforeTooltip\")}\n            />\n          )}\n          <Button\n            id=\"push\"\n            variant=\"secondary\"\n            onClick={push}\n            isAriaDisabled={!adminUrl}\n            ref={pushRevocationButtonRef}\n          >\n            {t(\"push\")}\n          </Button>\n        </ActionGroup>\n      </FormAccess>\n    </>\n  );\n};\n","import { AlertVariant, PageSection, Text } from \"@patternfly/react-core\";\nimport type { TFunction } from \"i18next\";\nimport { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport type GlobalRequestResult from \"@keycloak/keycloak-admin-client/lib/defs/globalRequestResult\";\n\nimport type { AddAlertFunction } from \"../components/alert/Alerts\";\nimport { ScrollForm } from \"../components/scroll-form/ScrollForm\";\nimport { convertAttributeNameToForm, toUpperCase } from \"../util\";\nimport { AdvancedSettings } from \"./advanced/AdvancedSettings\";\nimport { AuthenticationOverrides } from \"./advanced/AuthenticationOverrides\";\nimport { ClusteringPanel } from \"./advanced/ClusteringPanel\";\nimport { FineGrainOpenIdConnect } from \"./advanced/FineGrainOpenIdConnect\";\nimport { FineGrainSamlEndpointConfig } from \"./advanced/FineGrainSamlEndpointConfig\";\nimport { OpenIdConnectCompatibilityModes } from \"./advanced/OpenIdConnectCompatibilityModes\";\nimport { RevocationPanel } from \"./advanced/RevocationPanel\";\nimport type { FormFields, SaveOptions } from \"./ClientDetails\";\n\nexport const parseResult = (\n  result: GlobalRequestResult,\n  prefixKey: string,\n  addAlert: AddAlertFunction,\n  t: TFunction\n) => {\n  const successCount = result.successRequests?.length || 0;\n  const failedCount = result.failedRequests?.length || 0;\n\n  if (successCount === 0 && failedCount === 0) {\n    addAlert(t(\"noAdminUrlSet\"), AlertVariant.warning);\n  } else if (failedCount > 0) {\n    addAlert(\n      t(prefixKey + \"Success\", { successNodes: result.successRequests }),\n      AlertVariant.success\n    );\n    addAlert(\n      t(prefixKey + \"Fail\", { failedNodes: result.failedRequests }),\n      AlertVariant.danger\n    );\n  } else {\n    addAlert(\n      t(prefixKey + \"Success\", { successNodes: result.successRequests }),\n      AlertVariant.success\n    );\n  }\n};\n\nexport type AdvancedProps = {\n  save: (options?: SaveOptions) => void;\n  client: ClientRepresentation;\n};\n\nexport const AdvancedTab = ({ save, client }: AdvancedProps) => {\n  const { t } = useTranslation(\"clients\");\n  const openIdConnect = \"openid-connect\";\n\n  const { setValue } = useFormContext();\n  const {\n    publicClient,\n    attributes,\n    protocol,\n    authenticationFlowBindingOverrides,\n  } = client;\n\n  const resetFields = (names: string[]) => {\n    for (const name of names) {\n      setValue(\n        convertAttributeNameToForm<FormFields>(`attributes.${name}`),\n        attributes?.[name] || \"\"\n      );\n    }\n  };\n\n  return (\n    <PageSection variant=\"light\" className=\"pf-u-py-0\">\n      <ScrollForm\n        sections={[\n          {\n            title: t(\"revocation\"),\n            isHidden: protocol !== openIdConnect,\n            panel: <RevocationPanel client={client} save={save} />,\n          },\n          {\n            title: t(\"clustering\"),\n            isHidden: !publicClient,\n            panel: <ClusteringPanel client={client} save={save} />,\n          },\n          {\n            title: t(\"fineGrainOpenIdConnectConfiguration\"),\n            isHidden: protocol !== openIdConnect,\n            panel: (\n              <>\n                <Text className=\"pf-u-pb-lg\">\n                  {t(\"clients-help:fineGrainOpenIdConnectConfiguration\")}\n                </Text>\n                <FineGrainOpenIdConnect\n                  save={save}\n                  reset={() => {\n                    resetFields([\n                      \"logoUri\",\n                      \"policyUri\",\n                      \"tosUri\",\n                      \"access.token.signed.response.alg\",\n                      \"id.token.signed.response.alg\",\n                      \"id.token.encrypted.response.alg\",\n                      \"id.token.encrypted.response.enc\",\n                      \"user.info.response.signature.alg\",\n                      \"request.object.signature.alg\",\n                      \"request.object.encryption.alg\",\n                      \"request.object.encryption.enc\",\n                      \"request.object.required\",\n                      \"request.uris\",\n                      \"authorization.encrypted.response.alg\",\n                      \"authorization.encrypted.response.enc\",\n                    ]);\n                  }}\n                />\n              </>\n            ),\n          },\n          {\n            title: t(\"openIdConnectCompatibilityModes\"),\n            isHidden: protocol !== openIdConnect,\n            panel: (\n              <>\n                <Text className=\"pf-u-pb-lg\">\n                  {t(\"clients-help:openIdConnectCompatibilityModes\")}\n                </Text>\n                <OpenIdConnectCompatibilityModes\n                  save={() => save()}\n                  reset={() =>\n                    resetFields([\"exclude.session.state.from.auth.response\"])\n                  }\n                />\n              </>\n            ),\n          },\n          {\n            title: t(\"fineGrainSamlEndpointConfig\"),\n            isHidden: protocol === openIdConnect,\n            panel: (\n              <>\n                <Text className=\"pf-u-pb-lg\">\n                  {t(\"clients-help:fineGrainSamlEndpointConfig\")}\n                </Text>\n                <FineGrainSamlEndpointConfig\n                  save={() => save()}\n                  reset={() =>\n                    resetFields([\n                      \"logoUri\",\n                      \"policyUri\",\n                      \"tosUri\",\n                      \"saml_assertion_consumer_url_post\",\n                      \"saml_assertion_consumer_url_redirect\",\n                      \"saml_single_logout_service_url_post\",\n                      \"saml_single_logout_service_url_redirect\",\n                      \"saml_single_logout_service_url_artifact\",\n                      \"saml_artifact_binding_url\",\n                      \"saml_artifact_resolution_service_url\",\n                    ])\n                  }\n                />\n              </>\n            ),\n          },\n          {\n            title: t(\"advancedSettings\"),\n            panel: (\n              <>\n                <Text className=\"pf-u-pb-lg\">\n                  {t(\n                    \"clients-help:advancedSettings\" +\n                      toUpperCase(protocol || \"\")\n                  )}\n                </Text>\n                <AdvancedSettings\n                  protocol={protocol}\n                  save={() => save()}\n                  reset={() => {\n                    resetFields([\n                      \"saml.assertion.lifespan\",\n                      \"access.token.lifespan\",\n                      \"tls.client.certificate.bound.access.tokens\",\n                      \"pkce.code.challenge.method\",\n                    ]);\n                  }}\n                />\n              </>\n            ),\n          },\n          {\n            title: t(\"authenticationOverrides\"),\n            panel: (\n              <>\n                <Text className=\"pf-u-pb-lg\">\n                  {t(\"clients-help:authenticationOverrides\")}\n                </Text>\n                <AuthenticationOverrides\n                  protocol={protocol}\n                  save={() => save()}\n                  reset={() => {\n                    setValue(\n                      \"authenticationFlowBindingOverrides.browser\",\n                      authenticationFlowBindingOverrides?.browser\n                    );\n                    setValue(\n                      \"authenticationFlowBindingOverrides.direct_grant\",\n                      authenticationFlowBindingOverrides?.direct_grant\n                    );\n                  }}\n                />\n              </>\n            ),\n          },\n        ]}\n        borders\n      />\n    </PageSection>\n  );\n};\n","import type EvaluationResultRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/evaluationResultRepresentation\";\nimport { DecisionEffect } from \"@keycloak/keycloak-admin-client/lib/defs/policyRepresentation\";\nimport type PolicyResultRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyResultRepresentation\";\nimport {\n  capitalize,\n  DescriptionList,\n  TextContent,\n  TextList,\n  TextListItem,\n} from \"@patternfly/react-core\";\nimport { ExpandableRowContent, Tbody, Td, Tr } from \"@patternfly/react-table\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\n\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useParams } from \"../../utils/useParams\";\nimport type { ClientParams } from \"../routes/Client\";\nimport { toPermissionDetails } from \"../routes/PermissionDetails\";\nimport { toPolicyDetails } from \"../routes/PolicyDetails\";\n\ntype Props = {\n  idx: number;\n  rowIndex: number;\n  outerPolicy: PolicyResultRepresentation;\n  resource: EvaluationResultRepresentation;\n};\n\nexport const AuthorizationEvaluateResourcePolicies = ({\n  idx,\n  rowIndex,\n  outerPolicy,\n  resource,\n}: Props) => {\n  const [expanded, setExpanded] = useState<boolean>(false);\n  const { t } = useTranslation(\"clients\");\n  const { realm } = useRealm();\n  const { clientId } = useParams<ClientParams>();\n\n  return (\n    <Tbody key={idx} isExpanded={expanded}>\n      <Tr>\n        <Td\n          expand={{\n            rowIndex,\n            isExpanded: expanded,\n            onToggle: () => setExpanded((prev) => !prev),\n          }}\n        />\n        <Td data-testid={`name-column-${resource.resource}`}>\n          <Link\n            to={toPermissionDetails({\n              realm,\n              id: clientId,\n              permissionType: outerPolicy.policy?.type!,\n              permissionId: outerPolicy.policy?.id!,\n            })}\n          >\n            {outerPolicy.policy?.name}\n          </Link>\n        </Td>\n        <Td id={outerPolicy.status?.toLowerCase()}>\n          {t(outerPolicy.status?.toLowerCase() as string)}\n        </Td>\n        <Td>{t(`${outerPolicy.policy?.decisionStrategy?.toLowerCase()}`)}</Td>\n        <Td>\n          {outerPolicy.status === DecisionEffect.Permit\n            ? resource.policies?.[rowIndex]?.scopes?.join(\", \")\n            : \"-\"}\n        </Td>\n        <Td>\n          {outerPolicy.status === DecisionEffect.Deny &&\n          resource.policies?.[rowIndex]?.scopes?.length\n            ? resource.policies[rowIndex].scopes?.join(\", \")\n            : \"-\"}\n        </Td>\n      </Tr>\n      <Tr key={`child-${resource.resource}`} isExpanded={expanded}>\n        <Td />\n        <Td colSpan={5}>\n          {expanded && (\n            <ExpandableRowContent>\n              <DescriptionList\n                isHorizontal\n                className=\"keycloak_resource_details\"\n              >\n                <TextContent>\n                  <TextList>\n                    {outerPolicy.associatedPolicies?.map((item) => (\n                      <TextListItem key=\"policyDetails\">\n                        <Link\n                          to={toPolicyDetails({\n                            realm,\n                            id: clientId,\n                            policyType: item.policy?.type!,\n                            policyId: item.policy?.id!,\n                          })}\n                        >\n                          {item.policy?.name}\n                        </Link>\n\n                        {t(\"votedToStatus\", {\n                          status: capitalize(item.status as string),\n                        })}\n                      </TextListItem>\n                    ))}\n                  </TextList>\n                </TextContent>\n              </DescriptionList>\n            </ExpandableRowContent>\n          )}\n        </Td>\n      </Tr>\n    </Tbody>\n  );\n};\n","import { useState } from \"react\";\nimport {\n  ExpandableRowContent,\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport { DescriptionList } from \"@patternfly/react-core/dist/esm/components\";\nimport { useTranslation } from \"react-i18next\";\nimport { AuthorizationEvaluateResourcePolicies } from \"./AuthorizationEvaluateResourcePolicies\";\nimport type EvaluationResultRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/evaluationResultRepresentation\";\nimport type PolicyResultRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyResultRepresentation\";\n\ntype Props = {\n  rowIndex: number;\n  resource: EvaluationResultRepresentation;\n  evaluateResults: any;\n};\n\nexport const AuthorizationEvaluateResource = ({\n  rowIndex,\n  resource,\n  evaluateResults,\n}: Props) => {\n  const [expanded, setExpanded] = useState<boolean>(false);\n  const { t } = useTranslation(\"clients\");\n\n  return (\n    <Tbody isExpanded={expanded}>\n      <Tr>\n        <Td\n          expand={{\n            rowIndex,\n            isExpanded: expanded,\n            onToggle: () => setExpanded((prev) => !prev),\n          }}\n        />\n        <Td data-testid={`name-column-${resource.resource}`}>\n          {resource.resource?.name}\n        </Td>\n        <Td id={resource.status?.toLowerCase()}>\n          {t(`${resource.status?.toLowerCase()}`)}\n        </Td>\n        <Td>\n          {resource.allowedScopes?.length\n            ? resource.allowedScopes.map((item) => item.name)\n            : \"-\"}\n        </Td>\n      </Tr>\n      <Tr key={`child-${resource.resource}`} isExpanded={expanded}>\n        <Td />\n        <Td colSpan={5}>\n          <ExpandableRowContent>\n            {expanded && (\n              <DescriptionList\n                isHorizontal\n                className=\"keycloak_resource_details\"\n              >\n                <TableComposable aria-label={t(\"evaluationResults\")}>\n                  <Thead>\n                    <Tr>\n                      <Th />\n                      <Th>{t(\"permission\")}</Th>\n                      <Th>{t(\"results\")}</Th>\n                      <Th>{t(\"decisionStrategy\")}</Th>\n                      <Th>{t(\"grantedScopes\")}</Th>\n                      <Th>{t(\"deniedScopes\")}</Th>\n                      <Th />\n                    </Tr>\n                  </Thead>\n                  {Object.values(evaluateResults[rowIndex].policies).map(\n                    (outerPolicy, idx) => (\n                      <AuthorizationEvaluateResourcePolicies\n                        key={idx}\n                        idx={idx}\n                        rowIndex={rowIndex}\n                        outerPolicy={outerPolicy as PolicyResultRepresentation}\n                        resource={resource}\n                      />\n                    )\n                  )}\n                </TableComposable>\n              </DescriptionList>\n            )}\n          </ExpandableRowContent>\n        </Td>\n      </Tr>\n    </Tbody>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport {\n  Button,\n  Modal,\n  ModalVariant,\n  TextContent,\n  Text,\n  TextVariants,\n} from \"@patternfly/react-core\";\n\nimport type AccessTokenRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/accessTokenRepresentation\";\nimport { KeycloakTextArea } from \"../../components/keycloak-text-area/KeycloakTextArea\";\nimport useToggle from \"../../utils/useToggle\";\nimport { prettyPrintJSON } from \"../../util\";\n\ntype AuthorizationDataModalProps = {\n  data: AccessTokenRepresentation;\n};\n\nexport const AuthorizationDataModal = ({\n  data,\n}: AuthorizationDataModalProps) => {\n  const { t } = useTranslation(\"clients\");\n  const [show, toggle] = useToggle();\n\n  return (\n    <>\n      <Button\n        data-testid=\"authorization-revert\"\n        onClick={toggle}\n        variant=\"secondary\"\n      >\n        {t(\"showAuthData\")}\n      </Button>\n      <Modal\n        variant={ModalVariant.medium}\n        isOpen={show}\n        aria-label={t(\"authData\")}\n        header={\n          <TextContent>\n            <Text component={TextVariants.h1}>{t(\"authData\")}</Text>\n            <Text>{t(\"authDataDescription\")}</Text>\n          </TextContent>\n        }\n        onClose={toggle}\n        actions={[\n          <Button\n            data-testid=\"cancel\"\n            id=\"modal-cancel\"\n            key=\"cancel\"\n            onClick={toggle}\n          >\n            {t(\"common:cancel\")}\n          </Button>,\n        ]}\n      >\n        <KeycloakTextArea readOnly rows={20} value={prettyPrintJSON(data)} />\n      </Modal>\n    </>\n  );\n};\n","import { KeyboardEvent, useMemo, useState } from \"react\";\nimport {\n  Select,\n  SelectVariant,\n  SelectOption,\n  PageSection,\n  ActionGroup,\n  Button,\n  TextInput,\n  ButtonVariant,\n  InputGroup,\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem,\n  Divider,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { SearchIcon } from \"@patternfly/react-icons\";\nimport { TableComposable, Th, Thead, Tr } from \"@patternfly/react-table\";\n\nimport type EvaluationResultRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/evaluationResultRepresentation\";\nimport type PolicyEvaluationResponse from \"@keycloak/keycloak-admin-client/lib/defs/policyEvaluationResponse\";\nimport { AuthorizationEvaluateResource } from \"../AuthorizationEvaluateResource\";\nimport { ListEmptyState } from \"../../../components/list-empty-state/ListEmptyState\";\nimport { AuthorizationDataModal } from \"../AuthorizationDataModal\";\nimport useToggle from \"../../../utils/useToggle\";\n\ntype ResultProps = {\n  evaluateResult: PolicyEvaluationResponse;\n  refresh: () => void;\n  back: () => void;\n};\n\nenum ResultsFilter {\n  All = \"ALL\",\n  StatusDenied = \"STATUS_DENIED\",\n  StatusPermitted = \"STATUS_PERMITTED\",\n}\n\nfunction filterResults(\n  results: EvaluationResultRepresentation[],\n  filter: ResultsFilter\n) {\n  switch (filter) {\n    case ResultsFilter.StatusPermitted:\n      return results.filter(({ status }) => status === \"PERMIT\");\n    case ResultsFilter.StatusDenied:\n      return results.filter(({ status }) => status === \"DENY\");\n    default:\n      return results;\n  }\n}\n\nexport const Results = ({ evaluateResult, refresh, back }: ResultProps) => {\n  const { t } = useTranslation(\"clients\");\n\n  const [filterDropdownOpen, toggleFilterDropdown] = useToggle();\n\n  const [filter, setFilter] = useState(ResultsFilter.All);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [searchInput, setSearchInput] = useState(\"\");\n\n  const confirmSearchQuery = () => {\n    setSearchQuery(searchInput);\n  };\n\n  const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Enter\") {\n      confirmSearchQuery();\n    }\n  };\n\n  const filteredResources = useMemo(\n    () =>\n      filterResults(evaluateResult.results!, filter).filter(\n        ({ resource }) => resource?.name?.includes(searchQuery) ?? false\n      ),\n    [evaluateResult.results, filter, searchQuery]\n  );\n\n  const noEvaluatedData = evaluateResult.results!.length === 0;\n  const noFilteredData = filteredResources.length === 0;\n\n  return (\n    <PageSection>\n      <Toolbar>\n        <ToolbarGroup className=\"providers-toolbar\">\n          <ToolbarItem>\n            <InputGroup>\n              <TextInput\n                name={\"inputGroupName\"}\n                id={\"inputGroupName\"}\n                type=\"search\"\n                aria-label={t(\"common:search\")}\n                placeholder={t(\"common:search\")}\n                onChange={setSearchInput}\n                onKeyDown={handleKeyDown}\n              />\n              <Button\n                variant={ButtonVariant.control}\n                aria-label={t(\"common:search\")}\n                onClick={() => confirmSearchQuery()}\n              >\n                <SearchIcon />\n              </Button>\n            </InputGroup>\n          </ToolbarItem>\n          <ToolbarItem>\n            <Select\n              width={300}\n              data-testid=\"filter-type-select\"\n              isOpen={filterDropdownOpen}\n              className=\"kc-filter-type-select\"\n              variant={SelectVariant.single}\n              onToggle={toggleFilterDropdown}\n              onSelect={(_, value) => {\n                setFilter(value as ResultsFilter);\n                toggleFilterDropdown();\n                refresh();\n              }}\n              selections={filter}\n            >\n              <SelectOption\n                data-testid=\"all-results-option\"\n                value={ResultsFilter.All}\n                isPlaceholder\n              >\n                {t(\"allResults\")}\n              </SelectOption>\n              <SelectOption\n                data-testid=\"result-permit-option\"\n                value={ResultsFilter.StatusPermitted}\n              >\n                {t(\"resultPermit\")}\n              </SelectOption>\n              <SelectOption\n                data-testid=\"result-deny-option\"\n                value={ResultsFilter.StatusDenied}\n              >\n                {t(\"resultDeny\")}\n              </SelectOption>\n            </Select>\n          </ToolbarItem>\n        </ToolbarGroup>\n      </Toolbar>\n      {!noFilteredData && (\n        <TableComposable aria-label={t(\"evaluationResults\")}>\n          <Thead>\n            <Tr>\n              <Th />\n              <Th>{t(\"resource\")}</Th>\n              <Th>{t(\"overallResults\")}</Th>\n              <Th>{t(\"scopes\")}</Th>\n              <Th />\n            </Tr>\n          </Thead>\n          {filteredResources.map((resource, rowIndex) => (\n            <AuthorizationEvaluateResource\n              key={rowIndex}\n              rowIndex={rowIndex}\n              resource={resource}\n              evaluateResults={evaluateResult.results}\n            />\n          ))}\n        </TableComposable>\n      )}\n      {(noFilteredData || noEvaluatedData) && (\n        <>\n          <Divider />\n          <ListEmptyState\n            isSearchVariant\n            message={t(\"common:noSearchResults\")}\n            instructions={t(\"common:noSearchResultsInstructions\")}\n          />\n        </>\n      )}\n      <ActionGroup className=\"kc-evaluated-options\">\n        <Button data-testid=\"authorization-eval\" id=\"back-btn\" onClick={back}>\n          {t(\"common:back\")}\n        </Button>\n        <Button\n          data-testid=\"authorization-reevaluate\"\n          id=\"reevaluate-btn\"\n          variant=\"secondary\"\n          onClick={refresh}\n        >\n          {t(\"clients:reevaluate\")}\n        </Button>\n        <AuthorizationDataModal data={evaluateResult.rpt!} />\n      </ActionGroup>\n    </PageSection>\n  );\n};\n","import { useEffect, useMemo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Controller, useFieldArray, useFormContext } from \"react-hook-form\";\nimport {\n  Button,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport {\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport { MinusCircleIcon, PlusCircleIcon } from \"@patternfly/react-icons\";\nimport { camelCase } from \"lodash-es\";\n\nimport type ResourceRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceRepresentation\";\nimport { defaultContextAttributes } from \"../utils\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\n\nimport \"./key-based-attribute-input.css\";\n\nexport type AttributeType = {\n  key?: string;\n  name: string;\n  custom?: boolean;\n  values?: {\n    [key: string]: string;\n  }[];\n};\n\ntype AttributeInputProps = {\n  name: string;\n  selectableValues?: AttributeType[];\n  resources?: ResourceRepresentation[];\n};\n\ntype ValueInputProps = {\n  name: string;\n  rowIndex: number;\n  attribute: any;\n  selectableValues?: AttributeType[];\n  resources?: ResourceRepresentation[];\n};\n\nconst ValueInput = ({\n  name,\n  rowIndex,\n  attribute,\n  selectableValues,\n  resources,\n}: ValueInputProps) => {\n  const { t } = useTranslation(\"common\");\n  const { control, register, getValues } = useFormContext();\n  const [isValueOpenArray, setIsValueOpenArray] = useState([false]);\n\n  const toggleValueSelect = (rowIndex: number, open: boolean) => {\n    const arr = [...isValueOpenArray];\n    arr[rowIndex] = open;\n    setIsValueOpenArray(arr);\n  };\n\n  const attributeValues = useMemo(() => {\n    let values: AttributeType[] | undefined = [];\n\n    if (selectableValues) {\n      values = defaultContextAttributes.find(\n        (attr) => attr.key === getValues().context?.[rowIndex]?.key\n      )?.values;\n    }\n\n    return values;\n  }, [getValues]);\n\n  const renderSelectOptionType = () => {\n    const scopeValues = resources?.find(\n      (resource) => resource.name === getValues().resources?.[rowIndex]?.key\n    )?.scopes;\n\n    if (attributeValues?.length && !resources) {\n      return attributeValues.map((attr) => (\n        <SelectOption key={attr.key} value={attr.key}>\n          {attr.name}\n        </SelectOption>\n      ));\n    } else if (scopeValues?.length) {\n      return scopeValues.map((scope) => (\n        <SelectOption key={scope.name} value={scope.name}>\n          {scope.name}\n        </SelectOption>\n      ));\n    }\n  };\n\n  const getMessageBundleKey = (attributeName: string) =>\n    camelCase(attributeName).replace(/\\W/g, \"\");\n\n  return (\n    <Td>\n      {resources || attributeValues?.length ? (\n        <Controller\n          name={`${name}[${rowIndex}].value`}\n          defaultValue={[]}\n          control={control}\n          render={({ field }) => (\n            <Select\n              id={`${attribute.id}-value`}\n              className=\"kc-attribute-value-selectable\"\n              name={`${name}[${rowIndex}].value`}\n              chipGroupProps={{\n                numChips: 1,\n                expandedText: t(\"common:hide\"),\n                collapsedText: t(\"common:showRemaining\"),\n              }}\n              toggleId={`group-${name}`}\n              onToggle={(open) => toggleValueSelect(rowIndex, open)}\n              isOpen={isValueOpenArray[rowIndex]}\n              variant={SelectVariant.typeahead}\n              typeAheadAriaLabel={t(\"clients:selectOrTypeAKey\")}\n              placeholderText={t(\"clients:selectOrTypeAKey\")}\n              selections={field.value}\n              onSelect={(_, v) => {\n                field.onChange(v);\n\n                toggleValueSelect(rowIndex, false);\n              }}\n            >\n              {renderSelectOptionType()}\n            </Select>\n          )}\n        />\n      ) : (\n        <KeycloakTextInput\n          id={`${getMessageBundleKey(attribute.key)}-value`}\n          className=\"value-input\"\n          defaultValue={attribute.value}\n          data-testid=\"attribute-value-input\"\n          {...register(`${name}.${rowIndex}.value`)}\n        />\n      )}\n    </Td>\n  );\n};\n\nexport const KeyBasedAttributeInput = ({\n  name,\n  selectableValues,\n  resources,\n}: AttributeInputProps) => {\n  const { t } = useTranslation(\"common\");\n  const { control, watch } = useFormContext();\n  const { fields, append, remove } = useFieldArray({\n    control: control,\n    name,\n  });\n\n  const [isKeyOpenArray, setIsKeyOpenArray] = useState([false]);\n  const toggleKeySelect = (rowIndex: number, open: boolean) => {\n    const arr = [...isKeyOpenArray];\n    arr[rowIndex] = open;\n    setIsKeyOpenArray(arr);\n  };\n\n  useEffect(() => {\n    if (!fields.length) {\n      append({ key: \"\", value: \"\" }, { shouldFocus: false });\n    }\n  }, [fields]);\n\n  const watchLastValue = watch(`${name}[${fields.length - 1}].value`, \"\");\n\n  return (\n    <TableComposable\n      className=\"kc-attributes__table\"\n      aria-label=\"Role attribute keys and values\"\n      variant=\"compact\"\n      borders={false}\n    >\n      <Thead>\n        <Tr>\n          <Th id=\"key\" width={40}>\n            {t(\"key\")}\n          </Th>\n          <Th id=\"value\" width={40}>\n            {t(\"value\")}\n          </Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        {fields.map((attribute, rowIndex) => (\n          <Tr key={attribute.id} data-testid=\"attribute-row\">\n            <Td>\n              <Controller\n                name={`${name}[${rowIndex}].key`}\n                defaultValue=\"\"\n                control={control}\n                render={({ field }) => (\n                  <Select\n                    id={`${name}[${rowIndex}].key`}\n                    className=\"kc-attribute-key-selectable\"\n                    name={`${name}[${rowIndex}].key`}\n                    toggleId={`group-${name}`}\n                    onToggle={(open) => toggleKeySelect(rowIndex, open)}\n                    isOpen={isKeyOpenArray[rowIndex]}\n                    variant={SelectVariant.typeahead}\n                    typeAheadAriaLabel={t(\"clients:selectOrTypeAKey\")}\n                    placeholderText={t(\"clients:selectOrTypeAKey\")}\n                    selections={field.value}\n                    onSelect={(_, v) => {\n                      field.onChange(v.toString());\n\n                      toggleKeySelect(rowIndex, false);\n                    }}\n                  >\n                    {selectableValues?.map((attribute) => (\n                      <SelectOption\n                        selected={attribute.name === field.value}\n                        key={attribute.key}\n                        value={resources ? attribute.name : attribute.key}\n                      >\n                        {attribute.name}\n                      </SelectOption>\n                    ))}\n                  </Select>\n                )}\n              />\n            </Td>\n            <ValueInput\n              name={name}\n              attribute={attribute}\n              rowIndex={rowIndex}\n              selectableValues={selectableValues}\n              resources={resources}\n            />\n            <Td key=\"minus-button\" id={`kc-minus-button-${rowIndex}`}>\n              <Button\n                id={`minus-button-${rowIndex}`}\n                variant=\"link\"\n                className=\"kc-attributes__minus-icon\"\n                onClick={() => remove(rowIndex)}\n              >\n                <MinusCircleIcon />\n              </Button>\n            </Td>\n          </Tr>\n        ))}\n        <Tr>\n          <Td>\n            <Button\n              aria-label={t(\"addAttribute\")}\n              id=\"plus-icon\"\n              variant=\"link\"\n              className=\"kc-attributes__plus-icon\"\n              onClick={() => {\n                append({ key: \"\", value: \"\" });\n                setIsKeyOpenArray([...isKeyOpenArray, false]);\n              }}\n              icon={<PlusCircleIcon />}\n              isDisabled={!watchLastValue}\n              data-testid=\"attribute-add-row\"\n            >\n              {t(\"addAttribute\")}\n            </Button>\n          </Td>\n        </Tr>\n      </Tbody>\n    </TableComposable>\n  );\n};\n","import {\n  ActionGroup,\n  Button,\n  ExpandableSection,\n  FormGroup,\n  PageSection,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport type EvaluationResultRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/evaluationResultRepresentation\";\nimport type PolicyEvaluationResponse from \"@keycloak/keycloak-admin-client/lib/defs/policyEvaluationResponse\";\nimport type ResourceEvaluation from \"@keycloak/keycloak-admin-client/lib/defs/resourceEvaluation\";\nimport type ResourceRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceRepresentation\";\nimport type RoleRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport type ScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/scopeRepresentation\";\n\nimport { ClientSelect } from \"../../components/client/ClientSelect\";\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport type { KeyValueType } from \"../../components/key-value-form/key-value-convert\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { FormPanel } from \"../../components/scroll-form/FormPanel\";\nimport { UserSelect } from \"../../components/users/UserSelect\";\nimport { useAccess } from \"../../context/access/Access\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { ForbiddenSection } from \"../../ForbiddenSection\";\nimport { FormFields } from \"../ClientDetails\";\nimport { defaultContextAttributes } from \"../utils\";\nimport { Results } from \"./evaluate/Results\";\nimport { KeyBasedAttributeInput } from \"./KeyBasedAttributeInput\";\n\nimport \"./auth-evaluate.css\";\n\ninterface EvaluateFormInputs\n  extends Omit<ResourceEvaluation, \"context\" | \"resources\"> {\n  alias: string;\n  authScopes: string[];\n  context: {\n    attributes: Record<string, string>[];\n  };\n  resources?: Record<string, string>[];\n  client: FormFields;\n  user: string[];\n}\n\nexport type AttributeType = {\n  key: string;\n  name: string;\n  custom?: boolean;\n  values?: {\n    [key: string]: string;\n  }[];\n};\n\ntype ClientSettingsProps = {\n  client: ClientRepresentation;\n  save: () => void;\n};\n\nexport type AttributeForm = Omit<\n  EvaluateFormInputs,\n  \"context\" | \"resources\"\n> & {\n  context: {\n    attributes?: KeyValueType[];\n  };\n  resources?: KeyValueType[];\n};\n\ntype Props = ClientSettingsProps & EvaluationResultRepresentation;\n\nexport const AuthorizationEvaluate = ({ client }: Props) => {\n  const form = useForm<EvaluateFormInputs>({ mode: \"onChange\" });\n  const {\n    control,\n    register,\n    reset,\n    trigger,\n    formState: { isValid, errors },\n  } = form;\n  const { t } = useTranslation(\"clients\");\n  const { adminClient } = useAdminClient();\n  const realm = useRealm();\n\n  const [scopesDropdownOpen, setScopesDropdownOpen] = useState(false);\n\n  const [roleDropdownOpen, setRoleDropdownOpen] = useState(false);\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [applyToResourceType, setApplyToResourceType] = useState(false);\n  const [resources, setResources] = useState<ResourceRepresentation[]>([]);\n  const [scopes, setScopes] = useState<ScopeRepresentation[]>([]);\n  const [evaluateResult, setEvaluateResult] =\n    useState<PolicyEvaluationResponse>();\n\n  const [clientRoles, setClientRoles] = useState<RoleRepresentation[]>([]);\n\n  const { hasAccess } = useAccess();\n  if (!hasAccess(\"view-users\"))\n    return <ForbiddenSection permissionNeeded=\"view-users\" />;\n\n  useFetch(\n    () => adminClient.roles.find(),\n    (roles) => {\n      setClientRoles(roles);\n    },\n    []\n  );\n\n  useFetch(\n    () =>\n      Promise.all([\n        adminClient.clients.listResources({\n          id: client.id!,\n        }),\n        adminClient.clients.listAllScopes({\n          id: client.id!,\n        }),\n      ]),\n    ([resources, scopes]) => {\n      setResources(resources);\n      setScopes(scopes);\n    },\n    []\n  );\n\n  const evaluate = async () => {\n    if (!(await trigger())) {\n      return;\n    }\n    const formValues = form.getValues();\n    const keys = formValues.resources?.map(({ key }) => key);\n    const resEval: ResourceEvaluation = {\n      roleIds: formValues.roleIds ?? [],\n      clientId: formValues.client.id!,\n      userId: formValues.user[0],\n      resources: formValues.resources?.filter((resource) =>\n        keys?.includes(resource.name!)\n      ),\n      entitlements: false,\n      context: {\n        attributes: Object.fromEntries(\n          formValues.context.attributes\n            .filter((item) => item.key || item.value !== \"\")\n            .map(({ key, value }) => [key, value])\n        ),\n      },\n    };\n\n    const evaluation = await adminClient.clients.evaluateResource(\n      { id: client.id!, realm: realm.realm },\n      resEval\n    );\n\n    setEvaluateResult(evaluation);\n    return evaluation;\n  };\n\n  if (evaluateResult) {\n    return (\n      <Results\n        evaluateResult={evaluateResult}\n        refresh={evaluate}\n        back={() => setEvaluateResult(undefined)}\n      />\n    );\n  }\n  return (\n    <PageSection>\n      <FormProvider {...form}>\n        <FormPanel\n          className=\"kc-identity-information\"\n          title={t(\"clients:identityInformation\")}\n        >\n          <FormAccess isHorizontal role=\"view-clients\">\n            <ClientSelect\n              name=\"client\"\n              label=\"client\"\n              namespace=\"clients\"\n              helpText={\"clients-help:client\"}\n              defaultValue={client.clientId}\n            />\n            <UserSelect\n              name=\"user\"\n              label=\"users\"\n              helpText=\"clients-help:selectUser\"\n              defaultValue=\"\"\n              variant={SelectVariant.typeahead}\n              isRequired\n            />\n            <FormGroup\n              label={t(\"roles\")}\n              labelIcon={\n                <HelpItem\n                  helpText=\"clients-help:roles\"\n                  fieldLabelId=\"clients:roles\"\n                />\n              }\n              fieldId=\"realmRole\"\n              validated={errors.roleIds ? \"error\" : \"default\"}\n              helperTextInvalid={t(\"common:required\")}\n              isRequired\n            >\n              <Controller\n                name=\"roleIds\"\n                control={control}\n                defaultValue={[]}\n                rules={{ validate: (value) => (value || \"\").length > 0 }}\n                render={({ field }) => (\n                  <Select\n                    placeholderText={t(\"selectARole\")}\n                    variant={SelectVariant.typeaheadMulti}\n                    toggleId=\"role\"\n                    onToggle={setRoleDropdownOpen}\n                    selections={field.value}\n                    onSelect={(_, v) => {\n                      const option = v.toString();\n                      if (field.value?.includes(option)) {\n                        field.onChange(\n                          field.value.filter((item: string) => item !== option)\n                        );\n                      } else {\n                        field.onChange([...(field.value || []), option]);\n                      }\n                      setRoleDropdownOpen(false);\n                    }}\n                    onClear={(event) => {\n                      event.stopPropagation();\n                      field.onChange([]);\n                    }}\n                    aria-label={t(\"realmRole\")}\n                    isOpen={roleDropdownOpen}\n                  >\n                    {clientRoles.map((role) => (\n                      <SelectOption\n                        selected={role.name === field.value}\n                        key={role.name}\n                        value={role.name}\n                      />\n                    ))}\n                  </Select>\n                )}\n              />\n            </FormGroup>\n          </FormAccess>\n        </FormPanel>\n        <FormPanel className=\"kc-permissions\" title={t(\"common:permissions\")}>\n          <FormAccess isHorizontal role=\"view-clients\">\n            <FormGroup\n              label={t(\"applyToResourceType\")}\n              fieldId=\"applyToResourceType\"\n              labelIcon={\n                <HelpItem\n                  helpText=\"clients-help:applyToResourceType\"\n                  fieldLabelId=\"clients:applyToResourceType\"\n                />\n              }\n            >\n              <Switch\n                id=\"applyToResource-switch\"\n                label={t(\"common:on\")}\n                labelOff={t(\"common:off\")}\n                isChecked={applyToResourceType}\n                onChange={setApplyToResourceType}\n                aria-label={t(\"applyToResourceType\")}\n              />\n            </FormGroup>\n\n            {!applyToResourceType ? (\n              <FormGroup\n                label={t(\"resourcesAndAuthScopes\")}\n                id=\"resourcesAndAuthScopes\"\n                isRequired\n                labelIcon={\n                  <HelpItem\n                    helpText={t(\"clients-help:contextualAttributes\")}\n                    fieldLabelId={`resourcesAndAuthScopes`}\n                  />\n                }\n                helperTextInvalid={t(\"common:required\")}\n                fieldId=\"resourcesAndAuthScopes\"\n              >\n                <KeyBasedAttributeInput\n                  selectableValues={resources.map<AttributeType>((item) => ({\n                    name: item.name!,\n                    key: item._id!,\n                  }))}\n                  resources={resources}\n                  name=\"resources\"\n                />\n              </FormGroup>\n            ) : (\n              <>\n                <FormGroup\n                  label={t(\"resourceType\")}\n                  isRequired\n                  labelIcon={\n                    <HelpItem\n                      helpText=\"clients-help:resourceType\"\n                      fieldLabelId=\"clients:resourceType\"\n                    />\n                  }\n                  fieldId=\"client\"\n                  validated={errors.alias ? \"error\" : \"default\"}\n                  helperTextInvalid={t(\"common:required\")}\n                >\n                  <KeycloakTextInput\n                    id=\"alias\"\n                    data-testid=\"alias\"\n                    {...register(\"alias\", { required: true })}\n                  />\n                </FormGroup>\n                <FormGroup\n                  label={t(\"authScopes\")}\n                  labelIcon={\n                    <HelpItem\n                      helpText=\"clients-help:scopesSelect\"\n                      fieldLabelId=\"clients:client\"\n                    />\n                  }\n                  fieldId=\"authScopes\"\n                >\n                  <Controller\n                    name=\"authScopes\"\n                    defaultValue={[]}\n                    control={control}\n                    render={({ field }) => (\n                      <Select\n                        toggleId=\"authScopes\"\n                        onToggle={setScopesDropdownOpen}\n                        onSelect={(_, v) => {\n                          const option = v.toString();\n                          if (field.value.includes(option)) {\n                            field.onChange(\n                              field.value.filter(\n                                (item: string) => item !== option\n                              )\n                            );\n                          } else {\n                            field.onChange([...field.value, option]);\n                          }\n                          setScopesDropdownOpen(false);\n                        }}\n                        selections={field.value}\n                        variant={SelectVariant.typeaheadMulti}\n                        aria-label={t(\"authScopes\")}\n                        isOpen={scopesDropdownOpen}\n                      >\n                        {scopes.map((scope) => (\n                          <SelectOption\n                            selected={field.value.includes(scope.name!)}\n                            key={scope.id}\n                            value={scope.name}\n                          />\n                        ))}\n                      </Select>\n                    )}\n                  />\n                </FormGroup>\n              </>\n            )}\n            <ExpandableSection\n              toggleText={t(\"contextualInfo\")}\n              onToggle={() => setIsExpanded(!isExpanded)}\n              isExpanded={isExpanded}\n            >\n              <FormGroup\n                label={t(\"contextualAttributes\")}\n                id=\"contextualAttributes\"\n                labelIcon={\n                  <HelpItem\n                    helpText={t(\"clients-help:contextualAttributes\")}\n                    fieldLabelId={`contextualAttributes`}\n                  />\n                }\n                helperTextInvalid={t(\"common:required\")}\n                fieldId=\"contextualAttributes\"\n              >\n                <KeyBasedAttributeInput\n                  selectableValues={defaultContextAttributes}\n                  name=\"context.attributes\"\n                />\n              </FormGroup>\n            </ExpandableSection>\n          </FormAccess>\n          <ActionGroup>\n            <Button\n              data-testid=\"authorization-eval\"\n              id=\"authorization-eval\"\n              className=\"pf-u-mr-md\"\n              isDisabled={!isValid}\n              onClick={() => evaluate()}\n            >\n              {t(\"evaluate\")}\n            </Button>\n            <Button\n              data-testid=\"authorization-revert\"\n              id=\"authorization-revert\"\n              className=\"pf-u-mr-md\"\n              variant=\"link\"\n              onClick={() => reset()}\n            >\n              {t(\"common:revert\")}\n            </Button>\n          </ActionGroup>\n        </FormPanel>\n      </FormProvider>\n    </PageSection>\n  );\n};\n","import type ResourceServerRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceServerRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  FormGroup,\n  PageSection,\n} from \"@patternfly/react-core\";\nimport { saveAs } from \"file-saver\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport { KeycloakTextArea } from \"../../components/keycloak-text-area/KeycloakTextArea\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { prettyPrintJSON } from \"../../util\";\nimport { useParams } from \"../../utils/useParams\";\nimport type { ClientParams } from \"../routes/Client\";\n\nimport \"./authorization-details.css\";\n\nexport const AuthorizationExport = () => {\n  const { t } = useTranslation(\"clients\");\n  const { adminClient } = useAdminClient();\n  const { clientId } = useParams<ClientParams>();\n  const { addAlert, addError } = useAlerts();\n\n  const [code, setCode] = useState<string>();\n  const [authorizationDetails, setAuthorizationDetails] =\n    useState<ResourceServerRepresentation>();\n\n  useFetch(\n    () =>\n      adminClient.clients.exportResource({\n        id: clientId,\n      }),\n\n    (authDetails) => {\n      setCode(JSON.stringify(authDetails, null, 2));\n      setAuthorizationDetails(authDetails);\n    },\n    []\n  );\n\n  const exportAuthDetails = () => {\n    try {\n      saveAs(\n        new Blob([prettyPrintJSON(authorizationDetails)], {\n          type: \"application/json\",\n        }),\n        \"test-authz-config.json\"\n      );\n      addAlert(t(\"exportAuthDetailsSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"exportAuthDetailsError\", error);\n    }\n  };\n\n  if (!code) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <PageSection>\n      <FormAccess isHorizontal role=\"view-realm\" className=\"pf-u-mt-lg\">\n        <FormGroup\n          label={t(\"authDetails\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"clients-help:authDetails\"\n              fieldLabelId=\"clients:authDetails\"\n            />\n          }\n          fieldId=\"client\"\n        >\n          <KeycloakTextArea\n            id=\"authorizationDetails\"\n            readOnly\n            resizeOrientation=\"vertical\"\n            value={code}\n            aria-label={t(\"authDetails\")}\n          />\n        </FormGroup>\n        <ActionGroup>\n          <Button\n            data-testid=\"authorization-export-download\"\n            onClick={() => exportAuthDetails()}\n          >\n            {t(\"common:download\")}\n          </Button>\n          <Button\n            data-testid=\"authorization-export-copy\"\n            variant=\"secondary\"\n            onClick={async () => {\n              try {\n                await navigator.clipboard.writeText(code!);\n                addAlert(t(\"copied\"), AlertVariant.success);\n              } catch (error) {\n                addError(t(\"copyError\"), error);\n              }\n            }}\n          >\n            {t(\"copy\")}\n          </Button>\n        </ActionGroup>\n      </FormAccess>\n    </PageSection>\n  );\n};\n","import type PolicyProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyProviderRepresentation\";\nimport {\n  ActionGroup,\n  Button,\n  Dropdown,\n  DropdownToggle,\n  Form,\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { useEffect } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport useToggle from \"../../utils/useToggle\";\n\nimport \"./search-dropdown.css\";\n\nexport type SearchForm = {\n  name?: string;\n  resource?: string;\n  scope?: string;\n  type?: string;\n  uri?: string;\n  owner?: string;\n};\n\ntype SearchDropdownProps = {\n  types?: PolicyProviderRepresentation[] | PolicyProviderRepresentation[];\n  search: SearchForm;\n  onSearch: (form: SearchForm) => void;\n  isResource?: boolean;\n};\n\nexport const SearchDropdown = ({\n  types,\n  search,\n  onSearch,\n  isResource = false,\n}: SearchDropdownProps) => {\n  const { t } = useTranslation(\"clients\");\n  const {\n    register,\n    control,\n    reset,\n    formState: { isDirty },\n    handleSubmit,\n  } = useForm<SearchForm>({ mode: \"onChange\" });\n\n  const [open, toggle] = useToggle();\n  const [typeOpen, toggleType] = useToggle();\n\n  const submit = (form: SearchForm) => {\n    toggle();\n    onSearch(form);\n  };\n\n  useEffect(() => reset(search), [search]);\n\n  const typeOptions = (value?: string) => [\n    <SelectOption key=\"empty\" value=\"\">\n      {t(\"allTypes\")}\n    </SelectOption>,\n    ...(types || []).map((type) => (\n      <SelectOption\n        selected={type.type === value}\n        key={type.type}\n        value={type.type}\n      >\n        {type.name}\n      </SelectOption>\n    )),\n  ];\n\n  return (\n    <Dropdown\n      data-testid=\"searchdropdown_dorpdown\"\n      className=\"pf-u-ml-md\"\n      toggle={\n        <DropdownToggle\n          onToggle={toggle}\n          className=\"keycloak__client_authentication__searchdropdown\"\n        >\n          {t(\"searchForPermission\")}\n        </DropdownToggle>\n      }\n      isOpen={open}\n    >\n      <Form\n        isHorizontal\n        className=\"keycloak__client_authentication__searchdropdown_form\"\n        onSubmit={handleSubmit(submit)}\n      >\n        <FormGroup label={t(\"common:name\")} fieldId=\"name\">\n          <KeycloakTextInput\n            id=\"name\"\n            data-testid=\"searchdropdown_name\"\n            {...register(\"name\")}\n          />\n        </FormGroup>\n        {isResource && (\n          <>\n            <FormGroup label={t(\"common:type\")} fieldId=\"type\">\n              <KeycloakTextInput\n                id=\"type\"\n                data-testid=\"searchdropdown_type\"\n                {...register(\"type\")}\n              />\n            </FormGroup>\n            <FormGroup label={t(\"uris\")} fieldId=\"uri\">\n              <KeycloakTextInput\n                id=\"uri\"\n                data-testid=\"searchdropdown_uri\"\n                {...register(\"uri\")}\n              />\n            </FormGroup>\n            <FormGroup label={t(\"owner\")} fieldId=\"owner\">\n              <KeycloakTextInput\n                id=\"owner\"\n                data-testid=\"searchdropdown_owner\"\n                {...register(\"owner\")}\n              />\n            </FormGroup>\n          </>\n        )}\n        {!isResource && (\n          <FormGroup label={t(\"resource\")} fieldId=\"resource\">\n            <KeycloakTextInput\n              id=\"resource\"\n              data-testid=\"searchdropdown_resource\"\n              {...register(\"resource\")}\n            />\n          </FormGroup>\n        )}\n        <FormGroup label={t(\"scope\")} fieldId=\"scope\">\n          <KeycloakTextInput\n            id=\"scope\"\n            data-testid=\"searchdropdown_scope\"\n            {...register(\"scope\")}\n          />\n        </FormGroup>\n        {!isResource && (\n          <FormGroup label={t(\"common:type\")} fieldId=\"type\">\n            <Controller\n              name=\"type\"\n              defaultValue=\"\"\n              control={control}\n              render={({ field }) => (\n                <Select\n                  toggleId=\"type\"\n                  onToggle={toggleType}\n                  onSelect={(event, value) => {\n                    event.stopPropagation();\n                    field.onChange(value);\n                    toggleType();\n                  }}\n                  selections={field.value || t(\"allTypes\")}\n                  variant={SelectVariant.single}\n                  aria-label={t(\"common:type\")}\n                  isOpen={typeOpen}\n                >\n                  {typeOptions(field.value)}\n                </Select>\n              )}\n            />\n          </FormGroup>\n        )}\n        <ActionGroup>\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            data-testid=\"search-btn\"\n            isDisabled={!isDirty}\n          >\n            {t(\"common:search\")}\n          </Button>\n          <Button\n            variant=\"link\"\n            data-testid=\"revert-btn\"\n            onClick={() => onSearch({})}\n          >\n            {t(\"common:clear\")}\n          </Button>\n        </ActionGroup>\n      </Form>\n    </Dropdown>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { Label } from \"@patternfly/react-core\";\n\ntype MoreLabelProps = {\n  array: unknown[] | undefined;\n};\n\nexport const MoreLabel = ({ array }: MoreLabelProps) => {\n  const { t } = useTranslation(\"clients\");\n\n  if (!array || array.length <= 1) {\n    return null;\n  }\n  return (\n    <Label color=\"blue\">{t(\"common:more\", { count: array.length - 1 })}</Label>\n  );\n};\n","import {\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, Path } from \"react-router-dom\";\n\ntype DetailDescriptionProps<T> = {\n  name: string;\n  array?: string[] | T[];\n  convert?: (obj: T) => string;\n};\n\nexport function DetailDescription<T>(props: DetailDescriptionProps<T>) {\n  return <DetailDescriptionLink {...props} />;\n}\n\ntype DetailDescriptionLinkProps<T> = DetailDescriptionProps<T> & {\n  link?: (element: T) => Partial<Path>;\n};\n\nexport function DetailDescriptionLink<T>({\n  name,\n  array,\n  convert,\n  link,\n}: DetailDescriptionLinkProps<T>) {\n  const { t } = useTranslation(\"clients\");\n  return (\n    <DescriptionListGroup>\n      <DescriptionListTerm>{t(name)}</DescriptionListTerm>\n      <DescriptionListDescription>\n        {array?.map((element) => {\n          const value =\n            typeof element === \"string\" ? element : convert!(element);\n          return link ? (\n            <Link key={value} to={link(element as T)} className=\"pf-u-pr-sm\">\n              {value}\n            </Link>\n          ) : (\n            <span key={value} className=\"pf-u-pr-sm\">\n              {value}\n            </span>\n          );\n        })}\n        {array?.length === 0 && <i>{t(\"common:none\")}</i>}\n      </DescriptionListDescription>\n    </DescriptionListGroup>\n  );\n}\n","import { useNavigate } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  Title,\n  EmptyStateBody,\n  Button,\n  Tooltip,\n} from \"@patternfly/react-core\";\nimport { PlusCircleIcon } from \"@patternfly/react-icons\";\n\nimport { PermissionType, toNewPermission } from \"../routes/NewPermission\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { toUpperCase } from \"../../util\";\n\ntype EmptyButtonProps = {\n  permissionType: PermissionType;\n  disabled?: boolean;\n  clientId: string;\n};\n\nconst EmptyButton = ({\n  permissionType,\n  disabled = false,\n  clientId,\n}: EmptyButtonProps) => {\n  const { t } = useTranslation(\"clients\");\n  const { realm } = useRealm();\n  const navigate = useNavigate();\n  return (\n    <Button\n      data-testid={`create-${permissionType}`}\n      className={\n        disabled ? \"keycloak__permissions__empty_state \" : \"\" + \"pf-u-m-sm\"\n      }\n      variant=\"secondary\"\n      onClick={() =>\n        !disabled &&\n        navigate(toNewPermission({ realm, id: clientId, permissionType }))\n      }\n    >\n      {t(`create${toUpperCase(permissionType)}BasedPermission`)}\n    </Button>\n  );\n};\n\nconst TooltipEmptyButton = ({\n  permissionType,\n  disabled,\n  ...props\n}: EmptyButtonProps) => {\n  const { t } = useTranslation(\"clients\");\n  return disabled ? (\n    <Tooltip content={t(`no${toUpperCase(permissionType)}CreateHint`)}>\n      <EmptyButton\n        {...props}\n        disabled={disabled}\n        permissionType={permissionType}\n      />\n    </Tooltip>\n  ) : (\n    <EmptyButton\n      {...props}\n      disabled={disabled}\n      permissionType={permissionType}\n    />\n  );\n};\n\ntype EmptyPermissionsStateProps = {\n  clientId: string;\n  isResourceEnabled?: boolean;\n  isScopeEnabled?: boolean;\n};\n\nexport const EmptyPermissionsState = ({\n  clientId,\n  isResourceEnabled,\n  isScopeEnabled,\n}: EmptyPermissionsStateProps) => {\n  const { t } = useTranslation(\"clients\");\n  return (\n    <EmptyState data-testid=\"empty-state\" variant=\"large\">\n      <EmptyStateIcon icon={PlusCircleIcon} />\n      <Title headingLevel=\"h1\" size=\"lg\">\n        {t(\"emptyPermissions\")}\n      </Title>\n      <EmptyStateBody>{t(\"emptyPermissionInstructions\")}</EmptyStateBody>\n      <TooltipEmptyButton\n        permissionType=\"resource\"\n        disabled={isResourceEnabled}\n        clientId={clientId}\n      />\n      <br />\n      <TooltipEmptyButton\n        permissionType=\"scope\"\n        disabled={isScopeEnabled}\n        clientId={clientId}\n      />\n    </EmptyState>\n  );\n};\n","import { useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Alert,\n  AlertVariant,\n  ButtonVariant,\n  DescriptionList,\n  Dropdown,\n  DropdownItem,\n  DropdownSeparator,\n  DropdownToggle,\n  PageSection,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport {\n  ExpandableRowContent,\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\n\nimport type PolicyRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyRepresentation\";\nimport type PolicyProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyProviderRepresentation\";\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { PaginatingTableToolbar } from \"../../components/table-toolbar/PaginatingTableToolbar\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport useToggle from \"../../utils/useToggle\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { SearchDropdown, SearchForm } from \"./SearchDropdown\";\nimport { MoreLabel } from \"./MoreLabel\";\nimport { DetailDescriptionLink } from \"./DetailDescription\";\nimport { EmptyPermissionsState } from \"./EmptyPermissionsState\";\nimport { toNewPermission } from \"../routes/NewPermission\";\nimport { toPermissionDetails } from \"../routes/PermissionDetails\";\nimport { ListEmptyState } from \"../../components/list-empty-state/ListEmptyState\";\nimport { toPolicyDetails } from \"../routes/PolicyDetails\";\n\nimport \"./permissions.css\";\n\ntype PermissionsProps = {\n  clientId: string;\n};\n\ntype ExpandablePolicyRepresentation = PolicyRepresentation & {\n  associatedPolicies?: PolicyRepresentation[];\n  isExpanded: boolean;\n};\n\nexport const AuthorizationPermissions = ({ clientId }: PermissionsProps) => {\n  const { t } = useTranslation(\"clients\");\n  const navigate = useNavigate();\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n\n  const [permissions, setPermissions] =\n    useState<ExpandablePolicyRepresentation[]>();\n  const [selectedPermission, setSelectedPermission] =\n    useState<PolicyRepresentation>();\n  const [policyProviders, setPolicyProviders] =\n    useState<PolicyProviderRepresentation[]>();\n  const [disabledCreate, setDisabledCreate] = useState<{\n    resources: boolean;\n    scopes: boolean;\n  }>();\n  const [createOpen, toggleCreate] = useToggle();\n  const [search, setSearch] = useState<SearchForm>({});\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const [max, setMax] = useState(10);\n  const [first, setFirst] = useState(0);\n\n  const AssociatedPoliciesRenderer = ({\n    row,\n  }: {\n    row: ExpandablePolicyRepresentation;\n  }) => {\n    return (\n      <>\n        {row.associatedPolicies?.[0]?.name}{\" \"}\n        <MoreLabel array={row.associatedPolicies} />\n      </>\n    );\n  };\n\n  useFetch(\n    async () => {\n      const permissions = await adminClient.clients.findPermissions({\n        first,\n        max: max + 1,\n        id: clientId,\n        ...search,\n      });\n\n      return await Promise.all(\n        permissions.map(async (permission) => {\n          const associatedPolicies =\n            await adminClient.clients.getAssociatedPolicies({\n              id: clientId,\n              permissionId: permission.id!,\n            });\n\n          return {\n            ...permission,\n            associatedPolicies,\n            isExpanded: false,\n          };\n        })\n      );\n    },\n    setPermissions,\n    [key, search, first, max]\n  );\n\n  useFetch(\n    async () => {\n      const params = {\n        first: 0,\n        max: 1,\n      };\n      const [policies, resources, scopes] = await Promise.all([\n        adminClient.clients.listPolicyProviders({\n          id: clientId,\n        }),\n        adminClient.clients.listResources({ ...params, id: clientId }),\n        adminClient.clients.listAllScopes({ ...params, id: clientId }),\n      ]);\n      return {\n        policies: policies.filter(\n          (p) => p.type === \"resource\" || p.type === \"scope\"\n        ),\n        resources: resources.length !== 1,\n        scopes: scopes.length !== 1,\n      };\n    },\n    ({ policies, resources, scopes }) => {\n      setPolicyProviders(policies);\n      setDisabledCreate({ resources, scopes });\n    },\n    []\n  );\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"clients:deletePermission\",\n    messageKey: t(\"deletePermissionConfirm\", {\n      permission: selectedPermission?.name,\n    }),\n    continueButtonVariant: ButtonVariant.danger,\n    continueButtonLabel: \"clients:confirm\",\n    onConfirm: async () => {\n      try {\n        await adminClient.clients.delPermission({\n          id: clientId,\n          type: selectedPermission?.type!,\n          permissionId: selectedPermission?.id!,\n        });\n        addAlert(t(\"permissionDeletedSuccess\"), AlertVariant.success);\n        refresh();\n      } catch (error) {\n        addError(\"clients:permissionDeletedError\", error);\n      }\n    },\n  });\n\n  if (!permissions) {\n    return <KeycloakSpinner />;\n  }\n\n  const noData = permissions.length === 0;\n  const searching = Object.keys(search).length !== 0;\n  return (\n    <PageSection variant=\"light\" className=\"pf-u-p-0\">\n      <DeleteConfirm />\n      {(!noData || searching) && (\n        <PaginatingTableToolbar\n          count={permissions.length}\n          first={first}\n          max={max}\n          onNextClick={setFirst}\n          onPreviousClick={setFirst}\n          onPerPageSelect={(first, max) => {\n            setFirst(first);\n            setMax(max);\n          }}\n          toolbarItem={\n            <>\n              <ToolbarItem>\n                <SearchDropdown\n                  types={policyProviders}\n                  search={search}\n                  onSearch={setSearch}\n                />\n              </ToolbarItem>\n              <ToolbarItem>\n                <Dropdown\n                  toggle={\n                    <DropdownToggle\n                      onToggle={toggleCreate}\n                      isPrimary\n                      data-testid=\"permissionCreateDropdown\"\n                    >\n                      {t(\"createPermission\")}\n                    </DropdownToggle>\n                  }\n                  isOpen={createOpen}\n                  dropdownItems={[\n                    <DropdownItem\n                      data-testid=\"create-resource\"\n                      key=\"createResourceBasedPermission\"\n                      isDisabled={disabledCreate?.resources}\n                      component=\"button\"\n                      onClick={() =>\n                        navigate(\n                          toNewPermission({\n                            realm,\n                            id: clientId,\n                            permissionType: \"resource\",\n                          })\n                        )\n                      }\n                    >\n                      {t(\"createResourceBasedPermission\")}\n                    </DropdownItem>,\n                    <DropdownSeparator key=\"separator\" />,\n                    <DropdownItem\n                      data-testid=\"create-scope\"\n                      key=\"createScopeBasedPermission\"\n                      isDisabled={disabledCreate?.scopes}\n                      component=\"button\"\n                      onClick={() =>\n                        navigate(\n                          toNewPermission({\n                            realm,\n                            id: clientId,\n                            permissionType: \"scope\",\n                          })\n                        )\n                      }\n                    >\n                      {t(\"createScopeBasedPermission\")}\n                      {disabledCreate?.scopes && (\n                        <Alert\n                          className=\"pf-u-mt-sm\"\n                          variant=\"warning\"\n                          isInline\n                          isPlain\n                          title={t(\"noScopeCreateHint\")}\n                        />\n                      )}\n                    </DropdownItem>,\n                  ]}\n                />\n              </ToolbarItem>\n            </>\n          }\n        >\n          {!noData && (\n            <TableComposable aria-label={t(\"resources\")} variant=\"compact\">\n              <Thead>\n                <Tr>\n                  <Th />\n                  <Th>{t(\"common:name\")}</Th>\n                  <Th>{t(\"common:type\")}</Th>\n                  <Th>{t(\"associatedPolicy\")}</Th>\n                  <Th>{t(\"common:description\")}</Th>\n                  <Th />\n                </Tr>\n              </Thead>\n              {permissions.map((permission, rowIndex) => (\n                <Tbody key={permission.id} isExpanded={permission.isExpanded}>\n                  <Tr>\n                    <Td\n                      expand={{\n                        rowIndex,\n                        isExpanded: permission.isExpanded,\n                        onToggle: (_, rowIndex) => {\n                          const rows = permissions.map((p, index) =>\n                            index === rowIndex\n                              ? { ...p, isExpanded: !p.isExpanded }\n                              : p\n                          );\n                          setPermissions(rows);\n                        },\n                      }}\n                    />\n                    <Td data-testid={`name-column-${permission.name}`}>\n                      <Link\n                        to={toPermissionDetails({\n                          realm,\n                          id: clientId,\n                          permissionType: permission.type!,\n                          permissionId: permission.id!,\n                        })}\n                      >\n                        {permission.name}\n                      </Link>\n                    </Td>\n                    <Td>\n                      {\n                        policyProviders?.find((p) => p.type === permission.type)\n                          ?.name\n                      }\n                    </Td>\n                    <Td>\n                      <AssociatedPoliciesRenderer row={permission} />\n                    </Td>\n                    <Td>{permission.description}</Td>\n                    <Td\n                      actions={{\n                        items: [\n                          {\n                            title: t(\"common:delete\"),\n                            onClick: async () => {\n                              setSelectedPermission(permission);\n                              toggleDeleteDialog();\n                            },\n                          },\n                        ],\n                      }}\n                    ></Td>\n                  </Tr>\n                  <Tr\n                    key={`child-${permission.id}`}\n                    isExpanded={permission.isExpanded}\n                  >\n                    <Td />\n                    <Td colSpan={5}>\n                      <ExpandableRowContent>\n                        {permission.isExpanded && (\n                          <DescriptionList\n                            isHorizontal\n                            className=\"keycloak_resource_details\"\n                          >\n                            <DetailDescriptionLink\n                              name=\"associatedPolicy\"\n                              array={permission.associatedPolicies}\n                              convert={(p) => p.name!}\n                              link={(p) =>\n                                toPolicyDetails({\n                                  id: clientId,\n                                  realm,\n                                  policyId: p.id!,\n                                  policyType: p.type!,\n                                })\n                              }\n                            />\n                          </DescriptionList>\n                        )}\n                      </ExpandableRowContent>\n                    </Td>\n                  </Tr>\n                </Tbody>\n              ))}\n            </TableComposable>\n          )}\n        </PaginatingTableToolbar>\n      )}\n      {noData && !searching && (\n        <EmptyPermissionsState\n          clientId={clientId}\n          isResourceEnabled={disabledCreate?.resources}\n          isScopeEnabled={disabledCreate?.scopes}\n        />\n      )}\n      {noData && searching && (\n        <ListEmptyState\n          isSearchVariant\n          message={t(\"common:noSearchResults\")}\n          instructions={t(\"common:noSearchResultsInstructions\")}\n        />\n      )}\n    </PageSection>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport {\n  Modal,\n  ModalVariant,\n  TextContent,\n  Text,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport {\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\n\nimport type PolicyProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyProviderRepresentation\";\nimport { isValidComponentType } from \"./policy/PolicyDetails\";\nimport { useMemo } from \"react\";\nimport useLocaleSort, { mapByKey } from \"../../utils/useLocaleSort\";\n\ntype NewPolicyDialogProps = {\n  policyProviders?: PolicyProviderRepresentation[];\n  toggleDialog: () => void;\n  onSelect: (provider: PolicyProviderRepresentation) => void;\n};\n\nexport const NewPolicyDialog = ({\n  policyProviders,\n  onSelect,\n  toggleDialog,\n}: NewPolicyDialogProps) => {\n  const { t } = useTranslation(\"clients\");\n  const localeSort = useLocaleSort();\n\n  const sortedPolicies = useMemo(\n    () =>\n      policyProviders ? localeSort(policyProviders, mapByKey(\"name\")) : [],\n    [policyProviders]\n  );\n\n  return (\n    <Modal\n      aria-labelledby={t(\"addPredefinedMappers\")}\n      variant={ModalVariant.medium}\n      header={\n        <TextContent>\n          <Text component={TextVariants.h1}>{t(\"chooseAPolicyType\")}</Text>\n          <Text>{t(\"chooseAPolicyTypeInstructions\")}</Text>\n        </TextContent>\n      }\n      isOpen\n      onClose={toggleDialog}\n    >\n      <TableComposable aria-label={t(\"policies\")} variant=\"compact\">\n        <Thead>\n          <Tr>\n            <Th>{t(\"common:name\")}</Th>\n            <Th>{t(\"common:description\")}</Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          {sortedPolicies.map((provider) => (\n            <Tr\n              key={provider.type}\n              data-testid={provider.type}\n              onRowClick={() => onSelect(provider)}\n              isHoverable\n            >\n              <Td>{provider.name}</Td>\n              <Td>\n                {isValidComponentType(provider.type!) &&\n                  t(`policyProvider.${provider.type}`)}\n              </Td>\n            </Tr>\n          ))}\n        </Tbody>\n      </TableComposable>\n    </Modal>\n  );\n};\n","import { useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Alert,\n  AlertVariant,\n  Button,\n  DescriptionList,\n  PageSection,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport {\n  ExpandableRowContent,\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\n\nimport type PolicyRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyRepresentation\";\nimport type PolicyProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyProviderRepresentation\";\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { PaginatingTableToolbar } from \"../../components/table-toolbar/PaginatingTableToolbar\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { toPolicyDetails } from \"../routes/PolicyDetails\";\nimport { MoreLabel } from \"./MoreLabel\";\nimport { toUpperCase } from \"../../util\";\nimport { ListEmptyState } from \"../../components/list-empty-state/ListEmptyState\";\nimport useToggle from \"../../utils/useToggle\";\nimport { NewPolicyDialog } from \"./NewPolicyDialog\";\nimport { toCreatePolicy } from \"../routes/NewPolicy\";\nimport { toPermissionDetails } from \"../routes/PermissionDetails\";\nimport { SearchDropdown, SearchForm } from \"./SearchDropdown\";\nimport { DetailDescriptionLink } from \"./DetailDescription\";\n\ntype PoliciesProps = {\n  clientId: string;\n};\n\ntype ExpandablePolicyRepresentation = PolicyRepresentation & {\n  dependentPolicies?: PolicyRepresentation[];\n  isExpanded: boolean;\n};\n\nexport const AuthorizationPolicies = ({ clientId }: PoliciesProps) => {\n  const { t } = useTranslation(\"clients\");\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n  const navigate = useNavigate();\n\n  const [policies, setPolicies] = useState<ExpandablePolicyRepresentation[]>();\n  const [selectedPolicy, setSelectedPolicy] =\n    useState<ExpandablePolicyRepresentation>();\n  const [policyProviders, setPolicyProviders] =\n    useState<PolicyProviderRepresentation[]>();\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const [max, setMax] = useState(10);\n  const [first, setFirst] = useState(0);\n  const [search, setSearch] = useState<SearchForm>({});\n  const [newDialog, toggleDialog] = useToggle();\n\n  useFetch(\n    async () => {\n      const policies = await adminClient.clients.listPolicies({\n        first,\n        max: max + 1,\n        id: clientId,\n        permission: \"false\",\n        ...search,\n      });\n\n      return await Promise.all([\n        adminClient.clients.listPolicyProviders({ id: clientId }),\n        ...(policies || []).map(async (policy) => {\n          const dependentPolicies =\n            await adminClient.clients.listDependentPolicies({\n              id: clientId,\n              policyId: policy.id!,\n            });\n\n          return {\n            ...policy,\n            dependentPolicies,\n            isExpanded: false,\n          };\n        }),\n      ]);\n    },\n    ([providers, ...policies]) => {\n      setPolicyProviders(\n        providers.filter((p) => p.type !== \"resource\" && p.type !== \"scope\")\n      );\n      setPolicies(policies);\n    },\n    [key, search, first, max]\n  );\n\n  const DependentPoliciesRenderer = ({\n    row,\n  }: {\n    row: ExpandablePolicyRepresentation;\n  }) => {\n    return (\n      <>\n        {row.dependentPolicies?.[0]?.name}{\" \"}\n        <MoreLabel array={row.dependentPolicies} />\n      </>\n    );\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"clients:deletePolicy\",\n    children: (\n      <>\n        {t(\"deletePolicyConfirm\")}\n        {selectedPolicy?.dependentPolicies &&\n          selectedPolicy.dependentPolicies.length > 0 && (\n            <Alert\n              variant=\"warning\"\n              isInline\n              isPlain\n              title={t(\"deletePolicyWarning\")}\n              className=\"pf-u-pt-lg\"\n            >\n              <p className=\"pf-u-pt-xs\">\n                {selectedPolicy.dependentPolicies.map((policy) => (\n                  <strong key={policy.id} className=\"pf-u-pr-md\">\n                    {policy.name}\n                  </strong>\n                ))}\n              </p>\n            </Alert>\n          )}\n      </>\n    ),\n    continueButtonLabel: \"clients:confirm\",\n    onConfirm: async () => {\n      try {\n        await adminClient.clients.delPolicy({\n          id: clientId,\n          policyId: selectedPolicy?.id!,\n        });\n        addAlert(t(\"policyDeletedSuccess\"), AlertVariant.success);\n        refresh();\n      } catch (error) {\n        addError(\"clients:policyDeletedError\", error);\n      }\n    },\n  });\n\n  if (!policies) {\n    return <KeycloakSpinner />;\n  }\n\n  const noData = policies.length === 0;\n  const searching = Object.keys(search).length !== 0;\n  return (\n    <PageSection variant=\"light\" className=\"pf-u-p-0\">\n      <DeleteConfirm />\n      {(!noData || searching) && (\n        <>\n          {newDialog && (\n            <NewPolicyDialog\n              policyProviders={policyProviders}\n              onSelect={(p) =>\n                navigate(\n                  toCreatePolicy({ id: clientId, realm, policyType: p.type! })\n                )\n              }\n              toggleDialog={toggleDialog}\n            />\n          )}\n\n          <PaginatingTableToolbar\n            count={policies.length}\n            first={first}\n            max={max}\n            onNextClick={setFirst}\n            onPreviousClick={setFirst}\n            onPerPageSelect={(first, max) => {\n              setFirst(first);\n              setMax(max);\n            }}\n            toolbarItem={\n              <>\n                <ToolbarItem>\n                  <SearchDropdown\n                    types={policyProviders}\n                    search={search}\n                    onSearch={setSearch}\n                  />\n                </ToolbarItem>\n                <ToolbarItem>\n                  <Button data-testid=\"createPolicy\" onClick={toggleDialog}>\n                    {t(\"createPolicy\")}\n                  </Button>\n                </ToolbarItem>\n              </>\n            }\n          >\n            {!noData && (\n              <TableComposable aria-label={t(\"resources\")} variant=\"compact\">\n                <Thead>\n                  <Tr>\n                    <Th />\n                    <Th>{t(\"common:name\")}</Th>\n                    <Th>{t(\"common:type\")}</Th>\n                    <Th>{t(\"dependentPermission\")}</Th>\n                    <Th>{t(\"common:description\")}</Th>\n                    <Th />\n                  </Tr>\n                </Thead>\n                {policies.map((policy, rowIndex) => (\n                  <Tbody key={policy.id} isExpanded={policy.isExpanded}>\n                    <Tr>\n                      <Td\n                        expand={{\n                          rowIndex,\n                          isExpanded: policy.isExpanded,\n                          onToggle: (_, rowIndex) => {\n                            const rows = policies.map((policy, index) =>\n                              index === rowIndex\n                                ? { ...policy, isExpanded: !policy.isExpanded }\n                                : policy\n                            );\n                            setPolicies(rows);\n                          },\n                        }}\n                      />\n                      <Td data-testid={`name-column-${policy.name}`}>\n                        <Link\n                          to={toPolicyDetails({\n                            realm,\n                            id: clientId,\n                            policyType: policy.type!,\n                            policyId: policy.id!,\n                          })}\n                        >\n                          {policy.name}\n                        </Link>\n                      </Td>\n                      <Td>{toUpperCase(policy.type!)}</Td>\n                      <Td>\n                        <DependentPoliciesRenderer row={policy} />\n                      </Td>\n                      <Td>{policy.description}</Td>\n                      <Td\n                        actions={{\n                          items: [\n                            {\n                              title: t(\"common:delete\"),\n                              onClick: async () => {\n                                setSelectedPolicy(policy);\n                                toggleDeleteDialog();\n                              },\n                            },\n                          ],\n                        }}\n                      />\n                    </Tr>\n                    <Tr\n                      key={`child-${policy.id}`}\n                      isExpanded={policy.isExpanded}\n                    >\n                      <Td />\n                      <Td colSpan={4}>\n                        <ExpandableRowContent>\n                          {policy.isExpanded && (\n                            <DescriptionList\n                              isHorizontal\n                              className=\"keycloak_resource_details\"\n                            >\n                              <DetailDescriptionLink\n                                name=\"dependentPermission\"\n                                array={policy.dependentPolicies}\n                                convert={(p) => p.name!}\n                                link={(permission) =>\n                                  toPermissionDetails({\n                                    realm,\n                                    id: clientId,\n                                    permissionId: permission.id!,\n                                    permissionType: permission.type!,\n                                  })\n                                }\n                              />\n                            </DescriptionList>\n                          )}\n                        </ExpandableRowContent>\n                      </Td>\n                    </Tr>\n                  </Tbody>\n                ))}\n              </TableComposable>\n            )}\n          </PaginatingTableToolbar>\n        </>\n      )}\n      {noData && searching && (\n        <ListEmptyState\n          isSearchVariant\n          message={t(\"common:noSearchResults\")}\n          instructions={t(\"common:noSearchResultsInstructions\")}\n        />\n      )}\n      {noData && !searching && (\n        <>\n          {newDialog && (\n            <NewPolicyDialog\n              policyProviders={policyProviders?.filter(\n                (p) => p.type !== \"aggregate\"\n              )}\n              onSelect={(p) =>\n                navigate(\n                  toCreatePolicy({ id: clientId, realm, policyType: p.type! })\n                )\n              }\n              toggleDialog={toggleDialog}\n            />\n          )}\n          <ListEmptyState\n            message={t(\"emptyPolicies\")}\n            instructions={t(\"emptyPoliciesInstructions\")}\n            primaryActionText={t(\"createPolicy\")}\n            onPrimaryAction={toggleDialog}\n          />\n        </>\n      )}\n    </PageSection>\n  );\n};\n","import { useState } from \"react\";\nimport { DescriptionList } from \"@patternfly/react-core\";\n\nimport type ResourceServerRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceServerRepresentation\";\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { DetailDescription, DetailDescriptionLink } from \"./DetailDescription\";\nimport { toScopeDetails } from \"../routes/Scope\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { toPermissionDetails } from \"../routes/PermissionDetails\";\n\nimport \"./detail-cell.css\";\n\ntype Scope = { id: string; name: string }[];\n\ntype DetailCellProps = {\n  id: string;\n  clientId: string;\n  uris?: string[];\n};\n\nexport const DetailCell = ({ id, clientId, uris }: DetailCellProps) => {\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n  const [scope, setScope] = useState<Scope>();\n  const [permissions, setPermissions] =\n    useState<ResourceServerRepresentation[]>();\n\n  useFetch(\n    () =>\n      Promise.all([\n        adminClient.clients.listScopesByResource({\n          id: clientId,\n          resourceName: id,\n        }),\n        adminClient.clients.listPermissionsByResource({\n          id: clientId,\n          resourceId: id,\n        }),\n      ]),\n    ([scopes, permissions]) => {\n      setScope(scopes);\n      setPermissions(permissions);\n    },\n    []\n  );\n\n  if (!permissions || !scope) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <DescriptionList isHorizontal className=\"keycloak_resource_details\">\n      <DetailDescription name=\"uris\" array={uris} />\n      <DetailDescriptionLink\n        name=\"scopes\"\n        array={scope}\n        convert={(s) => s.name}\n        link={(scope) =>\n          toScopeDetails({ id: clientId, realm, scopeId: scope.id! })\n        }\n      />\n      <DetailDescriptionLink\n        name=\"associatedPermissions\"\n        array={permissions}\n        convert={(p) => p.name!}\n        link={(permission) =>\n          toPermissionDetails({\n            id: clientId,\n            realm,\n            permissionId: permission.id!,\n            permissionType: \"resource\",\n          })\n        }\n      />\n    </DescriptionList>\n  );\n};\n","import { useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Alert,\n  AlertVariant,\n  Button,\n  PageSection,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport {\n  ExpandableRowContent,\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\n\nimport type ResourceServerRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceServerRepresentation\";\nimport type ResourceRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceRepresentation\";\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { PaginatingTableToolbar } from \"../../components/table-toolbar/PaginatingTableToolbar\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { DetailCell } from \"./DetailCell\";\nimport { toCreateResource } from \"../routes/NewResource\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { toResourceDetails } from \"../routes/Resource\";\nimport { MoreLabel } from \"./MoreLabel\";\nimport { toNewPermission } from \"../routes/NewPermission\";\nimport { ListEmptyState } from \"../../components/list-empty-state/ListEmptyState\";\nimport { SearchDropdown, SearchForm } from \"./SearchDropdown\";\n\ntype ResourcesProps = {\n  clientId: string;\n};\n\ntype ExpandableResourceRepresentation = ResourceRepresentation & {\n  isExpanded: boolean;\n};\n\nexport const AuthorizationResources = ({ clientId }: ResourcesProps) => {\n  const { t } = useTranslation(\"clients\");\n  const navigate = useNavigate();\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n\n  const [resources, setResources] =\n    useState<ExpandableResourceRepresentation[]>();\n  const [selectedResource, setSelectedResource] =\n    useState<ResourceRepresentation>();\n  const [permissions, setPermission] =\n    useState<ResourceServerRepresentation[]>();\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const [max, setMax] = useState(10);\n  const [first, setFirst] = useState(0);\n  const [search, setSearch] = useState<SearchForm>({});\n\n  useFetch(\n    () => {\n      const params = {\n        first,\n        max: max + 1,\n        deep: false,\n        ...search,\n      };\n      return adminClient.clients.listResources({\n        ...params,\n        id: clientId,\n      });\n    },\n    (resources) =>\n      setResources(\n        resources.map((resource) => ({ ...resource, isExpanded: false }))\n      ),\n    [key, search, first, max]\n  );\n\n  const UriRenderer = ({ row }: { row: ResourceRepresentation }) => (\n    <>\n      {row.uris?.[0]} <MoreLabel array={row.uris} />\n    </>\n  );\n\n  const fetchPermissions = async (id: string) => {\n    return adminClient.clients.listPermissionsByResource({\n      id: clientId,\n      resourceId: id,\n    });\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"clients:deleteResource\",\n    children: (\n      <>\n        {t(\"deleteResourceConfirm\")}\n        {permissions?.length && (\n          <Alert\n            variant=\"warning\"\n            isInline\n            isPlain\n            title={t(\"deleteResourceWarning\")}\n            className=\"pf-u-pt-lg\"\n          >\n            <p className=\"pf-u-pt-xs\">\n              {permissions.map((permission) => (\n                <strong key={permission.id} className=\"pf-u-pr-md\">\n                  {permission.name}\n                </strong>\n              ))}\n            </p>\n          </Alert>\n        )}\n      </>\n    ),\n    continueButtonLabel: \"clients:confirm\",\n    onConfirm: async () => {\n      try {\n        await adminClient.clients.delResource({\n          id: clientId,\n          resourceId: selectedResource?._id!,\n        });\n        addAlert(t(\"resourceDeletedSuccess\"), AlertVariant.success);\n        refresh();\n      } catch (error) {\n        addError(\"clients:resourceDeletedError\", error);\n      }\n    },\n  });\n\n  if (!resources) {\n    return <KeycloakSpinner />;\n  }\n\n  const noData = resources.length === 0;\n  const searching = Object.keys(search).length !== 0;\n  return (\n    <PageSection variant=\"light\" className=\"pf-u-p-0\">\n      <DeleteConfirm />\n      {(!noData || searching) && (\n        <PaginatingTableToolbar\n          count={resources.length}\n          first={first}\n          max={max}\n          onNextClick={setFirst}\n          onPreviousClick={setFirst}\n          onPerPageSelect={(first, max) => {\n            setFirst(first);\n            setMax(max);\n          }}\n          toolbarItem={\n            <>\n              <ToolbarItem>\n                <SearchDropdown\n                  search={search}\n                  onSearch={setSearch}\n                  isResource\n                />\n              </ToolbarItem>\n\n              <ToolbarItem>\n                <Button\n                  data-testid=\"createResource\"\n                  component={(props) => (\n                    <Link\n                      {...props}\n                      to={toCreateResource({ realm, id: clientId })}\n                    />\n                  )}\n                >\n                  {t(\"createResource\")}\n                </Button>\n              </ToolbarItem>\n            </>\n          }\n        >\n          {!noData && (\n            <TableComposable aria-label={t(\"resources\")} variant=\"compact\">\n              <Thead>\n                <Tr>\n                  <Th />\n                  <Th>{t(\"common:name\")}</Th>\n                  <Th>{t(\"common:type\")}</Th>\n                  <Th>{t(\"owner\")}</Th>\n                  <Th>{t(\"uris\")}</Th>\n                  <Th />\n                  <Th />\n                </Tr>\n              </Thead>\n              {resources.map((resource, rowIndex) => (\n                <Tbody key={resource._id} isExpanded={resource.isExpanded}>\n                  <Tr>\n                    <Td\n                      expand={{\n                        rowIndex,\n                        isExpanded: resource.isExpanded,\n                        onToggle: (_, rowIndex) => {\n                          const rows = resources.map((resource, index) =>\n                            index === rowIndex\n                              ? {\n                                  ...resource,\n                                  isExpanded: !resource.isExpanded,\n                                }\n                              : resource\n                          );\n                          setResources(rows);\n                        },\n                      }}\n                    />\n                    <Td data-testid={`name-column-${resource.name}`}>\n                      <Link\n                        to={toResourceDetails({\n                          realm,\n                          id: clientId,\n                          resourceId: resource._id!,\n                        })}\n                      >\n                        {resource.name}\n                      </Link>\n                    </Td>\n                    <Td>{resource.type}</Td>\n                    <Td>{resource.owner?.name}</Td>\n                    <Td>\n                      <UriRenderer row={resource} />\n                    </Td>\n                    <Td width={10}>\n                      <Button\n                        variant=\"link\"\n                        component={(props) => (\n                          <Link\n                            {...props}\n                            to={toNewPermission({\n                              realm,\n                              id: clientId,\n                              permissionType: \"resource\",\n                              selectedId: resource._id,\n                            })}\n                          />\n                        )}\n                      >\n                        {t(\"createPermission\")}\n                      </Button>\n                    </Td>\n                    <Td\n                      actions={{\n                        items: [\n                          {\n                            title: t(\"common:delete\"),\n                            onClick: async () => {\n                              setSelectedResource(resource);\n                              setPermission(\n                                await fetchPermissions(resource._id!)\n                              );\n                              toggleDeleteDialog();\n                            },\n                          },\n                        ],\n                      }}\n                    />\n                  </Tr>\n                  <Tr\n                    key={`child-${resource._id}`}\n                    isExpanded={resource.isExpanded}\n                  >\n                    <Td />\n                    <Td colSpan={4}>\n                      <ExpandableRowContent>\n                        {resource.isExpanded && (\n                          <DetailCell\n                            clientId={clientId}\n                            id={resource._id!}\n                            uris={resource.uris}\n                          />\n                        )}\n                      </ExpandableRowContent>\n                    </Td>\n                  </Tr>\n                </Tbody>\n              ))}\n            </TableComposable>\n          )}\n        </PaginatingTableToolbar>\n      )}\n      {noData && searching && (\n        <ListEmptyState\n          isSearchVariant\n          message={t(\"common:noSearchResults\")}\n          instructions={t(\"common:noSearchResultsInstructions\")}\n        />\n      )}\n      {noData && !searching && (\n        <ListEmptyState\n          message={t(\"emptyResources\")}\n          instructions={t(\"emptyResourcesInstructions\")}\n          primaryActionText={t(\"createResource\")}\n          onPrimaryAction={() =>\n            navigate(toCreateResource({ realm, id: clientId }))\n          }\n        />\n      )}\n    </PageSection>\n  );\n};\n","import { useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Button,\n  DescriptionList,\n  PageSection,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport {\n  ExpandableRowContent,\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\n\nimport type ScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/scopeRepresentation\";\nimport type PolicyRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyRepresentation\";\n\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport { PaginatingTableToolbar } from \"../../components/table-toolbar/PaginatingTableToolbar\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { MoreLabel } from \"./MoreLabel\";\nimport { toScopeDetails } from \"../routes/Scope\";\nimport { toNewScope } from \"../routes/NewScope\";\nimport { ListEmptyState } from \"../../components/list-empty-state/ListEmptyState\";\nimport useToggle from \"../../utils/useToggle\";\nimport { DeleteScopeDialog } from \"./DeleteScopeDialog\";\nimport { DetailDescriptionLink } from \"./DetailDescription\";\nimport { toNewPermission } from \"../routes/NewPermission\";\nimport { toResourceDetails } from \"../routes/Resource\";\nimport { toPermissionDetails } from \"../routes/PermissionDetails\";\n\ntype ScopesProps = {\n  clientId: string;\n};\n\nexport type PermissionScopeRepresentation = ScopeRepresentation & {\n  permissions?: PolicyRepresentation[];\n  isLoaded: boolean;\n};\n\ntype ExpandableRow = {\n  id: string;\n  isExpanded: boolean;\n};\n\nexport const AuthorizationScopes = ({ clientId }: ScopesProps) => {\n  const { t } = useTranslation(\"clients\");\n  const navigate = useNavigate();\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n\n  const [deleteDialog, toggleDeleteDialog] = useToggle();\n  const [scopes, setScopes] = useState<PermissionScopeRepresentation[]>();\n  const [selectedScope, setSelectedScope] =\n    useState<PermissionScopeRepresentation>();\n  const [collapsed, setCollapsed] = useState<ExpandableRow[]>([]);\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const [max, setMax] = useState(10);\n  const [first, setFirst] = useState(0);\n  const [search, setSearch] = useState(\"\");\n\n  useFetch(\n    async () => {\n      const params = {\n        first,\n        max: max + 1,\n        deep: false,\n        name: search,\n      };\n      const scopes = await adminClient.clients.listAllScopes({\n        ...params,\n        id: clientId,\n      });\n\n      return await Promise.all(\n        scopes.map(async (scope) => {\n          const options = { id: clientId, scopeId: scope.id! };\n          const permissions =\n            await adminClient.clients.listAllPermissionsByScope(options);\n\n          return {\n            ...scope,\n            permissions,\n            isLoaded: false,\n          };\n        })\n      );\n    },\n    (scopes) => {\n      setScopes(scopes);\n      setCollapsed(scopes.map((s) => ({ id: s.id!, isExpanded: false })));\n    },\n    [key, search, first, max]\n  );\n\n  const getScope = (id: string) => scopes?.find((scope) => scope.id === id)!;\n  const isExpanded = (id: string | undefined) =>\n    collapsed.find((c) => c.id === id)?.isExpanded || false;\n\n  useFetch(\n    async () => {\n      const newlyOpened = collapsed\n        .filter((row) => row.isExpanded)\n        .map(({ id }) => getScope(id))\n        .filter((s) => !s.isLoaded);\n\n      return await Promise.all(\n        newlyOpened.map(async (scope) => ({\n          ...scope,\n          resources: await adminClient.clients.listAllResourcesByScope({\n            id: clientId,\n            scopeId: scope.id!,\n          }),\n          isLoaded: true,\n        }))\n      );\n    },\n    (resourcesScopes) => {\n      let result = [...(scopes || [])];\n      resourcesScopes.forEach((resourceScope) => {\n        const index = scopes?.findIndex(\n          (scope) => resourceScope.id === scope.id\n        )!;\n        result = [\n          ...result.slice(0, index),\n          resourceScope,\n          ...result.slice(index + 1),\n        ];\n      });\n\n      setScopes(result);\n    },\n    [collapsed]\n  );\n\n  const PermissionsRenderer = ({\n    row,\n  }: {\n    row: PermissionScopeRepresentation;\n  }) => (\n    <>\n      {row.permissions?.[0]?.name ? row.permissions[0]?.name : \"—\"}{\" \"}\n      <MoreLabel array={row.permissions} />\n    </>\n  );\n\n  if (!scopes) {\n    return <KeycloakSpinner />;\n  }\n\n  const noData = scopes.length === 0;\n  const searching = search !== \"\";\n  return (\n    <PageSection variant=\"light\" className=\"pf-u-p-0\">\n      <DeleteScopeDialog\n        clientId={clientId}\n        open={deleteDialog}\n        toggleDialog={toggleDeleteDialog}\n        selectedScope={selectedScope}\n        refresh={refresh}\n      />\n      {(!noData || searching) && (\n        <PaginatingTableToolbar\n          count={scopes.length}\n          first={first}\n          max={max}\n          onNextClick={setFirst}\n          onPreviousClick={setFirst}\n          onPerPageSelect={(first, max) => {\n            setFirst(first);\n            setMax(max);\n          }}\n          inputGroupName=\"search\"\n          inputGroupPlaceholder={t(\"searchByName\")}\n          inputGroupOnEnter={setSearch}\n          toolbarItem={\n            <ToolbarItem>\n              <Button\n                data-testid=\"createAuthorizationScope\"\n                component={(props) => (\n                  <Link {...props} to={toNewScope({ realm, id: clientId })} />\n                )}\n              >\n                {t(\"createAuthorizationScope\")}\n              </Button>\n            </ToolbarItem>\n          }\n        >\n          {!noData && (\n            <TableComposable aria-label={t(\"scopes\")} variant=\"compact\">\n              <Thead>\n                <Tr>\n                  <Th />\n                  <Th>{t(\"common:name\")}</Th>\n                  <Th>{t(\"common:permissions\")}</Th>\n                  <Th />\n                  <Th />\n                </Tr>\n              </Thead>\n              {scopes.map((scope, rowIndex) => (\n                <Tbody key={scope.id} isExpanded={isExpanded(scope.id)}>\n                  <Tr>\n                    <Td\n                      expand={{\n                        rowIndex,\n                        isExpanded: isExpanded(scope.id),\n                        onToggle: (_event, index, isExpanded) => {\n                          setCollapsed([\n                            ...collapsed.slice(0, index),\n                            { id: scope.id!, isExpanded },\n                            ...collapsed.slice(index + 1),\n                          ]);\n                        },\n                      }}\n                    />\n                    <Td data-testid={`name-column-${scope.name}`}>\n                      <Link\n                        to={toScopeDetails({\n                          realm,\n                          id: clientId,\n                          scopeId: scope.id!,\n                        })}\n                      >\n                        {scope.name}\n                      </Link>\n                    </Td>\n                    <Td>\n                      <PermissionsRenderer row={scope} />\n                    </Td>\n                    <Td width={10}>\n                      <Button\n                        variant=\"link\"\n                        component={(props) => (\n                          <Link\n                            {...props}\n                            to={toNewPermission({\n                              realm,\n                              id: clientId,\n                              permissionType: \"scope\",\n                              selectedId: scope.id,\n                            })}\n                          />\n                        )}\n                      >\n                        {t(\"createPermission\")}\n                      </Button>\n                    </Td>\n                    <Td\n                      isActionCell\n                      actions={{\n                        items: [\n                          {\n                            title: t(\"common:delete\"),\n                            onClick: () => {\n                              setSelectedScope(scope);\n                              toggleDeleteDialog();\n                            },\n                          },\n                        ],\n                      }}\n                    />\n                  </Tr>\n                  <Tr\n                    key={`child-${scope.id}`}\n                    isExpanded={isExpanded(scope.id)}\n                  >\n                    <Td />\n                    <Td colSpan={4}>\n                      <ExpandableRowContent>\n                        {isExpanded(scope.id) && (\n                          <DescriptionList\n                            isHorizontal\n                            className=\"keycloak_resource_details\"\n                          >\n                            <DetailDescriptionLink\n                              name=\"resources\"\n                              array={scope.resources}\n                              convert={(r) => r.name!}\n                              link={(r) =>\n                                toResourceDetails({\n                                  id: clientId,\n                                  realm,\n                                  resourceId: r._id!,\n                                })\n                              }\n                            />\n                            <DetailDescriptionLink\n                              name=\"associatedPermissions\"\n                              array={scope.permissions}\n                              convert={(p) => p.name!}\n                              link={(p) =>\n                                toPermissionDetails({\n                                  id: clientId,\n                                  realm,\n                                  permissionId: p.id!,\n                                  permissionType: p.type!,\n                                })\n                              }\n                            />\n                          </DescriptionList>\n                        )}\n                      </ExpandableRowContent>\n                    </Td>\n                  </Tr>\n                </Tbody>\n              ))}\n            </TableComposable>\n          )}\n        </PaginatingTableToolbar>\n      )}\n      {noData && !searching && (\n        <ListEmptyState\n          message={t(\"emptyAuthorizationScopes\")}\n          instructions={t(\"emptyAuthorizationInstructions\")}\n          onPrimaryAction={() => navigate(toNewScope({ id: clientId, realm }))}\n          primaryActionText={t(\"createAuthorizationScope\")}\n        />\n      )}\n      {noData && searching && (\n        <ListEmptyState\n          isSearchVariant\n          message={t(\"common:noSearchResults\")}\n          instructions={t(\"common:noSearchResultsInstructions\")}\n        />\n      )}\n    </PageSection>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { ActionGroup, ActionGroupProps, Button } from \"@patternfly/react-core\";\n\ntype SaveResetProps = ActionGroupProps & {\n  name: string;\n  save?: () => void;\n  reset: () => void;\n  isActive?: boolean;\n};\n\nexport const SaveReset = ({\n  name,\n  save,\n  reset,\n  isActive = true,\n  ...rest\n}: SaveResetProps) => {\n  const { t } = useTranslation(\"common\");\n  return (\n    <ActionGroup {...rest}>\n      <Button\n        isDisabled={!isActive}\n        data-testid={name + \"Save\"}\n        onClick={save}\n        type={save ? \"button\" : \"submit\"}\n      >\n        {t(\"save\")}\n      </Button>\n      <Button\n        isDisabled={!isActive}\n        data-testid={name + \"Revert\"}\n        variant=\"link\"\n        onClick={reset}\n      >\n        {t(\"revert\")}\n      </Button>\n    </ActionGroup>\n  );\n};\n","import { Fragment, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Alert,\n  Button,\n  ButtonVariant,\n  Divider,\n  Form,\n  FormGroup,\n  Modal,\n  Radio,\n  Switch,\n} from \"@patternfly/react-core\";\n\nimport type ResourceServerRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceServerRepresentation\";\nimport { JsonFileUpload } from \"../../components/json-file-upload/JsonFileUpload\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\n\ntype ImportDialogProps = {\n  onConfirm: (value: ResourceServerRepresentation) => void;\n  closeDialog: () => void;\n};\n\nexport const ImportDialog = ({ onConfirm, closeDialog }: ImportDialogProps) => {\n  const { t } = useTranslation(\"clients\");\n  const [imported, setImported] = useState<ResourceServerRepresentation>({});\n  return (\n    <Modal\n      title={t(\"import\")}\n      isOpen\n      variant=\"small\"\n      onClose={closeDialog}\n      actions={[\n        <Button\n          id=\"modal-confirm\"\n          key=\"confirm\"\n          onClick={() => {\n            onConfirm(imported);\n            closeDialog();\n          }}\n          data-testid=\"confirm\"\n        >\n          {t(\"confirm\")}\n        </Button>,\n        <Button\n          data-testid=\"cancel\"\n          id=\"modal-cancel\"\n          key=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={() => {\n            closeDialog();\n          }}\n        >\n          {t(\"common:cancel\")}\n        </Button>,\n      ]}\n    >\n      <Form>\n        <JsonFileUpload id=\"import-resource\" onChange={setImported} />\n      </Form>\n      {Object.keys(imported).length !== 0 && (\n        <>\n          <Divider />\n          <p className=\"pf-u-my-lg\">{t(\"importResources\")}</p>\n          <Form isHorizontal>\n            <FormGroup\n              label={t(\"policyEnforcementMode\")}\n              labelIcon={\n                <HelpItem\n                  helpText=\"clients-help:policyEnforcementMode\"\n                  fieldLabelId=\"clients:policyEnforcementMode\"\n                />\n              }\n              fieldId=\"policyEnforcementMode\"\n              hasNoPaddingTop\n            >\n              <Radio\n                id=\"policyEnforcementMode\"\n                name=\"policyEnforcementMode\"\n                label={t(\n                  `policyEnforcementModes.${imported.policyEnforcementMode}`\n                )}\n                isChecked\n                isDisabled\n                className=\"pf-u-mb-md\"\n              />\n            </FormGroup>\n            <FormGroup\n              label={t(\"decisionStrategy\")}\n              labelIcon={\n                <HelpItem\n                  helpText=\"clients-help:decisionStrategy\"\n                  fieldLabelId=\"clients:decisionStrategy\"\n                />\n              }\n              fieldId=\"decisionStrategy\"\n              hasNoPaddingTop\n            >\n              <Radio\n                id=\"decisionStrategy\"\n                name=\"decisionStrategy\"\n                isChecked\n                isDisabled\n                label={t(`decisionStrategies.${imported.decisionStrategy}`)}\n                className=\"pf-u-mb-md\"\n              />\n            </FormGroup>\n            <FormGroup\n              hasNoPaddingTop\n              label={t(\"allowRemoteResourceManagement\")}\n              fieldId=\"allowRemoteResourceManagement\"\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"allowRemoteResourceManagement\")}\n                  fieldLabelId=\"clients:allowRemoteResourceManagement\"\n                />\n              }\n            >\n              <Switch\n                id=\"allowRemoteResourceManagement\"\n                label={t(\"common:on\")}\n                labelOff={t(\"common:off\")}\n                isChecked={imported.allowRemoteResourceManagement}\n                isDisabled\n                aria-label={t(\"allowRemoteResourceManagement\")}\n              />\n            </FormGroup>\n          </Form>\n          <div className=\"pf-u-mt-md\">\n            {Object.entries(imported)\n              .filter(([, value]) => Array.isArray(value))\n              .map(([key, value]) => (\n                <Fragment key={key}>\n                  <Divider />\n                  <p className=\"pf-u-my-sm\">\n                    <strong>\n                      {value.length} {t(key)}\n                    </strong>\n                  </p>\n                </Fragment>\n              ))}\n          </div>\n          <Divider />\n          <Alert\n            variant=\"warning\"\n            className=\"pf-u-mt-lg\"\n            isInline\n            title={t(\"importWarning\")}\n          />\n        </>\n      )}\n    </Modal>\n  );\n};\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Controller, FormProvider, useForm } from \"react-hook-form\";\nimport {\n  AlertVariant,\n  Button,\n  Divider,\n  FormGroup,\n  PageSection,\n  Radio,\n  Switch,\n} from \"@patternfly/react-core\";\n\nimport type ResourceServerRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceServerRepresentation\";\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { SaveReset } from \"../advanced/SaveReset\";\nimport { ImportDialog } from \"./ImportDialog\";\nimport useToggle from \"../../utils/useToggle\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { DecisionStrategySelect } from \"./DecisionStrategySelect\";\n\nconst POLICY_ENFORCEMENT_MODES = [\n  \"ENFORCING\",\n  \"PERMISSIVE\",\n  \"DISABLED\",\n] as const;\n\nexport type FormFields = Omit<\n  ResourceServerRepresentation,\n  \"scopes\" | \"resources\"\n>;\n\nexport const AuthorizationSettings = ({ clientId }: { clientId: string }) => {\n  const { t } = useTranslation(\"clients\");\n  const [resource, setResource] = useState<ResourceServerRepresentation>();\n  const [importDialog, toggleImportDialog] = useToggle();\n\n  const form = useForm<FormFields>({});\n  const { control, reset, handleSubmit } = form;\n\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  useFetch(\n    () => adminClient.clients.getResourceServer({ id: clientId }),\n    (resource) => {\n      setResource(resource);\n      reset(resource);\n    },\n    []\n  );\n\n  const importResource = async (value: ResourceServerRepresentation) => {\n    try {\n      await adminClient.clients.importResource({ id: clientId }, value);\n      addAlert(t(\"importResourceSuccess\"), AlertVariant.success);\n      reset({ ...value });\n    } catch (error) {\n      addError(\"clients:importResourceError\", error);\n    }\n  };\n\n  const onSubmit = async (resource: ResourceServerRepresentation) => {\n    try {\n      await adminClient.clients.updateResourceServer(\n        { id: clientId },\n        resource\n      );\n      addAlert(t(\"updateResourceSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"clients:resourceSaveError\", error);\n    }\n  };\n\n  if (!resource) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <PageSection variant=\"light\">\n      {importDialog && (\n        <ImportDialog\n          onConfirm={importResource}\n          closeDialog={toggleImportDialog}\n        />\n      )}\n      <FormAccess\n        role=\"view-clients\"\n        isHorizontal\n        onSubmit={handleSubmit(onSubmit)}\n      >\n        <FormGroup\n          label={t(\"import\")}\n          fieldId=\"import\"\n          labelIcon={\n            <HelpItem\n              helpText=\"clients-help:import\"\n              fieldLabelId=\"clients:import\"\n            />\n          }\n        >\n          <Button variant=\"secondary\" onClick={toggleImportDialog}>\n            {t(\"import\")}\n          </Button>\n        </FormGroup>\n        <Divider />\n        <FormGroup\n          label={t(\"policyEnforcementMode\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"clients-help:policyEnforcementMode\"\n              fieldLabelId=\"clients:policyEnforcementMode\"\n            />\n          }\n          fieldId=\"policyEnforcementMode\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"policyEnforcementMode\"\n            data-testid=\"policyEnforcementMode\"\n            defaultValue={POLICY_ENFORCEMENT_MODES[0]}\n            control={control}\n            render={({ field }) => (\n              <>\n                {POLICY_ENFORCEMENT_MODES.map((mode) => (\n                  <Radio\n                    id={mode}\n                    key={mode}\n                    data-testid={mode}\n                    isChecked={field.value === mode}\n                    name=\"policyEnforcementMode\"\n                    onChange={() => field.onChange(mode)}\n                    label={t(`policyEnforcementModes.${mode}`)}\n                    className=\"pf-u-mb-md\"\n                  />\n                ))}\n              </>\n            )}\n          />\n        </FormGroup>\n        <FormProvider {...form}>\n          <DecisionStrategySelect isLimited />\n        </FormProvider>\n        <FormGroup\n          hasNoPaddingTop\n          label={t(\"allowRemoteResourceManagement\")}\n          fieldId=\"allowRemoteResourceManagement\"\n          labelIcon={\n            <HelpItem\n              helpText=\"clients-help:allowRemoteResourceManagement\"\n              fieldLabelId=\"clients:allowRemoteResourceManagement\"\n            />\n          }\n        >\n          <Controller\n            name=\"allowRemoteResourceManagement\"\n            data-testid=\"allowRemoteResourceManagement\"\n            defaultValue={false}\n            control={control}\n            render={({ field }) => (\n              <Switch\n                id=\"allowRemoteResourceManagement\"\n                label={t(\"common:on\")}\n                labelOff={t(\"common:off\")}\n                isChecked={field.value}\n                onChange={field.onChange}\n                aria-label={t(\"allowRemoteResourceManagement\")}\n              />\n            )}\n          />\n        </FormGroup>\n        <SaveReset\n          name=\"authenticationSettings\"\n          reset={() => reset(resource)}\n          isActive\n        />\n      </FormAccess>\n    </PageSection>\n  );\n};\n","import type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport type UserSessionRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userSessionRepresentation\";\nimport { PageSection } from \"@patternfly/react-core\";\n\nimport { useTranslation } from \"react-i18next\";\n\nimport type { LoaderFunction } from \"../components/table-toolbar/KeycloakDataTable\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport SessionsTable from \"../sessions/SessionsTable\";\n\ntype ClientSessionsProps = {\n  client: ClientRepresentation;\n};\n\nexport const ClientSessions = ({ client }: ClientSessionsProps) => {\n  const { adminClient } = useAdminClient();\n  const { t } = useTranslation(\"sessions\");\n\n  const loader: LoaderFunction<UserSessionRepresentation> = (first, max) =>\n    adminClient.clients.listSessions({ id: client.id!, first, max });\n\n  return (\n    <PageSection variant=\"light\" className=\"pf-u-p-0\">\n      <SessionsTable\n        loader={loader}\n        hiddenColumns={[\"clients\"]}\n        emptyInstructions={t(\"noSessionsForClient\")}\n      />\n    </PageSection>\n  );\n};\n","import {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, Path, PathValue, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\n\ntype ToggleProps = {\n  name: PathValue<FormFields, Path<FormFields>>;\n  label: string;\n};\nexport const Toggle = ({ name, label }: ToggleProps) => {\n  const { t } = useTranslation(\"clients\");\n  const { control } = useFormContext<FormFields>();\n\n  return (\n    <FormGroup\n      hasNoPaddingTop\n      label={t(label)}\n      fieldId={label}\n      labelIcon={\n        <HelpItem\n          helpText={t(`clients-help:${label}`)}\n          fieldLabelId={`clients:${label}`}\n        />\n      }\n    >\n      <Controller\n        name={name}\n        defaultValue=\"false\"\n        control={control}\n        render={({ field }) => (\n          <Switch\n            id={name!}\n            data-testid={label}\n            label={t(\"common:on\")}\n            labelOff={t(\"common:off\")}\n            isChecked={field.value === \"true\"}\n            onChange={(value) => field.onChange(value.toString())}\n            aria-label={t(label)}\n          />\n        )}\n      />\n    </FormGroup>\n  );\n};\n\nexport const SamlConfig = () => {\n  const { t } = useTranslation(\"clients\");\n  const { control } = useFormContext<FormFields>();\n\n  const [nameFormatOpen, setNameFormatOpen] = useState(false);\n  return (\n    <FormAccess\n      isHorizontal\n      role=\"manage-clients\"\n      className=\"keycloak__capability-config__form\"\n    >\n      <FormGroup\n        label={t(\"nameIdFormat\")}\n        fieldId=\"nameIdFormat\"\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:nameIdFormat\"\n            fieldLabelId=\"clients:nameIdFormat\"\n          />\n        }\n      >\n        <Controller\n          name=\"attributes.saml_name_id_format\"\n          defaultValue=\"username\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"samlNameIdFormat\"\n              onToggle={setNameFormatOpen}\n              onSelect={(_, value) => {\n                field.onChange(value.toString());\n                setNameFormatOpen(false);\n              }}\n              selections={field.value}\n              variant={SelectVariant.single}\n              aria-label={t(\"nameIdFormat\")}\n              isOpen={nameFormatOpen}\n            >\n              {[\"username\", \"email\", \"transient\", \"persistent\"].map((name) => (\n                <SelectOption\n                  selected={name === field.value}\n                  key={name}\n                  value={name}\n                />\n              ))}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <Toggle\n        name={convertAttributeNameToForm(\n          \"attributes.saml.force.name.id.format\"\n        )}\n        label=\"forceNameIdFormat\"\n      />\n      <Toggle\n        name={convertAttributeNameToForm(\"attributes.saml.force.post.binding\")}\n        label=\"forcePostBinding\"\n      />\n      <Toggle\n        name={convertAttributeNameToForm(\"attributes.saml.artifact.binding\")}\n        label=\"forceArtifactBinding\"\n      />\n      <Toggle\n        name={convertAttributeNameToForm(\"attributes.saml.authnstatement\")}\n        label=\"includeAuthnStatement\"\n      />\n      <Toggle\n        name={convertAttributeNameToForm(\n          \"attributes.saml.onetimeuse.condition\"\n        )}\n        label=\"includeOneTimeUseCondition\"\n      />\n      <Toggle\n        name={convertAttributeNameToForm(\n          \"attributes.saml.server.signature.keyinfo.ext\"\n        )}\n        label=\"optimizeLookup\"\n      />\n    </FormAccess>\n  );\n};\n","import {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\nimport { Toggle } from \"./SamlConfig\";\n\nconst SIGNATURE_ALGORITHMS = [\n  \"RSA_SHA1\",\n  \"RSA_SHA256\",\n  \"RSA_SHA256_MGF1\",\n  \"RSA_SHA512\",\n  \"RSA_SHA512_MGF1\",\n  \"DSA_SHA1\",\n] as const;\n\nconst KEYNAME_TRANSFORMER = [\"NONE\", \"KEY_ID\", \"CERT_SUBJECT\"] as const;\n\nconst CANONICALIZATION = [\n  { name: \"EXCLUSIVE\", value: \"http://www.w3.org/2001/10/xml-exc-c14n#\" },\n  {\n    name: \"EXCLUSIVE_WITH_COMMENTS\",\n    value: \"http://www.w3.org/2001/10/xml-exc-c14n#WithComments\",\n  },\n  {\n    name: \"INCLUSIVE\",\n    value: \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\",\n  },\n  {\n    name: \"INCLUSIVE_WITH_COMMENTS\",\n    value: \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\",\n  },\n] as const;\n\nexport const SamlSignature = () => {\n  const { t } = useTranslation(\"clients\");\n  const [algOpen, setAlgOpen] = useState(false);\n  const [keyOpen, setKeyOpen] = useState(false);\n  const [canOpen, setCanOpen] = useState(false);\n\n  const { control, watch } = useFormContext<FormFields>();\n\n  const signDocs = watch(\n    convertAttributeNameToForm<FormFields>(\"attributes.saml.server.signature\")\n  );\n  const signAssertion = watch(\n    convertAttributeNameToForm<FormFields>(\n      \"attributes.saml.assertion.signature\"\n    )\n  );\n\n  return (\n    <FormAccess\n      isHorizontal\n      role=\"manage-clients\"\n      className=\"keycloak__capability-config__form\"\n    >\n      <Toggle\n        name={convertAttributeNameToForm(\"attributes.saml.server.signature\")}\n        label=\"signDocuments\"\n      />\n      <Toggle\n        name={convertAttributeNameToForm(\"attributes.saml.assertion.signature\")}\n        label=\"signAssertions\"\n      />\n      {(signDocs === \"true\" || signAssertion === \"true\") && (\n        <>\n          <FormGroup\n            label={t(\"signatureAlgorithm\")}\n            fieldId=\"signatureAlgorithm\"\n            labelIcon={\n              <HelpItem\n                helpText=\"clients-help:signatureAlgorithm\"\n                fieldLabelId=\"clients:signatureAlgorithm\"\n              />\n            }\n          >\n            <Controller\n              name={convertAttributeNameToForm<FormFields>(\n                \"attributes.saml.signature.algorithm\"\n              )}\n              defaultValue={SIGNATURE_ALGORITHMS[0]}\n              control={control}\n              render={({ field }) => (\n                <Select\n                  toggleId=\"signatureAlgorithm\"\n                  onToggle={setAlgOpen}\n                  onSelect={(_, value) => {\n                    field.onChange(value.toString());\n                    setAlgOpen(false);\n                  }}\n                  selections={field.value}\n                  variant={SelectVariant.single}\n                  aria-label={t(\"signatureAlgorithm\")}\n                  isOpen={algOpen}\n                >\n                  {SIGNATURE_ALGORITHMS.map((algorithm) => (\n                    <SelectOption\n                      selected={algorithm === field.value}\n                      key={algorithm}\n                      value={algorithm}\n                    />\n                  ))}\n                </Select>\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"signatureKeyName\")}\n            fieldId=\"signatureKeyName\"\n            labelIcon={\n              <HelpItem\n                helpText=\"clients-help:signatureKeyName\"\n                fieldLabelId=\"clients:signatureKeyName\"\n              />\n            }\n          >\n            <Controller\n              name={convertAttributeNameToForm<FormFields>(\n                \"attributes.saml.server.signature.keyinfo.xmlSigKeyInfoKeyNameTransformer\"\n              )}\n              defaultValue={KEYNAME_TRANSFORMER[0]}\n              control={control}\n              render={({ field }) => (\n                <Select\n                  toggleId=\"signatureKeyName\"\n                  onToggle={setKeyOpen}\n                  onSelect={(_, value) => {\n                    field.onChange(value.toString());\n                    setKeyOpen(false);\n                  }}\n                  selections={field.value}\n                  variant={SelectVariant.single}\n                  aria-label={t(\"signatureKeyName\")}\n                  isOpen={keyOpen}\n                >\n                  {KEYNAME_TRANSFORMER.map((key) => (\n                    <SelectOption\n                      selected={key === field.value}\n                      key={key}\n                      value={key}\n                    />\n                  ))}\n                </Select>\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"canonicalization\")}\n            fieldId=\"canonicalization\"\n            labelIcon={\n              <HelpItem\n                helpText=\"clients-help:canonicalization\"\n                fieldLabelId=\"clients:canonicalization\"\n              />\n            }\n          >\n            <Controller\n              name=\"attributes.saml_signature_canonicalization_method\"\n              defaultValue={CANONICALIZATION[0].value}\n              control={control}\n              render={({ field }) => (\n                <Select\n                  toggleId=\"canonicalization\"\n                  onToggle={setCanOpen}\n                  onSelect={(_, value) => {\n                    field.onChange(value.toString());\n                    setCanOpen(false);\n                  }}\n                  selections={\n                    CANONICALIZATION.find((can) => can.value === field.value)\n                      ?.name\n                  }\n                  variant={SelectVariant.single}\n                  aria-label={t(\"canonicalization\")}\n                  isOpen={canOpen}\n                >\n                  {CANONICALIZATION.map((can) => (\n                    <SelectOption\n                      selected={can.value === field.value}\n                      key={can.name}\n                      value={can.value}\n                    >\n                      {can.name}\n                    </SelectOption>\n                  ))}\n                </Select>\n              )}\n            />\n          </FormGroup>\n        </>\n      )}\n    </FormAccess>\n  );\n};\n","import { FormGroup } from \"@patternfly/react-core\";\nimport { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { useAccess } from \"../../context/access/Access\";\nimport { SaveReset } from \"../advanced/SaveReset\";\nimport { FormFields } from \"../ClientDetails\";\nimport type { ClientSettingsProps } from \"../ClientSettings\";\nimport { LoginSettings } from \"./LoginSettings\";\n\nexport const AccessSettings = ({\n  client,\n  save,\n  reset,\n}: ClientSettingsProps) => {\n  const { t } = useTranslation(\"clients\");\n  const { register, watch } = useFormContext<FormFields>();\n\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-clients\") || client.access?.configure;\n\n  const protocol = watch(\"protocol\");\n\n  return (\n    <FormAccess\n      isHorizontal\n      fineGrainedAccess={client.access?.configure}\n      role=\"manage-clients\"\n    >\n      {!client.bearerOnly && <LoginSettings protocol={protocol} />}\n      {protocol !== \"saml\" && (\n        <FormGroup\n          label={t(\"adminURL\")}\n          fieldId=\"kc-admin-url\"\n          labelIcon={\n            <HelpItem\n              helpText=\"clients-help:adminURL\"\n              fieldLabelId=\"clients:adminURL\"\n            />\n          }\n        >\n          <KeycloakTextInput\n            id=\"kc-admin-url\"\n            type=\"url\"\n            {...register(\"adminUrl\")}\n          />\n        </FormGroup>\n      )}\n      {client.bearerOnly && (\n        <SaveReset\n          className=\"keycloak__form_actions\"\n          name=\"settings\"\n          save={save}\n          reset={reset}\n          isActive={!isManager}\n        />\n      )}\n    </FormAccess>\n  );\n};\n","import {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { KeycloakTextArea } from \"../../components/keycloak-text-area/KeycloakTextArea\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\n\nexport const LoginSettingsPanel = ({ access }: { access?: boolean }) => {\n  const { t } = useTranslation(\"clients\");\n  const { register, control, watch } = useFormContext<FormFields>();\n\n  const [loginThemeOpen, setLoginThemeOpen] = useState(false);\n  const loginThemes = useServerInfo().themes![\"login\"];\n  const consentRequired = watch(\"consentRequired\");\n  const displayOnConsentScreen: string = watch(\n    convertAttributeNameToForm<FormFields>(\n      \"attributes.display.on.consent.screen\"\n    )\n  );\n\n  return (\n    <FormAccess isHorizontal fineGrainedAccess={access} role=\"manage-clients\">\n      <FormGroup\n        label={t(\"loginTheme\")}\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:loginTheme\"\n            fieldLabelId=\"clients:loginTheme\"\n          />\n        }\n        fieldId=\"loginTheme\"\n      >\n        <Controller\n          name=\"attributes.login_theme\"\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"loginTheme\"\n              onToggle={setLoginThemeOpen}\n              onSelect={(_, value) => {\n                field.onChange(value.toString());\n                setLoginThemeOpen(false);\n              }}\n              selections={field.value || t(\"common:choose\")}\n              variant={SelectVariant.single}\n              aria-label={t(\"loginTheme\")}\n              isOpen={loginThemeOpen}\n            >\n              {[\n                <SelectOption key=\"empty\" value=\"\">\n                  {t(\"common:choose\")}\n                </SelectOption>,\n                ...loginThemes.map((theme) => (\n                  <SelectOption\n                    selected={theme.name === field.value}\n                    key={theme.name}\n                    value={theme.name}\n                  />\n                )),\n              ]}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"consentRequired\")}\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:consentRequired\"\n            fieldLabelId=\"clients:consentRequired\"\n          />\n        }\n        fieldId=\"kc-consent\"\n        hasNoPaddingTop\n      >\n        <Controller\n          name=\"consentRequired\"\n          defaultValue={false}\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"kc-consent-switch\"\n              label={t(\"common:on\")}\n              labelOff={t(\"common:off\")}\n              isChecked={field.value}\n              onChange={field.onChange}\n              aria-label={t(\"consentRequired\")}\n            />\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"displayOnClient\")}\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:displayOnClient\"\n            fieldLabelId=\"clients:displayOnClient\"\n          />\n        }\n        fieldId=\"kc-display-on-client\"\n        hasNoPaddingTop\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.display.on.consent.screen\"\n          )}\n          defaultValue={false}\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"kc-display-on-client-switch\"\n              label={t(\"common:on\")}\n              labelOff={t(\"common:off\")}\n              isChecked={field.value === \"true\"}\n              onChange={(value) => field.onChange(\"\" + value)}\n              isDisabled={!consentRequired}\n              aria-label={t(\"displayOnClient\")}\n            />\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"consentScreenText\")}\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:consentScreenText\"\n            fieldLabelId=\"clients:consentScreenText\"\n          />\n        }\n        fieldId=\"kc-consent-screen-text\"\n      >\n        <KeycloakTextArea\n          id=\"kc-consent-screen-text\"\n          {...register(\n            convertAttributeNameToForm<FormFields>(\n              \"attributes.consent.screen.text\"\n            )\n          )}\n          isDisabled={!(consentRequired && displayOnConsentScreen === \"true\")}\n        />\n      </FormGroup>\n    </FormAccess>\n  );\n};\n","import { FormGroup, Switch, ValidatedOptions } from \"@patternfly/react-core\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { useAccess } from \"../../context/access/Access\";\nimport { beerify, convertAttributeNameToForm } from \"../../util\";\nimport { SaveReset } from \"../advanced/SaveReset\";\nimport type { ClientSettingsProps } from \"../ClientSettings\";\nimport { FormFields } from \"../ClientDetails\";\n\nexport const LogoutPanel = ({\n  save,\n  reset,\n  client: { access },\n}: ClientSettingsProps) => {\n  const { t } = useTranslation(\"clients\");\n  const {\n    register,\n    control,\n    watch,\n    formState: { errors },\n  } = useFormContext<FormFields>();\n\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-clients\") || access?.configure;\n\n  const protocol = watch(\"protocol\");\n  const frontchannelLogout = watch(\"frontchannelLogout\");\n\n  return (\n    <FormAccess\n      isHorizontal\n      fineGrainedAccess={access?.configure}\n      role=\"manage-clients\"\n    >\n      <FormGroup\n        label={t(\"frontchannelLogout\")}\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:frontchannelLogout\"\n            fieldLabelId=\"clients:frontchannelLogout\"\n          />\n        }\n        fieldId=\"kc-frontchannelLogout\"\n        hasNoPaddingTop\n      >\n        <Controller\n          name=\"frontchannelLogout\"\n          defaultValue={true}\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"kc-frontchannelLogout-switch\"\n              label={t(\"common:on\")}\n              labelOff={t(\"common:off\")}\n              isChecked={field.value}\n              onChange={field.onChange}\n              aria-label={t(\"frontchannelLogout\")}\n            />\n          )}\n        />\n      </FormGroup>\n      {protocol === \"openid-connect\" && frontchannelLogout && (\n        <FormGroup\n          label={t(\"frontchannelLogoutUrl\")}\n          fieldId=\"frontchannelLogoutUrl\"\n          labelIcon={\n            <HelpItem\n              helpText=\"clients-help:frontchannelLogoutUrl\"\n              fieldLabelId=\"clients:frontchannelLogoutUrl\"\n            />\n          }\n          helperTextInvalid={\n            errors.attributes?.[beerify(\"frontchannel.logout.url\")]?.message\n          }\n          validated={\n            errors.attributes?.[beerify(\"frontchannel.logout.url\")]?.message\n              ? ValidatedOptions.error\n              : ValidatedOptions.default\n          }\n        >\n          <KeycloakTextInput\n            id=\"frontchannelLogoutUrl\"\n            type=\"url\"\n            {...register(\n              convertAttributeNameToForm<FormFields>(\n                \"attributes.frontchannel.logout.url\"\n              ),\n              {\n                validate: (uri) =>\n                  ((uri.startsWith(\"https://\") || uri.startsWith(\"http://\")) &&\n                    !uri.includes(\"*\")) ||\n                  uri === \"\" ||\n                  t(\"frontchannelUrlInvalid\").toString(),\n              }\n            )}\n            validated={\n              errors.attributes?.[beerify(\"frontchannel.logout.url\")]?.message\n                ? ValidatedOptions.error\n                : ValidatedOptions.default\n            }\n          />\n        </FormGroup>\n      )}\n      {protocol === \"openid-connect\" && (\n        <>\n          <FormGroup\n            label={t(\"backchannelLogoutUrl\")}\n            fieldId=\"backchannelLogoutUrl\"\n            labelIcon={\n              <HelpItem\n                helpText=\"clients-help:backchannelLogoutUrl\"\n                fieldLabelId=\"clients:backchannelLogoutUrl\"\n              />\n            }\n            helperTextInvalid={\n              errors.attributes?.[beerify(\"backchannel.logout.url\")]?.message\n            }\n            validated={\n              errors.attributes?.[beerify(\"backchannel.logout.url\")]?.message\n                ? ValidatedOptions.error\n                : ValidatedOptions.default\n            }\n          >\n            <KeycloakTextInput\n              id=\"backchannelLogoutUrl\"\n              type=\"url\"\n              {...register(\n                convertAttributeNameToForm<FormFields>(\n                  \"attributes.backchannel.logout.url\"\n                ),\n                {\n                  validate: (uri) =>\n                    ((uri.startsWith(\"https://\") ||\n                      uri.startsWith(\"http://\")) &&\n                      !uri.includes(\"*\")) ||\n                    uri === \"\" ||\n                    t(\"backchannelUrlInvalid\").toString(),\n                }\n              )}\n              validated={\n                errors.attributes?.[beerify(\"backchannel.logout.url\")]?.message\n                  ? ValidatedOptions.error\n                  : ValidatedOptions.default\n              }\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"backchannelLogoutSessionRequired\")}\n            labelIcon={\n              <HelpItem\n                helpText=\"clients-help:backchannelLogoutSessionRequired\"\n                fieldLabelId=\"clients:backchannelLogoutSessionRequired\"\n              />\n            }\n            fieldId=\"backchannelLogoutSessionRequired\"\n            hasNoPaddingTop\n          >\n            <Controller\n              name={convertAttributeNameToForm<FormFields>(\n                \"attributes.backchannel.logout.session.required\"\n              )}\n              defaultValue=\"true\"\n              control={control}\n              render={({ field }) => (\n                <Switch\n                  id=\"backchannelLogoutSessionRequired\"\n                  label={t(\"common:on\")}\n                  labelOff={t(\"common:off\")}\n                  isChecked={field.value === \"true\"}\n                  onChange={(value) => field.onChange(value.toString())}\n                  aria-label={t(\"backchannelLogoutSessionRequired\")}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"backchannelLogoutRevokeOfflineSessions\")}\n            labelIcon={\n              <HelpItem\n                helpText=\"clients-help:backchannelLogoutRevokeOfflineSessions\"\n                fieldLabelId=\"clients:backchannelLogoutRevokeOfflineSessions\"\n              />\n            }\n            fieldId=\"backchannelLogoutRevokeOfflineSessions\"\n            hasNoPaddingTop\n          >\n            <Controller\n              name={convertAttributeNameToForm<FormFields>(\n                \"attributes.backchannel.logout.revoke.offline.tokens\"\n              )}\n              defaultValue=\"false\"\n              control={control}\n              render={({ field }) => (\n                <Switch\n                  id=\"backchannelLogoutRevokeOfflineSessions\"\n                  label={t(\"common:on\")}\n                  labelOff={t(\"common:off\")}\n                  isChecked={field.value === \"true\"}\n                  onChange={(value) => field.onChange(value.toString())}\n                  aria-label={t(\"backchannelLogoutRevokeOfflineSessions\")}\n                />\n              )}\n            />\n          </FormGroup>\n        </>\n      )}\n      <SaveReset\n        className=\"keycloak__form_actions\"\n        name=\"settings\"\n        save={save}\n        reset={reset}\n        isActive={isManager}\n      />\n    </FormAccess>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { useFormContext } from \"react-hook-form\";\nimport { Form } from \"@patternfly/react-core\";\n\nimport type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport { ScrollForm } from \"../components/scroll-form/ScrollForm\";\nimport { ClientDescription } from \"./ClientDescription\";\nimport { CapabilityConfig } from \"./add/CapabilityConfig\";\nimport { SamlConfig } from \"./add/SamlConfig\";\nimport { SamlSignature } from \"./add/SamlSignature\";\nimport { AccessSettings } from \"./add/AccessSettings\";\nimport { LoginSettingsPanel } from \"./add/LoginSettingsPanel\";\nimport { LogoutPanel } from \"./add/LogoutPanel\";\nimport { FormFields } from \"./ClientDetails\";\n\nexport type ClientSettingsProps = {\n  client: ClientRepresentation;\n  save: () => void;\n  reset: () => void;\n};\n\nexport const ClientSettings = (props: ClientSettingsProps) => {\n  const { t } = useTranslation(\"clients\");\n\n  const { watch } = useFormContext<FormFields>();\n  const protocol = watch(\"protocol\");\n\n  const { client } = props;\n\n  return (\n    <ScrollForm\n      className=\"pf-u-px-lg pf-u-pb-lg\"\n      sections={[\n        {\n          title: t(\"generalSettings\"),\n          panel: (\n            <Form isHorizontal>\n              <ClientDescription\n                protocol={client.protocol}\n                hasConfigureAccess={client.access?.configure}\n              />\n            </Form>\n          ),\n        },\n        {\n          title: \"My Siop\",\n          panel: <AccessSettings {...props} />,\n        },\n        {\n          title: \"My Siop-2\",\n          isHidden: protocol === \"siop-2\",\n          panel: <AccessSettings {...props} />,\n        },\n        {\n          title: t(\"samlCapabilityConfig\"),\n          isHidden: protocol !== \"saml\" || client.bearerOnly,\n          panel: <SamlConfig />,\n        },\n        {\n          title: t(\"signatureAndEncryption\"),\n          isHidden: protocol !== \"saml\" || client.bearerOnly,\n          panel: <SamlSignature />,\n        },\n        {\n          title: t(\"capabilityConfig\"),\n          isHidden: protocol !== \"openid-connect\" &&  protocol !== \"SIOP-2\" || client.bearerOnly,\n          panel: <CapabilityConfig />,\n        },\n        {\n          title: t(\"loginSettings\"),\n          isHidden: client.bearerOnly,\n          panel: <LoginSettingsPanel access={client.access?.configure} />,\n        },\n        {\n          title: t(\"logoutSettings\"),\n          isHidden: client.bearerOnly,\n          panel: <LogoutPanel {...props} />,\n        },\n      ]}\n    />\n  );\n};\n","import { useEffect, useMemo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  ClipboardCopyButton,\n  ClipboardCopyButtonProps,\n} from \"@patternfly/react-core\";\n\nimport useSetTimeout from \"../../utils/useSetTimeout\";\n\nenum CopyState {\n  Ready,\n  Copied,\n  Error,\n}\n\ntype CopyToClipboardButtonProps = Pick<ClipboardCopyButtonProps, \"variant\"> & {\n  id: string;\n  label: string;\n  text: string;\n};\n\nexport const CopyToClipboardButton = ({\n  id,\n  label,\n  text,\n  variant = \"plain\",\n}: CopyToClipboardButtonProps) => {\n  const { t } = useTranslation(\"clients\");\n  const setTimeout = useSetTimeout();\n\n  const [copy, setCopy] = useState(CopyState.Ready);\n\n  const copyMessage = useMemo(() => {\n    switch (copy) {\n      case CopyState.Ready:\n        return t(\"copyToClipboard\");\n      case CopyState.Copied:\n        return t(\"copySuccess\");\n      case CopyState.Error:\n        return t(\"clipboardCopyError\");\n    }\n  }, [copy]);\n\n  useEffect(() => {\n    if (copy !== CopyState.Ready) {\n      return setTimeout(() => setCopy(CopyState.Ready), 1000);\n    }\n  }, [copy]);\n\n  const copyToClipboard = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      setCopy(CopyState.Copied);\n    } catch (error) {\n      setCopy(CopyState.Error);\n    }\n  };\n\n  return (\n    <ClipboardCopyButton\n      id={`copy-button-${id}`}\n      textId={label}\n      aria-label={t(\"copyToClipboard\")}\n      onClick={() => copyToClipboard(text)}\n      exitDelay={600}\n      variant={variant}\n    >\n      {copyMessage}\n    </ClipboardCopyButton>\n  );\n};\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useFormContext } from \"react-hook-form\";\nimport {\n  Alert,\n  Button,\n  FormGroup,\n  InputGroup,\n  Split,\n  SplitItem,\n} from \"@patternfly/react-core\";\n\nimport type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport { PasswordInput } from \"../../components/password-input/PasswordInput\";\nimport { CopyToClipboardButton } from \"../scopes/CopyToClipboardButton\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport useFormatDate from \"../../utils/useFormatDate\";\n\nexport type ClientSecretProps = {\n  client: ClientRepresentation;\n  secret: string;\n  toggle: () => void;\n};\n\ntype SecretInputProps = Omit<ClientSecretProps, \"client\"> & {\n  id: string;\n  buttonLabel: string;\n};\n\nconst SecretInput = ({ id, buttonLabel, secret, toggle }: SecretInputProps) => {\n  const { t } = useTranslation(\"clients\");\n  const form = useFormContext<ClientRepresentation>();\n\n  return (\n    <Split hasGutter>\n      <SplitItem isFilled>\n        <InputGroup>\n          <PasswordInput id={id} value={secret} isReadOnly />\n          <CopyToClipboardButton\n            id={id}\n            text={secret}\n            label=\"clientSecret\"\n            variant=\"control\"\n          />\n        </InputGroup>\n      </SplitItem>\n      <SplitItem>\n        <Button\n          variant=\"secondary\"\n          isDisabled={form.formState.isDirty}\n          onClick={toggle}\n        >\n          {t(buttonLabel)}\n        </Button>\n      </SplitItem>\n    </Split>\n  );\n};\n\nconst ExpireDateFormatter = ({ time }: { time: number }) => {\n  const { t } = useTranslation(\"clients\");\n  const formatDate = useFormatDate();\n  const unixTimeToString = (time: number) =>\n    time\n      ? t(\"secretExpiresOn\", {\n          time: formatDate(new Date(time * 1000), {\n            dateStyle: \"full\",\n            timeStyle: \"long\",\n          }),\n        })\n      : undefined;\n\n  return <div className=\"pf-u-my-md\">{unixTimeToString(time)}</div>;\n};\n\nexport const ClientSecret = ({ client, secret, toggle }: ClientSecretProps) => {\n  const { t } = useTranslation(\"clients\");\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  const [secretRotated, setSecretRotated] = useState<string | undefined>(\n    client.attributes?.[\"client.secret.rotated\"]\n  );\n  const secretExpirationTime: number =\n    client.attributes?.[\"client.secret.expiration.time\"];\n  const secretRotatedExpirationTime: number =\n    client.attributes?.[\"client.secret.rotated.expiration.time\"];\n\n  const expired = (time: number) => new Date().getTime() >= time * 1000;\n\n  const [toggleInvalidateConfirm, InvalidateConfirm] = useConfirmDialog({\n    titleKey: \"clients:invalidateRotatedSecret\",\n    messageKey: \"clients:invalidateRotatedSecretExplain\",\n    continueButtonLabel: \"common:confirm\",\n    onConfirm: async () => {\n      try {\n        await adminClient.clients.invalidateSecret({\n          id: client.id!,\n        });\n        setSecretRotated(undefined);\n        addAlert(t(\"invalidateRotatedSuccess\"));\n      } catch (error) {\n        addError(\"clients:invalidateRotatedError\", error);\n      }\n    },\n  });\n\n  return (\n    <>\n      <InvalidateConfirm />\n      <FormGroup\n        label={t(\"clientSecret\")}\n        fieldId=\"kc-client-secret\"\n        className=\"pf-u-my-md\"\n      >\n        <SecretInput\n          id=\"kc-client-secret\"\n          secret={secret}\n          toggle={toggle}\n          buttonLabel=\"regenerate\"\n        />\n        <ExpireDateFormatter time={secretExpirationTime} />\n        {expired(secretExpirationTime) && (\n          <Alert variant=\"warning\" isInline title={t(\"secretHasExpired\")} />\n        )}\n      </FormGroup>\n      {secretRotated && (\n        <FormGroup label={t(\"secretRotated\")} fieldId=\"secretRotated\">\n          <SecretInput\n            id=\"secretRotated\"\n            secret={secretRotated}\n            toggle={toggleInvalidateConfirm}\n            buttonLabel=\"invalidateSecret\"\n          />\n          <ExpireDateFormatter time={secretRotatedExpirationTime} />\n        </FormGroup>\n      )}\n    </>\n  );\n};\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\n\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { convertAttributeNameToForm, sortProviders } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\n\nexport const SignedJWT = () => {\n  const { control } = useFormContext();\n  const providers = sortProviders(\n    useServerInfo().providers!.clientSignature.providers\n  );\n  const { t } = useTranslation(\"clients\");\n\n  const [open, isOpen] = useState(false);\n  return (\n    <FormGroup\n      label={t(\"signatureAlgorithm\")}\n      fieldId=\"kc-signature-algorithm\"\n      labelIcon={\n        <HelpItem\n          helpText=\"clients-help:signature-algorithm\"\n          fieldLabelId=\"clients:signatureAlgorithm\"\n        />\n      }\n    >\n      <Controller\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.token.endpoint.auth.signing.alg\"\n        )}\n        defaultValue=\"\"\n        control={control}\n        render={({ field }) => (\n          <Select\n            maxHeight={200}\n            toggleId=\"kc-signature-algorithm\"\n            onToggle={isOpen}\n            onSelect={(_, value) => {\n              field.onChange(value.toString());\n              isOpen(false);\n            }}\n            selections={field.value || t(\"anyAlgorithm\")}\n            variant={SelectVariant.single}\n            aria-label={t(\"signatureAlgorithm\")}\n            isOpen={open}\n          >\n            <SelectOption selected={field.value === \"\"} key=\"any\" value=\"\">\n              {t(\"anyAlgorithm\")}\n            </SelectOption>\n            <>\n              {providers.map((option) => (\n                <SelectOption\n                  selected={option === field.value}\n                  key={option}\n                  value={option}\n                />\n              ))}\n            </>\n          </Select>\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { FormGroup, Switch, ValidatedOptions } from \"@patternfly/react-core\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { beerify, convertAttributeNameToForm } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\n\nexport const X509 = () => {\n  const { t } = useTranslation(\"clients\");\n  const {\n    register,\n    control,\n    formState: { errors },\n  } = useFormContext<FormFields>();\n  return (\n    <>\n      <FormGroup\n        label={t(\"allowRegexComparison\")}\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:allowRegexComparison\"\n            fieldLabelId=\"clients:allowRegexComparison\"\n          />\n        }\n        fieldId=\"allowRegexComparison\"\n        hasNoPaddingTop\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.x509.allow.regex.pattern.comparison\"\n          )}\n          defaultValue=\"false\"\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"allowRegexComparison\"\n              label={t(\"common:on\")}\n              labelOff={t(\"common:off\")}\n              isChecked={field.value === \"true\"}\n              onChange={(value) => field.onChange(value.toString())}\n              aria-label={t(\"allowRegexComparison\")}\n            />\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"subject\")}\n        fieldId=\"kc-subject\"\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:subject\"\n            fieldLabelId=\"clients:subject\"\n          />\n        }\n        helperTextInvalid={t(\"common:required\")}\n        validated={\n          errors.attributes?.[beerify(\"x509.subjectdn\")]\n            ? ValidatedOptions.error\n            : ValidatedOptions.default\n        }\n        isRequired\n      >\n        <KeycloakTextInput\n          type=\"text\"\n          id=\"kc-subject\"\n          validated={\n            errors.attributes?.[beerify(\"x509.subjectdn\")]\n              ? ValidatedOptions.error\n              : ValidatedOptions.default\n          }\n          {...register(\n            convertAttributeNameToForm(\"attributes.x509.subjectdn\"),\n            { required: true }\n          )}\n        />\n      </FormGroup>\n    </>\n  );\n};\n","import type { AuthenticationProviderRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/authenticatorConfigRepresentation\";\nimport type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport type CredentialRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/credentialRepresentation\";\nimport {\n  ActionGroup,\n  Alert,\n  AlertVariant,\n  Button,\n  Card,\n  CardBody,\n  ClipboardCopy,\n  Divider,\n  FormGroup,\n  PageSection,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Split,\n  SplitItem,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { ClientSecret } from \"./ClientSecret\";\nimport { SignedJWT } from \"./SignedJWT\";\nimport { X509 } from \"./X509\";\n\nimport \"./credentials.css\";\nimport { FormFields } from \"../ClientDetails\";\n\ntype AccessToken = {\n  registrationAccessToken: string;\n};\n\nexport type CredentialsProps = {\n  client: ClientRepresentation;\n  save: () => void;\n  refresh: () => void;\n};\n\nexport const Credentials = ({ client, save, refresh }: CredentialsProps) => {\n  const { t } = useTranslation(\"clients\");\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const clientId = client.id!;\n\n  const [providers, setProviders] = useState<\n    AuthenticationProviderRepresentation[]\n  >([]);\n\n  const {\n    control,\n    formState: { isDirty },\n    handleSubmit,\n  } = useFormContext<FormFields>();\n\n  const clientAuthenticatorType = useWatch({\n    control: control,\n    name: \"clientAuthenticatorType\",\n    defaultValue: \"\",\n  });\n\n  const [secret, setSecret] = useState(\"\");\n  const [accessToken, setAccessToken] = useState(\"\");\n  const [open, isOpen] = useState(false);\n\n  useFetch(\n    () =>\n      Promise.all([\n        adminClient.authenticationManagement.getClientAuthenticatorProviders(),\n        adminClient.clients.getClientSecret({\n          id: clientId,\n        }),\n      ]),\n    ([providers, secret]) => {\n      setProviders(providers);\n      setSecret(secret.value!);\n    },\n    []\n  );\n\n  async function regenerate<T>(\n    call: (clientId: string) => Promise<T>,\n    message: string\n  ): Promise<T | undefined> {\n    try {\n      const data = await call(clientId);\n      addAlert(t(`${message}Success`), AlertVariant.success);\n      return data;\n    } catch (error) {\n      addError(`clients:${message}Error`, error);\n    }\n  }\n\n  const regenerateClientSecret = async () => {\n    const secret = await regenerate<CredentialRepresentation>(\n      (clientId) =>\n        adminClient.clients.generateNewClientSecret({ id: clientId }),\n      \"clientSecret\"\n    );\n    setSecret(secret?.value || \"\");\n    refresh();\n  };\n\n  const [toggleClientSecretConfirm, ClientSecretConfirm] = useConfirmDialog({\n    titleKey: \"clients:confirmClientSecretTitle\",\n    messageKey: \"clients:confirmClientSecretBody\",\n    continueButtonLabel: \"common:yes\",\n    cancelButtonLabel: \"common:no\",\n    onConfirm: regenerateClientSecret,\n  });\n\n  const regenerateAccessToken = async () => {\n    const accessToken = await regenerate<AccessToken>(\n      (clientId) =>\n        adminClient.clients.generateRegistrationAccessToken({ id: clientId }),\n      \"accessToken\"\n    );\n    setAccessToken(accessToken?.registrationAccessToken || \"\");\n  };\n\n  const [toggleAccessTokenConfirm, AccessTokenConfirm] = useConfirmDialog({\n    titleKey: \"clients:confirmAccessTokenTitle\",\n    messageKey: \"clients:confirmAccessTokenBody\",\n    continueButtonLabel: \"common:yes\",\n    cancelButtonLabel: \"common:no\",\n    onConfirm: regenerateAccessToken,\n  });\n\n  return (\n    <PageSection>\n      <FormAccess\n        onSubmit={handleSubmit(save)}\n        isHorizontal\n        className=\"pf-u-mt-md\"\n        role=\"manage-clients\"\n      >\n        <ClientSecretConfirm />\n        <AccessTokenConfirm />\n        <Card isFlat>\n          <CardBody>\n            <FormGroup\n              label={t(\"clientAuthenticator\")}\n              fieldId=\"kc-client-authenticator-type\"\n              labelIcon={\n                <HelpItem\n                  helpText=\"clients-help:client-authenticator-type\"\n                  fieldLabelId=\"clients:clientAuthenticator\"\n                />\n              }\n            >\n              <Controller\n                name=\"clientAuthenticatorType\"\n                control={control}\n                defaultValue=\"\"\n                render={({ field }) => (\n                  <Select\n                    toggleId=\"kc-client-authenticator-type\"\n                    required\n                    onToggle={isOpen}\n                    onSelect={(_, value) => {\n                      field.onChange(value as string);\n                      isOpen(false);\n                    }}\n                    selections={field.value}\n                    variant={SelectVariant.single}\n                    aria-label={t(\"clientAuthenticator\")}\n                    isOpen={open}\n                  >\n                    {providers.map((option) => (\n                      <SelectOption\n                        selected={option.id === field.value}\n                        key={option.id}\n                        value={option.id}\n                      >\n                        {option.displayName}\n                      </SelectOption>\n                    ))}\n                  </Select>\n                )}\n              />\n            </FormGroup>\n            {(clientAuthenticatorType === \"client-jwt\" ||\n              clientAuthenticatorType === \"client-secret-jwt\") && <SignedJWT />}\n            {clientAuthenticatorType === \"client-jwt\" && (\n              <Alert\n                variant=\"info\"\n                isInline\n                className=\"kc-signedJWTAlert\"\n                title={t(\"signedJWTConfirm\")}\n              />\n            )}\n            {clientAuthenticatorType === \"client-x509\" && <X509 />}\n            <ActionGroup>\n              <Button variant=\"primary\" type=\"submit\" isDisabled={!isDirty}>\n                {t(\"common:save\")}\n              </Button>\n            </ActionGroup>\n          </CardBody>\n          {(clientAuthenticatorType === \"client-secret\" ||\n            clientAuthenticatorType === \"client-secret-jwt\") && <Divider />}\n          {(clientAuthenticatorType === \"client-secret\" ||\n            clientAuthenticatorType === \"client-secret-jwt\") && (\n            <CardBody>\n              <ClientSecret\n                client={client}\n                secret={secret}\n                toggle={toggleClientSecretConfirm}\n              />\n            </CardBody>\n          )}\n        </Card>\n        <Card isFlat>\n          <CardBody>\n            <FormGroup\n              label={t(\"registrationAccessToken\")}\n              fieldId=\"kc-access-token\"\n              labelIcon={\n                <HelpItem\n                  helpText=\"clients-help:registration-access-token\"\n                  fieldLabelId=\"clients:registrationAccessToken\"\n                />\n              }\n            >\n              <Split hasGutter>\n                <SplitItem isFilled>\n                  <ClipboardCopy id=\"kc-access-token\" isReadOnly>\n                    {accessToken}\n                  </ClipboardCopy>\n                </SplitItem>\n                <SplitItem>\n                  <Button\n                    variant=\"secondary\"\n                    onClick={toggleAccessTokenConfirm}\n                  >\n                    {t(\"regenerate\")}\n                  </Button>\n                </SplitItem>\n              </Split>\n            </FormGroup>\n          </CardBody>\n        </Card>\n      </FormAccess>\n    </PageSection>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { FormGroup, GenerateId } from \"@patternfly/react-core\";\n\nimport type CertificateRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/certificateRepresentation\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { KeycloakTextArea } from \"../../components/keycloak-text-area/KeycloakTextArea\";\n\ntype CertificateProps = Omit<CertificateDisplayProps, \"id\"> & {\n  plain?: boolean;\n};\n\ntype CertificateDisplayProps = {\n  id: string;\n  keyInfo?: CertificateRepresentation;\n};\n\nconst CertificateDisplay = ({ id, keyInfo }: CertificateDisplayProps) => (\n  <KeycloakTextArea\n    readOnly\n    rows={5}\n    id={id}\n    data-testid=\"certificate\"\n    value={keyInfo?.certificate}\n  />\n);\n\nexport const Certificate = ({ keyInfo, plain = false }: CertificateProps) => {\n  const { t } = useTranslation(\"clients\");\n  return (\n    <GenerateId prefix=\"certificate\">\n      {(id) =>\n        plain ? (\n          <CertificateDisplay id={id} keyInfo={keyInfo} />\n        ) : (\n          <FormGroup\n            label={t(\"certificate\")}\n            fieldId={id}\n            labelIcon={\n              <HelpItem\n                helpText=\"clients-help:certificate\"\n                fieldLabelId={`clients:${id}`}\n              />\n            }\n          >\n            <CertificateDisplay id={id} keyInfo={keyInfo} />\n          </FormGroup>\n        )\n      }\n    </GenerateId>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { useFormContext } from \"react-hook-form\";\nimport { FormGroup } from \"@patternfly/react-core\";\n\nimport type KeyStoreConfig from \"@keycloak/keycloak-admin-client/lib/defs/keystoreConfig\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { PasswordInput } from \"../../components/password-input/PasswordInput\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\n\nexport const StoreSettings = ({\n  hidePassword = false,\n  isSaml = false,\n}: {\n  hidePassword?: boolean;\n  isSaml?: boolean;\n}) => {\n  const { t } = useTranslation(\"clients\");\n  const {\n    register,\n    formState: { errors },\n  } = useFormContext<KeyStoreConfig>();\n\n  return (\n    <>\n      <FormGroup\n        label={t(\"keyAlias\")}\n        fieldId=\"keyAlias\"\n        isRequired\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:keyAlias\"\n            fieldLabelId=\"clients:keyAlias\"\n          />\n        }\n        helperTextInvalid={t(\"common:required\")}\n        validated={errors.keyAlias ? \"error\" : \"default\"}\n      >\n        <KeycloakTextInput\n          data-testid=\"keyAlias\"\n          id=\"keyAlias\"\n          validated={errors.keyAlias ? \"error\" : \"default\"}\n          {...register(\"keyAlias\", { required: true })}\n        />\n      </FormGroup>\n      {!hidePassword && (\n        <FormGroup\n          label={t(\"keyPassword\")}\n          fieldId=\"keyPassword\"\n          isRequired\n          labelIcon={\n            <HelpItem\n              helpText=\"clients-help:keyPassword\"\n              fieldLabelId=\"clients:keyPassword\"\n            />\n          }\n          helperTextInvalid={t(\"common:required\")}\n          validated={errors.keyPassword ? \"error\" : \"default\"}\n        >\n          <PasswordInput\n            data-testid=\"keyPassword\"\n            id=\"keyPassword\"\n            validated={errors.keyPassword ? \"error\" : \"default\"}\n            {...register(\"keyPassword\", { required: true })}\n          />\n        </FormGroup>\n      )}\n      {isSaml && (\n        <FormGroup\n          label={t(\"realmCertificateAlias\")}\n          fieldId=\"realmCertificateAlias\"\n          labelIcon={\n            <HelpItem\n              helpText=\"clients-help:realmCertificateAlias\"\n              fieldLabelId=\"clients:realmCertificateAlias\"\n            />\n          }\n        >\n          <KeycloakTextInput\n            data-testid=\"realmCertificateAlias\"\n            id=\"realmCertificateAlias\"\n            {...register(\"realmAlias\")}\n          />\n        </FormGroup>\n      )}\n      <FormGroup\n        label={t(\"storePassword\")}\n        fieldId=\"storePassword\"\n        isRequired\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:storePassword\"\n            fieldLabelId=\"clients:storePassword\"\n          />\n        }\n        helperTextInvalid={t(\"common:required\")}\n        validated={errors.storePassword ? \"error\" : \"default\"}\n      >\n        <PasswordInput\n          data-testid=\"storePassword\"\n          id=\"storePassword\"\n          validated={errors.storePassword ? \"error\" : \"default\"}\n          {...register(\"storePassword\", { required: true })}\n        />\n      </FormGroup>\n    </>\n  );\n};\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Controller,\n  FormProvider,\n  useForm,\n  useFormContext,\n} from \"react-hook-form\";\nimport {\n  Button,\n  ButtonVariant,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\n\nimport type KeyStoreConfig from \"@keycloak/keycloak-admin-client/lib/defs/keystoreConfig\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { StoreSettings } from \"./StoreSettings\";\nimport { FileUpload } from \"../../components/json-file-upload/patternfly/FileUpload\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\n\ntype GenerateKeyDialogProps = {\n  clientId: string;\n  toggleDialog: () => void;\n  save: (keyStoreConfig: KeyStoreConfig) => void;\n};\n\ntype KeyFormProps = {\n  useFile?: boolean;\n  isSaml?: boolean;\n  hasPem?: boolean;\n};\n\nconst CERT_PEM = \"Certificate PEM\" as const;\n\nconst extensions = new Map([\n  [\"PKCS12\", \"p12\"],\n  [\"JKS\", \"jks\"],\n  [\"BCFKS\", \"bcfks\"],\n]);\n\ntype FormFields = KeyStoreConfig & {\n  file: string | File;\n};\n\nexport const getFileExtension = (format: string) => extensions.get(format);\n\nexport const KeyForm = ({\n  isSaml = false,\n  hasPem = false,\n  useFile = false,\n}: KeyFormProps) => {\n  const { t } = useTranslation(\"clients\");\n\n  const [filename, setFilename] = useState<string>();\n  const [openArchiveFormat, setOpenArchiveFormat] = useState(false);\n\n  const { control, watch } = useFormContext<FormFields>();\n  const format = watch(\"format\");\n\n  const { cryptoInfo } = useServerInfo();\n  const supportedKeystoreTypes = [\n    ...(cryptoInfo?.supportedKeystoreTypes ?? []),\n    ...(hasPem ? CERT_PEM : []),\n  ];\n\n  return (\n    <Form className=\"pf-u-pt-lg\">\n      <FormGroup\n        label={t(\"archiveFormat\")}\n        labelIcon={\n          <HelpItem\n            helpText=\"clients-help:archiveFormat\"\n            fieldLabelId=\"clients:archiveFormat\"\n          />\n        }\n        fieldId=\"archiveFormat\"\n      >\n        <Controller\n          name=\"format\"\n          defaultValue={supportedKeystoreTypes[0]}\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"archiveFormat\"\n              onToggle={setOpenArchiveFormat}\n              onSelect={(_, value) => {\n                field.onChange(value.toString());\n                setOpenArchiveFormat(false);\n              }}\n              selections={field.value}\n              variant={SelectVariant.single}\n              aria-label={t(\"archiveFormat\")}\n              isOpen={openArchiveFormat}\n            >\n              {supportedKeystoreTypes.map((option) => (\n                <SelectOption\n                  selected={option === field.value}\n                  key={option}\n                  value={option}\n                />\n              ))}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      {useFile && (\n        <FormGroup\n          label={t(\"importFile\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"clients-help:importFile\"\n              fieldLabelId=\"clients:importFile\"\n            />\n          }\n          fieldId=\"importFile\"\n        >\n          <Controller\n            name=\"file\"\n            defaultValue=\"\"\n            control={control}\n            render={({ field }) => (\n              <FileUpload\n                id=\"importFile\"\n                value={field.value}\n                filename={filename}\n                browseButtonText={t(\"browse\")}\n                onChange={(value, filename) => {\n                  setFilename(filename);\n                  field.onChange(value);\n                }}\n              />\n            )}\n          />\n        </FormGroup>\n      )}\n      {format !== CERT_PEM && (\n        <StoreSettings hidePassword={useFile} isSaml={isSaml} />\n      )}\n    </Form>\n  );\n};\n\nexport const GenerateKeyDialog = ({\n  clientId,\n  save,\n  toggleDialog,\n}: GenerateKeyDialogProps) => {\n  const { t } = useTranslation(\"clients\");\n  const form = useForm<KeyStoreConfig>({\n    defaultValues: { keyAlias: clientId },\n    mode: \"onChange\",\n  });\n\n  const {\n    handleSubmit,\n    formState: { isValid },\n  } = form;\n\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      title={t(\"generateKeys\")}\n      isOpen\n      onClose={toggleDialog}\n      actions={[\n        <Button\n          id=\"modal-confirm\"\n          key=\"confirm\"\n          data-testid=\"confirm\"\n          isDisabled={!isValid}\n          onClick={() => {\n            handleSubmit((config) => {\n              save(config);\n              toggleDialog();\n            })();\n          }}\n        >\n          {t(\"generate\")}\n        </Button>,\n        <Button\n          id=\"modal-cancel\"\n          key=\"cancel\"\n          data-testid=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={() => {\n            toggleDialog();\n          }}\n        >\n          {t(\"common:cancel\")}\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        <Text>{t(\"clients-help:generateKeysDescription\")}</Text>\n      </TextContent>\n      <FormProvider {...form}>\n        <KeyForm />\n      </FormProvider>\n    </Modal>\n  );\n};\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Controller, FormProvider, useForm, useWatch } from \"react-hook-form\";\nimport {\n  Button,\n  ButtonVariant,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { StoreSettings } from \"./StoreSettings\";\nimport { FileUpload } from \"../../components/json-file-upload/patternfly/FileUpload\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\n\ntype ImportKeyDialogProps = {\n  toggleDialog: () => void;\n  save: (importFile: ImportFile) => void;\n};\n\nexport type ImportFile = {\n  keystoreFormat: string;\n  keyAlias: string;\n  storePassword: string;\n  file: { value?: string; filename: string };\n};\n\nexport const ImportKeyDialog = ({\n  save,\n  toggleDialog,\n}: ImportKeyDialogProps) => {\n  const { t } = useTranslation(\"clients\");\n  const form = useForm<ImportFile>();\n  const { control, handleSubmit } = form;\n\n  const [openArchiveFormat, setOpenArchiveFormat] = useState(false);\n\n  const baseFormats = useServerInfo().cryptoInfo?.supportedKeystoreTypes ?? [];\n\n  const formats = baseFormats.concat([\n    \"Certificate PEM\",\n    \"Public Key PEM\",\n    \"JSON Web Key Set\",\n  ]);\n\n  const format = useWatch({\n    control,\n    name: \"keystoreFormat\",\n    defaultValue: formats[0],\n  });\n\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      title={t(\"generateKeys\")}\n      isOpen\n      onClose={toggleDialog}\n      actions={[\n        <Button\n          id=\"modal-confirm\"\n          data-testid=\"confirm\"\n          key=\"confirm\"\n          onClick={() => {\n            handleSubmit((importFile) => {\n              save(importFile);\n              toggleDialog();\n            })();\n          }}\n        >\n          {t(\"import\")}\n        </Button>,\n        <Button\n          id=\"modal-cancel\"\n          data-testid=\"cancel\"\n          key=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={() => {\n            toggleDialog();\n          }}\n        >\n          {t(\"common:cancel\")}\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        <Text>{t(\"clients-help:generateKeysDescription\")}</Text>\n      </TextContent>\n      <Form className=\"pf-u-pt-lg\">\n        <FormGroup\n          label={t(\"archiveFormat\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"clients-help:archiveFormat\"\n              fieldLabelId=\"clients:archiveFormat\"\n            />\n          }\n          fieldId=\"archiveFormat\"\n        >\n          <Controller\n            name=\"keystoreFormat\"\n            control={control}\n            defaultValue={formats[0]}\n            render={({ field }) => (\n              <Select\n                toggleId=\"archiveFormat\"\n                onToggle={setOpenArchiveFormat}\n                onSelect={(_, value) => {\n                  field.onChange(value as string);\n                  setOpenArchiveFormat(false);\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n                aria-label={t(\"archiveFormat\")}\n                isOpen={openArchiveFormat}\n              >\n                {formats.map((option) => (\n                  <SelectOption\n                    selected={option === field.value}\n                    key={option}\n                    value={option}\n                  />\n                ))}\n              </Select>\n            )}\n          />\n        </FormGroup>\n        {baseFormats.includes(format) && (\n          <FormProvider {...form}>\n            <StoreSettings hidePassword />\n          </FormProvider>\n        )}\n        <FormGroup label={t(\"importFile\")} fieldId=\"importFile\">\n          <Controller\n            name=\"file\"\n            control={control}\n            defaultValue={{ filename: \"\" }}\n            render={({ field }) => (\n              <FileUpload\n                id=\"importFile\"\n                value={field.value.value}\n                filename={field.value.filename}\n                onChange={(value, filename) =>\n                  field.onChange({ value, filename })\n                }\n              />\n            )}\n          />\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n","import {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  FormGroup,\n  PageSection,\n  Switch,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { saveAs } from \"file-saver\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport type CertificateRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/certificateRepresentation\";\nimport type KeyStoreConfig from \"@keycloak/keycloak-admin-client/lib/defs/keystoreConfig\";\nimport { Controller, useFormContext, useWatch } from \"react-hook-form\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport useToggle from \"../../utils/useToggle\";\nimport { FormFields } from \"../ClientDetails\";\nimport { Certificate } from \"./Certificate\";\nimport { GenerateKeyDialog, getFileExtension } from \"./GenerateKeyDialog\";\nimport { ImportFile, ImportKeyDialog } from \"./ImportKeyDialog\";\n\ntype KeysProps = {\n  save: () => void;\n  clientId: string;\n  hasConfigureAccess?: boolean;\n};\n\nconst attr = \"jwt.credential\";\n\nexport const Keys = ({ clientId, save, hasConfigureAccess }: KeysProps) => {\n  const { t } = useTranslation(\"clients\");\n  const {\n    control,\n    register,\n    getValues,\n    formState: { isDirty },\n  } = useFormContext<FormFields>();\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  const [keyInfo, setKeyInfo] = useState<CertificateRepresentation>();\n  const [openGenerateKeys, toggleOpenGenerateKeys, setOpenGenerateKeys] =\n    useToggle();\n  const [openImportKeys, toggleOpenImportKeys, setOpenImportKeys] = useToggle();\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const useJwksUrl = useWatch({\n    control,\n    name: convertAttributeNameToForm<FormFields>(\"attributes.use.jwks.url\"),\n    defaultValue: \"false\",\n  });\n\n  useFetch(\n    () => adminClient.clients.getKeyInfo({ id: clientId, attr }),\n    (info) => setKeyInfo(info),\n    [key]\n  );\n\n  const generate = async (config: KeyStoreConfig) => {\n    try {\n      const keyStore = await adminClient.clients.generateAndDownloadKey(\n        {\n          id: clientId,\n          attr,\n        },\n        config\n      );\n      saveAs(\n        new Blob([keyStore], { type: \"application/octet-stream\" }),\n        `keystore.${getFileExtension(config.format ?? \"\")}`\n      );\n      addAlert(t(\"generateSuccess\"), AlertVariant.success);\n      refresh();\n    } catch (error) {\n      addError(\"clients:generateError\", error);\n    }\n  };\n\n  const importKey = async (importFile: ImportFile) => {\n    try {\n      const formData = new FormData();\n      const { file, ...rest } = importFile;\n      Object.entries(rest).map((entry) =>\n        formData.append(entry[0], entry[1] as string)\n      );\n      formData.append(\"file\", file.value!);\n\n      await adminClient.clients.uploadCertificate(\n        { id: clientId, attr },\n        formData\n      );\n      addAlert(t(\"importSuccess\"), AlertVariant.success);\n      refresh();\n    } catch (error) {\n      addError(\"clients:importError\", error);\n    }\n  };\n\n  return (\n    <PageSection variant=\"light\" className=\"keycloak__form\">\n      {openGenerateKeys && (\n        <GenerateKeyDialog\n          clientId={getValues(\"clientId\")!}\n          toggleDialog={toggleOpenGenerateKeys}\n          save={generate}\n        />\n      )}\n      {openImportKeys && (\n        <ImportKeyDialog toggleDialog={toggleOpenImportKeys} save={importKey} />\n      )}\n      <Card isFlat>\n        <CardHeader>\n          <CardTitle>{t(\"jwksUrlConfig\")}</CardTitle>\n        </CardHeader>\n        <CardBody>\n          <TextContent>\n            <Text>{t(\"keysIntro\")}</Text>\n          </TextContent>\n        </CardBody>\n        <CardBody>\n          <FormAccess\n            role=\"manage-clients\"\n            fineGrainedAccess={hasConfigureAccess}\n            isHorizontal\n          >\n            <FormGroup\n              hasNoPaddingTop\n              label={t(\"useJwksUrl\")}\n              fieldId=\"useJwksUrl\"\n              labelIcon={\n                <HelpItem\n                  helpText=\"clients-help:useJwksUrl\"\n                  fieldLabelId=\"clients:useJwksUrl\"\n                />\n              }\n            >\n              <Controller\n                name={convertAttributeNameToForm(\"attributes.use.jwks.url\")}\n                control={control}\n                render={({ field }) => (\n                  <Switch\n                    data-testid=\"useJwksUrl\"\n                    id=\"useJwksUrl-switch\"\n                    label={t(\"common:on\")}\n                    labelOff={t(\"common:off\")}\n                    isChecked={field.value === \"true\"}\n                    onChange={(value) => field.onChange(`${value}`)}\n                    aria-label={t(\"useJwksUrl\")}\n                  />\n                )}\n              />\n            </FormGroup>\n            {useJwksUrl !== \"true\" &&\n              (keyInfo ? (\n                <Certificate plain keyInfo={keyInfo} />\n              ) : (\n                \"No client certificate configured\"\n              ))}\n            {useJwksUrl === \"true\" && (\n              <FormGroup\n                label={t(\"jwksUrl\")}\n                fieldId=\"jwksUrl\"\n                labelIcon={\n                  <HelpItem\n                    helpText=\"clients-help:jwksUrl\"\n                    fieldLabelId=\"clients:jwksUrl\"\n                  />\n                }\n              >\n                <KeycloakTextInput\n                  id=\"jwksUrl\"\n                  type=\"url\"\n                  {...register(\n                    convertAttributeNameToForm(\"attributes.jwks.url\")\n                  )}\n                />\n              </FormGroup>\n            )}\n            <ActionGroup>\n              <Button\n                data-testid=\"saveKeys\"\n                onClick={save}\n                isDisabled={!isDirty}\n              >\n                {t(\"common:save\")}\n              </Button>\n              <Button\n                data-testid=\"generate\"\n                variant=\"secondary\"\n                onClick={() => setOpenGenerateKeys(true)}\n              >\n                {t(\"generateNewKeys\")}\n              </Button>\n              <Button\n                data-testid=\"import\"\n                variant=\"secondary\"\n                onClick={() => setOpenImportKeys(true)}\n                isDisabled={useJwksUrl === \"true\"}\n              >\n                {t(\"import\")}\n              </Button>\n            </ActionGroup>\n          </FormAccess>\n        </CardBody>\n      </Card>\n    </PageSection>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { Button, Modal, Form } from \"@patternfly/react-core\";\nimport { saveAs } from \"file-saver\";\n\nimport KeyStoreConfig from \"@keycloak/keycloak-admin-client/lib/defs/keystoreConfig\";\nimport { KeyForm, getFileExtension } from \"./GenerateKeyDialog\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\n\ntype ExportSamlKeyDialogProps = {\n  clientId: string;\n  close: () => void;\n};\n\nexport const ExportSamlKeyDialog = ({\n  clientId,\n  close,\n}: ExportSamlKeyDialogProps) => {\n  const { t } = useTranslation(\"clients\");\n  const { realm } = useRealm();\n\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  const form = useForm<KeyStoreConfig>({\n    defaultValues: { realmAlias: realm },\n  });\n\n  const download = async (config: KeyStoreConfig) => {\n    try {\n      const keyStore = await adminClient.clients.downloadKey(\n        {\n          id: clientId,\n          attr: \"saml.signing\",\n        },\n        config\n      );\n      saveAs(\n        new Blob([keyStore], { type: \"application/octet-stream\" }),\n        `keystore.${getFileExtension(config.format ?? \"\")}`\n      );\n      addAlert(t(\"samlKeysExportSuccess\"));\n      close();\n    } catch (error) {\n      addError(\"clients:samlKeysExportError\", error);\n    }\n  };\n\n  return (\n    <Modal\n      variant=\"medium\"\n      title={t(\"exportSamlKeyTitle\")}\n      isOpen\n      onClose={close}\n      actions={[\n        <Button\n          id=\"modal-confirm\"\n          data-testid=\"confirm\"\n          key=\"confirm\"\n          type=\"submit\"\n          form=\"export-saml-key-form\"\n        >\n          {t(\"common:export\")}\n        </Button>,\n        <Button\n          id=\"modal-cancel\"\n          data-testid=\"cancel\"\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={() => {\n            close();\n          }}\n        >\n          {t(\"common:cancel\")}\n        </Button>,\n      ]}\n    >\n      <Form\n        id=\"export-saml-key-form\"\n        className=\"pf-u-pt-lg\"\n        onSubmit={form.handleSubmit(download)}\n      >\n        <FormProvider {...form}>\n          <KeyForm isSaml />\n        </FormProvider>\n      </Form>\n    </Modal>\n  );\n};\n","import { useState } from \"react\";\nimport { saveAs } from \"file-saver\";\nimport { useTranslation } from \"react-i18next\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Flex,\n  FlexItem,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  Radio,\n  Split,\n  SplitItem,\n  Text,\n  TextContent,\n  Title,\n} from \"@patternfly/react-core\";\n\nimport type CertificateRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/certificateRepresentation\";\nimport type KeyStoreConfig from \"@keycloak/keycloak-admin-client/lib/defs/keystoreConfig\";\nimport type { KeyTypes } from \"./SamlKeys\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { KeyForm } from \"./GenerateKeyDialog\";\nimport { Certificate } from \"./Certificate\";\nimport type KeycloakAdminClient from \"@keycloak/keycloak-admin-client\";\n\ntype SamlKeysDialogProps = {\n  id: string;\n  attr: KeyTypes;\n  onClose: () => void;\n  onCancel: () => void;\n};\n\nexport type SamlKeysDialogForm = KeyStoreConfig & {\n  file: File;\n};\n\nexport const submitForm = async (\n  form: SamlKeysDialogForm,\n  id: string,\n  attr: KeyTypes,\n  adminClient: KeycloakAdminClient,\n  callback: (error?: unknown) => void\n) => {\n  try {\n    const formData = new FormData();\n    const { file, ...rest } = form;\n    Object.entries(rest).map(([key, value]) =>\n      formData.append(\n        key === \"format\" ? \"keystoreFormat\" : key,\n        value.toString()\n      )\n    );\n    formData.append(\"file\", file);\n\n    await adminClient.clients.uploadKey({ id, attr }, formData);\n    callback();\n  } catch (error) {\n    callback(error);\n  }\n};\n\nexport const SamlKeysDialog = ({\n  id,\n  attr,\n  onClose,\n  onCancel,\n}: SamlKeysDialogProps) => {\n  const { t } = useTranslation(\"clients\");\n  const [type, setType] = useState(false);\n  const [keys, setKeys] = useState<CertificateRepresentation>();\n  const form = useForm<SamlKeysDialogForm>({ mode: \"onChange\" });\n  const {\n    handleSubmit,\n    formState: { isValid },\n  } = form;\n\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  const submit = (form: SamlKeysDialogForm) => {\n    submitForm(form, id, attr, adminClient, (error) => {\n      if (error) {\n        addError(\"clients:importError\", error);\n      } else {\n        addAlert(t(\"importSuccess\"), AlertVariant.success);\n      }\n    });\n  };\n\n  const generate = async () => {\n    try {\n      const key = await adminClient.clients.generateKey({\n        id,\n        attr,\n      });\n      setKeys(key);\n      saveAs(\n        new Blob([key.privateKey!], {\n          type: \"application/octet-stream\",\n        }),\n        \"private.key\"\n      );\n\n      addAlert(t(\"generateSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"clients:generateError\", error);\n    }\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      aria-labelledby={t(\"enableClientSignatureRequired\")}\n      header={\n        <TextContent>\n          <Title headingLevel=\"h1\">{t(\"enableClientSignatureRequired\")}</Title>\n          <Text>{t(\"enableClientSignatureRequiredExplain\")}</Text>\n        </TextContent>\n      }\n      isOpen={true}\n      onClose={onClose}\n      actions={[\n        <Button\n          id=\"modal-confirm\"\n          key=\"confirm\"\n          data-testid=\"confirm\"\n          variant=\"primary\"\n          isDisabled={!isValid && !keys}\n          onClick={() => {\n            if (type) {\n              handleSubmit(submit)();\n            }\n            onClose();\n          }}\n        >\n          {t(\"confirm\")}\n        </Button>,\n        <Button\n          id=\"modal-cancel\"\n          key=\"cancel\"\n          data-testid=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={onCancel}\n        >\n          {t(\"common:cancel\")}\n        </Button>,\n      ]}\n    >\n      <FormProvider {...form}>\n        <Form isHorizontal>\n          <FormGroup\n            label={t(\"selectMethod\")}\n            fieldId=\"selectMethod\"\n            hasNoPaddingTop\n          >\n            <Flex>\n              <FlexItem>\n                <Radio\n                  isChecked={!type}\n                  name=\"selectMethodType\"\n                  onChange={() => setType(false)}\n                  label={t(\"selectMethodType.generate\")}\n                  id=\"selectMethodType-generate\"\n                />\n              </FlexItem>\n              <FlexItem>\n                <Radio\n                  isChecked={type}\n                  name=\"selectMethodType\"\n                  onChange={() => setType(true)}\n                  label={t(\"selectMethodType.import\")}\n                  id=\"selectMethodType-import\"\n                />\n              </FlexItem>\n            </Flex>\n          </FormGroup>\n          {!type && (\n            <FormGroup\n              label={t(\"certificate\")}\n              fieldId=\"certificate\"\n              labelIcon={\n                <HelpItem\n                  helpText=\"clients-help:certificate\"\n                  fieldLabelId=\"clients:certificate\"\n                />\n              }\n            >\n              <Split hasGutter>\n                <SplitItem isFilled>\n                  <Certificate plain keyInfo={keys} />\n                </SplitItem>\n                <SplitItem>\n                  <Button\n                    variant=\"secondary\"\n                    data-testid=\"generate\"\n                    onClick={generate}\n                  >\n                    {t(\"generate\")}\n                  </Button>\n                </SplitItem>\n              </Split>\n            </FormGroup>\n          )}\n        </Form>\n        {type && <KeyForm useFile />}\n      </FormProvider>\n    </Modal>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { FormProvider, useFormContext } from \"react-hook-form\";\nimport { AlertVariant } from \"@patternfly/react-core\";\n\nimport type { KeyTypes } from \"./SamlKeys\";\nimport { KeyForm } from \"./GenerateKeyDialog\";\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { SamlKeysDialogForm, submitForm } from \"./SamlKeysDialog\";\nimport { ConfirmDialogModal } from \"../../components/confirm-dialog/ConfirmDialog\";\n\ntype SamlImportKeyDialogProps = {\n  id: string;\n  attr: KeyTypes;\n  onClose: () => void;\n};\n\nexport const SamlImportKeyDialog = ({\n  id,\n  attr,\n  onClose,\n}: SamlImportKeyDialogProps) => {\n  const { t } = useTranslation(\"clients\");\n  const form = useFormContext<SamlKeysDialogForm>();\n  const { handleSubmit } = form;\n\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  const submit = (form: SamlKeysDialogForm) => {\n    submitForm(form, id, attr, adminClient, (error) => {\n      if (error) {\n        addError(\"clients:importError\", error);\n      } else {\n        addAlert(t(\"importSuccess\"), AlertVariant.success);\n      }\n    });\n  };\n\n  return (\n    <ConfirmDialogModal\n      open={true}\n      toggleDialog={onClose}\n      continueButtonLabel=\"clients:import\"\n      titleKey=\"clients:importKey\"\n      onConfirm={() => {\n        handleSubmit(submit)();\n        onClose();\n      }}\n    >\n      <FormProvider {...form}>\n        <KeyForm useFile hasPem />\n      </FormProvider>\n    </ConfirmDialogModal>\n  );\n};\n","import {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  Card,\n  CardBody,\n  Form,\n  FormGroup,\n  PageSection,\n  Switch,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { saveAs } from \"file-saver\";\nimport { Fragment, useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport type CertificateRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/certificateRepresentation\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { FormPanel } from \"../../components/scroll-form/FormPanel\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport useToggle from \"../../utils/useToggle\";\nimport { FormFields } from \"../ClientDetails\";\nimport { Certificate } from \"./Certificate\";\nimport { ExportSamlKeyDialog } from \"./ExportSamlKeyDialog\";\nimport { SamlImportKeyDialog } from \"./SamlImportKeyDialog\";\nimport { SamlKeysDialog } from \"./SamlKeysDialog\";\n\ntype SamlKeysProps = {\n  clientId: string;\n  save: () => void;\n};\n\nconst KEYS = [\"saml.signing\", \"saml.encryption\"] as const;\nexport type KeyTypes = (typeof KEYS)[number];\n\nconst KEYS_MAPPING: { [key in KeyTypes]: { [index: string]: string } } = {\n  \"saml.signing\": {\n    name: convertAttributeNameToForm(\"attributes.saml.client.signature\"),\n    title: \"signingKeysConfig\",\n    key: \"clientSignature\",\n  },\n  \"saml.encryption\": {\n    name: convertAttributeNameToForm(\"attributes.saml.encrypt\"),\n    title: \"encryptionKeysConfig\",\n    key: \"encryptAssertions\",\n  },\n};\n\ntype KeySectionProps = {\n  clientId: string;\n  keyInfo?: CertificateRepresentation;\n  attr: KeyTypes;\n  onChanged: (key: KeyTypes) => void;\n  onGenerate: (key: KeyTypes, regenerate: boolean) => void;\n  onImport: (key: KeyTypes) => void;\n};\n\nconst KeySection = ({\n  clientId,\n  keyInfo,\n  attr,\n  onChanged,\n  onGenerate,\n  onImport,\n}: KeySectionProps) => {\n  const { t } = useTranslation(\"clients\");\n  const { control, watch } = useFormContext<FormFields>();\n  const title = KEYS_MAPPING[attr].title;\n  const key = KEYS_MAPPING[attr].key;\n  const name = KEYS_MAPPING[attr].name;\n\n  const [showImportDialog, toggleImportDialog] = useToggle();\n\n  const section = watch(name as keyof FormFields);\n  return (\n    <>\n      {showImportDialog && (\n        <ExportSamlKeyDialog clientId={clientId} close={toggleImportDialog} />\n      )}\n      <FormPanel title={t(title)} className=\"kc-form-panel__panel\">\n        <TextContent className=\"pf-u-pb-lg\">\n          <Text>{t(`${title}Explain`)}</Text>\n        </TextContent>\n        <FormAccess role=\"manage-clients\" isHorizontal>\n          <FormGroup\n            labelIcon={\n              <HelpItem\n                helpText={`clients-help:${key}`}\n                fieldLabelId={`clients:${key}`}\n              />\n            }\n            label={t(key)}\n            fieldId={key}\n            hasNoPaddingTop\n          >\n            <Controller\n              name={name as keyof FormFields}\n              control={control}\n              defaultValue=\"false\"\n              render={({ field }) => (\n                <Switch\n                  data-testid={key}\n                  id={key}\n                  label={t(\"common:on\")}\n                  labelOff={t(\"common:off\")}\n                  isChecked={field.value === \"true\"}\n                  onChange={(value) => {\n                    const v = value.toString();\n                    if (v === \"true\") {\n                      onChanged(attr);\n                      field.onChange(v);\n                    } else {\n                      onGenerate(attr, false);\n                    }\n                  }}\n                  aria-label={t(key)}\n                />\n              )}\n            />\n          </FormGroup>\n        </FormAccess>\n      </FormPanel>\n      {keyInfo?.certificate && section === \"true\" && (\n        <Card isFlat>\n          <CardBody className=\"kc-form-panel__body\">\n            <Form isHorizontal>\n              <Certificate keyInfo={keyInfo} />\n              <ActionGroup>\n                <Button\n                  variant=\"secondary\"\n                  onClick={() => onGenerate(attr, true)}\n                >\n                  {t(\"regenerate\")}\n                </Button>\n                <Button variant=\"secondary\" onClick={() => onImport(attr)}>\n                  {t(\"importKey\")}\n                </Button>\n                <Button variant=\"tertiary\" onClick={toggleImportDialog}>\n                  {t(\"common:export\")}\n                </Button>\n              </ActionGroup>\n            </Form>\n          </CardBody>\n        </Card>\n      )}\n    </>\n  );\n};\n\nexport const SamlKeys = ({ clientId, save }: SamlKeysProps) => {\n  const { t } = useTranslation(\"clients\");\n  const [isChanged, setIsChanged] = useState<KeyTypes>();\n  const [keyInfo, setKeyInfo] = useState<CertificateRepresentation[]>();\n  const [selectedType, setSelectedType] = useState<KeyTypes>();\n  const [openImport, setImportOpen] = useState<KeyTypes>();\n  const [refresh, setRefresh] = useState(0);\n\n  const { setValue } = useFormContext();\n\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  useFetch(\n    () =>\n      Promise.all(\n        KEYS.map((attr) =>\n          adminClient.clients.getKeyInfo({ id: clientId, attr })\n        )\n      ),\n    (info) => setKeyInfo(info),\n    [refresh]\n  );\n\n  const generate = async (attr: KeyTypes) => {\n    const index = KEYS.indexOf(attr);\n    try {\n      const info = [...(keyInfo || [])];\n      info[index] = await adminClient.clients.generateKey({\n        id: clientId,\n        attr,\n      });\n\n      setKeyInfo(info);\n      saveAs(\n        new Blob([info[index].privateKey!], {\n          type: \"application/octet-stream\",\n        }),\n        \"private.key\"\n      );\n\n      addAlert(t(\"generateSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"clients:generateError\", error);\n    }\n  };\n\n  const key = selectedType ? KEYS_MAPPING[selectedType].key : \"\";\n  const [toggleDisableDialog, DisableConfirm] = useConfirmDialog({\n    titleKey: t(\"disableSigning\", {\n      key: t(key),\n    }),\n    messageKey: t(\"disableSigningExplain\", {\n      key: t(key),\n    }),\n    continueButtonLabel: \"common:yes\",\n    cancelButtonLabel: \"common:no\",\n    onConfirm: () => {\n      setValue(KEYS_MAPPING[selectedType!].name, \"false\");\n      save();\n    },\n  });\n\n  const [toggleReGenerateDialog, ReGenerateConfirm] = useConfirmDialog({\n    titleKey: \"clients:reGenerateSigning\",\n    messageKey: \"clients:reGenerateSigningExplain\",\n    continueButtonLabel: \"common:yes\",\n    cancelButtonLabel: \"common:no\",\n    onConfirm: () => {\n      generate(selectedType!);\n    },\n  });\n\n  return (\n    <PageSection variant=\"light\" className=\"keycloak__form\">\n      {isChanged && (\n        <SamlKeysDialog\n          id={clientId}\n          attr={isChanged}\n          onClose={() => {\n            setIsChanged(undefined);\n            save();\n            setRefresh(refresh + 1);\n          }}\n          onCancel={() => {\n            setValue(KEYS_MAPPING[selectedType!].name, \"false\");\n            setIsChanged(undefined);\n          }}\n        />\n      )}\n      <DisableConfirm />\n      <ReGenerateConfirm />\n      {KEYS.map((attr, index) => (\n        <Fragment key={attr}>\n          {openImport === attr && (\n            <SamlImportKeyDialog\n              id={clientId}\n              attr={attr}\n              onClose={() => setImportOpen(undefined)}\n            />\n          )}\n          <KeySection\n            clientId={clientId}\n            keyInfo={keyInfo?.[index]}\n            attr={attr}\n            onChanged={setIsChanged}\n            onGenerate={(type, isNew) => {\n              setSelectedType(type);\n              if (!isNew) {\n                toggleDisableDialog();\n              } else {\n                toggleReGenerateDialog();\n              }\n            }}\n            onImport={() => setImportOpen(attr)}\n          />\n        </Fragment>\n      ))}\n    </PageSection>\n  );\n};\n","import { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Dropdown,\n  DropdownItem,\n  KebabToggle,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport type ClientScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientScopeRepresentation\";\n\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\nimport { ListEmptyState } from \"../../components/list-empty-state/ListEmptyState\";\nimport { AddScopeDialog } from \"./AddScopeDialog\";\nimport {\n  ClientScope,\n  CellDropdown,\n  AllClientScopes,\n  AllClientScopeType,\n  changeClientScope,\n  addClientScope,\n  removeClientScope,\n} from \"../../components/client-scope/ClientScopeTypes\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { KeycloakDataTable } from \"../../components/table-toolbar/KeycloakDataTable\";\nimport {\n  nameFilter,\n  SearchDropdown,\n  SearchToolbar,\n  SearchType,\n  typeFilter,\n} from \"../../client-scopes/details/SearchFilter\";\nimport { ChangeTypeDropdown } from \"../../client-scopes/ChangeTypeDropdown\";\n\nimport { toDedicatedScope } from \"../routes/DedicatedScopeDetails\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport useLocaleSort, { mapByKey } from \"../../utils/useLocaleSort\";\nimport { useAccess } from \"../../context/access/Access\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\n\nimport \"./client-scopes.css\";\n\nexport type ClientScopesProps = {\n  clientId: string;\n  protocol: string;\n  clientName: string;\n  fineGrainedAccess?: boolean;\n};\n\nexport type Row = ClientScopeRepresentation & {\n  type: AllClientScopeType;\n  description?: string;\n};\n\nconst DEDICATED_ROW = \"dedicated\";\n\nexport const ClientScopes = ({\n  clientId,\n  protocol,\n  clientName,\n  fineGrainedAccess,\n}: ClientScopesProps) => {\n  const { t } = useTranslation(\"clients\");\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n  const localeSort = useLocaleSort();\n\n  const [searchType, setSearchType] = useState<SearchType>(\"name\");\n\n  const [searchTypeType, setSearchTypeType] = useState<AllClientScopes>(\n    AllClientScopes.none\n  );\n\n  const [addDialogOpen, setAddDialogOpen] = useState(false);\n\n  const [rest, setRest] = useState<ClientScopeRepresentation[]>();\n  const [selectedRows, setSelectedRowState] = useState<Row[]>([]);\n  const setSelectedRows = (rows: Row[]) =>\n    setSelectedRowState(rows.filter(({ id }) => id !== DEDICATED_ROW));\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n  const isDedicatedRow = (value: Row) => value.id === DEDICATED_ROW;\n\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-clients\") || fineGrainedAccess;\n\n  const loader = async (first?: number, max?: number, search?: string) => {\n    const defaultClientScopes =\n      await adminClient.clients.listDefaultClientScopes({ id: clientId });\n    const optionalClientScopes =\n      await adminClient.clients.listOptionalClientScopes({ id: clientId });\n    const clientScopes = await adminClient.clientScopes.find();\n\n    const find = (id: string) =>\n      clientScopes.find((clientScope) => id === clientScope.id);\n\n    const optional = optionalClientScopes.map((c) => {\n      const scope = find(c.id!);\n      const row: Row = {\n        ...c,\n        type: ClientScope.optional,\n        description: scope?.description,\n      };\n      return row;\n    });\n\n    const defaultScopes = defaultClientScopes.map((c) => {\n      const scope = find(c.id!);\n      const row: Row = {\n        ...c,\n        type: ClientScope.default,\n        description: scope?.description,\n      };\n      return row;\n    });\n\n    const rows = [...optional, ...defaultScopes];\n    const names = rows.map((row) => row.name);\n    setRest(\n      clientScopes\n        .filter((scope) => !names.includes(scope.name))\n        .filter((scope) => scope.protocol === protocol)\n    );\n\n    const filter =\n      searchType === \"name\" ? nameFilter(search) : typeFilter(searchTypeType);\n    const firstNum = Number(first);\n    const page = localeSort(rows.filter(filter), mapByKey(\"name\")).slice(\n      firstNum,\n      firstNum + Number(max)\n    );\n    if (firstNum === 0 && isManager) {\n      return [\n        {\n          id: DEDICATED_ROW,\n          name: t(\"dedicatedScopeName\", { clientName }),\n          type: AllClientScopes.none,\n          description: t(\"dedicatedScopeDescription\"),\n        },\n        ...page,\n      ];\n    }\n    return page;\n  };\n\n  const TypeSelector = (scope: Row) => (\n    <CellDropdown\n      isDisabled={isDedicatedRow(scope) || !isManager}\n      clientScope={scope}\n      type={scope.type}\n      onSelect={async (value) => {\n        try {\n          await changeClientScope(\n            adminClient,\n            clientId,\n            scope,\n            scope.type,\n            value as ClientScope\n          );\n          addAlert(t(\"clientScopeSuccess\"), AlertVariant.success);\n          refresh();\n        } catch (error) {\n          addError(\"clients:clientScopeError\", error);\n        }\n      }}\n    />\n  );\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: t(\"client-scopes:deleteClientScope\", {\n      count: selectedRows.length,\n      name: selectedRows[0]?.name,\n    }),\n    messageKey: \"client-scopes:deleteConfirm\",\n    continueButtonLabel: \"common:delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await removeClientScope(\n          adminClient,\n          clientId,\n          selectedRows[0],\n          selectedRows[0].type as ClientScope\n        );\n        addAlert(t(\"clientScopeRemoveSuccess\"), AlertVariant.success);\n        refresh();\n      } catch (error) {\n        addError(\"clients:clientScopeRemoveError\", error);\n      }\n    },\n  });\n\n  const ManagerToolbarItems = () => {\n    const [kebabOpen, setKebabOpen] = useState(false);\n\n    if (!isManager) return <span />;\n\n    return (\n      <>\n        <DeleteConfirm />\n        <ToolbarItem>\n          <Button onClick={() => setAddDialogOpen(true)}>\n            {t(\"addClientScope\")}\n          </Button>\n        </ToolbarItem>\n        <ToolbarItem>\n          <ChangeTypeDropdown\n            clientId={clientId}\n            selectedRows={selectedRows}\n            refresh={refresh}\n          />\n        </ToolbarItem>\n        <ToolbarItem>\n          <Dropdown\n            toggle={<KebabToggle onToggle={() => setKebabOpen(!kebabOpen)} />}\n            isOpen={kebabOpen}\n            isPlain\n            dropdownItems={[\n              <DropdownItem\n                key=\"deleteAll\"\n                isDisabled={selectedRows.length === 0}\n                onClick={async () => {\n                  try {\n                    await Promise.all(\n                      selectedRows.map((row) =>\n                        removeClientScope(\n                          adminClient,\n                          clientId,\n                          { ...row },\n                          row.type as ClientScope\n                        )\n                      )\n                    );\n\n                    setKebabOpen(false);\n                    setSelectedRows([]);\n                    addAlert(t(\"clients:clientScopeRemoveSuccess\"));\n                    refresh();\n                  } catch (error) {\n                    addError(\"clients:clientScopeRemoveError\", error);\n                  }\n                }}\n              >\n                {t(\"common:remove\")}\n              </DropdownItem>,\n            ]}\n          />\n        </ToolbarItem>\n      </>\n    );\n  };\n\n  return (\n    <>\n      {rest && (\n        <AddScopeDialog\n          clientScopes={rest}\n          clientName={clientName!}\n          open={addDialogOpen}\n          toggleDialog={() => setAddDialogOpen(!addDialogOpen)}\n          onAdd={async (scopes) => {\n            try {\n              await Promise.all(\n                scopes.map(\n                  async (scope) =>\n                    await addClientScope(\n                      adminClient,\n                      clientId,\n                      scope.scope,\n                      scope.type!\n                    )\n                )\n              );\n              addAlert(t(\"clientScopeSuccess\"), AlertVariant.success);\n              refresh();\n            } catch (error) {\n              addError(\"clients:clientScopeError\", error);\n            }\n          }}\n        />\n      )}\n\n      <KeycloakDataTable\n        key={key}\n        loader={loader}\n        ariaLabelKey=\"clients:clientScopeList\"\n        searchPlaceholderKey={\n          searchType === \"name\" ? \"clients:searchByName\" : undefined\n        }\n        canSelectAll\n        isPaginated\n        isSearching={searchType === \"type\"}\n        onSelect={(rows) => setSelectedRows([...rows])}\n        searchTypeComponent={\n          <SearchDropdown\n            searchType={searchType}\n            onSelect={(searchType) => setSearchType(searchType)}\n          />\n        }\n        toolbarItem={\n          <>\n            <SearchToolbar\n              searchType={searchType}\n              type={searchTypeType}\n              onSelect={(searchType) => setSearchType(searchType)}\n              onType={(value) => {\n                setSearchTypeType(value);\n                refresh();\n              }}\n            />\n            <ManagerToolbarItems />\n          </>\n        }\n        columns={[\n          {\n            name: \"name\",\n            displayKey: \"clients:assignedClientScope\",\n            cellRenderer: (row) => {\n              if (isDedicatedRow(row)) {\n                return (\n                  <Link to={toDedicatedScope({ realm, clientId })}>\n                    {row.name}\n                  </Link>\n                );\n              }\n              return row.name;\n            },\n          },\n          {\n            name: \"type\",\n            displayKey: \"clients:assignedType\",\n            cellRenderer: TypeSelector,\n          },\n          { name: \"description\" },\n        ]}\n        actions={\n          isManager\n            ? [\n                {\n                  title: t(\"common:remove\"),\n                  onRowClick: async (row) => {\n                    setSelectedRows([row]);\n                    toggleDeleteDialog();\n                    return true;\n                  },\n                },\n              ]\n            : []\n        }\n        emptyState={\n          <ListEmptyState\n            message={t(\"clients:emptyClientScopes\")}\n            instructions={t(\"clients:emptyClientScopesInstructions\")}\n            primaryActionText={t(\"clients:emptyClientScopesPrimaryAction\")}\n            onPrimaryAction={() => setAddDialogOpen(true)}\n          />\n        }\n      />\n    </>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport {\n  CodeBlock,\n  CodeBlockAction,\n  EmptyState,\n  EmptyStateBody,\n  Title,\n} from \"@patternfly/react-core\";\n\nimport type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport { CopyToClipboardButton } from \"./CopyToClipboardButton\";\nimport { KeycloakTextArea } from \"../../components/keycloak-text-area/KeycloakTextArea\";\n\ntype GeneratedCodeTabProps = {\n  user?: UserRepresentation;\n  text: string;\n  label: string;\n};\n\nexport const GeneratedCodeTab = ({\n  text,\n  user,\n  label,\n}: GeneratedCodeTabProps) => {\n  const { t } = useTranslation(\"clients\");\n\n  return user ? (\n    <CodeBlock\n      id={label}\n      actions={\n        <CodeBlockAction>\n          <CopyToClipboardButton id=\"code\" text={text} label={label} />\n        </CodeBlockAction>\n      }\n    >\n      <KeycloakTextArea id={`text-area-${label}`} rows={20} value={text} />\n    </CodeBlock>\n  ) : (\n    <EmptyState variant=\"large\">\n      <Title headingLevel=\"h4\" size=\"lg\">\n        {t(`${label}No`)}\n      </Title>\n      <EmptyStateBody>{t(`${label}IsDisabled`)}</EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import type ClientScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientScopeRepresentation\";\nimport type ProtocolMapperRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/protocolMapperRepresentation\";\nimport type RoleRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport type { ProtocolMapperTypeRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/serverInfoRepesentation\";\nimport {\n  ClipboardCopy,\n  Form,\n  FormGroup,\n  Grid,\n  GridItem,\n  PageSection,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Split,\n  SplitItem,\n  Tab,\n  TabContent,\n  Tabs,\n  TabTitleText,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { QuestionCircleIcon } from \"@patternfly/react-icons\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useHelp } from \"../../components/help-enabler/HelpHeader\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { KeycloakDataTable } from \"../../components/table-toolbar/KeycloakDataTable\";\nimport { UserSelect } from \"../../components/users/UserSelect\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { prettyPrintJSON } from \"../../util\";\nimport { GeneratedCodeTab } from \"./GeneratedCodeTab\";\n\nimport \"./evaluate.css\";\n\nexport type EvaluateScopesProps = {\n  clientId: string;\n  protocol: string;\n};\n\nconst ProtocolMappers = ({\n  protocolMappers,\n}: {\n  protocolMappers: ProtocolMapperRepresentation[];\n}) => {\n  const [key, setKey] = useState(0);\n  useEffect(() => {\n    setKey(key + 1);\n  }, [protocolMappers]);\n  return (\n    <KeycloakDataTable\n      key={key}\n      loader={() => Promise.resolve(protocolMappers)}\n      ariaLabelKey=\"clients:effectiveProtocolMappers\"\n      searchPlaceholderKey=\"clients:searchForProtocol\"\n      columns={[\n        {\n          name: \"mapperName\",\n          displayKey: \"common:name\",\n        },\n        {\n          name: \"containerName\",\n          displayKey: \"clients:parentClientScope\",\n        },\n        {\n          name: \"type.category\",\n          displayKey: \"common:category\",\n        },\n        {\n          name: \"type.priority\",\n          displayKey: \"common:priority\",\n        },\n      ]}\n    />\n  );\n};\n\nconst EffectiveRoles = ({\n  effectiveRoles,\n}: {\n  effectiveRoles: RoleRepresentation[];\n}) => {\n  const [key, setKey] = useState(0);\n  useEffect(() => {\n    setKey(key + 1);\n  }, [effectiveRoles]);\n\n  return (\n    <KeycloakDataTable\n      key={key}\n      loader={() => Promise.resolve(effectiveRoles)}\n      ariaLabelKey=\"client:effectiveRoleScopeMappings\"\n      searchPlaceholderKey=\"clients:searchForRole\"\n      columns={[\n        {\n          name: \"name\",\n          displayKey: \"clients:role\",\n        },\n        {\n          name: \"containerId\",\n          displayKey: \"clients:origin\",\n        },\n      ]}\n    />\n  );\n};\n\nexport const EvaluateScopes = ({ clientId, protocol }: EvaluateScopesProps) => {\n  const prefix = \"openid\";\n  const { t } = useTranslation(\"clients\");\n  const { enabled } = useHelp();\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n  const mapperTypes = useServerInfo().protocolMapperTypes![protocol];\n\n  const [selectableScopes, setSelectableScopes] = useState<\n    ClientScopeRepresentation[]\n  >([]);\n  const [isScopeOpen, setIsScopeOpen] = useState(false);\n  const [selected, setSelected] = useState<string[]>([prefix]);\n  const [activeTab, setActiveTab] = useState(0);\n\n  const [key, setKey] = useState(\"\");\n  const refresh = () => setKey(`${new Date().getTime()}`);\n  const [effectiveRoles, setEffectiveRoles] = useState<RoleRepresentation[]>(\n    []\n  );\n  const [protocolMappers, setProtocolMappers] = useState<\n    ProtocolMapperRepresentation[]\n  >([]);\n  const [accessToken, setAccessToken] = useState(\"\");\n  const [userInfo, setUserInfo] = useState(\"\");\n  const [idToken, setIdToken] = useState(\"\");\n\n  const tabContent1 = useRef(null);\n  const tabContent2 = useRef(null);\n  const tabContent3 = useRef(null);\n  const tabContent4 = useRef(null);\n  const tabContent5 = useRef(null);\n\n  const form = useForm();\n\n  useFetch(\n    () => adminClient.clients.listOptionalClientScopes({ id: clientId }),\n    (optionalClientScopes) => setSelectableScopes(optionalClientScopes),\n    []\n  );\n\n  useFetch(\n    async () => {\n      const scope = selected.join(\" \");\n      const effectiveRoles = await adminClient.clients.evaluatePermission({\n        id: clientId,\n        roleContainer: realm,\n        scope,\n        type: \"granted\",\n      });\n\n      const mapperList = (await adminClient.clients.evaluateListProtocolMapper({\n        id: clientId,\n        scope,\n      })) as ({\n        type: ProtocolMapperTypeRepresentation;\n      } & ProtocolMapperRepresentation)[];\n\n      return {\n        mapperList,\n        effectiveRoles,\n      };\n    },\n    ({ mapperList, effectiveRoles }) => {\n      setEffectiveRoles(effectiveRoles);\n      mapperList.map((mapper) => {\n        mapper.type = mapperTypes.filter(\n          (type) => type.id === mapper.protocolMapper\n        )[0];\n      });\n\n      setProtocolMappers(mapperList);\n      refresh();\n    },\n    [selected]\n  );\n\n  useFetch(\n    async () => {\n      const scope = selected.join(\" \");\n      const user = form.getValues(\"user\");\n      if (!user) return [];\n\n      return await Promise.all([\n        adminClient.clients.evaluateGenerateAccessToken({\n          id: clientId,\n          userId: user[0],\n          scope,\n        }),\n        adminClient.clients.evaluateGenerateUserInfo({\n          id: clientId,\n          userId: user[0],\n          scope,\n        }),\n        adminClient.clients.evaluateGenerateIdToken({\n          id: clientId,\n          userId: user[0],\n          scope,\n        }),\n      ]);\n    },\n    ([accessToken, userInfo, idToken]) => {\n      setAccessToken(prettyPrintJSON(accessToken));\n      setUserInfo(prettyPrintJSON(userInfo));\n      setIdToken(prettyPrintJSON(idToken));\n    },\n    [form.getValues(\"user\"), selected]\n  );\n\n  return (\n    <>\n      <PageSection variant=\"light\">\n        {enabled && (\n          <TextContent className=\"keycloak__section_intro__help\">\n            <Text>\n              <QuestionCircleIcon /> {t(\"clients-help:evaluateExplain\")}\n            </Text>\n          </TextContent>\n        )}\n        <Form isHorizontal>\n          <FormGroup\n            label={t(\"scopeParameter\")}\n            fieldId=\"scopeParameter\"\n            labelIcon={\n              <HelpItem\n                helpText=\"clients-help:scopeParameter\"\n                fieldLabelId=\"clients:scopeParameter\"\n              />\n            }\n          >\n            <Split hasGutter>\n              <SplitItem isFilled>\n                <Select\n                  toggleId=\"scopeParameter\"\n                  variant={SelectVariant.typeaheadMulti}\n                  typeAheadAriaLabel={t(\"scopeParameter\")}\n                  onToggle={() => setIsScopeOpen(!isScopeOpen)}\n                  isOpen={isScopeOpen}\n                  selections={selected}\n                  onSelect={(_, value) => {\n                    const option = value as string;\n                    if (selected.includes(option)) {\n                      if (option !== prefix) {\n                        setSelected(selected.filter((item) => item !== option));\n                      }\n                    } else {\n                      setSelected([...selected, option]);\n                    }\n                  }}\n                  aria-labelledby={t(\"scopeParameter\")}\n                  placeholderText={t(\"scopeParameterPlaceholder\")}\n                >\n                  {selectableScopes.map((option, index) => (\n                    <SelectOption key={index} value={option.name} />\n                  ))}\n                </Select>\n              </SplitItem>\n              <SplitItem>\n                <ClipboardCopy className=\"keycloak__scopes_evaluate__clipboard-copy\">\n                  {selected.join(\" \")}\n                </ClipboardCopy>\n              </SplitItem>\n            </Split>\n          </FormGroup>\n          <FormProvider {...form}>\n            <UserSelect\n              name=\"user\"\n              label=\"users\"\n              helpText=\"clients-help:user\"\n              defaultValue=\"\"\n              variant={SelectVariant.typeahead}\n              isRequired\n            />\n          </FormProvider>\n        </Form>\n      </PageSection>\n\n      <Grid hasGutter className=\"keycloak__scopes_evaluate__tabs\">\n        <GridItem span={8}>\n          <TabContent\n            aria-labelledby=\"pf-tab-0-effectiveProtocolMappers\"\n            eventKey={0}\n            id=\"effectiveProtocolMappers\"\n            ref={tabContent1}\n          >\n            <ProtocolMappers protocolMappers={protocolMappers} />\n          </TabContent>\n          <TabContent\n            aria-labelledby=\"pf-tab-0-effectiveRoleScopeMappings\"\n            eventKey={1}\n            id=\"effectiveRoleScopeMappings\"\n            ref={tabContent2}\n            hidden\n          >\n            <EffectiveRoles effectiveRoles={effectiveRoles} />\n          </TabContent>\n          <TabContent\n            aria-labelledby={t(\"generatedAccessToken\")}\n            eventKey={2}\n            id=\"tab-generated-access-token\"\n            ref={tabContent3}\n            hidden\n          >\n            <GeneratedCodeTab\n              text={accessToken}\n              user={form.getValues(\"user\")}\n              label=\"generatedAccessToken\"\n            />\n          </TabContent>\n          <TabContent\n            aria-labelledby={t(\"generatedIdToken\")}\n            eventKey={3}\n            id=\"tab-generated-id-token\"\n            ref={tabContent4}\n            hidden\n          >\n            <GeneratedCodeTab\n              text={idToken}\n              user={form.getValues(\"user\")}\n              label=\"generatedIdToken\"\n            />\n          </TabContent>\n          <TabContent\n            aria-labelledby={t(\"generatedUserInfo\")}\n            eventKey={4}\n            id=\"tab-generated-user-info\"\n            ref={tabContent5}\n            hidden\n          >\n            <GeneratedCodeTab\n              text={userInfo}\n              user={form.getValues(\"user\")}\n              label=\"generatedUserInfo\"\n            />\n          </TabContent>\n        </GridItem>\n        <GridItem span={4}>\n          <Tabs\n            id=\"tabs\"\n            key={key}\n            isVertical\n            activeKey={activeTab}\n            onSelect={(_, key) => setActiveTab(key as number)}\n          >\n            <Tab\n              id=\"effectiveProtocolMappers\"\n              aria-controls=\"effectiveProtocolMappers\"\n              eventKey={0}\n              title={\n                <TabTitleText>\n                  {t(\"effectiveProtocolMappers\")}{\" \"}\n                  <HelpItem\n                    fieldLabelId=\"clients:effectiveProtocolMappers\"\n                    helpText=\"clients-help:effectiveProtocolMappers\"\n                    noVerticalAlign={false}\n                    unWrap\n                  />\n                </TabTitleText>\n              }\n              tabContentRef={tabContent1}\n            />\n            <Tab\n              id=\"effectiveRoleScopeMappings\"\n              aria-controls=\"effectiveRoleScopeMappings\"\n              eventKey={1}\n              title={\n                <TabTitleText>\n                  {t(\"effectiveRoleScopeMappings\")}{\" \"}\n                  <HelpItem\n                    fieldLabelId=\"clients:effectiveRoleScopeMappings\"\n                    helpText=\"clients-help:effectiveRoleScopeMappings\"\n                    noVerticalAlign={false}\n                    unWrap\n                  />\n                </TabTitleText>\n              }\n              tabContentRef={tabContent2}\n            ></Tab>\n            <Tab\n              id=\"generatedAccessToken\"\n              aria-controls=\"generatedAccessToken\"\n              eventKey={2}\n              title={\n                <TabTitleText>\n                  {t(\"generatedAccessToken\")}{\" \"}\n                  <HelpItem\n                    fieldLabelId=\"clients:generatedAccessToken\"\n                    helpText=\"clients-help:generatedAccessToken\"\n                    noVerticalAlign={false}\n                    unWrap\n                  />\n                </TabTitleText>\n              }\n              tabContentRef={tabContent3}\n            />\n            <Tab\n              id=\"generatedIdToken\"\n              aria-controls=\"generatedIdToken\"\n              eventKey={3}\n              title={\n                <TabTitleText>\n                  {t(\"generatedIdToken\")}{\" \"}\n                  <HelpItem\n                    fieldLabelId=\"clients:generatedIdToken\"\n                    helpText=\"clients-help:generatedIdToken\"\n                    noVerticalAlign={false}\n                    unWrap\n                  />\n                </TabTitleText>\n              }\n              tabContentRef={tabContent4}\n            />\n            <Tab\n              id=\"generatedUserInfo\"\n              aria-controls=\"generatedUserInfo\"\n              eventKey={4}\n              title={\n                <TabTitleText>\n                  {t(\"generatedUserInfo\")}{\" \"}\n                  <HelpItem\n                    fieldLabelId=\"clients:generatedUserInfo\"\n                    helpText=\"clients-help:generatedUserInfo\"\n                    noVerticalAlign={false}\n                    unWrap\n                  />\n                </TabTitleText>\n              }\n              tabContentRef={tabContent5}\n            />\n          </Tabs>\n        </GridItem>\n      </Grid>\n    </>\n  );\n};\n","import { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { AlertVariant, PageSection } from \"@patternfly/react-core\";\nimport { InfoCircleIcon } from \"@patternfly/react-icons\";\n\nimport type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport type { RoleMappingPayload } from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { RoleMapping, Row } from \"../../components/role-mapping/RoleMapping\";\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport { toUser } from \"../../user/routes/User\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useAccess } from \"../../context/access/Access\";\n\nimport \"./service-account.css\";\n\ntype ServiceAccountProps = {\n  client: ClientRepresentation;\n};\n\nexport const ServiceAccount = ({ client }: ServiceAccountProps) => {\n  const { t } = useTranslation(\"clients\");\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n\n  const [serviceAccount, setServiceAccount] = useState<UserRepresentation>();\n\n  const { hasAccess } = useAccess();\n  const hasManageClients = hasAccess(\"manage-clients\");\n\n  useFetch(\n    () =>\n      adminClient.clients.getServiceAccountUser({\n        id: client.id!,\n      }),\n    (serviceAccount) => setServiceAccount(serviceAccount),\n    []\n  );\n\n  const assignRoles = async (rows: Row[]) => {\n    try {\n      const realmRoles = rows\n        .filter((row) => row.client === undefined)\n        .map((row) => row.role as RoleMappingPayload)\n        .flat();\n      await adminClient.users.addRealmRoleMappings({\n        id: serviceAccount?.id!,\n        roles: realmRoles,\n      });\n      await Promise.all(\n        rows\n          .filter((row) => row.client !== undefined)\n          .map((row) =>\n            adminClient.users.addClientRoleMappings({\n              id: serviceAccount?.id!,\n              clientUniqueId: row.client!.id!,\n              roles: [row.role as RoleMappingPayload],\n            })\n          )\n      );\n      addAlert(t(\"roleMappingUpdatedSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"clients:roleMappingUpdatedError\", error);\n    }\n  };\n  return serviceAccount ? (\n    <>\n      <PageSection className=\"pf-u-pb-0\">\n        <InfoCircleIcon className=\"pf-c-alert__icon keycloak--service-account--info-text\" />\n        <span className=\"pf-u-pl-sm\">\n          <Trans i18nKey=\"clients-help:manageServiceAccountUser\">\n            {\"\"}\n            <Link\n              to={toUser({ realm, id: serviceAccount.id!, tab: \"settings\" })}\n            >\n              {{ link: serviceAccount.username }}\n            </Link>\n          </Trans>\n        </span>\n      </PageSection>\n      <RoleMapping\n        name={client.clientId!}\n        id={serviceAccount.id!}\n        type=\"users\"\n        isManager={hasManageClients || client.access?.configure}\n        save={assignRoles}\n      />\n    </>\n  ) : (\n    <KeycloakSpinner />\n  );\n};\n","import type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport {\n  AlertVariant,\n  ButtonVariant,\n  Divider,\n  DropdownItem,\n  Label,\n  PageSection,\n  Tab,\n  TabTitleText,\n  Tooltip,\n} from \"@patternfly/react-core\";\nimport { InfoCircleIcon } from \"@patternfly/react-icons\";\nimport { cloneDeep, sortBy } from \"lodash-es\";\nimport { useMemo, useState } from \"react\";\nimport { Controller, FormProvider, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport {\n  ConfirmDialogModal,\n  useConfirmDialog,\n} from \"../components/confirm-dialog/ConfirmDialog\";\nimport { DownloadDialog } from \"../components/download-dialog/DownloadDialog\";\nimport type { KeyValueType } from \"../components/key-value-form/key-value-convert\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport { PermissionsTab } from \"../components/permission-tab/PermissionTab\";\nimport { RolesList } from \"../components/roles-list/RolesList\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../components/routable-tabs/RoutableTabs\";\nimport {\n  ViewHeader,\n  ViewHeaderBadge,\n} from \"../components/view-header/ViewHeader\";\nimport { useAccess } from \"../context/access/Access\";\nimport { useAdminClient, useFetch } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../context/server-info/ServerInfoProvider\";\nimport {\n  convertAttributeNameToForm,\n  convertFormValuesToObject,\n  convertToFormValues,\n  exportClient,\n} from \"../util\";\nimport { useParams } from \"../utils/useParams\";\nimport useToggle from \"../utils/useToggle\";\nimport { AdvancedTab } from \"./AdvancedTab\";\nimport { AuthorizationEvaluate } from \"./authorization/AuthorizationEvaluate\";\nimport { AuthorizationExport } from \"./authorization/AuthorizationExport\";\nimport { AuthorizationPermissions } from \"./authorization/Permissions\";\nimport { AuthorizationPolicies } from \"./authorization/Policies\";\nimport { AuthorizationResources } from \"./authorization/Resources\";\nimport { AuthorizationScopes } from \"./authorization/Scopes\";\nimport { AuthorizationSettings } from \"./authorization/Settings\";\nimport { ClientSessions } from \"./ClientSessions\";\nimport { ClientSettings } from \"./ClientSettings\";\nimport { Credentials } from \"./credentials/Credentials\";\nimport { Keys } from \"./keys/Keys\";\nimport { SamlKeys } from \"./keys/SamlKeys\";\nimport {\n  AuthorizationTab,\n  toAuthorizationTab,\n} from \"./routes/AuthenticationTab\";\nimport { ClientParams, ClientTab, toClient } from \"./routes/Client\";\nimport { toClientRole } from \"./routes/ClientRole\";\nimport { toClients } from \"./routes/Clients\";\nimport { ClientScopesTab, toClientScopesTab } from \"./routes/ClientScopeTab\";\nimport { toCreateRole } from \"./routes/NewRole\";\nimport { ClientScopes } from \"./scopes/ClientScopes\";\nimport { EvaluateScopes } from \"./scopes/EvaluateScopes\";\nimport { ServiceAccount } from \"./service-account/ServiceAccount\";\nimport { getProtocolName, isRealmClient } from \"./utils\";\n\ntype ClientDetailHeaderProps = {\n  onChange: (value: boolean) => void;\n  value: boolean | undefined;\n  save: () => void;\n  client: ClientRepresentation;\n  toggleDownloadDialog: () => void;\n  toggleDeleteDialog: () => void;\n};\n\nconst ClientDetailHeader = ({\n  onChange,\n  value,\n  save,\n  client,\n  toggleDownloadDialog,\n  toggleDeleteDialog,\n}: ClientDetailHeaderProps) => {\n  const { t } = useTranslation(\"clients\");\n  const [toggleDisableDialog, DisableConfirm] = useConfirmDialog({\n    titleKey: \"clients:disableConfirmTitle\",\n    messageKey: \"clients:disableConfirm\",\n    continueButtonLabel: \"common:disable\",\n    onConfirm: () => {\n      onChange(!value);\n      save();\n    },\n  });\n\n  const badges = useMemo<ViewHeaderBadge[]>(() => {\n    const protocolName = getProtocolName(\n      t,\n      client.protocol ?? \"openid-connect\"\n    );\n\n    const text = client.bearerOnly ? (\n      <Tooltip\n        data-testid=\"bearer-only-explainer-tooltip\"\n        content={t(\"explainBearerOnly\")}\n      >\n        <Label\n          data-testid=\"bearer-only-explainer-label\"\n          icon={<InfoCircleIcon />}\n        >\n          {protocolName}\n        </Label>\n      </Tooltip>\n    ) : (\n      <Label>{protocolName}</Label>\n    );\n\n    return [{ text }];\n  }, [client, t]);\n\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-clients\") || client.access?.configure;\n\n  const dropdownItems = [\n    <DropdownItem key=\"download\" onClick={toggleDownloadDialog}>\n      {t(\"downloadAdapterConfig\")}\n    </DropdownItem>,\n    <DropdownItem key=\"export\" onClick={() => exportClient(client)}>\n      {t(\"common:export\")}\n    </DropdownItem>,\n    ...(!isRealmClient(client) && isManager\n      ? [\n          <Divider key=\"divider\" />,\n          <DropdownItem\n            data-testid=\"delete-client\"\n            key=\"delete\"\n            onClick={toggleDeleteDialog}\n          >\n            {t(\"common:delete\")}\n          </DropdownItem>,\n        ]\n      : []),\n  ];\n\n  return (\n    <>\n      <DisableConfirm />\n      <ViewHeader\n        titleKey={client.clientId!}\n        subKey=\"clients:clientsExplain\"\n        badges={badges}\n        divider={false}\n        isReadOnly={!isManager}\n        helpTextKey=\"clients-help:enableDisable\"\n        dropdownItems={dropdownItems}\n        isEnabled={value}\n        onToggle={(value) => {\n          if (!value) {\n            toggleDisableDialog();\n          } else {\n            onChange(value);\n            save();\n          }\n        }}\n      />\n    </>\n  );\n};\n\nexport type SaveOptions = {\n  confirmed?: boolean;\n  messageKey?: string;\n};\n\nexport type FormFields = Omit<\n  ClientRepresentation,\n  \"authorizationSettings\" | \"resources\"\n>;\n\nexport default function ClientDetails() {\n  const { t } = useTranslation(\"clients\");\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n  const { profileInfo } = useServerInfo();\n\n  const { hasAccess } = useAccess();\n  const permissionsEnabled =\n    !profileInfo?.disabledFeatures?.includes(\"ADMIN_FINE_GRAINED_AUTHZ\") &&\n    hasAccess(\"manage-authorization\");\n  const hasManageClients = hasAccess(\"manage-clients\");\n  const hasViewUsers = hasAccess(\"view-users\");\n\n  const navigate = useNavigate();\n\n  const [downloadDialogOpen, toggleDownloadDialogOpen] = useToggle();\n  const [changeAuthenticatorOpen, toggleChangeAuthenticatorOpen] = useToggle();\n\n  const form = useForm<FormFields>();\n  const { clientId } = useParams<ClientParams>();\n  const [key, setKey] = useState(0);\n\n  const clientAuthenticatorType = useWatch({\n    control: form.control,\n    name: \"clientAuthenticatorType\",\n    defaultValue: \"client-secret\",\n  });\n\n  const [client, setClient] = useState<ClientRepresentation>();\n\n  const loader = async () => {\n    const roles = await adminClient.clients.listRoles({ id: clientId });\n    return sortBy(roles, (role) => role.name?.toUpperCase());\n  };\n\n  const useTab = (tab: ClientTab) =>\n    useRoutableTab(\n      toClient({\n        realm,\n        clientId,\n        tab,\n      })\n    );\n\n  const settingsTab = useTab(\"settings\");\n  const keysTab = useTab(\"keys\");\n  const credentialsTab = useTab(\"credentials\");\n  const rolesTab = useTab(\"roles\");\n  const clientScopesTab = useTab(\"clientScopes\");\n  const authorizationTab = useTab(\"authorization\");\n  const serviceAccountTab = useTab(\"serviceAccount\");\n  const sessionsTab = useTab(\"sessions\");\n  const permissionsTab = useTab(\"permissions\");\n  const advancedTab = useTab(\"advanced\");\n\n  const useClientScopesTab = (tab: ClientScopesTab) =>\n    useRoutableTab(\n      toClientScopesTab({\n        realm,\n        clientId,\n        tab,\n      })\n    );\n\n  const clientScopesSetupTab = useClientScopesTab(\"setup\");\n  const clientScopesEvaluateTab = useClientScopesTab(\"evaluate\");\n\n  const useAuthorizationTab = (tab: AuthorizationTab) =>\n    useRoutableTab(\n      toAuthorizationTab({\n        realm,\n        clientId,\n        tab,\n      })\n    );\n\n  const authorizationSettingsTab = useAuthorizationTab(\"settings\");\n  const authorizationResourcesTab = useAuthorizationTab(\"resources\");\n  const authorizationScopesTab = useAuthorizationTab(\"scopes\");\n  const authorizationPoliciesTab = useAuthorizationTab(\"policies\");\n  const authorizationPermissionsTab = useAuthorizationTab(\"permissions\");\n  const authorizationEvaluateTab = useAuthorizationTab(\"evaluate\");\n  const authorizationExportTab = useAuthorizationTab(\"export\");\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"clients:clientDeleteConfirmTitle\",\n    messageKey: \"clients:clientDeleteConfirm\",\n    continueButtonLabel: \"common:delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.clients.del({ id: clientId });\n        addAlert(t(\"clientDeletedSuccess\"), AlertVariant.success);\n        navigate(toClients({ realm }));\n      } catch (error) {\n        addError(\"clients:clientDeleteError\", error);\n      }\n    },\n  });\n\n  const setupForm = (client: ClientRepresentation) => {\n    form.reset({ ...client });\n    convertToFormValues(client, form.setValue);\n    if (client.attributes?.[\"acr.loa.map\"]) {\n      form.setValue(\n        convertAttributeNameToForm(\"attributes.acr.loa.map\"),\n        // @ts-ignore\n        Object.entries(JSON.parse(client.attributes[\"acr.loa.map\"])).flatMap(\n          ([key, value]) => ({ key, value })\n        )\n      );\n    }\n  };\n\n  useFetch(\n    () => adminClient.clients.findOne({ id: clientId }),\n    (fetchedClient) => {\n      if (!fetchedClient) {\n        throw new Error(t(\"common:notFound\"));\n      }\n      setClient(cloneDeep(fetchedClient));\n      setupForm(fetchedClient);\n    },\n    [clientId, key]\n  );\n\n  const save = async (\n    { confirmed = false, messageKey = \"clientSaveSuccess\" }: SaveOptions = {\n      confirmed: false,\n      messageKey: \"clientSaveSuccess\",\n    }\n  ) => {\n    if (!(await form.trigger())) {\n      return;\n    }\n\n    if (\n      !client?.publicClient &&\n      client?.clientAuthenticatorType !== clientAuthenticatorType &&\n      !confirmed\n    ) {\n      toggleChangeAuthenticatorOpen();\n      return;\n    }\n\n    const values = convertFormValuesToObject(form.getValues());\n\n    const submittedClient =\n      convertFormValuesToObject<ClientRepresentation>(values);\n\n    if (submittedClient.attributes?.[\"acr.loa.map\"]) {\n      submittedClient.attributes[\"acr.loa.map\"] = JSON.stringify(\n        Object.fromEntries(\n          (submittedClient.attributes[\"acr.loa.map\"] as KeyValueType[])\n            .filter(({ key }) => key !== \"\")\n            .map(({ key, value }) => [key, value])\n        )\n      );\n    }\n\n    try {\n      const newClient: ClientRepresentation = {\n        ...client,\n        ...submittedClient,\n      };\n\n      newClient.clientId = newClient.clientId?.trim();\n\n      await adminClient.clients.update({ id: clientId }, newClient);\n      setupForm(newClient);\n      setClient(newClient);\n      addAlert(t(messageKey), AlertVariant.success);\n    } catch (error) {\n      addError(\"clients:clientSaveError\", error);\n    }\n  };\n\n  if (!client) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <>\n      <ConfirmDialogModal\n        continueButtonLabel=\"common:yes\"\n        cancelButtonLabel=\"common:no\"\n        titleKey={t(\"changeAuthenticatorConfirmTitle\", {\n          clientAuthenticatorType: clientAuthenticatorType,\n        })}\n        open={changeAuthenticatorOpen}\n        toggleDialog={toggleChangeAuthenticatorOpen}\n        onConfirm={() => save({ confirmed: true })}\n      >\n        <>\n          {t(\"changeAuthenticatorConfirm\", {\n            clientAuthenticatorType: clientAuthenticatorType,\n          })}\n        </>\n      </ConfirmDialogModal>\n      <DeleteConfirm />\n      {downloadDialogOpen && (\n        <DownloadDialog\n          id={client.id!}\n          protocol={client.protocol}\n          open\n          toggleDialog={toggleDownloadDialogOpen}\n        />\n      )}\n      <Controller\n        name=\"enabled\"\n        control={form.control}\n        defaultValue={true}\n        render={({ field }) => (\n          <ClientDetailHeader\n            value={field.value}\n            onChange={field.onChange}\n            client={client}\n            save={save}\n            toggleDeleteDialog={toggleDeleteDialog}\n            toggleDownloadDialog={toggleDownloadDialogOpen}\n          />\n        )}\n      />\n      <PageSection variant=\"light\" className=\"pf-u-p-0\">\n        <FormProvider {...form}>\n          <RoutableTabs data-testid=\"client-tabs\" isBox mountOnEnter>\n            <Tab\n              id=\"settings\"\n              data-testid=\"clientSettingsTab\"\n              title={<TabTitleText>{t(\"common:settings\")}</TabTitleText>}\n              {...settingsTab}\n            >\n              <ClientSettings\n                client={client}\n                save={() => save()}\n                reset={() => setupForm(client)}\n              />\n            </Tab>\n            {((!client.publicClient && !isRealmClient(client)) ||\n              client.protocol === \"saml\") && (\n              <Tab\n                id=\"keys\"\n                data-testid=\"keysTab\"\n                title={<TabTitleText>{t(\"keys\")}</TabTitleText>}\n                {...keysTab}\n              >\n                {client.protocol === \"openid-connect\" && (\n                  <Keys\n                    clientId={clientId}\n                    save={save}\n                    hasConfigureAccess={client.access?.configure}\n                  />\n                )}\n                {client.protocol === \"saml\" && (\n                  <SamlKeys clientId={clientId} save={save} />\n                )}\n              </Tab>\n            )}\n            {!client.publicClient &&\n              !isRealmClient(client) &&\n              (hasManageClients || client.access?.configure) && (\n                <Tab\n                  id=\"credentials\"\n                  title={<TabTitleText>{t(\"credentials\")}</TabTitleText>}\n                  {...credentialsTab}\n                >\n                  <Credentials\n                    key={key}\n                    client={client}\n                    save={save}\n                    refresh={() => setKey(key + 1)}\n                  />\n                </Tab>\n              )}\n            <Tab\n              id=\"roles\"\n              data-testid=\"rolesTab\"\n              title={<TabTitleText>{t(\"roles\")}</TabTitleText>}\n              {...rolesTab}\n            >\n              <RolesList\n                loader={loader}\n                paginated={false}\n                messageBundle=\"clients\"\n                toCreate={toCreateRole({ realm, clientId: client.id! })}\n                toDetail={(roleId) =>\n                  toClientRole({\n                    realm,\n                    clientId: client.id!,\n                    id: roleId,\n                    tab: \"details\",\n                  })\n                }\n                isReadOnly={!(hasManageClients || client.access?.configure)}\n              />\n            </Tab>\n            {!isRealmClient(client) && !client.bearerOnly && (\n              <Tab\n                id=\"clientScopes\"\n                data-testid=\"clientScopesTab\"\n                title={<TabTitleText>{t(\"clientScopes\")}</TabTitleText>}\n                {...clientScopesTab}\n              >\n                <RoutableTabs\n                  defaultLocation={toClientScopesTab({\n                    realm,\n                    clientId,\n                    tab: \"setup\",\n                  })}\n                >\n                  <Tab\n                    id=\"setup\"\n                    title={<TabTitleText>{t(\"setup\")}</TabTitleText>}\n                    {...clientScopesSetupTab}\n                  >\n                    <ClientScopes\n                      clientName={client.clientId!}\n                      clientId={clientId}\n                      protocol={client!.protocol!}\n                      fineGrainedAccess={client!.access?.manage}\n                    />\n                  </Tab>\n                  <Tab\n                    id=\"evaluate\"\n                    title={<TabTitleText>{t(\"evaluate\")}</TabTitleText>}\n                    {...clientScopesEvaluateTab}\n                  >\n                    <EvaluateScopes\n                      clientId={clientId}\n                      protocol={client!.protocol!}\n                    />\n                  </Tab>\n                </RoutableTabs>\n              </Tab>\n            )}\n            {client!.authorizationServicesEnabled && (\n              <Tab\n                id=\"authorization\"\n                data-testid=\"authorizationTab\"\n                title={<TabTitleText>{t(\"authorization\")}</TabTitleText>}\n                {...authorizationTab}\n              >\n                <RoutableTabs\n                  mountOnEnter\n                  unmountOnExit\n                  defaultLocation={toAuthorizationTab({\n                    realm,\n                    clientId,\n                    tab: \"settings\",\n                  })}\n                >\n                  <Tab\n                    id=\"settings\"\n                    data-testid=\"authorizationSettings\"\n                    title={<TabTitleText>{t(\"settings\")}</TabTitleText>}\n                    {...authorizationSettingsTab}\n                  >\n                    <AuthorizationSettings clientId={clientId} />\n                  </Tab>\n                  <Tab\n                    id=\"resources\"\n                    data-testid=\"authorizationResources\"\n                    title={<TabTitleText>{t(\"resources\")}</TabTitleText>}\n                    {...authorizationResourcesTab}\n                  >\n                    <AuthorizationResources clientId={clientId} />\n                  </Tab>\n                  <Tab\n                    id=\"scopes\"\n                    data-testid=\"authorizationScopes\"\n                    title={<TabTitleText>{t(\"scopes\")}</TabTitleText>}\n                    {...authorizationScopesTab}\n                  >\n                    <AuthorizationScopes clientId={clientId} />\n                  </Tab>\n                  <Tab\n                    id=\"policies\"\n                    data-testid=\"authorizationPolicies\"\n                    title={<TabTitleText>{t(\"policies\")}</TabTitleText>}\n                    {...authorizationPoliciesTab}\n                  >\n                    <AuthorizationPolicies clientId={clientId} />\n                  </Tab>\n                  <Tab\n                    id=\"permissions\"\n                    data-testid=\"authorizationPermissions\"\n                    title={\n                      <TabTitleText>{t(\"common:permissions\")}</TabTitleText>\n                    }\n                    {...authorizationPermissionsTab}\n                  >\n                    <AuthorizationPermissions clientId={clientId} />\n                  </Tab>\n                  <Tab\n                    id=\"evaluate\"\n                    data-testid=\"authorizationEvaluate\"\n                    title={<TabTitleText>{t(\"evaluate\")}</TabTitleText>}\n                    {...authorizationEvaluateTab}\n                  >\n                    <AuthorizationEvaluate client={client} save={save} />\n                  </Tab>\n                  <Tab\n                    id=\"export\"\n                    data-testid=\"authorizationExport\"\n                    title={<TabTitleText>{t(\"common:export\")}</TabTitleText>}\n                    {...authorizationExportTab}\n                  >\n                    <AuthorizationExport />\n                  </Tab>\n                </RoutableTabs>\n              </Tab>\n            )}\n            {client!.serviceAccountsEnabled && hasViewUsers && (\n              <Tab\n                id=\"serviceAccount\"\n                data-testid=\"serviceAccountTab\"\n                title={<TabTitleText>{t(\"serviceAccount\")}</TabTitleText>}\n                {...serviceAccountTab}\n              >\n                <ServiceAccount client={client} />\n              </Tab>\n            )}\n            <Tab\n              id=\"sessions\"\n              data-testid=\"sessionsTab\"\n              title={<TabTitleText>{t(\"sessions\")}</TabTitleText>}\n              {...sessionsTab}\n            >\n              <ClientSessions client={client} />\n            </Tab>\n            {permissionsEnabled &&\n              (hasManageClients || client.access?.manage) && (\n                <Tab\n                  id=\"permissions\"\n                  data-testid=\"permissionsTab\"\n                  title={<TabTitleText>{t(\"common:permissions\")}</TabTitleText>}\n                  {...permissionsTab}\n                >\n                  <PermissionsTab id={client.id!} type=\"clients\" />\n                </Tab>\n              )}\n            <Tab\n              id=\"advanced\"\n              data-testid=\"advancedTab\"\n              title={<TabTitleText>{t(\"advanced\")}</TabTitleText>}\n              {...advancedTab}\n            >\n              <AdvancedTab save={save} client={client} />\n            </Tab>\n          </RoutableTabs>\n        </FormProvider>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["styles","CodeBlock","_a","children","className","actions","props","__rest","_jsxs","Object","assign","css","codeBlock","_jsx","codeBlockHeader","codeBlockActions","codeBlockContent","displayName","CodeBlockAction","TextListVariants","TextList","component","ul","isPlain","modifiers","plain","TextListItemVariants","TextListItem","li","DownloadDialog","id","open","toggleDialog","protocol","adminClient","useAdminClient","realm","useRealm","t","useTranslation","enabled","useHelp","configFormats","useServerInfo","clientInstallations","selected","setSelected","useState","length","snippet","setSnippet","openType","setOpenType","selectedConfig","useMemo","find","config","sanitizeSnippet","replace","useFetch","mediaType","fetch","addTrailingSlash","baseUrl","method","headers","getAuthorizationHeaders","getAccessToken","arrayBuffer","clients","getInstallationProviders","providerId","prettyPrintJSON","useEffect","ConfirmDialogModal","saveAs","Blob","type","filename","ModalVariant","medium","Form","Stack","StackItem","Alert","AlertVariant","info","configFormat","helpText","FormGroup","HelpItem","Select","isExpanded","SelectVariant","single","_","value","toString","document","body","map","SelectOption","displayType","downloadOnly","KeycloakTextArea","inherited","never","expires","TokenLifespan","name","defaultValue","units","setOpen","focused","setFocused","onFocus","onBlur","control","useFormContext","isExpireSet","Controller","field","Split","SplitItem","onChange","TimeSelector","AdvancedSettings","save","reset","hasConfigureAccess","setRealm","realmName","realms","findOne","register","FormAccess","convertAttributeNameToForm","_Fragment","accessTokenLifespan","clientSessionIdleTimeout","clientSessionMaxLifespan","offlineSessionIdleTimeout","offlineSessionMaxLifespan","Switch","v","KeyValueInput","MultiLineInput","ActionGroup","Button","AuthenticationOverrides","flows","setFlows","browserFlowOpen","setBrowserFlowOpen","directGrantOpen","setDirectGrantOpen","authenticationManagement","getFlows","filteredFlows","filter","flow","sortBy","f","alias","AddHostDialog","clientId","isOpen","onAdded","onClose","handleSubmit","formState","isDirty","isValid","useForm","addAlert","addError","useAlerts","onSubmit","node","addClusterNode","success","error","Modal","ButtonVariant","link","KeycloakTextInput","required","ClusteringPanel","client","registeredNodes","access","formatDate","useFormatDate","nodes","setNodes","expanded","setExpanded","selectedNode","setSelectedNode","addNodeOpen","setAddNodeOpen","key","setKey","refresh","Date","getTime","testCluster","result","testNodesAvailable","toggleDeleteNodeConfirm","DeleteNodeConfirm","useConfirmDialog","titleKey","messageKey","continueButtonLabel","continueButtonVariant","danger","onConfirm","deleteClusterNode","keys","reduce","object","configure","secondary","now","ExpandableSection","KeycloakDataTable","Promise","resolve","entries","entry","host","registration","ToolbarItem","tertiary","title","onRowClick","displayKey","cellFormatters","parseInt","FORMAT_DATE_AND_TIME","ListEmptyState","ApplicationUrls","FineGrainOpenIdConnect","providers","clientSignatureProviders","clientSignature","contentEncryptionProviders","contentencryption","cekManagementProviders","cekmanagement","signatureProviders","signature","accessTokenOpen","setAccessTokenOpen","idTokenOpen","setIdTokenOpen","idTokenKeyManagementOpen","setIdTokenKeyManagementOpen","idTokenContentOpen","setIdTokenContentOpen","userInfoSignedResponseOpen","setUserInfoSignedResponseOpen","requestObjectSignatureOpen","setRequestObjectSignatureOpen","requestObjectRequiredOpen","setRequestObjectRequiredOpen","requestObjectEncryptionOpen","setRequestObjectEncryptionOpen","requestObjectEncodingOpen","setRequestObjectEncodingOpen","authorizationSignedOpen","setAuthorizationSignedOpen","authorizationEncryptedOpen","setAuthorizationEncryptedOpen","authorizationEncryptedResponseOpen","setAuthorizationEncryptedResponseOpen","keyOptions","sortProviders","p","cekManagementOptions","signatureOptions","contentOptions","requestObjectOptions","requestObjectEncryptionOptions","requestObjectEncodingOptions","authorizationSignedResponseOptions","requestObjectRequiredOptions","FineGrainSamlEndpointConfig","OpenIdConnectCompatibilityModes","RevocationPanel","adminUrl","revocationFieldName","pushRevocationButtonRef","useRef","getValues","setValue","setNotBefore","time","getNotBeforeValue","date","push","pushRevocation","Text","Trans","Link","toClient","tab","InputGroup","Tooltip","parseResult","prefixKey","successCount","successRequests","failedCount","failedRequests","warning","successNodes","failedNodes","AdvancedTab","openIdConnect","publicClient","attributes","authenticationFlowBindingOverrides","resetFields","names","PageSection","ScrollForm","isHidden","panel","toUpperCase","browser","direct_grant","AuthorizationEvaluateResourcePolicies","idx","rowIndex","outerPolicy","resource","useParams","Tbody","Tr","Td","onToggle","prev","toPermissionDetails","permissionType","policy","permissionId","status","toLowerCase","decisionStrategy","DecisionEffect","Permit","policies","scopes","join","Deny","ExpandableRowContent","DescriptionList","TextContent","associatedPolicies","item","toPolicyDetails","policyType","policyId","capitalize","AuthorizationEvaluateResource","evaluateResults","allowedScopes","TableComposable","Thead","Th","values","AuthorizationDataModal","data","show","toggle","useToggle","TextVariants","h1","filterResults","results","ResultsFilter","Results","evaluateResult","back","filterDropdownOpen","toggleFilterDropdown","setFilter","searchQuery","setSearchQuery","searchInput","setSearchInput","confirmSearchQuery","handleKeyDown","e","filteredResources","includes","noEvaluatedData","noFilteredData","Toolbar","ToolbarGroup","TextInput","SearchIcon","Divider","rpt","ValueInput","attribute","selectableValues","resources","isValueOpenArray","setIsValueOpenArray","toggleValueSelect","arr","attributeValues","defaultContextAttributes","attr","context","renderSelectOptionType","scopeValues","scope","getMessageBundleKey","attributeName","camelCase","numChips","expandedText","collapsedText","typeahead","KeyBasedAttributeInput","watch","fields","append","remove","useFieldArray","isKeyOpenArray","setIsKeyOpenArray","toggleKeySelect","shouldFocus","watchLastValue","MinusCircleIcon","PlusCircleIcon","AuthorizationEvaluate","form","mode","trigger","errors","scopesDropdownOpen","setScopesDropdownOpen","roleDropdownOpen","setRoleDropdownOpen","setIsExpanded","applyToResourceType","setApplyToResourceType","setResources","setScopes","setEvaluateResult","clientRoles","setClientRoles","hasAccess","useAccess","ForbiddenSection","roles","all","listResources","listAllScopes","evaluate","formValues","resEval","roleIds","userId","user","entitlements","fromEntries","evaluation","evaluateResource","undefined","FormProvider","FormPanel","ClientSelect","UserSelect","validate","typeaheadMulti","option","event","stopPropagation","role","_id","AuthorizationExport","code","setCode","authorizationDetails","setAuthorizationDetails","exportResource","authDetails","JSON","stringify","exportAuthDetails","navigator","clipboard","writeText","KeycloakSpinner","SearchDropdown","types","search","onSearch","isResource","typeOpen","toggleType","submit","typeOptions","Dropdown","DropdownToggle","MoreLabel","array","Label","count","DetailDescription","DetailDescriptionLink","convert","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","element","EmptyButton","disabled","navigate","useNavigate","toNewPermission","TooltipEmptyButton","EmptyPermissionsState","isResourceEnabled","isScopeEnabled","EmptyState","EmptyStateIcon","Title","EmptyStateBody","AuthorizationPermissions","permissions","setPermissions","selectedPermission","setSelectedPermission","policyProviders","setPolicyProviders","disabledCreate","setDisabledCreate","createOpen","toggleCreate","setSearch","max","setMax","first","setFirst","AssociatedPoliciesRenderer","row","findPermissions","permission","getAssociatedPolicies","params","listPolicyProviders","toggleDeleteDialog","DeleteConfirm","delPermission","noData","searching","PaginatingTableToolbar","DropdownItem","DropdownSeparator","rows","index","description","items","onClick","NewPolicyDialog","onSelect","localeSort","useLocaleSort","sortedPolicies","mapByKey","provider","isValidComponentType","AuthorizationPolicies","setPolicies","selectedPolicy","setSelectedPolicy","newDialog","listPolicies","dependentPolicies","listDependentPolicies","DependentPoliciesRenderer","delPolicy","toCreatePolicy","DetailCell","uris","setScope","listScopesByResource","resourceName","listPermissionsByResource","resourceId","s","toScopeDetails","scopeId","AuthorizationResources","selectedResource","setSelectedResource","setPermission","deep","UriRenderer","fetchPermissions","delResource","toCreateResource","toResourceDetails","owner","selectedId","AuthorizationScopes","deleteDialog","selectedScope","setSelectedScope","collapsed","setCollapsed","options","listAllPermissionsByScope","isLoaded","getScope","c","newlyOpened","listAllResourcesByScope","resourcesScopes","forEach","resourceScope","findIndex","slice","PermissionsRenderer","DeleteScopeDialog","toNewScope","_event","r","SaveReset","isActive","rest","ImportDialog","closeDialog","imported","setImported","JsonFileUpload","Radio","policyEnforcementMode","allowRemoteResourceManagement","Array","isArray","Fragment","POLICY_ENFORCEMENT_MODES","AuthorizationSettings","setResource","importDialog","toggleImportDialog","getResourceServer","importResource","updateResourceServer","DecisionStrategySelect","ClientSessions","SessionsTable","listSessions","Toggle","label","SamlConfig","nameFormatOpen","setNameFormatOpen","SIGNATURE_ALGORITHMS","KEYNAME_TRANSFORMER","CANONICALIZATION","SamlSignature","algOpen","setAlgOpen","keyOpen","setKeyOpen","canOpen","setCanOpen","signDocs","signAssertion","algorithm","can","AccessSettings","isManager","bearerOnly","LoginSettings","LoginSettingsPanel","loginThemeOpen","setLoginThemeOpen","loginThemes","themes","consentRequired","displayOnConsentScreen","theme","LogoutPanel","frontchannelLogout","beerify","message","ValidatedOptions","default","uri","startsWith","ClientSettings","ClientDescription","CapabilityConfig","CopyToClipboardButton","text","variant","setTimeout","useSetTimeout","copy","setCopy","CopyState","copyMessage","copyToClipboard","ClipboardCopyButton","SecretInput","buttonLabel","secret","PasswordInput","ExpireDateFormatter","dateStyle","timeStyle","ClientSecret","secretRotated","setSecretRotated","secretExpirationTime","secretRotatedExpirationTime","expired","toggleInvalidateConfirm","InvalidateConfirm","invalidateSecret","SignedJWT","X509","Credentials","setProviders","clientAuthenticatorType","useWatch","setSecret","accessToken","setAccessToken","getClientAuthenticatorProviders","getClientSecret","regenerate","call","regenerateClientSecret","generateNewClientSecret","toggleClientSecretConfirm","ClientSecretConfirm","cancelButtonLabel","regenerateAccessToken","generateRegistrationAccessToken","registrationAccessToken","toggleAccessTokenConfirm","AccessTokenConfirm","Card","CardBody","ClipboardCopy","CertificateDisplay","keyInfo","certificate","Certificate","GenerateId","StoreSettings","hidePassword","isSaml","keyAlias","keyPassword","storePassword","CERT_PEM","extensions","Map","getFileExtension","format","get","KeyForm","hasPem","useFile","setFilename","openArchiveFormat","setOpenArchiveFormat","cryptoInfo","supportedKeystoreTypes","FileUpload","GenerateKeyDialog","defaultValues","ImportKeyDialog","baseFormats","formats","concat","importFile","Keys","setKeyInfo","openGenerateKeys","toggleOpenGenerateKeys","setOpenGenerateKeys","openImportKeys","toggleOpenImportKeys","setOpenImportKeys","useJwksUrl","getKeyInfo","generate","keyStore","generateAndDownloadKey","importKey","formData","FormData","file","uploadCertificate","CardHeader","CardTitle","ExportSamlKeyDialog","close","realmAlias","download","downloadKey","submitForm","callback","uploadKey","SamlKeysDialog","onCancel","setType","setKeys","generateKey","privateKey","Flex","FlexItem","SamlImportKeyDialog","KEYS","KEYS_MAPPING","KeySection","onChanged","onGenerate","onImport","showImportDialog","section","SamlKeys","isChanged","setIsChanged","selectedType","setSelectedType","openImport","setImportOpen","setRefresh","indexOf","toggleDisableDialog","DisableConfirm","toggleReGenerateDialog","ReGenerateConfirm","isNew","DEDICATED_ROW","ClientScopes","clientName","fineGrainedAccess","searchType","setSearchType","searchTypeType","setSearchTypeType","AllClientScopes","none","addDialogOpen","setAddDialogOpen","setRest","selectedRows","setSelectedRowState","setSelectedRows","isDedicatedRow","loader","defaultClientScopes","listDefaultClientScopes","optionalClientScopes","listOptionalClientScopes","clientScopes","clientScope","optional","ClientScope","defaultScopes","nameFilter","typeFilter","firstNum","Number","page","TypeSelector","CellDropdown","changeClientScope","removeClientScope","AddScopeDialog","addClientScope","SearchToolbar","kebabOpen","setKebabOpen","ChangeTypeDropdown","KebabToggle","cellRenderer","toDedicatedScope","GeneratedCodeTab","ProtocolMappers","protocolMappers","EffectiveRoles","effectiveRoles","EvaluateScopes","prefix","mapperTypes","protocolMapperTypes","selectableScopes","setSelectableScopes","isScopeOpen","setIsScopeOpen","activeTab","setActiveTab","setEffectiveRoles","setProtocolMappers","userInfo","setUserInfo","idToken","setIdToken","tabContent1","tabContent2","tabContent3","tabContent4","tabContent5","evaluatePermission","roleContainer","mapperList","evaluateListProtocolMapper","mapper","protocolMapper","evaluateGenerateAccessToken","evaluateGenerateUserInfo","evaluateGenerateIdToken","QuestionCircleIcon","Grid","GridItem","TabContent","Tabs","Tab","TabTitleText","ServiceAccount","serviceAccount","setServiceAccount","hasManageClients","getServiceAccountUser","assignRoles","realmRoles","flat","users","addRealmRoleMappings","addClientRoleMappings","clientUniqueId","InfoCircleIcon","toUser","username","RoleMapping","ClientDetailHeader","toggleDownloadDialog","badges","protocolName","getProtocolName","dropdownItems","exportClient","isRealmClient","ViewHeader","ClientDetails","profileInfo","permissionsEnabled","disabledFeatures","hasViewUsers","downloadDialogOpen","toggleDownloadDialogOpen","changeAuthenticatorOpen","toggleChangeAuthenticatorOpen","setClient","listRoles","useTab","useRoutableTab","settingsTab","keysTab","credentialsTab","rolesTab","clientScopesTab","authorizationTab","serviceAccountTab","sessionsTab","permissionsTab","advancedTab","useClientScopesTab","toClientScopesTab","clientScopesSetupTab","clientScopesEvaluateTab","useAuthorizationTab","toAuthorizationTab","authorizationSettingsTab","authorizationResourcesTab","authorizationScopesTab","authorizationPoliciesTab","authorizationPermissionsTab","authorizationEvaluateTab","authorizationExportTab","del","toClients","setupForm","parse","flatMap","fetchedClient","Error","cloneDeep","confirmed","convertFormValuesToObject","submittedClient","newClient","trim","update","RoutableTabs","RolesList","toCreateRole","toClientRole","roleId","manage","authorizationServicesEnabled","serviceAccountsEnabled","PermissionsTab"],"mappings":"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"}