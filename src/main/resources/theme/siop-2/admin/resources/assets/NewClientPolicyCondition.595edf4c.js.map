{"version":3,"file":"NewClientPolicyCondition.595edf4c.js","sources":["../../src/realm-settings/NewClientPolicyCondition.tsx"],"sourcesContent":["import type { ConfigPropertyRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/authenticatorConfigInfoRepresentation\";\nimport type ClientPolicyConditionRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientPolicyConditionRepresentation\";\nimport type ClientPolicyRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientPolicyRepresentation\";\nimport type ComponentTypeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentTypeRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  FormGroup,\n  PageSection,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { camelCase } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { Controller, FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate, useParams } from \"react-router-dom\";\n\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { DynamicComponents } from \"../components/dynamic/DynamicComponents\";\nimport { FormAccess } from \"../components/form-access/FormAccess\";\nimport { HelpItem } from \"../components/help-enabler/HelpItem\";\nimport { FormPanel } from \"../components/scroll-form/FormPanel\";\nimport { useAdminClient, useFetch } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../context/server-info/ServerInfoProvider\";\nimport { toEditClientPolicy } from \"./routes/EditClientPolicy\";\nimport type { EditClientPolicyConditionParams } from \"./routes/EditCondition\";\n\nexport type ItemType = { value: string };\n\ntype ConfigProperty = ConfigPropertyRepresentation & {\n  conditions: any;\n  config: any;\n};\n\nexport default function NewClientPolicyCondition() {\n  const { t } = useTranslation(\"realm-settings\");\n  const { addAlert, addError } = useAlerts();\n  const navigate = useNavigate();\n  const { realm } = useRealm();\n\n  const [openConditionType, setOpenConditionType] = useState(false);\n  const [policies, setPolicies] = useState<ClientPolicyRepresentation[]>([]);\n\n  const [condition, setCondition] = useState<\n    ClientPolicyConditionRepresentation[]\n  >([]);\n  const [conditionData, setConditionData] =\n    useState<ClientPolicyConditionRepresentation>();\n  const [conditionType, setConditionType] = useState(\"\");\n  const [conditionProperties, setConditionProperties] = useState<\n    ConfigPropertyRepresentation[]\n  >([]);\n\n  const { policyName, conditionName } =\n    useParams<EditClientPolicyConditionParams>();\n\n  const serverInfo = useServerInfo();\n  const form = useForm<ConfigProperty>();\n\n  const conditionTypes =\n    serverInfo.componentTypes?.[\n      \"org.keycloak.services.clientpolicy.condition.ClientPolicyConditionProvider\"\n    ];\n\n  const { adminClient } = useAdminClient();\n\n  const setupForm = (condition: ClientPolicyConditionRepresentation) => {\n    form.reset({ config: condition.configuration || {} });\n  };\n\n  useFetch(\n    () => adminClient.clientPolicies.listPolicies(),\n\n    (policies) => {\n      setPolicies(policies.policies ?? []);\n\n      if (conditionName) {\n        const currentPolicy = policies.policies?.find(\n          (item) => item.name === policyName\n        );\n\n        const typeAndConfigData = currentPolicy?.conditions?.find(\n          (item) => item.condition === conditionName\n        );\n\n        const currentCondition = conditionTypes?.find(\n          (condition) => condition.id === conditionName\n        );\n\n        setConditionData(typeAndConfigData!);\n        setConditionProperties(currentCondition?.properties!);\n        setupForm(typeAndConfigData!);\n      }\n    },\n    []\n  );\n\n  const save = async (configPolicy: ConfigProperty) => {\n    const configValues = configPolicy.config;\n\n    const writeConfig = () => {\n      return conditionProperties.reduce((r: any, p) => {\n        r[p.name!] = configValues[p.name!];\n        return r;\n      }, {});\n    };\n\n    const updatedPolicies = policies.map((policy) => {\n      if (policy.name !== policyName) {\n        return policy;\n      }\n\n      let conditions = policy.conditions ?? [];\n\n      if (conditionName) {\n        const createdCondition = {\n          condition: conditionData?.condition,\n          configuration: writeConfig(),\n        };\n\n        const index = conditions.findIndex(\n          (condition) => conditionName === condition.condition\n        );\n\n        if (index === -1) {\n          return;\n        }\n\n        const newConditions = [\n          ...conditions.slice(0, index),\n          createdCondition,\n          ...conditions.slice(index + 1),\n        ];\n\n        return {\n          ...policy,\n          conditions: newConditions,\n        };\n      }\n\n      conditions = conditions.concat({\n        condition: condition[0].condition,\n        configuration: writeConfig(),\n      });\n\n      return {\n        ...policy,\n        conditions,\n      };\n    }) as ClientPolicyRepresentation[];\n\n    try {\n      await adminClient.clientPolicies.updatePolicy({\n        policies: updatedPolicies,\n      });\n      setPolicies(updatedPolicies);\n      navigate(toEditClientPolicy({ realm, policyName: policyName! }));\n      addAlert(\n        conditionName\n          ? t(\"realm-settings:updateClientConditionSuccess\")\n          : t(\"realm-settings:createClientConditionSuccess\"),\n        AlertVariant.success\n      );\n    } catch (error) {\n      addError(\"realm-settings:createClientConditionError\", error);\n    }\n  };\n\n  return (\n    <PageSection variant=\"light\">\n      <FormPanel\n        className=\"kc-login-screen\"\n        title={conditionName ? t(\"editCondition\") : t(\"addCondition\")}\n      >\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          className=\"pf-u-mt-lg\"\n          onSubmit={form.handleSubmit(save)}\n        >\n          <FormGroup\n            label={t(\"conditionType\")}\n            fieldId=\"conditionType\"\n            labelIcon={\n              <HelpItem\n                helpText={\n                  conditionType\n                    ? `realm-settings-help:${camelCase(\n                        conditionType.replace(/-/g, \" \")\n                      )}`\n                    : \"realm-settings-help:conditions\"\n                }\n                fieldLabelId=\"realm-settings:conditionType\"\n              />\n            }\n          >\n            <Controller\n              name=\"conditions\"\n              defaultValue={\"any-client\"}\n              control={form.control}\n              render={({ field }) => (\n                <Select\n                  placeholderText={t(\"selectACondition\")}\n                  className=\"kc-conditionType-select\"\n                  data-testid=\"conditionType-select\"\n                  toggleId=\"provider\"\n                  isDisabled={!!conditionName}\n                  onToggle={(toggle) => setOpenConditionType(toggle)}\n                  onSelect={(_, value) => {\n                    field.onChange(value);\n                    setConditionProperties(\n                      (value as ComponentTypeRepresentation).properties\n                    );\n                    setConditionType((value as ComponentTypeRepresentation).id);\n                    setCondition([\n                      {\n                        condition: (value as ComponentTypeRepresentation).id,\n                      },\n                    ]);\n                    setOpenConditionType(false);\n                  }}\n                  selections={conditionName ? conditionName : conditionType}\n                  variant={SelectVariant.single}\n                  aria-label={t(\"conditionType\")}\n                  isOpen={openConditionType}\n                >\n                  {conditionTypes?.map((condition) => (\n                    <SelectOption\n                      selected={condition.id === field.value}\n                      description={t(\n                        `realm-settings-help:${camelCase(\n                          condition.id.replace(/-/g, \" \")\n                        )}`\n                      )}\n                      key={condition.id}\n                      value={condition}\n                    >\n                      {condition.id}\n                    </SelectOption>\n                  ))}\n                </Select>\n              )}\n            />\n          </FormGroup>\n\n          <FormProvider {...form}>\n            <DynamicComponents properties={conditionProperties} />\n          </FormProvider>\n          <ActionGroup>\n            <Button\n              variant=\"primary\"\n              type=\"submit\"\n              data-testid=\"addCondition-saveBtn\"\n              isDisabled={conditionType === \"\" && !conditionName}\n            >\n              {conditionName ? t(\"common:save\") : t(\"common:add\")}\n            </Button>\n            <Button\n              variant=\"link\"\n              data-testid=\"addCondition-cancelBtn\"\n              onClick={() =>\n                navigate(toEditClientPolicy({ realm, policyName: policyName! }))\n              }\n            >\n              {t(\"common:cancel\")}\n            </Button>\n          </ActionGroup>\n        </FormAccess>\n      </FormPanel>\n    </PageSection>\n  );\n}\n"],"names":["NewClientPolicyCondition","t","useTranslation","addAlert","addError","useAlerts","navigate","useNavigate","realm","useRealm","openConditionType","setOpenConditionType","useState","policies","setPolicies","condition","setCondition","conditionData","setConditionData","conditionType","setConditionType","conditionProperties","setConditionProperties","policyName","conditionName","useParams","serverInfo","useServerInfo","form","useForm","conditionTypes","componentTypes","adminClient","useAdminClient","setupForm","reset","config","configuration","useFetch","clientPolicies","listPolicies","typeAndConfigData","find","item","name","conditions","currentCondition","id","properties","save","configPolicy","configValues","writeConfig","reduce","r","p","updatedPolicies","map","policy","createdCondition","index","findIndex","newConditions","slice","concat","updatePolicy","toEditClientPolicy","AlertVariant","success","error","PageSection","FormPanel","FormAccess","handleSubmit","_jsx","FormGroup","HelpItem","camelCase","replace","Controller","control","field","Select","toggle","_","value","onChange","SelectVariant","single","SelectOption","FormProvider","DynamicComponents","_jsxs","ActionGroup","Button"],"mappings":"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"}