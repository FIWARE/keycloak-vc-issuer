{"version":3,"file":"AddRoleMappingModal.c7175fba.js","sources":["../../src/components/role-mapping/queries.ts","../../src/components/role-mapping/RoleMapping.tsx","../../src/components/role-mapping/AddRoleMappingModal.tsx"],"sourcesContent":["import type RoleRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport type MappingsRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/mappingsRepresentation\";\nimport type { ClientScopes } from \"@keycloak/keycloak-admin-client/lib/resources/clientScopes\";\nimport type { Groups } from \"@keycloak/keycloak-admin-client/lib/resources/groups\";\nimport type { Roles } from \"@keycloak/keycloak-admin-client/lib/resources/roles\";\nimport type { Users } from \"@keycloak/keycloak-admin-client/lib/resources/users\";\nimport type { Clients } from \"@keycloak/keycloak-admin-client/lib/resources/clients\";\nimport type KeycloakAdminClient from \"@keycloak/keycloak-admin-client\";\n\nimport { Row } from \"./RoleMapping\";\n\nexport type ResourcesKey = keyof KeycloakAdminClient;\n\ntype DeleteFunctions =\n  | keyof Pick<Groups, \"delClientRoleMappings\" | \"delRealmRoleMappings\">\n  | keyof Pick<ClientScopes, \"delClientScopeMappings\" | \"delRealmScopeMappings\">\n  | keyof Pick<Roles, \"delCompositeRoles\">;\n\ntype ListEffectiveFunction =\n  | keyof Pick<Groups, \"listRoleMappings\" | \"listAvailableRealmRoleMappings\">\n  | keyof Pick<\n      ClientScopes,\n      | \"listScopeMappings\"\n      | \"listAvailableRealmScopeMappings\"\n      | \"listCompositeClientScopeMappings\"\n    >\n  | keyof Pick<Roles, \"getCompositeRoles\" | \"getCompositeRolesForClient\">\n  | keyof Pick<\n      Users,\n      \"listCompositeClientRoleMappings\" | \"listCompositeRealmRoleMappings\"\n    >;\n\ntype ListAvailableFunction =\n  | keyof Pick<\n      Groups,\n      \"listAvailableClientRoleMappings\" | \"listAvailableRealmRoleMappings\"\n    >\n  | keyof Pick<\n      ClientScopes,\n      \"listAvailableClientScopeMappings\" | \"listAvailableRealmScopeMappings\"\n    >\n  | keyof Pick<Roles, \"find\">\n  | keyof Pick<Clients, \"listRoles\">;\n\ntype FunctionMapping = {\n  delete: DeleteFunctions[];\n  listAvailable: ListAvailableFunction[];\n  listEffective: ListEffectiveFunction[];\n};\n\ntype ResourceMapping = Partial<Record<ResourcesKey, FunctionMapping>>;\nconst groupFunctions: FunctionMapping = {\n  delete: [\"delClientRoleMappings\", \"delRealmRoleMappings\"],\n  listEffective: [\n    \"listRoleMappings\",\n    \"listCompositeRealmRoleMappings\",\n    \"listCompositeClientRoleMappings\",\n  ],\n  listAvailable: [\n    \"listAvailableClientRoleMappings\",\n    \"listAvailableRealmRoleMappings\",\n  ],\n};\n\nconst clientFunctions: FunctionMapping = {\n  delete: [\"delClientScopeMappings\", \"delRealmScopeMappings\"],\n  listEffective: [\n    \"listScopeMappings\",\n    \"listAvailableRealmScopeMappings\",\n    \"listCompositeClientScopeMappings\",\n  ],\n  listAvailable: [\n    \"listAvailableClientScopeMappings\",\n    \"listAvailableRealmScopeMappings\",\n  ],\n};\n\nconst mapping: ResourceMapping = {\n  groups: groupFunctions,\n  users: groupFunctions,\n  clientScopes: clientFunctions,\n  clients: clientFunctions,\n  roles: {\n    delete: [\"delCompositeRoles\", \"delCompositeRoles\"],\n    listEffective: [\n      \"getCompositeRoles\",\n      \"getCompositeRoles\",\n      \"getCompositeRolesForClient\",\n    ],\n    listAvailable: [\"listRoles\", \"find\"],\n  },\n};\n\ntype queryType =\n  | DeleteFunctions\n  | ListAvailableFunction\n  | ListEffectiveFunction;\n\nconst castAdminClient = (\n  adminClient: KeycloakAdminClient,\n  resource: ResourcesKey\n) =>\n  adminClient[resource] as unknown as {\n    [index in queryType]: (...params: any) => Promise<RoleRepresentation[]>;\n  };\n\nconst applyQuery = (\n  adminClient: KeycloakAdminClient,\n  type: ResourcesKey,\n  query: queryType,\n  ...params: object[]\n): Promise<RoleRepresentation[]> =>\n  castAdminClient(adminClient, type)[query](...params);\n\nexport const deleteMapping = (\n  adminClient: KeycloakAdminClient,\n  type: ResourcesKey,\n  id: string,\n  rows: Row[]\n) =>\n  rows.map((row) => {\n    const role = { id: row.role.id!, name: row.role.name! };\n    const query = mapping[type]?.delete[row.client ? 0 : 1]!;\n\n    return applyQuery(\n      adminClient,\n      type,\n      query,\n      {\n        id,\n        clientUniqueId: row.client?.id,\n        client: row.client?.id,\n        roles: [role],\n      },\n      [role]\n    );\n  });\n\nexport const getMapping = async (\n  adminClient: KeycloakAdminClient,\n  type: ResourcesKey,\n  id: string\n): Promise<MappingsRepresentation> => {\n  const query = mapping[type]!.listEffective[0];\n  const result = applyQuery(adminClient, type, query, { id });\n  if (type !== \"roles\") {\n    return result as MappingsRepresentation;\n  }\n  const roles = await result;\n  const clientRoles = await Promise.all(\n    roles\n      .filter((r) => r.clientRole)\n      .map(async (role) => {\n        const client = await adminClient.clients.findOne({\n          id: role.containerId!,\n        });\n\n        role.containerId = client?.clientId;\n        return { ...client, mappings: [role] };\n      })\n  );\n\n  return {\n    clientMappings: clientRoles,\n    realmMappings: roles.filter((r) => !r.clientRole),\n  };\n};\n\nexport const getEffectiveRoles = async (\n  adminClient: KeycloakAdminClient,\n  type: ResourcesKey,\n  id: string\n): Promise<Row[]> => {\n  const query = mapping[type]!.listEffective[1];\n  if (type !== \"roles\") {\n    return (await applyQuery(adminClient, type, query, { id })).map((role) => ({\n      role,\n    }));\n  }\n  const roles = await applyQuery(adminClient, type, query, { id });\n  const parentRoles = await Promise.all(\n    roles\n      .filter((r) => r.composite)\n      .map((r) => applyQuery(adminClient, type, query, { id: r.id }))\n  );\n  return [...roles, ...parentRoles.flat()].map((role) => ({ role }));\n};\n\nexport const getAvailableRoles = async (\n  adminClient: KeycloakAdminClient,\n  type: ResourcesKey,\n  params: Record<string, string | number>\n): Promise<Row[]> => {\n  const query = mapping[type]!.listAvailable[1];\n  return (await applyQuery(adminClient, type, query, params)).map((role) => ({\n    role,\n  }));\n};\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  AlertVariant,\n  Badge,\n  Button,\n  ButtonVariant,\n  Checkbox,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { cellWidth } from \"@patternfly/react-table\";\n\nimport type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport type RoleRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport type KeycloakAdminClient from \"@keycloak/keycloak-admin-client\";\nimport { AddRoleMappingModal } from \"./AddRoleMappingModal\";\nimport { KeycloakDataTable } from \"../table-toolbar/KeycloakDataTable\";\nimport { emptyFormatter, upperCaseFormatter } from \"../../util\";\nimport { useAlerts } from \"../alert/Alerts\";\nimport { useConfirmDialog } from \"../confirm-dialog/ConfirmDialog\";\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\nimport { ListEmptyState } from \"../list-empty-state/ListEmptyState\";\nimport { deleteMapping, getEffectiveRoles, getMapping } from \"./queries\";\nimport { getEffectiveClientRoles } from \"./resource\";\n\nimport \"./role-mapping.css\";\n\nexport type CompositeRole = RoleRepresentation & {\n  parent: RoleRepresentation;\n  isInherited?: boolean;\n};\n\nexport type Row = {\n  client?: ClientRepresentation;\n  role: RoleRepresentation | CompositeRole;\n  id?: string; // KeycloakDataTable expects an id for the row\n};\n\nexport const mapRoles = (\n  assignedRoles: Row[],\n  effectiveRoles: Row[],\n  hide: boolean\n) => [\n  ...(hide\n    ? assignedRoles.map((row) => ({\n        ...row,\n        role: {\n          ...row.role,\n          isInherited: false,\n        },\n      }))\n    : effectiveRoles.map((row) => ({\n        ...row,\n        role: {\n          ...row.role,\n          isInherited:\n            assignedRoles.find((r) => r.role.id === row.role.id) === undefined,\n        },\n      }))),\n];\n\nexport const ServiceRole = ({ role, client }: Row) => (\n  <>\n    {client?.clientId && (\n      <Badge isRead className=\"keycloak-admin--role-mapping__client-name\">\n        {client.clientId}\n      </Badge>\n    )}\n    {role.name}\n  </>\n);\n\nexport type ResourcesKey = keyof KeycloakAdminClient;\n\ntype RoleMappingProps = {\n  name: string;\n  id: string;\n  type: ResourcesKey;\n  isManager?: boolean;\n  save: (rows: Row[]) => Promise<void>;\n};\n\nexport const RoleMapping = ({\n  name,\n  id,\n  type,\n  isManager = true,\n  save,\n}: RoleMappingProps) => {\n  const { t } = useTranslation(type);\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const [hide, setHide] = useState(true);\n  const [showAssign, setShowAssign] = useState(false);\n  const [selected, setSelected] = useState<Row[]>([]);\n\n  const assignRoles = async (rows: Row[]) => {\n    await save(rows);\n    refresh();\n  };\n\n  const loader = async () => {\n    let effectiveRoles: Row[] = [];\n    let effectiveClientRoles: Row[] = [];\n    if (!hide) {\n      effectiveRoles = await getEffectiveRoles(adminClient, type, id);\n\n      effectiveClientRoles = (\n        await getEffectiveClientRoles({\n          adminClient,\n          type,\n          id,\n        })\n      ).map((e) => ({\n        client: { clientId: e.client, id: e.clientId },\n        role: { id: e.id, name: e.role, description: e.description },\n      }));\n    }\n\n    const roles = await getMapping(adminClient, type, id);\n    const realmRolesMapping =\n      roles.realmMappings?.map((role) => ({ role })) || [];\n    const clientMapping = Object.values(roles.clientMappings || {})\n      .map((client) =>\n        client.mappings.map((role: RoleRepresentation) => ({\n          client: { clientId: client.client, ...client },\n          role,\n        }))\n      )\n      .flat();\n\n    return [\n      ...mapRoles(\n        [...realmRolesMapping, ...clientMapping],\n        [...effectiveClientRoles, ...effectiveRoles],\n        hide\n      ),\n    ];\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"clients:removeMappingTitle\",\n    messageKey: t(\"clients:removeMappingConfirm\", { count: selected.length }),\n    continueButtonLabel: \"common:remove\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await Promise.all(deleteMapping(adminClient, type, id, selected));\n        addAlert(t(\"clients:clientScopeRemoveSuccess\"), AlertVariant.success);\n        refresh();\n      } catch (error) {\n        addError(\"clients:clientScopeRemoveError\", error);\n      }\n    },\n  });\n\n  const ManagerToolbarItems = () => {\n    if (!isManager) return <span />;\n\n    return (\n      <>\n        <ToolbarItem>\n          <Button data-testid=\"assignRole\" onClick={() => setShowAssign(true)}>\n            {t(\"common:assignRole\")}\n          </Button>\n        </ToolbarItem>\n        <ToolbarItem>\n          <Button\n            variant=\"link\"\n            data-testid=\"unAssignRole\"\n            onClick={toggleDeleteDialog}\n            isDisabled={selected.length === 0}\n          >\n            {t(\"common:unAssignRole\")}\n          </Button>\n        </ToolbarItem>\n      </>\n    );\n  };\n\n  return (\n    <>\n      {showAssign && (\n        <AddRoleMappingModal\n          id={id}\n          type={type}\n          name={name}\n          onAssign={assignRoles}\n          onClose={() => setShowAssign(false)}\n        />\n      )}\n      <DeleteConfirm />\n      <KeycloakDataTable\n        data-testid=\"assigned-roles\"\n        key={`${id}${key}`}\n        loader={loader}\n        canSelectAll\n        onSelect={(rows) => setSelected(rows)}\n        searchPlaceholderKey=\"clients:searchByName\"\n        ariaLabelKey=\"clients:clientScopeList\"\n        isRowDisabled={(value) =>\n          (value.role as CompositeRole).isInherited || false\n        }\n        toolbarItem={\n          <>\n            <ToolbarItem>\n              <Checkbox\n                label={t(\"common:hideInheritedRoles\")}\n                id=\"hideInheritedRoles\"\n                data-testid=\"hideInheritedRoles\"\n                isChecked={hide}\n                onChange={(check) => {\n                  setHide(check);\n                  refresh();\n                }}\n              />\n            </ToolbarItem>\n            <ManagerToolbarItems />\n          </>\n        }\n        actions={\n          isManager\n            ? [\n                {\n                  title: t(\"common:unAssignRole\"),\n                  onRowClick: async (role) => {\n                    setSelected([role]);\n                    toggleDeleteDialog();\n                    return false;\n                  },\n                },\n              ]\n            : []\n        }\n        columns={[\n          {\n            name: \"role.name\",\n            displayKey: t(\"common:name\"),\n            transforms: [cellWidth(30)],\n            cellRenderer: ServiceRole,\n          },\n          {\n            name: \"role.isInherited\",\n            displayKey: t(\"common:inherent\"),\n            cellFormatters: [upperCaseFormatter(), emptyFormatter()],\n          },\n          {\n            name: \"role.description\",\n            displayKey: t(\"common:description\"),\n            cellFormatters: [emptyFormatter()],\n          },\n        ]}\n        emptyState={\n          <ListEmptyState\n            message={t(\"noRoles\")}\n            instructions={t(\"noRolesInstructions\")}\n            primaryActionText={t(\"common:assignRole\")}\n            onPrimaryAction={() => setShowAssign(true)}\n          />\n        }\n      />\n    </>\n  );\n};\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Button,\n  Dropdown,\n  DropdownItem,\n  DropdownToggle,\n  Modal,\n  ModalVariant,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { FilterIcon } from \"@patternfly/react-icons\";\n\nimport { KeycloakDataTable } from \"../table-toolbar/KeycloakDataTable\";\nimport { useAdminClient } from \"../../context/auth/AdminClient\";\nimport useLocaleSort from \"../../utils/useLocaleSort\";\nimport { ResourcesKey, Row, ServiceRole } from \"./RoleMapping\";\nimport { getAvailableRoles } from \"./queries\";\nimport { getAvailableClientRoles } from \"./resource\";\nimport { ListEmptyState } from \"../list-empty-state/ListEmptyState\";\n\ntype AddRoleMappingModalProps = {\n  id: string;\n  type: ResourcesKey;\n  name?: string;\n  isRadio?: boolean;\n  onAssign: (rows: Row[]) => void;\n  onClose: () => void;\n  isLDAPmapper?: boolean;\n};\n\ntype FilterType = \"roles\" | \"clients\";\n\nexport const AddRoleMappingModal = ({\n  id,\n  name,\n  type,\n  isRadio = false,\n  isLDAPmapper,\n  onAssign,\n  onClose,\n}: AddRoleMappingModalProps) => {\n  const { t } = useTranslation(type);\n  const { adminClient } = useAdminClient();\n\n  const [searchToggle, setSearchToggle] = useState(false);\n\n  const [filterType, setFilterType] = useState<FilterType>(\"roles\");\n  const [selectedRows, setSelectedRows] = useState<Row[]>([]);\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const localeSort = useLocaleSort();\n  const compareRow = ({ role: { name } }: Row) => name?.toUpperCase();\n\n  const loader = async (\n    first?: number,\n    max?: number,\n    search?: string\n  ): Promise<Row[]> => {\n    const params: Record<string, string | number> = {\n      first: first!,\n      max: max!,\n    };\n\n    if (search) {\n      params.search = search;\n    }\n\n    const roles = await getAvailableRoles(adminClient, type, { ...params, id });\n    const sorted = localeSort(roles, compareRow);\n    return sorted.map((row) => {\n      return {\n        role: row.role,\n        id: row.role.id,\n      };\n    });\n  };\n\n  const clientRolesLoader = async (\n    first?: number,\n    max?: number,\n    search?: string\n  ): Promise<Row[]> => {\n    const roles = await getAvailableClientRoles({\n      adminClient,\n      id,\n      type,\n      first: first || 0,\n      max: max || 10,\n      search,\n    });\n\n    return localeSort(\n      roles.map((e) => ({\n        client: { clientId: e.client, id: e.clientId },\n        role: { id: e.id, name: e.role, description: e.description },\n        id: e.id,\n      })),\n      ({ client: { clientId }, role: { name } }) => `${clientId}${name}`\n    );\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.large}\n      title={\n        isLDAPmapper\n          ? t(\"common:assignRole\")\n          : t(\"common:assignRolesTo\", { client: name })\n      }\n      isOpen\n      onClose={onClose}\n      actions={[\n        <Button\n          data-testid=\"assign\"\n          key=\"confirm\"\n          isDisabled={selectedRows.length === 0}\n          variant=\"primary\"\n          onClick={() => {\n            onAssign(selectedRows);\n            onClose();\n          }}\n        >\n          {t(\"common:assign\")}\n        </Button>,\n        <Button\n          data-testid=\"cancel\"\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={onClose}\n        >\n          {t(\"common:cancel\")}\n        </Button>,\n      ]}\n    >\n      <KeycloakDataTable\n        key={key}\n        onSelect={(rows) => setSelectedRows([...rows])}\n        searchPlaceholderKey=\"clients:searchByRoleName\"\n        isPaginated={filterType === \"clients\"}\n        searchTypeComponent={\n          <ToolbarItem>\n            <Dropdown\n              onSelect={() => {\n                setFilterType(filterType === \"roles\" ? \"clients\" : \"roles\");\n                setSearchToggle(false);\n                refresh();\n              }}\n              data-testid=\"filter-type-dropdown\"\n              toggle={\n                <DropdownToggle\n                  onToggle={setSearchToggle}\n                  icon={<FilterIcon />}\n                >\n                  {filterType === \"roles\"\n                    ? t(\"common:filterByRoles\")\n                    : t(\"common:filterByClients\")}\n                </DropdownToggle>\n              }\n              isOpen={searchToggle}\n              dropdownItems={[\n                <DropdownItem key=\"filter-type\" data-testid={filterType}>\n                  {filterType === \"roles\"\n                    ? t(\"common:filterByClients\")\n                    : t(\"common:filterByRoles\")}\n                </DropdownItem>,\n              ]}\n            />\n          </ToolbarItem>\n        }\n        canSelectAll\n        isRadio={isRadio}\n        loader={filterType === \"roles\" ? loader : clientRolesLoader}\n        ariaLabelKey=\"clients:roles\"\n        columns={[\n          {\n            name: \"name\",\n            cellRenderer: ServiceRole,\n          },\n          {\n            name: \"role.description\",\n            displayKey: \"common:description\",\n          },\n        ]}\n        emptyState={\n          <ListEmptyState\n            message={t(\"noRoles\")}\n            instructions={t(\"common:noRealmRolesToAssign\")}\n            secondaryActions={[\n              {\n                text: t(\"common:filterByClients\"),\n                onClick: () => {\n                  setFilterType(\"clients\");\n                  refresh();\n                },\n              },\n            ]}\n          />\n        }\n      />\n    </Modal>\n  );\n};\n"],"names":["groupFunctions","clientFunctions","mapping","castAdminClient","adminClient","resource","applyQuery","type","query","params","deleteMapping","id","rows","row","role","getMapping","result","roles","r","client","getEffectiveRoles","parentRoles","getAvailableRoles","mapRoles","assignedRoles","effectiveRoles","hide","map","isInherited","find","undefined","ServiceRole","_Fragment","clientId","Badge","name","RoleMapping","isManager","save","t","useTranslation","useAdminClient","addAlert","addError","useAlerts","key","setKey","useState","refresh","setHide","showAssign","setShowAssign","selected","setSelected","assignRoles","loader","effectiveClientRoles","getEffectiveClientRoles","e","description","realmRolesMapping","realmMappings","clientMapping","Object","values","clientMappings","mappings","flat","toggleDeleteDialog","DeleteConfirm","useConfirmDialog","titleKey","messageKey","count","length","continueButtonLabel","continueButtonVariant","ButtonVariant","danger","onConfirm","Promise","all","AlertVariant","success","error","ManagerToolbarItems","_jsx","ToolbarItem","Button","AddRoleMappingModal","KeycloakDataTable","value","Checkbox","check","title","onRowClick","displayKey","transforms","cellWidth","cellRenderer","cellFormatters","upperCaseFormatter","emptyFormatter","ListEmptyState","isRadio","isLDAPmapper","onAssign","onClose","searchToggle","setSearchToggle","filterType","setFilterType","selectedRows","setSelectedRows","localeSort","useLocaleSort","compareRow","toUpperCase","first","max","search","sorted","clientRolesLoader","getAvailableClientRoles","Modal","ModalVariant","large","Dropdown","DropdownToggle","FilterIcon","DropdownItem","text","onClick"],"mappings":"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"}