{"version":3,"file":"RealmRoleTabs.8dba6bf1.js","sources":["../../src/realm-roles/UsersInRoleTab.tsx","../../src/realm-roles/RealmRoleTabs.tsx"],"sourcesContent":["import { Button, PageSection, Popover } from \"@patternfly/react-core\";\nimport { QuestionCircleIcon } from \"@patternfly/react-icons\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport type { ClientRoleParams } from \"../clients/routes/ClientRole\";\nimport { useHelp } from \"../components/help-enabler/HelpHeader\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport { KeycloakDataTable } from \"../components/table-toolbar/KeycloakDataTable\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { emptyFormatter, upperCaseFormatter } from \"../util\";\nimport { useParams } from \"../utils/useParams\";\n\nexport const UsersInRoleTab = () => {\n  const navigate = useNavigate();\n  const { realm } = useRealm();\n\n  const { t } = useTranslation(\"roles\");\n  const { id, clientId } = useParams<ClientRoleParams>();\n\n  const { adminClient } = useAdminClient();\n\n  const loader = async (first?: number, max?: number) => {\n    const role = await adminClient.roles.findOneById({ id: id });\n    if (!role) {\n      throw new Error(t(\"common:notFound\"));\n    }\n\n    if (role.clientRole) {\n      return adminClient.clients.findUsersWithRole({\n        roleName: role.name!,\n        id: clientId,\n        first,\n        max,\n      });\n    }\n\n    return adminClient.roles.findUsersWithRole({\n      name: role.name!,\n      first,\n      max,\n    });\n  };\n\n  const { enabled } = useHelp();\n\n  return (\n    <PageSection data-testid=\"users-page\" variant=\"light\">\n      <KeycloakDataTable\n        isPaginated\n        loader={loader}\n        ariaLabelKey=\"roles:roleList\"\n        searchPlaceholderKey=\"\"\n        toolbarItem={\n          enabled && (\n            <Popover\n              aria-label=\"Basic popover\"\n              position=\"bottom\"\n              bodyContent={\n                <div>\n                  {t(\"roles:whoWillAppearPopoverText\")}\n                  <Button\n                    className=\"kc-groups-link\"\n                    variant=\"link\"\n                    onClick={() => navigate(`/${realm}/groups`)}\n                  >\n                    {t(\"common:groups\")}\n                  </Button>\n                  {t(\"or\")}\n                  <Button\n                    className=\"kc-users-link\"\n                    variant=\"link\"\n                    onClick={() => navigate(`/${realm}/users`)}\n                  >\n                    {t(\"users\")}.\n                  </Button>\n                </div>\n              }\n              footerContent={t(\"roles:whoWillAppearPopoverFooterText\")}\n            >\n              <Button\n                variant=\"link\"\n                className=\"kc-who-will-appear-button\"\n                key=\"who-will-appear-button\"\n                icon={<QuestionCircleIcon />}\n              >\n                {t(\"roles:whoWillAppearLinkText\")}\n              </Button>\n            </Popover>\n          )\n        }\n        emptyState={\n          <ListEmptyState\n            hasIcon={true}\n            message={t(\"noDirectUsers\")}\n            instructions={\n              <div>\n                {t(\"noUsersEmptyStateDescription\")}\n                <Button\n                  className=\"kc-groups-link-empty-state\"\n                  variant=\"link\"\n                  onClick={() => navigate(`/${realm}/groups`)}\n                >\n                  {t(\"common:groups\")}\n                </Button>\n                {t(\"or\")}\n                <Button\n                  className=\"kc-users-link-empty-state\"\n                  variant=\"link\"\n                  onClick={() => navigate(`/${realm}/users`)}\n                >\n                  {t(\"users\")}\n                </Button>\n                {t(\"noUsersEmptyStateDescriptionContinued\")}\n              </div>\n            }\n          />\n        }\n        columns={[\n          {\n            name: \"username\",\n            displayKey: \"roles:userName\",\n            cellFormatters: [emptyFormatter()],\n          },\n          {\n            name: \"email\",\n            displayKey: \"roles:email\",\n            cellFormatters: [emptyFormatter()],\n          },\n          {\n            name: \"lastName\",\n            displayKey: \"roles:lastName\",\n            cellFormatters: [emptyFormatter()],\n          },\n          {\n            name: \"firstName\",\n            displayKey: \"roles:firstName\",\n            cellFormatters: [upperCaseFormatter(), emptyFormatter()],\n          },\n        ]}\n      />\n    </PageSection>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport type RoleRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport {\n  AlertVariant,\n  ButtonVariant,\n  DropdownItem,\n  PageSection,\n  Tab,\n  TabTitleText,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { SubmitHandler, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useLocation, useMatch, useNavigate } from \"react-router-dom\";\n\nimport { toClient } from \"../clients/routes/Client\";\nimport {\n  ClientRoleParams,\n  ClientRoleRoute,\n  ClientRoleTab,\n  toClientRole,\n} from \"../clients/routes/ClientRole\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport {\n  AttributeForm,\n  AttributesForm,\n} from \"../components/key-value-form/AttributeForm\";\nimport {\n  arrayToKeyValue,\n  keyValueToArray,\n  KeyValueType,\n} from \"../components/key-value-form/key-value-convert\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport { PermissionsTab } from \"../components/permission-tab/PermissionTab\";\nimport { RoleForm } from \"../components/role-form/RoleForm\";\nimport { AddRoleMappingModal } from \"../components/role-mapping/AddRoleMappingModal\";\nimport { RoleMapping } from \"../components/role-mapping/RoleMapping\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../components/routable-tabs/RoutableTabs\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useAdminClient, useFetch } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../context/server-info/ServerInfoProvider\";\nimport { useParams } from \"../utils/useParams\";\nimport { RealmRoleRoute, RealmRoleTab, toRealmRole } from \"./routes/RealmRole\";\nimport { toRealmRoles } from \"./routes/RealmRoles\";\nimport { UsersInRoleTab } from \"./UsersInRoleTab\";\n\nexport default function RealmRoleTabs() {\n  const { t } = useTranslation(\"roles\");\n  const form = useForm<AttributeForm>({\n    mode: \"onChange\",\n  });\n  const { control, reset, setValue } = form;\n  const navigate = useNavigate();\n\n  const { adminClient } = useAdminClient();\n\n  const { id, clientId } = useParams<ClientRoleParams>();\n  const { pathname } = useLocation();\n\n  const { realm: realmName } = useRealm();\n\n  const [key, setKey] = useState(0);\n  const [attributes, setAttributes] = useState<KeyValueType[] | undefined>();\n\n  const { profileInfo } = useServerInfo();\n\n  const refresh = () => setKey(key + 1);\n\n  const { addAlert, addError } = useAlerts();\n\n  const [open, setOpen] = useState(false);\n  const convert = (role: RoleRepresentation) => {\n    const { attributes, ...rest } = role;\n    return {\n      attributes: arrayToKeyValue(attributes),\n      ...rest,\n    };\n  };\n\n  const roleName = useWatch({\n    control,\n    defaultValue: undefined,\n    name: \"name\",\n  });\n\n  const composites = useWatch({\n    control,\n    defaultValue: false,\n    name: \"composite\",\n  });\n\n  const [realm, setRealm] = useState<RealmRepresentation>();\n\n  useFetch(\n    async () => {\n      const [realm, role] = await Promise.all([\n        adminClient.realms.findOne({ realm: realmName }),\n        adminClient.roles.findOneById({ id }),\n      ]);\n\n      return { realm, role };\n    },\n    ({ realm, role }) => {\n      if (!realm || !role) {\n        throw new Error(t(\"common:notFound\"));\n      }\n\n      const convertedRole = convert(role);\n\n      reset(convertedRole);\n      setAttributes(convertedRole.attributes);\n      setRealm(realm);\n    },\n    [key]\n  );\n\n  const onSubmit: SubmitHandler<AttributeForm> = async (formValues) => {\n    try {\n      const { attributes, ...rest } = formValues;\n      const roleRepresentation: RoleRepresentation = rest;\n\n      roleRepresentation.name = roleRepresentation.name?.trim();\n      roleRepresentation.attributes = keyValueToArray(attributes);\n\n      if (!clientId) {\n        await adminClient.roles.updateById({ id }, roleRepresentation);\n      } else {\n        await adminClient.clients.updateRole(\n          { id: clientId, roleName: formValues.name! },\n          roleRepresentation\n        );\n      }\n\n      setAttributes(attributes);\n      addAlert(t(\"roleSaveSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"roles:roleSaveError\", error);\n    }\n  };\n\n  const realmRoleMatch = useMatch(RealmRoleRoute.path);\n  const clientRoleMatch = useMatch(ClientRoleRoute.path);\n\n  const toOverview = () => {\n    if (realmRoleMatch) {\n      return toRealmRoles({ realm: realmName });\n    }\n\n    if (clientRoleMatch) {\n      return toClient({\n        realm: realmName,\n        clientId: clientRoleMatch.params.clientId!,\n        tab: \"roles\",\n      });\n    }\n\n    throw new Error(\"Roles overview route could not be determined.\");\n  };\n\n  const toTab = (tab: RealmRoleTab | ClientRoleTab) => {\n    if (realmRoleMatch) {\n      return toRealmRole({\n        realm: realmName,\n        id,\n        tab,\n      });\n    }\n\n    if (clientRoleMatch) {\n      return toClientRole({\n        realm: realmName,\n        id,\n        clientId: clientRoleMatch.params.clientId!,\n        tab: tab as ClientRoleTab,\n      });\n    }\n\n    throw new Error(\"Route could not be determined.\");\n  };\n\n  const useTab = (tab: RealmRoleTab | ClientRoleTab) =>\n    useRoutableTab(toTab(tab));\n\n  const detailsTab = useTab(\"details\");\n  const associatedRolesTab = useTab(\"associated-roles\");\n  const attributesTab = useTab(\"attributes\");\n  const usersInRoleTab = useTab(\"users-in-role\");\n  const permissionsTab = useTab(\"permissions\");\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"roles:roleDeleteConfirm\",\n    messageKey: t(\"roles:roleDeleteConfirmDialog\", {\n      selectedRoleName: roleName || t(\"createRole\"),\n    }),\n    continueButtonLabel: \"common:delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        if (!clientId) {\n          await adminClient.roles.delById({ id });\n        } else {\n          await adminClient.clients.delRole({\n            id: clientId,\n            roleName: roleName!,\n          });\n        }\n        addAlert(t(\"roleDeletedSuccess\"), AlertVariant.success);\n        navigate(toOverview());\n      } catch (error) {\n        addError(\"roles:roleDeleteError\", error);\n      }\n    },\n  });\n\n  const dropdownItems = pathname.includes(\"associated-roles\")\n    ? [\n        <DropdownItem\n          key=\"delete-all-associated\"\n          component=\"button\"\n          onClick={() => toggleDeleteAllAssociatedRolesDialog()}\n        >\n          {t(\"roles:removeAllAssociatedRoles\")}\n        </DropdownItem>,\n        <DropdownItem\n          key=\"delete-role\"\n          component=\"button\"\n          onClick={() => {\n            toggleDeleteDialog();\n          }}\n        >\n          {t(\"deleteRole\")}\n        </DropdownItem>,\n      ]\n    : [\n        <DropdownItem\n          key=\"toggle-modal\"\n          data-testid=\"add-roles\"\n          component=\"button\"\n          onClick={() => toggleModal()}\n        >\n          {t(\"addAssociatedRolesText\")}\n        </DropdownItem>,\n        <DropdownItem\n          key=\"delete-role\"\n          component=\"button\"\n          onClick={() => toggleDeleteDialog()}\n        >\n          {t(\"deleteRole\")}\n        </DropdownItem>,\n      ];\n\n  const [\n    toggleDeleteAllAssociatedRolesDialog,\n    DeleteAllAssociatedRolesConfirm,\n  ] = useConfirmDialog({\n    titleKey: t(\"roles:removeAllAssociatedRoles\") + \"?\",\n    messageKey: t(\"roles:removeAllAssociatedRolesConfirmDialog\", {\n      name: roleName || t(\"createRole\"),\n    }),\n    continueButtonLabel: \"common:delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        const additionalRoles = await adminClient.roles.getCompositeRoles({\n          id,\n        });\n        await adminClient.roles.delCompositeRoles({ id }, additionalRoles);\n        addAlert(\n          t(\"compositeRoleOff\"),\n          AlertVariant.success,\n          t(\"compositesRemovedAlertDescription\")\n        );\n        navigate(toTab(\"details\"));\n        refresh();\n      } catch (error) {\n        addError(\"roles:roleDeleteError\", error);\n      }\n    },\n  });\n\n  const toggleModal = () => {\n    setOpen(!open);\n  };\n\n  const addComposites = async (composites: RoleRepresentation[]) => {\n    try {\n      await adminClient.roles.createComposite(\n        { roleId: id, realm: realm!.realm },\n        composites\n      );\n      refresh();\n      navigate(toTab(\"associated-roles\"));\n      addAlert(t(\"addAssociatedRolesSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"roles:addAssociatedRolesError\", error);\n    }\n  };\n\n  const isDefaultRole = (name: string | undefined) =>\n    realm?.defaultRole!.name === name;\n\n  if (!realm) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <>\n      <DeleteConfirm />\n      <DeleteAllAssociatedRolesConfirm />\n      {open && (\n        <AddRoleMappingModal\n          id={id}\n          type=\"roles\"\n          name={roleName}\n          onAssign={(rows) => addComposites(rows.map((r) => r.role))}\n          onClose={() => setOpen(false)}\n        />\n      )}\n      <ViewHeader\n        titleKey={roleName!}\n        badges={[\n          {\n            id: \"composite-role-badge\",\n            text: composites ? t(\"composite\") : \"\",\n            readonly: true,\n          },\n        ]}\n        actionsDropdownId=\"roles-actions-dropdown\"\n        dropdownItems={dropdownItems}\n        divider={false}\n      />\n      <PageSection variant=\"light\" className=\"pf-u-p-0\">\n        <RoutableTabs isBox mountOnEnter defaultLocation={toTab(\"details\")}>\n          <Tab\n            title={<TabTitleText>{t(\"common:details\")}</TabTitleText>}\n            {...detailsTab}\n          >\n            <RoleForm\n              form={form}\n              onSubmit={onSubmit}\n              role={clientRoleMatch ? \"manage-clients\" : \"manage-realm\"}\n              cancelLink={\n                clientRoleMatch\n                  ? toClient({ realm: realmName, clientId, tab: \"roles\" })\n                  : toRealmRoles({ realm: realmName })\n              }\n              editMode\n            />\n          </Tab>\n          {composites && (\n            <Tab\n              data-testid=\"associatedRolesTab\"\n              title={<TabTitleText>{t(\"associatedRolesText\")}</TabTitleText>}\n              {...associatedRolesTab}\n            >\n              <RoleMapping\n                name={roleName!}\n                id={id}\n                type=\"roles\"\n                isManager\n                save={(rows) => addComposites(rows.map((r) => r.role))}\n              />\n            </Tab>\n          )}\n          {!isDefaultRole(roleName) && (\n            <Tab\n              data-testid=\"attributesTab\"\n              className=\"kc-attributes-tab\"\n              title={<TabTitleText>{t(\"common:attributes\")}</TabTitleText>}\n              {...attributesTab}\n            >\n              <AttributesForm\n                form={form}\n                save={onSubmit}\n                reset={() =>\n                  setValue(\"attributes\", attributes, { shouldDirty: false })\n                }\n              />\n            </Tab>\n          )}\n          {!isDefaultRole(roleName) && (\n            <Tab\n              title={<TabTitleText>{t(\"usersInRole\")}</TabTitleText>}\n              {...usersInRoleTab}\n            >\n              <UsersInRoleTab data-cy=\"users-in-role-tab\" />\n            </Tab>\n          )}\n          {!profileInfo?.disabledFeatures?.includes(\n            \"ADMIN_FINE_GRAINED_AUTHZ\"\n          ) && (\n            <Tab\n              title={<TabTitleText>{t(\"common:permissions\")}</TabTitleText>}\n              {...permissionsTab}\n            >\n              <PermissionsTab id={id} type=\"roles\" />\n            </Tab>\n          )}\n        </RoutableTabs>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["UsersInRoleTab","navigate","useNavigate","realm","useRealm","t","useTranslation","id","clientId","useParams","adminClient","useAdminClient","loader","first","max","role","roles","findOneById","Error","clientRole","clients","findUsersWithRole","roleName","name","enabled","useHelp","PageSection","KeycloakDataTable","_jsx","Popover","Button","QuestionCircleIcon","ListEmptyState","displayKey","cellFormatters","emptyFormatter","upperCaseFormatter","RealmRoleTabs","form","useForm","mode","control","reset","setValue","pathname","useLocation","realmName","key","setKey","useState","attributes","setAttributes","profileInfo","useServerInfo","refresh","addAlert","addError","useAlerts","open","setOpen","convert","rest","arrayToKeyValue","useWatch","defaultValue","undefined","composites","setRealm","useFetch","Promise","all","realms","findOne","convertedRole","onSubmit","formValues","roleRepresentation","trim","keyValueToArray","updateRole","updateById","AlertVariant","success","error","realmRoleMatch","useMatch","RealmRoleRoute","path","clientRoleMatch","ClientRoleRoute","toOverview","toRealmRoles","toClient","params","tab","toTab","toRealmRole","toClientRole","useTab","useRoutableTab","detailsTab","associatedRolesTab","attributesTab","usersInRoleTab","permissionsTab","toggleDeleteDialog","DeleteConfirm","useConfirmDialog","titleKey","messageKey","selectedRoleName","continueButtonLabel","continueButtonVariant","ButtonVariant","danger","onConfirm","delRole","delById","dropdownItems","includes","DropdownItem","toggleDeleteAllAssociatedRolesDialog","toggleModal","DeleteAllAssociatedRolesConfirm","additionalRoles","getCompositeRoles","delCompositeRoles","addComposites","createComposite","roleId","isDefaultRole","defaultRole","_Fragment","AddRoleMappingModal","rows","map","r","ViewHeader","text","readonly","RoutableTabs","Tab","TabTitleText","RoleForm","RoleMapping","AttributesForm","shouldDirty","disabledFeatures","PermissionsTab","KeycloakSpinner"],"mappings":"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"}