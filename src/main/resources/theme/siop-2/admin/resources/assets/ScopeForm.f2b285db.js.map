{"version":3,"file":"ScopeForm.f2b285db.js","sources":["../../src/client-scopes/details/ScopeForm.tsx"],"sourcesContent":["import type ClientScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientScopeRepresentation\";\nimport {\n  ActionGroup,\n  Button,\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Switch,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { useEffect, useState } from \"react\";\nimport { Controller, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\n\nimport { getProtocolName } from \"../../clients/utils\";\nimport {\n  allClientScopeTypes,\n  ClientScopeDefaultOptionalType,\n  clientScopeTypesSelectOptions,\n} from \"../../components/client-scope/ClientScopeTypes\";\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { KeycloakTextArea } from \"../../components/keycloak-text-area/KeycloakTextArea\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useLoginProviders } from \"../../context/server-info/ServerInfoProvider\";\nimport { convertAttributeNameToForm, convertToFormValues } from \"../../util\";\nimport { toClientScopes } from \"../routes/ClientScopes\";\n\ntype ScopeFormProps = {\n  clientScope?: ClientScopeRepresentation;\n  save: (clientScope: ClientScopeDefaultOptionalType) => void;\n};\n\nexport const ScopeForm = ({ clientScope, save }: ScopeFormProps) => {\n  const { t } = useTranslation(\"client-scopes\");\n  const { t: tc } = useTranslation(\"clients\");\n  const {\n    register,\n    control,\n    handleSubmit,\n    setValue,\n    formState: { errors, isDirty, isValid },\n  } = useForm<ClientScopeDefaultOptionalType>({ mode: \"onChange\" });\n  const { realm } = useRealm();\n\n  const providers = useLoginProviders();\n  const [open, isOpen] = useState(false);\n  const [openType, setOpenType] = useState(false);\n\n  const displayOnConsentScreen: string = useWatch({\n    control,\n    name: convertAttributeNameToForm(\"attributes.display.on.consent.screen\"),\n    defaultValue:\n      clientScope?.attributes?.[\"display.on.consent.screen\"] ?? \"true\",\n  });\n\n  useEffect(() => {\n    convertToFormValues(clientScope ?? {}, setValue);\n  }, [clientScope]);\n\n  return (\n    <FormAccess\n      role=\"manage-clients\"\n      onSubmit={handleSubmit(save)}\n      isHorizontal\n    >\n      <FormGroup\n        label={t(\"common:name\")}\n        labelIcon={\n          <HelpItem helpText=\"client-scopes-help:name\" fieldLabelId=\"name\" />\n        }\n        fieldId=\"kc-name\"\n        validated={\n          errors.name ? ValidatedOptions.error : ValidatedOptions.default\n        }\n        helperTextInvalid={t(\"common:required\")}\n        isRequired\n      >\n        <KeycloakTextInput\n          id=\"kc-name\"\n          validated={\n            errors.name ? ValidatedOptions.error : ValidatedOptions.default\n          }\n          isRequired\n          {...register(\"name\", { required: true })}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"common:description\")}\n        labelIcon={\n          <HelpItem\n            helpText=\"client-scopes-help:description\"\n            fieldLabelId=\"description\"\n          />\n        }\n        fieldId=\"kc-description\"\n        validated={\n          errors.description ? ValidatedOptions.error : ValidatedOptions.default\n        }\n        helperTextInvalid={t(\"common:maxLength\", { length: 255 })}\n      >\n        <KeycloakTextInput\n          id=\"kc-description\"\n          validated={\n            errors.description\n              ? ValidatedOptions.error\n              : ValidatedOptions.default\n          }\n          {...register(\"description\", {\n            maxLength: 255,\n          })}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"type\")}\n        labelIcon={\n          <HelpItem\n            helpText=\"client-scopes-help:type\"\n            fieldLabelId=\"client-scopes:type\"\n          />\n        }\n        fieldId=\"kc-type\"\n      >\n        <Controller\n          name=\"type\"\n          defaultValue={allClientScopeTypes[0]}\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"kc-type\"\n              variant={SelectVariant.single}\n              isOpen={openType}\n              selections={field.value}\n              onToggle={setOpenType}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setOpenType(false);\n              }}\n            >\n              {clientScopeTypesSelectOptions(t, allClientScopeTypes)}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      {!clientScope && (\n        <FormGroup\n          label={t(\"protocol\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"client-scopes-help:protocol\"\n              fieldLabelId=\"client-scopes:protocol\"\n            />\n          }\n          fieldId=\"kc-protocol\"\n        >\n          <Controller\n            name=\"protocol\"\n            defaultValue={providers[0]}\n            control={control}\n            render={({ field }) => (\n              <Select\n                toggleId=\"kc-protocol\"\n                onToggle={isOpen}\n                onSelect={(_, value) => {\n                  field.onChange(value);\n                  isOpen(false);\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n                isOpen={open}\n              >\n                {providers.map((option) => (\n                  <SelectOption\n                    selected={option === field.value}\n                    key={option}\n                    value={option}\n                    data-testid={`option-${option}`}\n                  >\n                    {getProtocolName(tc, option)}\n                  </SelectOption>\n                ))}\n              </Select>\n            )}\n          />\n        </FormGroup>\n      )}\n      <FormGroup\n        hasNoPaddingTop\n        label={t(\"displayOnConsentScreen\")}\n        labelIcon={\n          <HelpItem\n            helpText=\"client-scopes-help:displayOnConsentScreen\"\n            fieldLabelId=\"client-scopes:displayOnConsentScreen\"\n          />\n        }\n        fieldId=\"kc-display-on-consent-screen\"\n      >\n        <Controller\n          name={convertAttributeNameToForm<ClientScopeDefaultOptionalType>(\n            \"attributes.display.on.consent.screen\"\n          )}\n          control={control}\n          defaultValue={displayOnConsentScreen}\n          render={({ field }) => (\n            <Switch\n              id=\"kc-display-on-consent-screen\"\n              label={t(\"common:on\")}\n              labelOff={t(\"common:off\")}\n              isChecked={field.value === \"true\"}\n              onChange={(value) => field.onChange(value.toString())}\n            />\n          )}\n        />\n      </FormGroup>\n      {displayOnConsentScreen === \"true\" && (\n        <FormGroup\n          label={t(\"consentScreenText\")}\n          labelIcon={\n            <HelpItem\n              helpText=\"client-scopes-help:consentScreenText\"\n              fieldLabelId=\"client-scopes:consentScreenText\"\n            />\n          }\n          fieldId=\"kc-consent-screen-text\"\n        >\n          <KeycloakTextArea\n            id=\"kc-consent-screen-text\"\n            {...register(\n              convertAttributeNameToForm<ClientScopeDefaultOptionalType>(\n                \"attributes.consent.screen.text\"\n              )\n            )}\n          />\n        </FormGroup>\n      )}\n      <FormGroup\n        hasNoPaddingTop\n        label={t(\"includeInTokenScope\")}\n        labelIcon={\n          <HelpItem\n            helpText=\"client-scopes-help:includeInTokenScope\"\n            fieldLabelId=\"client-scopes:includeInTokenScope\"\n          />\n        }\n        fieldId=\"kc-include-in-token-scope\"\n      >\n        <Controller\n          name={convertAttributeNameToForm<ClientScopeDefaultOptionalType>(\n            \"attributes.include.in.token.scope\"\n          )}\n          control={control}\n          defaultValue=\"true\"\n          render={({ field }) => (\n            <Switch\n              id=\"kc-include-in-token-scope\"\n              label={t(\"common:on\")}\n              labelOff={t(\"common:off\")}\n              isChecked={field.value === \"true\"}\n              onChange={(value) => field.onChange(value.toString())}\n            />\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"guiOrder\")}\n        labelIcon={\n          <HelpItem\n            helpText=\"client-scopes-help:guiOrder\"\n            fieldLabelId=\"client-scopes:guiOrder\"\n          />\n        }\n        fieldId=\"kc-gui-order\"\n      >\n        <Controller\n          name={convertAttributeNameToForm<ClientScopeDefaultOptionalType>(\n            \"attributes.gui.order\"\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <KeycloakTextInput\n              id=\"kc-gui-order\"\n              type=\"number\"\n              value={field.value}\n              min={0}\n              onChange={field.onChange}\n            />\n          )}\n        />\n      </FormGroup>\n      <ActionGroup>\n        <Button\n          variant=\"primary\"\n          type=\"submit\"\n          isDisabled={!isDirty || !isValid}\n        >\n          {t(\"common:save\")}\n        </Button>\n        <Button\n          variant=\"link\"\n          component={(props) => (\n            <Link {...props} to={toClientScopes({ realm })}></Link>\n          )}\n        >\n          {t(\"common:cancel\")}\n        </Button>\n      </ActionGroup>\n    </FormAccess>\n  );\n};\n"],"names":["ScopeForm","clientScope","save","t","useTranslation","tc","register","control","handleSubmit","setValue","formState","errors","isDirty","isValid","useForm","mode","realm","useRealm","providers","useLoginProviders","open","isOpen","useState","openType","setOpenType","displayOnConsentScreen","useWatch","name","convertAttributeNameToForm","defaultValue","attributes","useEffect","FormAccess","_jsx","FormGroup","HelpItem","ValidatedOptions","error","default","KeycloakTextInput","required","description","length","maxLength","Controller","allClientScopeTypes","field","Select","SelectVariant","single","value","_","onChange","clientScopeTypesSelectOptions","map","option","SelectOption","getProtocolName","Switch","toString","KeycloakTextArea","_jsxs","ActionGroup","Button","props","Link","toClientScopes"],"mappings":"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"}