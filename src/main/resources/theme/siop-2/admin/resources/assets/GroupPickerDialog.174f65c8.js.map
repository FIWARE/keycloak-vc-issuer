{"version":3,"file":"GroupPickerDialog.174f65c8.js","sources":["../../../../node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListAction.js","../../../../node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListCheck.js","../../src/components/group/GroupPath.tsx","../../src/components/group/GroupPickerDialog.tsx"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport { formatBreakpointMods } from '../../helpers/util';\nexport const DataListAction = (_a) => {\n    var { children, className, visibility, \n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    id, 'aria-label': ariaLabel, 'aria-labelledby': ariaLabelledBy, isPlainButtonAction } = _a, \n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    props = __rest(_a, [\"children\", \"className\", \"visibility\", \"id\", 'aria-label', 'aria-labelledby', \"isPlainButtonAction\"]);\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.dataListItemAction, formatBreakpointMods(visibility, styles), className) }, props), isPlainButtonAction ? React.createElement(\"div\", { className: css(styles.dataListAction) }, children) : children));\n};\nDataListAction.displayName = 'DataListAction';\n//# sourceMappingURL=DataListAction.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nexport const DataListCheck = (_a) => {\n    var { className = '', \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onChange = (checked, event) => { }, isValid = true, isDisabled = false, isChecked = false, checked = false, defaultChecked, otherControls = false } = _a, props = __rest(_a, [\"className\", \"onChange\", \"isValid\", \"isDisabled\", \"isChecked\", \"checked\", \"defaultChecked\", \"otherControls\"]);\n    const check = (React.createElement(\"div\", { className: css(styles.dataListCheck) },\n        React.createElement(\"input\", Object.assign({}, props, { type: \"checkbox\", onChange: event => onChange(event.currentTarget.checked, event), \"aria-invalid\": !isValid, disabled: isDisabled }, ([true, false].includes(defaultChecked) && { defaultChecked }), (![true, false].includes(defaultChecked) && { checked: isChecked || checked })))));\n    return (React.createElement(React.Fragment, null,\n        !otherControls && React.createElement(\"div\", { className: css(styles.dataListItemControl, className) }, check),\n        otherControls && check));\n};\nDataListCheck.displayName = 'DataListCheck';\n//# sourceMappingURL=DataListCheck.js.map","import { useState } from \"react\";\nimport { Tooltip } from \"@patternfly/react-core\";\nimport type { TableTextProps } from \"@patternfly/react-table\";\n\nimport type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\n\ntype GroupPathProps = TableTextProps & {\n  group: GroupRepresentation;\n};\n\nconst MAX_LENGTH = 20;\nconst PART = 10;\n\nconst truncatePath = (path?: string) => {\n  if (path && path.length >= MAX_LENGTH) {\n    return (\n      path.substr(0, PART) +\n      \"...\" +\n      path.substr(path.length - PART, path.length)\n    );\n  }\n  return path;\n};\n\nexport const GroupPath = ({\n  group: { path },\n  onMouseEnter: onMouseEnterProp,\n  ...props\n}: GroupPathProps) => {\n  const [tooltip, setTooltip] = useState(\"\");\n  const onMouseEnter = (event: any) => {\n    setTooltip(path!);\n    onMouseEnterProp?.(event);\n  };\n  const text = (\n    <span onMouseEnter={onMouseEnter} {...props}>\n      {truncatePath(path)}\n    </span>\n  );\n\n  return tooltip !== \"\" ? (\n    <Tooltip content={tooltip} isVisible>\n      {text}\n    </Tooltip>\n  ) : (\n    text\n  );\n};\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  DataList,\n  DataListAction,\n  DataListCell,\n  DataListCheck,\n  DataListItem,\n  DataListItemCells,\n  DataListItemRow,\n  Modal,\n  ModalVariant,\n} from \"@patternfly/react-core\";\nimport { AngleRightIcon } from \"@patternfly/react-icons\";\n\nimport type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { ListEmptyState } from \"../list-empty-state/ListEmptyState\";\nimport { PaginatingTableToolbar } from \"../table-toolbar/PaginatingTableToolbar\";\nimport { GroupPath } from \"./GroupPath\";\n\nexport type GroupPickerDialogProps = {\n  id?: string;\n  type: \"selectOne\" | \"selectMany\";\n  filterGroups?: GroupRepresentation[];\n  text: { title: string; ok: string };\n  canBrowse?: boolean;\n  onConfirm: (groups: GroupRepresentation[] | undefined) => void;\n  onClose: () => void;\n};\n\ntype SelectableGroup = GroupRepresentation & {\n  checked?: boolean;\n};\n\nexport const GroupPickerDialog = ({\n  id,\n  type,\n  filterGroups,\n  text,\n  canBrowse = true,\n  onClose,\n  onConfirm,\n}: GroupPickerDialogProps) => {\n  const { t } = useTranslation();\n  const { adminClient } = useAdminClient();\n  const [selectedRows, setSelectedRows] = useState<SelectableGroup[]>([]);\n\n  const [navigation, setNavigation] = useState<SelectableGroup[]>([]);\n  const [groups, setGroups] = useState<SelectableGroup[]>([]);\n  const [filter, setFilter] = useState(\"\");\n  const [joinedGroups, setJoinedGroups] = useState<GroupRepresentation[]>([]);\n  const [groupId, setGroupId] = useState<string>();\n\n  const [max, setMax] = useState(10);\n  const [first, setFirst] = useState(0);\n\n  const currentGroup = () => navigation[navigation.length - 1];\n\n  useFetch(\n    async () => {\n      let group;\n      let groups;\n      let existingUserGroups;\n      if (!groupId) {\n        groups = await adminClient.groups.find({\n          first,\n          max: max + 1,\n          search: filter,\n        });\n      } else {\n        group = await adminClient.groups.findOne({ id: groupId });\n        if (!group) {\n          throw new Error(t(\"common:notFound\"));\n        }\n        groups = group.subGroups!;\n      }\n\n      if (id) {\n        existingUserGroups = await adminClient.users.listGroups({\n          id,\n        });\n      }\n\n      return { group, groups, existingUserGroups };\n    },\n    async ({ group: selectedGroup, groups, existingUserGroups }) => {\n      setJoinedGroups(existingUserGroups || []);\n      if (selectedGroup) {\n        setNavigation([...navigation, selectedGroup]);\n      }\n\n      groups.forEach((group: SelectableGroup) => {\n        group.checked = !!selectedRows.find((r) => r.id === group.id);\n      });\n      setGroups(groups);\n    },\n    [groupId, filter, first, max]\n  );\n\n  const isRowDisabled = (row?: GroupRepresentation) => {\n    return [\n      ...joinedGroups.map((item) => item.id),\n      ...(filterGroups || []).map((group) => group.id),\n    ].some((group) => group === row?.id);\n  };\n\n  const hasSubgroups = (group: GroupRepresentation) =>\n    group.subGroups?.length !== 0;\n\n  const findSubGroup = (\n    group: GroupRepresentation,\n    name: string\n  ): GroupRepresentation => {\n    if (group.name?.includes(name)) {\n      return group;\n    }\n    if (group.subGroups) {\n      for (const g of group.subGroups) {\n        const found = findSubGroup(g, name);\n        return found;\n      }\n    }\n    return group;\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title={t(text.title, {\n        group1: filterGroups?.[0]?.name,\n        group2: navigation.length ? currentGroup().name : t(\"root\"),\n      })}\n      isOpen\n      onClose={onClose}\n      actions={[\n        <Button\n          data-testid={`${text.ok}-button`}\n          key=\"confirm\"\n          variant=\"primary\"\n          form=\"group-form\"\n          onClick={() => {\n            onConfirm(\n              type === \"selectMany\"\n                ? selectedRows\n                : navigation.length\n                ? [currentGroup()]\n                : undefined\n            );\n          }}\n          isDisabled={type === \"selectMany\" && selectedRows.length === 0}\n        >\n          {t(text.ok)}\n        </Button>,\n      ]}\n    >\n      <PaginatingTableToolbar\n        count={groups.length}\n        first={first}\n        max={max}\n        onNextClick={setFirst}\n        onPreviousClick={setFirst}\n        onPerPageSelect={(first, max) => {\n          setFirst(first);\n          setMax(max);\n        }}\n        inputGroupName={\"common:search\"}\n        inputGroupOnEnter={(search) => {\n          setFilter(search);\n          setFirst(0);\n          setMax(10);\n          setNavigation([]);\n        }}\n        inputGroupPlaceholder={t(\"users:searchForGroups\")}\n      >\n        <Breadcrumb>\n          {navigation.length > 0 && (\n            <BreadcrumbItem key=\"home\">\n              <Button\n                variant=\"link\"\n                onClick={() => {\n                  setGroupId(undefined);\n                  setNavigation([]);\n                }}\n              >\n                {t(\"groups\")}\n              </Button>\n            </BreadcrumbItem>\n          )}\n          {navigation.map((group, i) => (\n            <BreadcrumbItem key={i}>\n              {navigation.length - 1 !== i && (\n                <Button\n                  variant=\"link\"\n                  onClick={() => {\n                    setGroupId(group.id);\n                    setNavigation([...navigation].slice(0, i));\n                  }}\n                >\n                  {group.name}\n                </Button>\n              )}\n              {navigation.length - 1 === i && group.name}\n            </BreadcrumbItem>\n          ))}\n        </Breadcrumb>\n        <DataList aria-label={t(\"groups\")} isCompact>\n          {groups.slice(0, max).map((group: SelectableGroup) => (\n            <DataListItem\n              className={`join-group-dialog-row-${\n                isRowDisabled(group) ? \"disabled\" : \"\"\n              }`}\n              aria-labelledby={group.name}\n              key={group.id}\n              id={group.id}\n              onClick={(e) => {\n                const g = filter !== \"\" ? findSubGroup(group, filter) : group;\n                if (isRowDisabled(g)) return;\n                if (type === \"selectOne\") {\n                  setGroupId(g.id);\n                } else if (\n                  hasSubgroups(group) &&\n                  filter === \"\" &&\n                  (e.target as HTMLInputElement).type !== \"checkbox\"\n                ) {\n                  setGroupId(group.id);\n                }\n              }}\n            >\n              <DataListItemRow\n                className={`join-group-dialog-row-${\n                  isRowDisabled(group) ? \"m-disabled\" : \"\"\n                }`}\n                data-testid={group.name}\n              >\n                {type === \"selectMany\" && (\n                  <DataListCheck\n                    className=\"kc-join-group-modal-check\"\n                    data-testid={`${group.name}-check`}\n                    aria-label={group.name}\n                    checked={group.checked}\n                    isDisabled={isRowDisabled(group)}\n                    onChange={(checked) => {\n                      group.checked = checked;\n                      let newSelectedRows: SelectableGroup[] = [];\n                      if (!group.checked) {\n                        newSelectedRows = selectedRows.filter(\n                          (r) => r.id !== group.id\n                        );\n                      } else {\n                        newSelectedRows = [\n                          ...selectedRows,\n                          filter === \"\" ? group : findSubGroup(group, filter),\n                        ];\n                      }\n\n                      setSelectedRows(newSelectedRows);\n                    }}\n                    aria-labelledby={`select-${group.name}`}\n                  />\n                )}\n\n                <DataListItemCells\n                  dataListCells={[\n                    <DataListCell key={`name-${group.id}`}>\n                      {filter === \"\" ? (\n                        <span id={`select-${group.name}`}>{group.name}</span>\n                      ) : (\n                        <GroupPath\n                          id={`select-${group.name}`}\n                          group={findSubGroup(group, filter)}\n                        />\n                      )}\n                    </DataListCell>,\n                  ]}\n                />\n                <DataListAction\n                  id=\"actions\"\n                  aria-labelledby={`select-${group.name}`}\n                  aria-label={t(\"groupName\")}\n                  isPlainButtonAction\n                >\n                  {((hasSubgroups(group) && filter === \"\" && canBrowse) ||\n                    type === \"selectOne\") && (\n                    <Button\n                      isDisabled\n                      variant=\"link\"\n                      aria-label={t(\"common:select\")}\n                    >\n                      <AngleRightIcon />\n                    </Button>\n                  )}\n                </DataListAction>\n              </DataListItemRow>\n            </DataListItem>\n          ))}\n          {groups.length === 0 && filter === \"\" && (\n            <ListEmptyState\n              hasIcon={false}\n              message={t(\"groups:moveGroupEmpty\")}\n              instructions={t(\"groups:moveGroupEmptyInstructions\")}\n            />\n          )}\n          {groups.length === 0 && filter !== \"\" && (\n            <ListEmptyState\n              message={t(\"common:noSearchResults\")}\n              instructions={t(\"common:noSearchResultsInstructions\")}\n            />\n          )}\n        </DataList>\n      </PaginatingTableToolbar>\n    </Modal>\n  );\n};\n"],"names":["DataListAction","_a","children","className","visibility","id","ariaLabel","ariaLabelledBy","isPlainButtonAction","props","__rest","_jsx","Object","assign","css","styles","dataListItemAction","formatBreakpointMods","dataListAction","displayName","DataListCheck","onChange","checked","event","isValid","isDisabled","isChecked","defaultChecked","otherControls","check","dataListCheck","type","currentTarget","disabled","includes","_jsxs","_Fragment","dataListItemControl","MAX_LENGTH","PART","truncatePath","path","length","substr","GroupPath","group","onMouseEnter","onMouseEnterProp","tooltip","setTooltip","useState","text","Tooltip","GroupPickerDialog","filterGroups","canBrowse","onClose","onConfirm","t","useTranslation","adminClient","useAdminClient","selectedRows","setSelectedRows","navigation","setNavigation","groups","setGroups","filter","setFilter","joinedGroups","setJoinedGroups","groupId","setGroupId","max","setMax","first","setFirst","currentGroup","useFetch","existingUserGroups","find","search","findOne","Error","subGroups","users","listGroups","selectedGroup","forEach","r","isRowDisabled","row","map","item","some","hasSubgroups","findSubGroup","name","g","found","Modal","ModalVariant","small","title","group1","group2","Button","ok","undefined","PaginatingTableToolbar","Breadcrumb","BreadcrumbItem","i","slice","DataList","DataListItem","e","target","DataListItemRow","newSelectedRows","DataListItemCells","DataListCell","AngleRightIcon","ListEmptyState"],"mappings":"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"}