{"version":3,"file":"AddMapper.21083d9d.js","sources":["../../src/identity-providers/add/AddMapperForm.tsx","../../src/identity-providers/add/AddMapper.tsx"],"sourcesContent":["import type IdentityProviderMapperRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/identityProviderMapperRepresentation\";\nimport type { IdentityProviderMapperTypeRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/identityProviderMapperTypeRepresentation\";\nimport {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, UseFormReturn } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"../../components/help-enabler/HelpItem\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport type { IdPMapperRepresentationWithAttributes } from \"./AddMapper\";\n\ntype AddMapperFormProps = {\n  mapperTypes: IdentityProviderMapperRepresentation[];\n  mapperType: IdentityProviderMapperTypeRepresentation;\n  id: string;\n  updateMapperType: (\n    mapperType: IdentityProviderMapperTypeRepresentation\n  ) => void;\n  form: UseFormReturn<IdPMapperRepresentationWithAttributes>;\n};\n\nexport const AddMapperForm = ({\n  mapperTypes,\n  mapperType,\n  form,\n  id,\n  updateMapperType,\n}: AddMapperFormProps) => {\n  const { t } = useTranslation(\"identity-providers\");\n\n  const {\n    control,\n    register,\n    formState: { errors },\n  } = form;\n\n  const [mapperTypeOpen, setMapperTypeOpen] = useState(false);\n\n  const syncModes = [\"inherit\", \"import\", \"legacy\", \"force\"];\n  const [syncModeOpen, setSyncModeOpen] = useState(false);\n\n  return (\n    <>\n      <FormGroup\n        label={t(\"common:name\")}\n        labelIcon={\n          <HelpItem\n            helpText=\"identity-providers-help:addIdpMapperName\"\n            fieldLabelId=\"name\"\n          />\n        }\n        fieldId=\"kc-name\"\n        isRequired\n        validated={\n          errors.name ? ValidatedOptions.error : ValidatedOptions.default\n        }\n        helperTextInvalid={t(\"common:required\")}\n      >\n        <KeycloakTextInput\n          id=\"kc-name\"\n          isDisabled={!!id}\n          validated={\n            errors.name ? ValidatedOptions.error : ValidatedOptions.default\n          }\n          {...register(\"name\", { required: true })}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"syncModeOverride\")}\n        isRequired\n        labelIcon={\n          <HelpItem\n            helpText=\"identity-providers-help:syncModeOverride\"\n            fieldLabelId=\"identity-providers:syncModeOverride\"\n          />\n        }\n        fieldId=\"syncMode\"\n      >\n        <Controller\n          name=\"config.syncMode\"\n          defaultValue={syncModes[0].toUpperCase()}\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"syncMode\"\n              datatest-id=\"syncmode-select\"\n              required\n              direction=\"down\"\n              onToggle={() => setSyncModeOpen(!syncModeOpen)}\n              onSelect={(_, value) => {\n                field.onChange(value.toString().toUpperCase());\n                setSyncModeOpen(false);\n              }}\n              selections={t(`syncModes.${field.value.toLowerCase()}`)}\n              variant={SelectVariant.single}\n              aria-label={t(\"syncMode\")}\n              isOpen={syncModeOpen}\n            >\n              {syncModes.map((option) => (\n                <SelectOption\n                  selected={option === field.value}\n                  key={option}\n                  data-testid={option}\n                  value={option.toUpperCase()}\n                >\n                  {t(`syncModes.${option}`)}\n                </SelectOption>\n              ))}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"mapperType\")}\n        labelIcon={\n          <HelpItem\n            helpText={mapperType.helpText}\n            fieldLabelId=\"identity-providers:mapperType\"\n          />\n        }\n        fieldId=\"identityProviderMapper\"\n      >\n        <Controller\n          name=\"identityProviderMapper\"\n          defaultValue={mapperTypes[0].id}\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"identityProviderMapper\"\n              data-testid=\"idp-mapper-select\"\n              isDisabled={!!id}\n              required\n              onToggle={() => setMapperTypeOpen(!mapperTypeOpen)}\n              onSelect={(_, value) => {\n                const mapperType =\n                  value as IdentityProviderMapperTypeRepresentation;\n                updateMapperType(mapperType);\n                field.onChange(mapperType.id);\n                setMapperTypeOpen(false);\n              }}\n              selections={mapperType.name}\n              variant={SelectVariant.single}\n              aria-label={t(\"mapperType\")}\n              isOpen={mapperTypeOpen}\n            >\n              {mapperTypes.map((option) => (\n                <SelectOption\n                  selected={option === field.value}\n                  datatest-id={option.id}\n                  key={option.name}\n                  value={option}\n                >\n                  {option.name}\n                </SelectOption>\n              ))}\n            </Select>\n          )}\n        />\n      </FormGroup>\n    </>\n  );\n};\n","import type IdentityProviderMapperRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/identityProviderMapperRepresentation\";\nimport type { IdentityProviderMapperTypeRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/identityProviderMapperTypeRepresentation\";\nimport type RoleRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  DropdownItem,\n  FormGroup,\n  PageSection,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\n\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { DynamicComponents } from \"../../components/dynamic/DynamicComponents\";\nimport { FormAccess } from \"../../components/form-access/FormAccess\";\nimport type { AttributeForm } from \"../../components/key-value-form/AttributeForm\";\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { ViewHeader } from \"../../components/view-header/ViewHeader\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { convertFormValuesToObject, convertToFormValues } from \"../../util\";\nimport useLocaleSort, { mapByKey } from \"../../utils/useLocaleSort\";\nimport { useParams } from \"../../utils/useParams\";\nimport {\n  IdentityProviderEditMapperParams,\n  toIdentityProviderEditMapper,\n} from \"../routes/EditMapper\";\nimport { toIdentityProvider } from \"../routes/IdentityProvider\";\nimport { AddMapperForm } from \"./AddMapperForm\";\n\nexport type IdPMapperRepresentationWithAttributes =\n  IdentityProviderMapperRepresentation & AttributeForm;\n\nexport type Role = RoleRepresentation & {\n  clientId?: string;\n};\n\nexport default function AddMapper() {\n  const { t } = useTranslation(\"identity-providers\");\n\n  const form = useForm<IdPMapperRepresentationWithAttributes>();\n  const {\n    handleSubmit,\n    register,\n    formState: { errors },\n  } = form;\n  const { addAlert, addError } = useAlerts();\n  const navigate = useNavigate();\n  const localeSort = useLocaleSort();\n\n  const { realm } = useRealm();\n  const { adminClient } = useAdminClient();\n\n  const { id, providerId, alias } =\n    useParams<IdentityProviderEditMapperParams>();\n\n  const [mapperTypes, setMapperTypes] =\n    useState<IdentityProviderMapperTypeRepresentation[]>();\n\n  const [currentMapper, setCurrentMapper] =\n    useState<IdentityProviderMapperTypeRepresentation>();\n\n  const save = async (idpMapper: IdentityProviderMapperRepresentation) => {\n    const mapper = convertFormValuesToObject(idpMapper);\n\n    const identityProviderMapper = {\n      ...mapper,\n      config: {\n        ...mapper.config,\n      },\n      identityProviderAlias: alias!,\n    };\n\n    if (id) {\n      try {\n        await adminClient.identityProviders.updateMapper(\n          {\n            id: id!,\n            alias: alias!,\n          },\n          { ...identityProviderMapper, name: currentMapper?.name! }\n        );\n        addAlert(t(\"mapperSaveSuccess\"), AlertVariant.success);\n      } catch (error) {\n        addError(t(\"mapperSaveError\"), error);\n      }\n    } else {\n      try {\n        const createdMapper = await adminClient.identityProviders.createMapper({\n          identityProviderMapper,\n          alias: alias!,\n        });\n\n        addAlert(t(\"mapperCreateSuccess\"), AlertVariant.success);\n        navigate(\n          toIdentityProviderEditMapper({\n            realm,\n            alias,\n            providerId: providerId,\n            id: createdMapper.id,\n          })\n        );\n      } catch (error) {\n        addError(t(\"mapperCreateError\"), error);\n      }\n    }\n  };\n\n  const [toggleDeleteMapperDialog, DeleteMapperConfirm] = useConfirmDialog({\n    titleKey: \"identity-providers:deleteProviderMapper\",\n    messageKey: t(\"identity-providers:deleteMapperConfirm\", {\n      mapper: currentMapper?.name,\n    }),\n    continueButtonLabel: \"common:delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.identityProviders.delMapper({\n          alias: alias,\n          id: id!,\n        });\n        addAlert(t(\"deleteMapperSuccess\"), AlertVariant.success);\n        navigate(\n          toIdentityProvider({ providerId, alias, tab: \"mappers\", realm })\n        );\n      } catch (error) {\n        addError(\"identity-providers:deleteErrorError\", error);\n      }\n    },\n  });\n\n  useFetch(\n    () =>\n      Promise.all([\n        id ? adminClient.identityProviders.findOneMapper({ alias, id }) : null,\n        adminClient.identityProviders.findMapperTypes({ alias }),\n      ]),\n    ([mapper, mapperTypes]) => {\n      const mappers = localeSort(Object.values(mapperTypes), mapByKey(\"name\"));\n      if (mapper) {\n        setCurrentMapper(\n          mappers.find(({ id }) => id === mapper.identityProviderMapper)\n        );\n        setupForm(mapper);\n      } else {\n        setCurrentMapper(mappers[0]);\n      }\n\n      setMapperTypes(mappers);\n    },\n    []\n  );\n\n  const setupForm = (mapper: IdentityProviderMapperRepresentation) => {\n    convertToFormValues(mapper, form.setValue);\n  };\n\n  if (!mapperTypes || !currentMapper) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <PageSection variant=\"light\">\n      <DeleteMapperConfirm />\n      <ViewHeader\n        className=\"kc-add-mapper-title\"\n        titleKey={\n          id\n            ? t(\"editIdPMapper\", {\n                providerId:\n                  providerId[0].toUpperCase() + providerId.substring(1),\n              })\n            : t(\"addIdPMapper\", {\n                providerId:\n                  providerId[0].toUpperCase() + providerId.substring(1),\n              })\n        }\n        dropdownItems={\n          id\n            ? [\n                <DropdownItem key=\"delete\" onClick={toggleDeleteMapperDialog}>\n                  {t(\"common:delete\")}\n                </DropdownItem>,\n              ]\n            : undefined\n        }\n        divider\n      />\n      <FormAccess\n        role=\"manage-identity-providers\"\n        isHorizontal\n        onSubmit={handleSubmit(save)}\n        className=\"pf-u-mt-lg\"\n      >\n        {id && (\n          <FormGroup\n            label={t(\"common:id\")}\n            fieldId=\"kc-name\"\n            validated={\n              errors.name ? ValidatedOptions.error : ValidatedOptions.default\n            }\n            helperTextInvalid={t(\"common:required\")}\n          >\n            <KeycloakTextInput\n              value={currentMapper.id}\n              id=\"kc-name\"\n              isDisabled={!!id}\n              validated={\n                errors.name ? ValidatedOptions.error : ValidatedOptions.default\n              }\n              {...register(\"name\")}\n            />\n          </FormGroup>\n        )}\n        {currentMapper.properties && (\n          <>\n            <AddMapperForm\n              form={form}\n              id={id}\n              mapperTypes={mapperTypes}\n              updateMapperType={setCurrentMapper}\n              mapperType={currentMapper}\n            />\n            <FormProvider {...form}>\n              <DynamicComponents properties={currentMapper.properties!} />\n            </FormProvider>\n          </>\n        )}\n\n        <ActionGroup>\n          <Button\n            data-testid=\"new-mapper-save-button\"\n            variant=\"primary\"\n            type=\"submit\"\n          >\n            {t(\"common:save\")}\n          </Button>\n          <Button\n            data-testid=\"new-mapper-cancel-button\"\n            variant=\"link\"\n            component={(props) => (\n              <Link\n                {...props}\n                to={toIdentityProvider({\n                  realm,\n                  providerId,\n                  alias: alias!,\n                  tab: \"mappers\",\n                })}\n              />\n            )}\n          >\n            {t(\"common:cancel\")}\n          </Button>\n        </ActionGroup>\n      </FormAccess>\n    </PageSection>\n  );\n}\n"],"names":["AddMapperForm","mapperTypes","mapperType","form","id","updateMapperType","t","useTranslation","control","register","formState","errors","mapperTypeOpen","setMapperTypeOpen","useState","syncModes","syncModeOpen","setSyncModeOpen","_Fragment","_jsx","FormGroup","HelpItem","name","ValidatedOptions","error","default","KeycloakTextInput","required","Controller","toUpperCase","field","Select","_","value","onChange","toString","toLowerCase","SelectVariant","single","map","option","SelectOption","helpText","AddMapper","useForm","handleSubmit","addAlert","addError","useAlerts","navigate","useNavigate","localeSort","useLocaleSort","realm","useRealm","adminClient","useAdminClient","providerId","alias","useParams","setMapperTypes","currentMapper","setCurrentMapper","save","idpMapper","mapper","convertFormValuesToObject","identityProviderMapper","config","identityProviderAlias","identityProviders","updateMapper","AlertVariant","success","createdMapper","createMapper","toIdentityProviderEditMapper","toggleDeleteMapperDialog","DeleteMapperConfirm","useConfirmDialog","titleKey","messageKey","continueButtonLabel","continueButtonVariant","ButtonVariant","danger","onConfirm","delMapper","toIdentityProvider","tab","useFetch","Promise","all","findOneMapper","findMapperTypes","mappers","Object","values","mapByKey","find","setupForm","setValue","KeycloakSpinner","PageSection","ViewHeader","substring","DropdownItem","undefined","_jsxs","FormAccess","properties","FormProvider","DynamicComponents","ActionGroup","Button","props","Link"],"mappings":"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"}