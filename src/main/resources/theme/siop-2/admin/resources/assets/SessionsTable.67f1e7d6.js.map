{"version":3,"file":"SessionsTable.67f1e7d6.js","sources":["../../../../node_modules/@patternfly/react-icons/dist/esm/icons/cubes-icon.js","../../src/sessions/SessionsTable.tsx"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const CubesIconConfig = {\n  name: 'CubesIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M488.6 250.2L392 214V105.5c0-15-9.3-28.4-23.4-33.7l-100-37.5c-8.1-3.1-17.1-3.1-25.3 0l-100 37.5c-14.1 5.3-23.4 18.7-23.4 33.7V214l-96.6 36.2C9.3 255.5 0 268.9 0 283.9V394c0 13.6 7.7 26.1 19.9 32.2l100 50c10.1 5.1 22.1 5.1 32.2 0l103.9-52 103.9 52c10.1 5.1 22.1 5.1 32.2 0l100-50c12.2-6.1 19.9-18.6 19.9-32.2V283.9c0-15-9.3-28.4-23.4-33.7zM358 214.8l-85 31.9v-68.2l85-37v73.3zM154 104.1l102-38.2 102 38.2v.6l-102 41.4-102-41.4v-.6zm84 291.1l-85 42.5v-79.1l85-38.8v75.4zm0-112l-102 41.4-102-41.4v-.6l102-38.2 102 38.2v.6zm240 112l-85 42.5v-79.1l85-38.8v75.4zm0-112l-102 41.4-102-41.4v-.6l102-38.2 102 38.2v.6z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const CubesIcon = createIcon(CubesIconConfig);\n\nexport default CubesIcon;","import type UserSessionRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userSessionRepresentation\";\nimport {\n  Button,\n  List,\n  ListItem,\n  ListVariant,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { CubesIcon } from \"@patternfly/react-icons\";\nimport { useMemo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\n\nimport { toClient } from \"../clients/routes/Client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport {\n  Field,\n  KeycloakDataTable,\n  LoaderFunction,\n} from \"../components/table-toolbar/KeycloakDataTable\";\nimport { useAdminClient } from \"../context/auth/AdminClient\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { useWhoAmI } from \"../context/whoami/WhoAmI\";\nimport { toUser } from \"../user/routes/User\";\nimport useFormatDate from \"../utils/useFormatDate\";\n\nexport type ColumnName = \"username\" | \"start\" | \"lastAccess\" | \"clients\";\n\nexport type SessionsTableProps = {\n  loader: LoaderFunction<UserSessionRepresentation>;\n  hiddenColumns?: ColumnName[];\n  emptyInstructions?: string;\n  logoutUser?: string;\n};\n\nexport default function SessionsTable({\n  loader,\n  hiddenColumns = [],\n  emptyInstructions,\n  logoutUser,\n}: SessionsTableProps) {\n  const { realm } = useRealm();\n  const { whoAmI } = useWhoAmI();\n  const { t } = useTranslation(\"sessions\");\n  const { keycloak, adminClient } = useAdminClient();\n  const { addError } = useAlerts();\n  const formatDate = useFormatDate();\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey((value) => value + 1);\n\n  const columns = useMemo(() => {\n    const UsernameCell = (row: UserSessionRepresentation) => (\n      <Link to={toUser({ realm, id: row.userId!, tab: \"sessions\" })}>\n        {row.username}\n      </Link>\n    );\n\n    const ClientsCell = (row: UserSessionRepresentation) => (\n      <List variant={ListVariant.inline}>\n        {Object.entries(row.clients!).map(([clientId, client]) => (\n          <ListItem key={clientId}>\n            <Link to={toClient({ realm, clientId, tab: \"sessions\" })}>\n              {client}\n            </Link>\n          </ListItem>\n        ))}\n      </List>\n    );\n\n    const defaultColumns: Field<UserSessionRepresentation>[] = [\n      {\n        name: \"username\",\n        displayKey: \"sessions:user\",\n        cellRenderer: UsernameCell,\n      },\n      {\n        name: \"start\",\n        displayKey: \"sessions:started\",\n        cellRenderer: (row) => formatDate(new Date(row.start!)),\n      },\n      {\n        name: \"lastAccess\",\n        displayKey: \"sessions:lastAccess\",\n        cellRenderer: (row) => formatDate(new Date(row.lastAccess!)),\n      },\n      {\n        name: \"ipAddress\",\n        displayKey: \"events:ipAddress\",\n      },\n      {\n        name: \"clients\",\n        displayKey: \"sessions:clients\",\n        cellRenderer: ClientsCell,\n      },\n    ];\n\n    return defaultColumns.filter(\n      ({ name }) => !hiddenColumns.includes(name as ColumnName)\n    );\n  }, [realm, hiddenColumns]);\n\n  const [toggleLogoutDialog, LogoutConfirm] = useConfirmDialog({\n    titleKey: \"sessions:logoutAllSessions\",\n    messageKey: \"sessions:logoutAllDescription\",\n    continueButtonLabel: \"common:confirm\",\n    onConfirm: async () => {\n      try {\n        await adminClient.users.logout({ id: logoutUser! });\n        refresh();\n      } catch (error) {\n        addError(\"sessions:logoutAllSessionsError\", error);\n      }\n    },\n  });\n\n  async function onClickSignOut(session: UserSessionRepresentation) {\n    await adminClient.realms.deleteSession({ realm, session: session.id! });\n\n    if (session.userId === whoAmI.getUserId()) {\n      await keycloak.logout({ redirectUri: \"\" });\n    } else {\n      refresh();\n    }\n  }\n\n  return (\n    <>\n      <LogoutConfirm />\n      <KeycloakDataTable\n        key={key}\n        loader={loader}\n        ariaLabelKey=\"sessions:title\"\n        searchPlaceholderKey=\"sessions:searchForSession\"\n        toolbarItem={\n          logoutUser && (\n            <ToolbarItem>\n              <Button onClick={toggleLogoutDialog}>\n                {t(\"logoutAllSessions\")}\n              </Button>\n            </ToolbarItem>\n          )\n        }\n        columns={columns}\n        actions={[\n          {\n            title: t(\"common:signOut\"),\n            onRowClick: onClickSignOut,\n          },\n        ]}\n        emptyState={\n          <ListEmptyState\n            hasIcon\n            icon={CubesIcon}\n            message={t(\"noSessions\")}\n            instructions={\n              emptyInstructions ? emptyInstructions : t(\"noSessionsDescription\")\n            }\n          />\n        }\n      />\n    </>\n  );\n}\n"],"names":["CubesIconConfig","CubesIcon","createIcon","SessionsTable","loader","hiddenColumns","emptyInstructions","logoutUser","realm","useRealm","whoAmI","useWhoAmI","t","useTranslation","keycloak","adminClient","useAdminClient","addError","useAlerts","formatDate","useFormatDate","key","setKey","useState","refresh","value","columns","useMemo","name","displayKey","cellRenderer","row","_jsx","Link","toUser","id","userId","tab","username","UsernameCell","Date","start","lastAccess","List","ListVariant","inline","Object","entries","clients","map","clientId","client","ListItem","toClient","ClientsCell","filter","includes","toggleLogoutDialog","LogoutConfirm","useConfirmDialog","titleKey","messageKey","continueButtonLabel","onConfirm","users","logout","error","onClickSignOut","session","realms","deleteSession","getUserId","redirectUri","_Fragment","KeycloakDataTable","ToolbarItem","Button","title","onRowClick","ListEmptyState"],"mappings":"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"}