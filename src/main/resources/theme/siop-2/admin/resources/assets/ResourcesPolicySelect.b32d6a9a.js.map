{"version":3,"file":"ResourcesPolicySelect.b32d6a9a.js","sources":["../../src/clients/authorization/ResourcesPolicySelect.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { Select, SelectOption, SelectVariant } from \"@patternfly/react-core\";\n\nimport type ResourceRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceRepresentation\";\nimport type PolicyRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyRepresentation\";\nimport type {\n  Clients,\n  PolicyQuery,\n} from \"@keycloak/keycloak-admin-client/lib/resources/clients\";\nimport { useAdminClient, useFetch } from \"../../context/auth/AdminClient\";\n\ntype Type = \"resources\" | \"policies\";\n\ntype ResourcesPolicySelectProps = {\n  name: Type;\n  clientId: string;\n  permissionId?: string;\n  variant?: SelectVariant;\n  preSelected?: string;\n  isRequired?: boolean;\n};\n\ntype Policies = {\n  id?: string;\n  name?: string;\n};\n\ntype TypeMapping = {\n  [key in Type]: {\n    searchFunction: keyof Pick<Clients, \"listPolicies\" | \"listResources\">;\n    fetchFunction: keyof Pick<\n      Clients,\n      \"getAssociatedPolicies\" | \"getAssociatedResources\"\n    >;\n  };\n};\n\nconst typeMapping: TypeMapping = {\n  resources: {\n    searchFunction: \"listResources\",\n    fetchFunction: \"getAssociatedResources\",\n  },\n  policies: {\n    searchFunction: \"listPolicies\",\n    fetchFunction: \"getAssociatedPolicies\",\n  },\n};\n\nexport const ResourcesPolicySelect = ({\n  name,\n  clientId,\n  permissionId,\n  variant = SelectVariant.typeaheadMulti,\n  preSelected,\n  isRequired = false,\n}: ResourcesPolicySelectProps) => {\n  const { t } = useTranslation(\"clients\");\n  const { adminClient } = useAdminClient();\n\n  const {\n    control,\n    formState: { errors },\n  } = useFormContext<PolicyRepresentation>();\n  const [items, setItems] = useState<Policies[]>([]);\n  const [search, setSearch] = useState(\"\");\n  const [open, setOpen] = useState(false);\n\n  const functions = typeMapping[name];\n\n  const convert = (\n    p: PolicyRepresentation | ResourceRepresentation\n  ): Policies => ({\n    id: \"_id\" in p ? p._id : \"id\" in p ? p.id : undefined,\n    name: p.name,\n  });\n\n  useFetch(\n    async () => {\n      const params: PolicyQuery = Object.assign(\n        { id: clientId, first: 0, max: 10, permission: \"false\" },\n        search === \"\" ? null : { name: search }\n      );\n      return (\n        await Promise.all([\n          adminClient.clients[functions.searchFunction](params),\n          permissionId\n            ? adminClient.clients[functions.fetchFunction]({\n                id: clientId,\n                permissionId,\n              })\n            : Promise.resolve([]),\n        ])\n      )\n        .flat()\n        .filter(\n          (r): r is PolicyRepresentation | ResourceRepresentation =>\n            typeof r !== \"string\"\n        )\n        .map(convert)\n        .filter(\n          ({ id }, index, self) =>\n            index === self.findIndex(({ id: otherId }) => id === otherId)\n        );\n    },\n    setItems,\n    [search]\n  );\n\n  const toSelectOptions = () =>\n    items.map((p) => (\n      <SelectOption key={p.id} value={p.id}>\n        {p.name}\n      </SelectOption>\n    ));\n\n  return (\n    <Controller\n      name={name}\n      defaultValue={preSelected ? [preSelected] : []}\n      control={control}\n      rules={{ validate: (value) => !isRequired || value!.length > 0 }}\n      render={({ field }) => (\n        <Select\n          toggleId={name}\n          variant={variant}\n          onToggle={setOpen}\n          onFilter={(_, filter) => {\n            setSearch(filter);\n            return toSelectOptions();\n          }}\n          onClear={() => {\n            field.onChange([]);\n            setSearch(\"\");\n          }}\n          selections={field.value}\n          onSelect={(_, selectedValue) => {\n            const option = selectedValue.toString();\n            const changedValue = field.value?.find((p: string) => p === option)\n              ? field.value.filter((p: string) => p !== option)\n              : [...field.value!, option];\n            field.onChange(changedValue);\n            setSearch(\"\");\n          }}\n          isOpen={open}\n          aria-labelledby={t(name)}\n          isDisabled={!!preSelected}\n          validated={errors[name] ? \"error\" : \"default\"}\n          typeAheadAriaLabel={t(name)}\n        >\n          {toSelectOptions()}\n        </Select>\n      )}\n    />\n  );\n};\n"],"names":["typeMapping","resources","searchFunction","fetchFunction","policies","ResourcesPolicySelect","name","clientId","permissionId","variant","SelectVariant","typeaheadMulti","preSelected","isRequired","t","useTranslation","adminClient","useAdminClient","control","formState","errors","useFormContext","items","setItems","useState","search","setSearch","open","setOpen","functions","convert","p","id","_id","undefined","useFetch","params","Object","assign","first","max","permission","Promise","all","clients","resolve","flat","filter","r","map","index","self","findIndex","otherId","toSelectOptions","SelectOption","Controller","validate","value","length","field","Select","_","onChange","selectedValue","option","toString","changedValue","find"],"mappings":"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"}