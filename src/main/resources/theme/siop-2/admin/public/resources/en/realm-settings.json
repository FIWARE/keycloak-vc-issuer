{
  "realmSettingsExplain": "Realm settings are settings that control the options for users, applications, roles, and groups in the current realm.",
  "partialImport": "Partial import",
  "partialExport": "Partial export",
  "deleteRealm": "Delete realm",
  "deleteConfirmTitle": "Delete realm?",
  "dragInstruction": "Click and drag to change priority",
  "deleteConfirm": "If you delete this realm, all associated data will be removed.",
  "deleteProviderTitle": "Delete key provider?",
  "deleteProviderConfirm": "Are you sure you want to permanently delete the key provider {{provider}}?",
  "deleteProviderSuccess": "Success. The provider has been deleted.",
  "deleteProviderError": "Error deleting the provider",
  "deletedSuccess": "The realm has been deleted",
  "deleteError": "Could not delete realm: {{error}}",
  "deleteConditionSuccess": "The condition has been deleted",
  "disableConfirmTitle": "Disable realm?",
  "disableConfirm": "User and clients can't access the realm if it's disabled. Are you sure you want to continue?",
  "disablePolicyConfirmTitle": "Disable policy?",
  "disablePolicyConfirm": "Users and clients can't access the policy if it's disabled. Are you sure you want to continue?",
  "editProvider": "Edit provider",
  "editableRowsTable": "Editable rows table",
  "saveSuccess": "Realm successfully updated",
  "saveProviderSuccess": "The provider has been saved successfully.",
  "saveProviderListSuccess": "The priority of the provider has been updated successfully.",
  "saveProviderError": "Error saving provider: {{error}}",
  "saveError": "Realm could not be updated: {{error}}",
  "general": "General",
  "login": "Login",
  "themes": "Themes",
  "events": "Events",
  "eventListeners": "Event listeners",
  "eventListenersHelpText": "Configure what listeners receive events for the realm.",
  "saveEventListeners": "Save Event Listeners",
  "saveEventListenersSuccess": "Event listener has been updated.",
  "saveEventListenersError": "Error saving event listener: {{error}}",
  "userEventsConfig": "User events configuration",
  "userEventsSettings": "User events settings",
  "adminEventsConfig": "Admin events configuration",
  "adminEventsSettings": "Admin events settings",
  "saveEvents": "Save events",
  "expiration": "Expiration",
  "clearUserEvents": "Clear user events",
  "clearAdminEvents": "Clear admin events",
  "includeRepresentation": "Include representation",
  "email": "Email",
  "template": "Template",
  "connectionAndAuthentication": "Connection & Authentication",
  "from": "From",
  "fromDisplayName": "From display name",
  "replyTo": "Reply to",
  "replyToDisplayName": "Reply to display name",
  "envelopeFrom": "Envelope from",
  "host": "Host",
  "port": "Port",
  "encryption": "Encryption",
  "authentication": "Authentication",
  "enableSSL": "Enable SSL",
  "enableStartTLS": "Enable StartTLS",
  "username": "Username",
  "password": "Password",
  "keys": "Keys",
  "keysList": "Keys list",
  "searchKey": "Search key",
  "keystore": "Keystore",
  "keystorePassword": "Keystore password",
  "keyAlias": "Key alias",
  "keyPassword": "Key password",
  "providers": "Providers",
  "algorithm": "Algorithm",
  "aesGenerated": "aes-generated",
  "ecdsaGenerated": "ecdsca-generated",
  "hmacGenerated": "hmac-generated",
  "javaKeystore": "java-keystore",
  "rsa": "rsa",
  "rsaGenerated": "rsa-generated",
  "consoleDisplayName": "Console Display Name",
  "AESKeySize": "AES Key Size",
  "active": "Active",
  "privateRSAKey": "Private RSA Key",
  "filenamePlaceholder": "Upload a PEM file or paste key below",
  "x509Certificate": "X509 Certificate",
  "ellipticCurve": "Elliptic Curve",
  "secretSize": "Secret size",
  "keySize": "Key size",
  "type": "Type",
  "name": "Name",
  "providerId": "ID",
  "kid": "Kid",
  "provider": "Provider",
  "providerDescription": "Provider description",
  "addProvider": "Add provider",
  "publicKeys": "Public keys",
  "keysFilter": {
    "ACTIVE": "Active keys",
    "PASSIVE": "Passive keys",
    "DISABLED": "Disabled keys"
  },
  "noKeys": "No keys",
  "noKeysDescription": "You haven't created any active keys",
  "certificate": "Certificate",
  "userRegistration": "User registration",
  "loginScreenCustomization": "Login screen customization",
  "registrationAllowed": "User registration",
  "userRegistrationHelpText": "Enable/disable the registration page. A link for registration will show on login page too.",
  "resetPasswordAllowed": "Forgot password",
  "forgotPassword": "Forgot password",
  "forgotPasswordHelpText": "Show a link on login page for user to click when they have forgotten their credentials.",
  "rememberMe": "Remember me",
  "rememberMeHelpText": "Show checkbox on login page to allow user to remain logged in between browser restarts until session expires.",
  "emailSettings": "Email settings",
  "registrationEmailAsUsername": "Email as username",
  "emailAsUsernameHelpText": "Allow users to set email as username.",
  "loginWithEmailAllowed": "Login with email",
  "loginWithEmailHelpText": "Allow users to log in with their email address.",
  "duplicateEmailsAllowed": "Duplicate emails",
  "duplicateEmailsHelpText": "Allow multiple users to have the same email address. Changing this setting will also clear the user's cache. It is recommended to manually update email constraints of existing users in the database after switching off support for duplicate email addresses.",
  "verifyEmail": "Verify email",
  "verifyEmailHelpText": "Require user to verify their email address after initial login or after address changes are submitted.",
  "userInfoSettings": "User info settings",
  "editUsernameAllowed": "Edit username",
  "enableSwitchSuccess": "{{switch}} changed successfully",
  "enableSwitchError": "Could not enable / disable due to {{error}}",
  "testingConnection": "Testing connection",
  "testConnectionHint": {
    "withEmail": "When testing the connection an e-mail will be sent to the current user ({{email}}).",
    "withoutEmail": "To test the connection you must first configure an e-mail address for the current user ({{userName}}).",
    "withoutEmailAction": "Configure e-mail address"
  },
  "testConnectionSuccess": "Success! SMTP connection successful. E-mail was sent!",
  "testConnectionError": "Error! {{error}}",
  "realmId": "Realm ID",
  "displayName": "Display name",
  "htmlDisplayName": "HTML Display name",
  "frontendUrl": "Frontend URL",
  "requireSsl": "Require SSL",
  "sslType": {
    "all": "All requests",
    "external": "External requests",
    "none": "None"
  },
  "selectATheme": "Select a theme",
  "placeholderText": "Select one",
  "userManagedAccess": "User-managed access",
  "userProfileEnabled": "User Profile Enabled",
  "endpoints": "Endpoints",
  "openIDEndpointConfiguration": "OpenID Endpoint Configuration",
  "samlIdentityProviderMetadata": "SAML 2.0 Identity Provider Metadata",
  "loginTheme": "Login theme",
  "accountTheme": "Account theme",
  "adminTheme": "Admin console theme",
  "emailTheme": "Email theme",
  "internationalization": "Internationalization",
  "localization": "Localization",
  "sessions": "Sessions",
  "SSOSessionSettings": "SSO Session Settings",
  "SSOSessionIdle": "SSO Session Idle",
  "SSOSessionMax": "SSO Session Max",
  "SSOSessionIdleRememberMe": "SSO Session Idle Remember Me",
  "SSOSessionMaxRememberMe": "SSO Session Max Remember Me",
  "clientSessionSettings": "Client session settings",
  "clientSessionIdle": "Client Session Idle",
  "clientSessionMax": "Client Session Max",
  "offlineSessionSettings": "Offline session settings",
  "offlineSessionIdle": "Offline Session Idle",
  "offlineSessionMaxLimited": "Offline Session Max Limited",
  "offlineSessionMax": "Offline Session Max",
  "loginSettings": "Login settings",
  "loginTimeout": "Login timeout",
  "loginActionTimeout": "Login action timeout",
  "refreshTokens": "Refresh tokens",
  "accessTokens": "Access tokens",
  "actionTokens": "Action tokens",
  "overrideActionTokens": "Override Action Tokens",
  "defaultSigAlg": "Default Signature Algorithm",
  "revokeRefreshToken": "Revoke Refresh Token",
  "refreshTokenMaxReuse": "Refresh Token Max Reuse",
  "accessTokenLifespan": "Access Token Lifespan",
  "accessTokenLifespanImplicitFlow": "Access Token Lifespan For Implicit Flow",
  "clientLoginTimeout": "Client Login Timeout",
  "userInitiatedActionLifespan": "User-Initiated Action Lifespan",
  "defaultAdminInitiated": "Default Admin-Initiated Action Lifespan",
  "emailVerification": "Email Verification",
  "idpAccountEmailVerification": "IdP account email verification",
  "executeActions": "Execute actions",
  "clientPolicies": "Client policies",
  "noClientPolicies": "No client policies",
  "noClientPoliciesInstructions": "There are no client policies. Select 'Create client policy' to create a new client policy.",
  "createPolicy": "Create client policy",
  "createClientPolicy": "Create client policy",
  "createClientPolicySuccess": "New policy created",
  "updateClientPolicySuccess": "Client policy updated",
  "createClientPolicyError": "Could not  create policy due to: {{error}}",
  "createClientConditionSuccess": "Condition created successfully.",
  "createClientConditionError": "Error creating condition: {{error}}",
  "updateClientConditionSuccess": "Condition updated successfully.",
  "deleteClientConditionSuccess": "Condition deleted successfully.",
  "deleteClientConditionError": "Error creating condition: {{error}}",
  "clientPolicySearch": "Search client policy",
  "policiesConfigType": "Configure via:",
  "policiesConfigTypes": {
    "formView": "Form view",
    "jsonEditor": "JSON editor"
  },
  "deleteClientPolicy": "Delete client policy",
  "deleteClientPolicyConfirmTitle": "Delete policy?",
  "deleteClientPolicyConfirm": "This action will permanently delete the policy {{policyName}}. This cannot be undone.",
  "deleteClientPolicySuccess": "Client policy deleted",
  "deleteClientPolicyError": "Could not delete policy: {{error}}",
  "profiles": "Profiles",
  "policies": "Policies",
  "clientPoliciesProfilesHelpText": "Client Profile allows to setup set of executors, which are enforced for various actions done with the client. Actions can be admin actions like creating or updating client, or user actions like authentication to the client.",
  "clientPoliciesProfiles": "Client Policies Profiles",
  "clientPoliciesPoliciesHelpText": "Client Policy allows to bind client profiles with various conditions to specify when exactly is enforced behavior specified by executors of the particular client profile.",
  "clientPoliciesPolicies": "Client Policies Policies",
  "clientPoliciesTab": "Client policies tab",
  "clientProfilesSubTab": "Client profiles subtab",
  "clientPoliciesSubTab": "Client policies subtab",
  "profilesConfigType": "Configure via:",
  "profilesConfigTypes": {
    "formView": "Form view",
    "jsonEditor": "JSON editor"
  },
  "clientProfileSearch": "Search",
  "searchProfile": "Search profile",
  "clientProfileName": "Client profile name",
  "clientProfileDescription": "Description",
  "emptyClientProfiles": "No profiles",
  "emptyClientProfilesInstructions": "There are no profiles, select 'Create client profile' to create a new client profile",
  "deleteClientProfileConfirmTitle": "Delete profile?",
  "deleteClientProfileConfirm": "This action will permanently delete the profile {{profileName}}. This cannot be undone.",
  "deleteClientSuccess": "Client profile deleted",
  "deleteClientError": "Could not delete profile: {{error}}",
  "deleteClientPolicyProfileConfirmTitle": "Delete profile?",
  "deleteClientPolicyProfileConfirm": "This action will permanently delete {{profileName}} from the policy {{policyName}}. This cannot be undone.",
  "deleteClientPolicyProfileSuccess": "Profile successfully removed from the policy.",
  "deleteClientPolicyProfileError": "Could not delete profile from the policy: {{error}}",
  "createClientProfile": "Create client profile",
  "deleteClientProfile": "Delete this client profile",
  "createClientProfileSuccess": "New client profile created",
  "updateClientProfileSuccess": "Client profile updated successfully",
  "createClientProfileError": "Could not create client profile: '{{error}}'",
  "addClientProfileSuccess": "New client profile added",
  "addClientProfileError": "Could not create client profile: '{{error}}'",
  "createClientProfileNameHelperText": "The name must be unique within the realm",
  "newClientProfile": "Create client profile",
  "newClientProfileName": "Client profile name",
  "clientProfile": "Client profile details",
  "executorDetails": "Executor details",
  "back": "Back",
  "delete": "delete",
  "save": "Save",
  "reload": "Reload",
  "global": "Global",
  "description": "description",
  "executors": "Executors",
  "executorsHelpText": "Executors, which will be applied for this client profile",
  "executorsHelpItem": "Executors help item",
  "addExecutor": "Add executor",
  "executorType": "Executor type",
  "executorTypeSwitchHelpText": "Executor Type Switch Help Text",
  "executorTypeSelectHelpText": "Executor Type Select Help Text",
  "executorTypeSelectAlgorithm": "Executor Type Select Algorithm",
  "executorTypeTextHelpText": "Executor Type Text Help Text",
  "executorAuthenticatorMultiSelectHelpText": "Executor Authenticator MultiSelect Help Text",
  "executorClientAuthenticator": "Executor Client Authenticator",
  "executorsTable": "Executors table",
  "executorName": "Name",
  "emptyExecutors": "No executors configured",
  "addExecutorSuccess": "Success! Executor created successfully",
  "addExecutorError": "Executor not created",
  "updateExecutorSuccess": "Executor updated successfully",
  "updateExecutorError": "Executor not updated",
  "deleteExecutorProfileConfirmTitle": "Delete executor?",
  "deleteExecutorProfileConfirm": "The action will permanently delete {{executorName}}. This cannot be undone.",
  "deleteExecutorSuccess": "Success! The executor was deleted.",
  "deleteExecutorError": "Could not delete executor: {{error}}",
  "updateClientProfilesSuccess": "The client profiles configuration was updated",
  "updateClientProfilesError": "Provided JSON is incorrect: Unexpected token { in JSON",
  "deleteClientPolicyConditionConfirmTitle": "Delete condition?",
  "deleteClientPolicyConditionConfirm": "This action will permanently delete {{condition}}. This cannot be undone.",
  "selectACondition": "Select a condition",
  "conditions": "Conditions",
  "conditionType": "Condition type",
  "policyDetails": "Policy details",
  "anyClient": "The condition is satisfied by any client on any event.",
  "clientAccesstype": "Client Access Type",
  "clientRoles": "Client Roles",
  "clientScopesCondition": "Expected Scopes",
  "updateClientContext": "Update Client Context",
  "clientUpdaterSourceGroups": "Groups",
  "clientUpdaterTrustedHosts": "Trusted Hosts",
  "clientUpdaterSourceRoles": "Updating entity role",
  "conditionsHelpItem": "Conditions help item",
  "addCondition": "Add condition",
  "editCondition": "Edit condition",
  "emptyConditions": "No conditions configured",
  "updateClientPoliciesSuccess": "The client policies configuration was updated",
  "updateClientPoliciesError": "Provided JSON is incorrect: Unexpected token { in JSON",
  "clientProfiles": "Client profiles",
  "clientProfilesHelpItem": "Client profiles help item",
  "addClientProfile": "Add client profile",
  "emptyProfiles": "No client profiles configured",
  "tokens": "Tokens",
  "userProfile": "User profile",
  "jsonEditor": "JSON editor",
  "attributes": "Attributes",
  "attributesGroup": "Attributes group",
  "invalidJsonError": "Unable to save user profile, the provided information is not valid JSON.",
  "userProfileSuccess": "User profile settings successfully updated.",
  "userProfileError": "Could not update user profile settings: {{error}}",
  "status": "Status",
  "recommendedSsoTimeout": "It is recommended for this value to be shorter than the SSO session idle timeout: {{time}}",
  "supportedLocales": "Supported locales",
  "defaultLocale": "Default locale",
  "selectLocales": "Select locales",
  "searchForMessageBundle": "Search for message bundle",
  "addMessageBundle": "Add message bundle",
  "addMessageBundleSuccess": "Success! The message bundle has been added.",
  "deleteMessageBundleSuccess": "Successfully removed the message from the bundle",
  "deleteMessageBundleError": "Error removing the message from the bundle, {{error}}",
  "rowEditBtnAriaLabel": "Edit {{messageBundle}}",
  "rowSaveBtnAriaLabel": "Save edits for {{messageBundle}}",
  "rowCancelBtnAriaLabel": "Cancel edits for {{messageBundle}}",
  "updateMessageBundleSuccess": "Success! Message bundle updated.",
  "updateMessageBundleError": "Error updating message bundle.",
  "addMessageBundleError": "Error creating message bundle, {{error}}",
  "allGroups": "All groups",
  "attributeName": "Name",
  "attributeDisplayName": "Display name",
  "attributeGroup": "Attribute group",
  "enabledWhen": "Enabled when",
  "required": "Required",
  "requiredFor": "Required for",
  "requiredWhen": "Required when",
  "requiredForLabel": {
    "both": "Both users and admins",
    "users": "Only users",
    "admins": "Only admins"
  },
  "whoCanEdit": "Who can edit?",
  "whoCanView": "Who can view?",
  "user": "User",
  "admin": "Admin",
  "addValidator": "Add validator",
  "addValidatorRole": "Add {{validatorName}} validator",
  "validatorDialogColNames": {
    "colName": "Role name",
    "colDescription": "Description"
  },
  "validatorColNames": {
    "colName": "Validator name",
    "colConfig": "Config"
  },
  "deleteValidatorConfirmTitle": "Delete validator?",
  "deleteValidatorConfirmMsg": "Are you sure you want to permanently delete the validator {{validatorName}}?",
  "validatorDeletedSuccess": "Success! User Profile configuration has been saved.",
  "validatorDeletedError": "Error saving User Profile: {{error}}",
  "emptyValidators": "No validators.",
  "updatedUserProfileSuccess": "User Profile configuration has been saved",
  "updatedUserProfileError": "User Profile configuration hasn't been saved",
  "createAttribute": "Create attribute",
  "editAttribute": "Edit attribute",
  "createAttributeSubTitle": "Create a new attribute",
  "createAttributeSuccess": "Success! User Profile configuration has been saved.",
  "createAttributeError": "Error! User Profile configuration has not been saved {{error}}.",
  "attributesDropdown": "Attributes dropdown",
  "deleteAttributeConfirmTitle": "Delete attribute?",
  "deleteAttributeConfirm": "Are you sure you want to permanently delete the attribute {{attributeName}}?",
  "deleteAttributeSuccess": "Attribute deleted",
  "deleteAttributeError": "Attribute not deleted",
  "always": "Always",
  "scopesAsRequested": "Scopes are requested",
  "generalSettings": "General settings",
  "permission": "Permission",
  "validations": "Validations",
  "annotations": "Annotations",
  "addAnnotationText": "Add annotation",
  "validateName": "Attribute configuration without name is not allowed.",
  "eventType": "Event saved type",
  "searchEventType": "Search saved event type",
  "addSavedTypes": "Add saved types",
  "addTypes": "Add types",
  "eventTypes": {
    "SEND_RESET_PASSWORD": {
      "name": "Send reset password",
      "description": "Send reset password"
    },
    "UPDATE_CONSENT_ERROR": {
      "name": "Update consent error",
      "description": "Update consent error"
    },
    "GRANT_CONSENT": {
      "name": "Grant consent",
      "description": "Grant consent"
    },
    "REMOVE_TOTP": {
      "name": "Remove totp",
      "description": "Remove totp"
    },
    "REVOKE_GRANT": {
      "name": "Revoke grant",
      "description": "Revoke grant"
    },
    "UPDATE_TOTP": {
      "name": "Update totp",
      "description": "Update totp"
    },
    "LOGIN_ERROR": {
      "name": "Login error",
      "description": "Login error"
    },
    "CLIENT_LOGIN": {
      "name": "Client login",
      "description": "Client login"
    },
    "RESET_PASSWORD_ERROR": {
      "name": "Reset password error",
      "description": "Reset password error"
    },
    "IMPERSONATE_ERROR": {
      "name": "Impersonate error",
      "description": "Impersonate error"
    },
    "CODE_TO_TOKEN_ERROR": {
      "name": "Code to token error",
      "description": "Code to token error"
    },
    "CUSTOM_REQUIRED_ACTION": {
      "name": "Custom required action",
      "description": "Custom required action"
    },
    "RESTART_AUTHENTICATION": {
      "name": "Restart authentication",
      "description": "Restart authentication"
    },
    "IMPERSONATE": {
      "name": "Impersonate",
      "description": "Impersonate"
    },
    "UPDATE_PROFILE_ERROR": {
      "name": "Update profile error",
      "description": "Update profile error"
    },
    "LOGIN": {
      "name": "Login",
      "description": "Login"
    },
    "UPDATE_PASSWORD_ERROR": {
      "name": "Update password error",
      "description": "Update password error"
    },
    "CLIENT_INITIATED_ACCOUNT_LINKING": {
      "name": "Client initiated account linking",
      "description": "Client initiated account linking"
    },
    "TOKEN_EXCHANGE": {
      "name": "Token exchange",
      "description": "Token exchange"
    },
    "LOGOUT": {
      "name": "Logout",
      "description": "Logout"
    },
    "REGISTER": {
      "name": "Register",
      "description": "Register"
    },
    "DELETE_ACCOUNT_ERROR": {
      "name": "Delete account error",
      "description": "Delete account error"
    },
    "CLIENT_REGISTER": {
      "name": "Client register",
      "description": "Client register"
    },
    "IDENTITY_PROVIDER_LINK_ACCOUNT": {
      "name": "Identity provider link account",
      "description": "Identity provider link account"
    },
    "DELETE_ACCOUNT": {
      "name": "Delete account",
      "description": "Delete account"
    },
    "UPDATE_PASSWORD": {
      "name": "Update password",
      "description": "Update password"
    },
    "CLIENT_DELETE": {
      "name": "Client delete",
      "description": "Client delete"
    },
    "FEDERATED_IDENTITY_LINK_ERROR": {
      "name": "Federated identity link error",
      "description": "Federated identity link error"
    },
    "IDENTITY_PROVIDER_FIRST_LOGIN": {
      "name": "Identity provider first login",
      "description": "Identity provider first login"
    },
    "CLIENT_DELETE_ERROR": {
      "name": "Client delete error",
      "description": "Client delete error"
    },
    "VERIFY_EMAIL": {
      "name": "Verify email",
      "description": "Verify email"
    },
    "CLIENT_LOGIN_ERROR": {
      "name": "Client login error",
      "description": "Client login error"
    },
    "RESTART_AUTHENTICATION_ERROR": {
      "name": "Restart authentication error",
      "description": "Restart authentication error"
    },
    "EXECUTE_ACTIONS": {
      "name": "Execute actions",
      "description": "Execute actions"
    },
    "REMOVE_FEDERATED_IDENTITY_ERROR": {
      "name": "Remove federated identity error",
      "description": "Remove federated identity error"
    },
    "TOKEN_EXCHANGE_ERROR": {
      "name": "Token exchange error",
      "description": "Token exchange error"
    },
    "PERMISSION_TOKEN": {
      "name": "Permission token",
      "description": "Permission token"
    },
    "SEND_IDENTITY_PROVIDER_LINK_ERROR": {
      "name": "Send identity provider link error",
      "description": "Send identity provider link error"
    },
    "EXECUTE_ACTION_TOKEN_ERROR": {
      "name": "Execute action token error",
      "description": "Execute action token error"
    },
    "SEND_VERIFY_EMAIL": {
      "name": "Send verify email",
      "description": "Send verify email"
    },
    "EXECUTE_ACTIONS_ERROR": {
      "name": "Execute actions error",
      "description": "Execute actions error"
    },
    "REMOVE_FEDERATED_IDENTITY": {
      "name": "Remove federated identity",
      "description": "Remove federated identity"
    },
    "IDENTITY_PROVIDER_POST_LOGIN": {
      "name": "Identity provider post login",
      "description": "Identity provider post login"
    },
    "IDENTITY_PROVIDER_LINK_ACCOUNT_ERROR": {
      "name": "Identity provider link account error",
      "description": "Identity provider link account error"
    },
    "UPDATE_EMAIL": {
      "name": "Update email",
      "description": "Update email"
    },
    "REGISTER_ERROR": {
      "name": "Register error",
      "description": "Register error"
    },
    "REVOKE_GRANT_ERROR": {
      "name": "Revoke grant error",
      "description": "Revoke grant error"
    },
    "EXECUTE_ACTION_TOKEN": {
      "name": "Execute action token",
      "description": "Execute action token"
    },
    "LOGOUT_ERROR": {
      "name": "Logout error",
      "description": "Logout error"
    },
    "UPDATE_EMAIL_ERROR": {
      "name": "Update email error",
      "description": "Update email error"
    },
    "CLIENT_UPDATE_ERROR": {
      "name": "Client update error",
      "description": "Client update error"
    },
    "UPDATE_PROFILE": {
      "name": "Update profile",
      "description": "Update profile"
    },
    "CLIENT_REGISTER_ERROR": {
      "name": "Client register error",
      "description": "Client register error"
    },
    "FEDERATED_IDENTITY_LINK": {
      "name": "Federated identity link",
      "description": "Federated identity link"
    },
    "SEND_IDENTITY_PROVIDER_LINK": {
      "name": "Send identity provider link",
      "description": "Send identity provider link"
    },
    "SEND_VERIFY_EMAIL_ERROR": {
      "name": "Send verify email error",
      "description": "Send verify email error"
    },
    "RESET_PASSWORD": {
      "name": "Reset password",
      "description": "Reset password"
    },
    "CLIENT_INITIATED_ACCOUNT_LINKING_ERROR": {
      "name": "Client initiated account linking error",
      "description": "Client initiated account linking error"
    },
    "UPDATE_CONSENT": {
      "name": "Update consent",
      "description": "Update consent"
    },
    "REMOVE_TOTP_ERROR": {
      "name": "Remove totp error",
      "description": "Remove totp error"
    },
    "VERIFY_EMAIL_ERROR": {
      "name": "Verify email error",
      "description": "Verify email error"
    },
    "SEND_RESET_PASSWORD_ERROR": {
      "name": "Send reset password error",
      "description": "Send reset password error"
    },
    "CLIENT_UPDATE": {
      "name": "Client update",
      "description": "Client update"
    },
    "CUSTOM_REQUIRED_ACTION_ERROR": {
      "name": "Custom required action error",
      "description": "Custom required action error"
    },
    "IDENTITY_PROVIDER_POST_LOGIN_ERROR": {
      "name": "Identity provider post login error",
      "description": "Identity provider post login error"
    },
    "UPDATE_TOTP_ERROR": {
      "name": "Update totp error",
      "description": "Update totp error"
    },
    "CODE_TO_TOKEN": {
      "name": "Code to token",
      "description": "Code to token"
    },
    "GRANT_CONSENT_ERROR": {
      "name": "Grant consent error",
      "description": "Grant consent error"
    },
    "IDENTITY_PROVIDER_FIRST_LOGIN_ERROR": {
      "name": "Identity provider first login error",
      "description": "Identity provider first login error"
    },
    "REGISTER_NODE_ERROR": {
      "name": "Register node error",
      "description": "Register node error"
    },
    "PERMISSION_TOKEN_ERROR": {
      "name": "Permission token error",
      "description": "Permission token error"
    },
    "IDENTITY_PROVIDER_RETRIEVE_TOKEN_ERROR": {
      "name": "Identity provider retrieve token error",
      "description": "Identity provider retrieve token error"
    },
    "CLIENT_INFO": {
      "name": "Client info",
      "description": "Client info"
    },
    "VALIDATE_ACCESS_TOKEN": {
      "name": "Validate access token",
      "description": "Validate access token"
    },
    "IDENTITY_PROVIDER_LOGIN": {
      "name": "Identity provider login",
      "description": "Identity provider login"
    },
    "CLIENT_INFO_ERROR": {
      "name": "Client info error",
      "description": "Client info error"
    },
    "INTROSPECT_TOKEN_ERROR": {
      "name": "Introspect token error",
      "description": "Introspect token error"
    },
    "INTROSPECT_TOKEN": {
      "name": "Introspect token",
      "description": "Introspect token"
    },
    "UNREGISTER_NODE": {
      "name": "Unregister node",
      "description": "Unregister node"
    },
    "REGISTER_NODE": {
      "name": "Register node",
      "description": "Register node"
    },
    "INVALID_SIGNATURE": {
      "name": "Invalid signature",
      "description": "Invalid signature"
    },
    "USER_INFO_REQUEST_ERROR": {
      "name": "User info request error",
      "description": "User info request error"
    },
    "REFRESH_TOKEN": {
      "name": "Refresh token",
      "description": "Refresh token"
    },
    "IDENTITY_PROVIDER_RESPONSE": {
      "name": "Identity provider response",
      "description": "Identity provider response"
    },
    "IDENTITY_PROVIDER_RETRIEVE_TOKEN": {
      "name": "Identity provider retrieve token",
      "description": "Identity provider retrieve token"
    },
    "UNREGISTER_NODE_ERROR": {
      "name": "Unregister node error",
      "description": "Unregister node error"
    },
    "VALIDATE_ACCESS_TOKEN_ERROR": {
      "name": "Validate access token error",
      "description": "Validate access token error"
    },
    "INVALID_SIGNATURE_ERROR": {
      "name": "Invalid signature error",
      "description": "Invalid signature error"
    },
    "USER_INFO_REQUEST": {
      "name": "User info request",
      "description": "User info request"
    },
    "IDENTITY_PROVIDER_RESPONSE_ERROR": {
      "name": "Identity provider response error",
      "description": "Identity provider response error"
    },
    "IDENTITY_PROVIDER_LOGIN_ERROR": {
      "name": "Identity provider login error",
      "description": "Identity provider login error"
    },
    "REFRESH_TOKEN_ERROR": {
      "name": "Refresh token error",
      "description": "Refresh token error"
    },
    "VERIFY_PROFILE": {
      "name": "Verify profile",
      "description": "Verify profile"
    },
    "VERIFY_PROFILE_ERROR": {
      "name": "Verify profile error",
      "description": "Verify profile error"
    },
    "OAUTH2_DEVICE_CODE_TO_TOKEN": {
      "name": "Oauth2 device code to token",
      "description": "Oauth2 device code to token"
    },
    "OAUTH2_DEVICE_CODE_TO_TOKEN_ERROR": {
      "name": "Oauth2 device code to token error",
      "description": "Oauth2 device code to token error"
    },
    "OAUTH2_DEVICE_VERIFY_USER_CODE": {
      "name": "Oauth2 device verify user code",
      "description": "Oauth2 device verify user code"
    },
    "OAUTH2_DEVICE_VERIFY_USER_CODE_ERROR": {
      "name": "Oauth2 device verify user code error",
      "description": "Oauth2 device verify user code error"
    },
    "AUTHREQID_TO_TOKEN": {
      "name": "Authreqid to token",
      "description": "Authreqid to token"
    },
    "AUTHREQID_TO_TOKEN_ERROR": {
      "name": "Authreqid to token error",
      "description": "Authreqid to token error"
    },
    "OAUTH2_DEVICE_AUTH": {
      "name": "Oauth2 device authentication",
      "description": "Oauth2 device authentication"
    },
    "OAUTH2_DEVICE_AUTH_ERROR": {
      "name": "Oauth2 device authentication error",
      "description": "Oauth2 device authentication error"
    }
  },
  "emptyEvents": "Nothing to add",
  "emptyEventsInstructions": "There are no more events types left to add",
  "eventConfigSuccessfully": "Successfully saved configuration",
  "eventConfigError": "Could not save event configuration {{error}}",
  "deleteEvents": "Clear events",
  "deleteEventsConfirm": "If you clear all events of this realm, all records will be permanently cleared in the database",
  "admin-events-cleared": "The admin events have been cleared",
  "admin-events-cleared-error": "Could not clear the admin events {{error}}",
  "user-events-cleared": "The user events have been cleared",
  "user-events-cleared-error": "Could not clear the user events {{error}}",
  "events-disable-title": "Unsave events?",
  "events-disable-confirm": "If \"Save events\" is disabled, subsequent events will not be displayed in the \"Events\" menu",
  "confirm": "Confirm",
  "noMessageBundles": "No message bundles",
  "noMessageBundlesInstructions": "Add a message bundle to get started.",
  "messageBundleDescription": "You can edit the supported locales. If you haven't selected supported locales yet, you can only edit the English locale.",
  "defaultRoles": "Default roles",
  "defaultGroups": "Default groups",
  "whatIsDefaultGroups": "What is the function of default groups?",
  "searchForGroups": "Search group",
  "addDefaultGroups": "Add default groups",
  "removeConfirmTitle_one": "Remove group?",
  "removeConfirmTitle_other": "Remove groups?",
  "removeConfirm_one": "Are you sure you want to remove this group",
  "removeConfirm_other": "Are you sure you want to remove these groups.",
  "groupRemove_one": "Group removed",
  "groupRemove_other": "Groups removed",
  "groupRemoveError": "Error removing group {error}",
  "defaultGroupAdded_one": "New group added to the default groups",
  "defaultGroupAdded_other": "Added {{count}} groups to the default groups",
  "defaultGroupAddedError": "Error adding group(s) to the default group {error}",
  "noDefaultGroups": "No default groups",
  "noDefaultGroupsInstructions": "Default groups allow you to automatically assign group membership whenever any new user is created or imported throughout <1>identity brokering</1>. Add default groups to get started",
  "addGroups": "Add groups",
  "securityDefences": "Security defenses",
  "headers": "Headers",
  "bruteForceDetection": "Brute force detection",
  "xFrameOptions": "X-Frame-Options",
  "contentSecurityPolicy": "Content-Security-Policy",
  "contentSecurityPolicyReportOnly": "Content-Security-Policy-Report-Only",
  "xContentTypeOptions": "X-Content-Type-Options",
  "xRobotsTag": "X-Robots-Tag",
  "xXSSProtection": "X-XSS-Protection",
  "strictTransportSecurity": "HTTP Strict Transport Security (HSTS)",
  "failureFactor": "Max login failures",
  "permanentLockout": "Permanent lockout",
  "waitIncrementSeconds": "Wait increment",
  "maxFailureWaitSeconds": "Max wait",
  "maxDeltaTimeSeconds": "Failure reset time",
  "quickLoginCheckMilliSeconds": "Quick login check milliseconds",
  "minimumQuickLoginWaitSeconds": "Minimum quick login wait",
  "partialExportHeaderText": "Partial export allows you to export realm configuration, and other associated resources into a json file.",
  "includeGroupsAndRoles": "Include groups and roles",
  "includeClients": "Include clients",
  "exportWarningTitle": "Export with caution",
  "exportWarningDescription": "If there is a great number of groups, roles or clients in your realm, the operation may make server unresponsive for a while.",
  "exportSuccess": "Realm successfully exported.",
  "exportFail": "Could not export realm: '{{error}}'",
  "partialImportHeaderText": "Partial import allows you to import users, clients, and other resources from a previously exported json file.",
  "selectRealm": "Select realm",
  "chooseResources": "Choose the resources you want to import",
  "selectIfResourceExists": "If a resource already exists, specify what should be done",
  "import": "Import",
  "resourcesToImport": "Resources to import",
  "importFail": "Import failed: {{error}}",
  "FAIL": "Fail import",
  "SKIP": "Skip",
  "OVERWRITE": "Overwrite",
  "added": "Added",
  "skipped": "Skipped",
  "overwritten": "Overwritten",
  "importAdded_zero": "No records added.",
  "importAdded_one": "One record added.",
  "importAdded_other": "{{count}} records added.",
  "importOverwritten_zero": "No records overwritten.",
  "importOverwritten_one": "One record overwritten.",
  "importOverwritten_other": "{{count}} records overwritten.",
  "importSkipped_zero": "No records skipped.",
  "importSkipped_one": "One record skipped.",
  "importSkipped_other": "{{count}} records skipped."

}
