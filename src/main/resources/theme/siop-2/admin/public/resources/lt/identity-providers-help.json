{
  "redirectURI": "Tapatybės teikėjo konfigūravimo nuoroda.",
  "alias": "Pseudonimas, kuris vienareikšmiškai identifikuoja tapatybės teikėją ir yra naudojamas konstruojant nukreipimo nuorodą.",
  "displayName": "Žmogui suprantamas, draugiškas tapatybės teikėjo pavadinimas.",
  "clientId": "Kliento identifikatorius užregistruotas tapatybės teikėjo sistemoje.",
  "clientSecret": "Kliento saugos kodas užregistruotas tapatybės teikėjo sistemoje.",
  "discoveryEndpoint": "Importuoti metaduomenis iš nutolusio IDP aptikimo aprašo (IDP discovery descriptor).",
  "importConfig": "Importuoti metaduomenis iš rinkmenos, kurią atsisiuntėte iš IDP aptikimo aprašo (IDP discovery descriptor).",
  "logoutUrl": "Adresas, kuris turi būti naudojamas norint atjungti naudotoją nuo išorinio tapatybės teikėjo.",
  "backchannelLogout": "Ar išorinis tapatybės teikėjas palaiko serveris-serveris naudotojo atjungimo būdą?",
  "disableUserInfo": "Ar uždrausti prieigą prie papildomos naudotojo profilio informacijos per User Info paslaugą? Numatyta reikšmė - naudoti šią OIDC paslaugą.",
  "userInfoUrl": "Naudotojo informacijos URL. Neprivalomas.",
  "issuer": "Išdavėjo identifikatorius perduodamas išdavėjo atsakyme. Tikrinimas nebus atliekamas jei reikšmė tuščia.",
  "scopes": "Taikymos sritys, kurios siunčiamos autorizavimo užklausoje. Reikšmės turi būti atskirtos tarpo simboliu. Numatyta reikšmė - 'openid'.",
  "validateSignature": "Įgalinamas išorinių IDP parašų tikrinimas.",
  "useJwksUrl": "Jei įgalinta, tuomet tapatybės teikėjo viešasis raktas atsiunčiamas iš pateiktos JWKS URL. Įgalinimas suteikia lankstumo, nes tapatybės teikėjui pergeneravus raktus jie automatiškai atsiunčiami. Jei ši nuostata išjungta, tuomet naudojamas Keycloak DB saugomas viešasis raktas (arba sertifikatas) ir klientui sugeneravus naujus raktus juos rankiniu būdu reikės importuoti į Keycloak DB.",
  "storeTokens": "Jei įgalinta, tuomet po naudotojų prisijungimo, prieigos raktai bus išsaugoti.",
  "storedTokensReadable": "Jei įgalinta, tuomet naudotojai gali peržiūrėti išsaugotus prieigos raktus. Įgalinama broker.read-token rolė.",
  "trustEmail": "Jei įgalintas, tuomet šio tapatybės teikėjo pateiktas el. pašto adresas laikomas patikimu ir, nepaisant bendrųjų srities nustatymų, nėra papildomai tikrinamas.",
  "firstBrokerLoginFlowAlias": "Autentifikacijos eigos pseudonimas, kuris bus sužadintas šio tapatybės teikėjo naudotojui prisijungus pirmą kartą. Terminas 'pirmas kartas' reiškia, kad Keycloak sistemoje nebuvo saugomas naudotojo profilis susietas su autentifikuotu šio tapatybės teikėjo naudotoju.",
  "useEntityDescriptor": "Importuoti metaduomenis iš nutolusio IDP SAML subjekto aprašo.",
  "samlEntityDescriptor": "Leidžia įkelti konfigūracinę rinkmeną arba nurodyti atsisiuntimo URL su išorinio IDP metaduomenimis.",
  "ssoServiceUrl": "Adresas, kuriuo turi būti siunčiamos autentifikacijos užklausos (SAML AuthnRequest).",
  "singleLogoutServiceUrl": "Adresas, kuriuo turi būti siunčiamos naudotojo atjungimo užklausos.",
  "httpPostBindingAuthnRequest": "Jei įgalinta, tuomet AuthnRequest siunčiami HTTP-POST saistymu. Kitu atveju bus naudojamas HTTP-REDIRECT.",
  "wantAuthnRequestsSigned": "Nurodykite, ar tapatybės teikėjas tikisi pasirašytų AuthnRequest užklausų.",
  "signatureAlgorithm": "Parašo algoritmas naudojamas dokumentų pasirašymui.",
  "forceAuthentication": "Jei įgalinta, tuomet tapatybės teikėjas privalo autentifikuoti naudotoją iš naujo nepasitikint ankstesniu prisijungimu.",
  "validateSignatures": "Įjungti/išjungti SAML atsakymų parašo tikrinimą.",
  "validatingX509Certs": "PEM formato sertifikatai, kurie turi būti naudojami parašų tikrinimui. Reikšmės skiriamos kableliais (,).",
  "addIdpMapperName": "Atitikmens susiejimo vardas."
}